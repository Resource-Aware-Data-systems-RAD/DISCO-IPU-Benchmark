
TFLite-perf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013868  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003acb0  08013b20  08013b20  00023b20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804e7d0  0804e7d0  000640d0  2**0
                  CONTENTS
  4 .ARM          00000008  0804e7d0  0804e7d0  0005e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804e7d8  0804e7d8  000640d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804e7d8  0804e7d8  0005e7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804e7dc  0804e7dc  0005e7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004010  24000000  0804e7e0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24004010  080527f0  00064010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24004070  08052850  00064070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0005703c  240040e0  080528b0  000640e0  2**5
                  ALLOC
 12 ._user_heap_stack 00001000  20000000  20000000  00070000  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000640d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a6b7  00000000  00000000  000640fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005924  00000000  00000000  0008e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000123b4  00000000  00000000  000940d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011e0  00000000  00000000  000a6490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001ab8  00000000  00000000  000a7670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000401f9  00000000  00000000  000a9128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00024a72  00000000  00000000  000e9321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019260e  00000000  00000000  0010dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cb  00000000  00000000  002a03a1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004160  00000000  00000000  002a046c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000b4  00000000  00000000  002a45cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      00000183  00000000  00000000  002a4680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240040e0 	.word	0x240040e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013af0 	.word	0x08013af0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240040e4 	.word	0x240040e4
 80002dc:	08013af0 	.word	0x08013af0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c0:	f000 b9ca 	b.w	8000958 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f85c 	bl	8000688 <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__aeabi_f2lz>:
 80005dc:	ee07 0a90 	vmov	s15, r0
 80005e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e8:	d401      	bmi.n	80005ee <__aeabi_f2lz+0x12>
 80005ea:	f000 b80d 	b.w	8000608 <__aeabi_f2ulz>
 80005ee:	eef1 7a67 	vneg.f32	s15, s15
 80005f2:	b508      	push	{r3, lr}
 80005f4:	ee17 0a90 	vmov	r0, s15
 80005f8:	f000 f806 	bl	8000608 <__aeabi_f2ulz>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	bd08      	pop	{r3, pc}
 8000604:	0000      	movs	r0, r0
	...

08000608 <__aeabi_f2ulz>:
 8000608:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000638 <__aeabi_f2ulz+0x30>
 800060c:	ee07 0a90 	vmov	s15, r0
 8000610:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000640 <__aeabi_f2ulz+0x38>
 8000614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000618:	ee27 6b06 	vmul.f64	d6, d7, d6
 800061c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000620:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000624:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000628:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800062c:	ee16 1a10 	vmov	r1, s12
 8000630:	ee17 0a90 	vmov	r0, s15
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	00000000 	.word	0x00000000
 800063c:	3df00000 	.word	0x3df00000
 8000640:	00000000 	.word	0x00000000
 8000644:	41f00000 	.word	0x41f00000

08000648 <__aeabi_d2ulz>:
 8000648:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000678 <__aeabi_d2ulz+0x30>
 800064c:	ec41 0b17 	vmov	d7, r0, r1
 8000650:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000680 <__aeabi_d2ulz+0x38>
 8000654:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000658:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800065c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000660:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000664:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000668:	ee16 1a10 	vmov	r1, s12
 800066c:	ee17 0a90 	vmov	r0, s15
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	f3af 8000 	nop.w
 8000678:	00000000 	.word	0x00000000
 800067c:	3df00000 	.word	0x3df00000
 8000680:	00000000 	.word	0x00000000
 8000684:	41f00000 	.word	0x41f00000

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	468e      	mov	lr, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14d      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000696:	428a      	cmp	r2, r1
 8000698:	4694      	mov	ip, r2
 800069a:	d969      	bls.n	8000770 <__udivmoddi4+0xe8>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b152      	cbz	r2, 80006b8 <__udivmoddi4+0x30>
 80006a2:	fa01 f302 	lsl.w	r3, r1, r2
 80006a6:	f1c2 0120 	rsb	r1, r2, #32
 80006aa:	fa20 f101 	lsr.w	r1, r0, r1
 80006ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b2:	ea41 0e03 	orr.w	lr, r1, r3
 80006b6:	4094      	lsls	r4, r2
 80006b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006bc:	0c21      	lsrs	r1, r4, #16
 80006be:	fbbe f6f8 	udiv	r6, lr, r8
 80006c2:	fa1f f78c 	uxth.w	r7, ip
 80006c6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ce:	fb06 f107 	mul.w	r1, r6, r7
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006de:	f080 811f 	bcs.w	8000920 <__udivmoddi4+0x298>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 811c 	bls.w	8000920 <__udivmoddi4+0x298>
 80006e8:	3e02      	subs	r6, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f4:	fb08 3310 	mls	r3, r8, r0, r3
 80006f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006fc:	fb00 f707 	mul.w	r7, r0, r7
 8000700:	42a7      	cmp	r7, r4
 8000702:	d90a      	bls.n	800071a <__udivmoddi4+0x92>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800070c:	f080 810a 	bcs.w	8000924 <__udivmoddi4+0x29c>
 8000710:	42a7      	cmp	r7, r4
 8000712:	f240 8107 	bls.w	8000924 <__udivmoddi4+0x29c>
 8000716:	4464      	add	r4, ip
 8000718:	3802      	subs	r0, #2
 800071a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800071e:	1be4      	subs	r4, r4, r7
 8000720:	2600      	movs	r6, #0
 8000722:	b11d      	cbz	r5, 800072c <__udivmoddi4+0xa4>
 8000724:	40d4      	lsrs	r4, r2
 8000726:	2300      	movs	r3, #0
 8000728:	e9c5 4300 	strd	r4, r3, [r5]
 800072c:	4631      	mov	r1, r6
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d909      	bls.n	800074a <__udivmoddi4+0xc2>
 8000736:	2d00      	cmp	r5, #0
 8000738:	f000 80ef 	beq.w	800091a <__udivmoddi4+0x292>
 800073c:	2600      	movs	r6, #0
 800073e:	e9c5 0100 	strd	r0, r1, [r5]
 8000742:	4630      	mov	r0, r6
 8000744:	4631      	mov	r1, r6
 8000746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074a:	fab3 f683 	clz	r6, r3
 800074e:	2e00      	cmp	r6, #0
 8000750:	d14a      	bne.n	80007e8 <__udivmoddi4+0x160>
 8000752:	428b      	cmp	r3, r1
 8000754:	d302      	bcc.n	800075c <__udivmoddi4+0xd4>
 8000756:	4282      	cmp	r2, r0
 8000758:	f200 80f9 	bhi.w	800094e <__udivmoddi4+0x2c6>
 800075c:	1a84      	subs	r4, r0, r2
 800075e:	eb61 0303 	sbc.w	r3, r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	469e      	mov	lr, r3
 8000766:	2d00      	cmp	r5, #0
 8000768:	d0e0      	beq.n	800072c <__udivmoddi4+0xa4>
 800076a:	e9c5 4e00 	strd	r4, lr, [r5]
 800076e:	e7dd      	b.n	800072c <__udivmoddi4+0xa4>
 8000770:	b902      	cbnz	r2, 8000774 <__udivmoddi4+0xec>
 8000772:	deff      	udf	#255	; 0xff
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	2a00      	cmp	r2, #0
 800077a:	f040 8092 	bne.w	80008a2 <__udivmoddi4+0x21a>
 800077e:	eba1 010c 	sub.w	r1, r1, ip
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2601      	movs	r6, #1
 800078c:	0c20      	lsrs	r0, r4, #16
 800078e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000792:	fb07 1113 	mls	r1, r7, r3, r1
 8000796:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800079a:	fb0e f003 	mul.w	r0, lr, r3
 800079e:	4288      	cmp	r0, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x12c>
 80007a2:	eb1c 0101 	adds.w	r1, ip, r1
 80007a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x12a>
 80007ac:	4288      	cmp	r0, r1
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2c0>
 80007b2:	4643      	mov	r3, r8
 80007b4:	1a09      	subs	r1, r1, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007bc:	fb07 1110 	mls	r1, r7, r0, r1
 80007c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x156>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x154>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2ca>
 80007dc:	4608      	mov	r0, r1
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007e6:	e79c      	b.n	8000722 <__udivmoddi4+0x9a>
 80007e8:	f1c6 0720 	rsb	r7, r6, #32
 80007ec:	40b3      	lsls	r3, r6
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa20 f407 	lsr.w	r4, r0, r7
 80007fa:	fa01 f306 	lsl.w	r3, r1, r6
 80007fe:	431c      	orrs	r4, r3
 8000800:	40f9      	lsrs	r1, r7
 8000802:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000806:	fa00 f306 	lsl.w	r3, r0, r6
 800080a:	fbb1 f8f9 	udiv	r8, r1, r9
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	fa1f fe8c 	uxth.w	lr, ip
 8000814:	fb09 1118 	mls	r1, r9, r8, r1
 8000818:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081c:	fb08 f00e 	mul.w	r0, r8, lr
 8000820:	4288      	cmp	r0, r1
 8000822:	fa02 f206 	lsl.w	r2, r2, r6
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b8>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2bc>
 8000834:	4288      	cmp	r0, r1
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2bc>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4461      	add	r1, ip
 8000840:	1a09      	subs	r1, r1, r0
 8000842:	b2a4      	uxth	r4, r4
 8000844:	fbb1 f0f9 	udiv	r0, r1, r9
 8000848:	fb09 1110 	mls	r1, r9, r0, r1
 800084c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	458e      	cmp	lr, r1
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1e2>
 8000858:	eb1c 0101 	adds.w	r1, ip, r1
 800085c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2b4>
 8000862:	458e      	cmp	lr, r1
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2b4>
 8000866:	3802      	subs	r0, #2
 8000868:	4461      	add	r1, ip
 800086a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800086e:	fba0 9402 	umull	r9, r4, r0, r2
 8000872:	eba1 010e 	sub.w	r1, r1, lr
 8000876:	42a1      	cmp	r1, r4
 8000878:	46c8      	mov	r8, r9
 800087a:	46a6      	mov	lr, r4
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x2a4>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x2a0>
 8000880:	b15d      	cbz	r5, 800089a <__udivmoddi4+0x212>
 8000882:	ebb3 0208 	subs.w	r2, r3, r8
 8000886:	eb61 010e 	sbc.w	r1, r1, lr
 800088a:	fa01 f707 	lsl.w	r7, r1, r7
 800088e:	fa22 f306 	lsr.w	r3, r2, r6
 8000892:	40f1      	lsrs	r1, r6
 8000894:	431f      	orrs	r7, r3
 8000896:	e9c5 7100 	strd	r7, r1, [r5]
 800089a:	2600      	movs	r6, #0
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	f1c2 0320 	rsb	r3, r2, #32
 80008a6:	40d8      	lsrs	r0, r3
 80008a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ac:	fa21 f303 	lsr.w	r3, r1, r3
 80008b0:	4091      	lsls	r1, r2
 80008b2:	4301      	orrs	r1, r0
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c0:	fb07 3610 	mls	r6, r7, r0, r3
 80008c4:	0c0b      	lsrs	r3, r1, #16
 80008c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ca:	fb00 f60e 	mul.w	r6, r0, lr
 80008ce:	429e      	cmp	r6, r3
 80008d0:	fa04 f402 	lsl.w	r4, r4, r2
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x260>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b8>
 80008e0:	429e      	cmp	r6, r3
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b8>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	b289      	uxth	r1, r1
 80008ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f0:	fb07 3316 	mls	r3, r7, r6, r3
 80008f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f8:	fb06 f30e 	mul.w	r3, r6, lr
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x28a>
 8000900:	eb1c 0101 	adds.w	r1, ip, r1
 8000904:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2b0>
 800090a:	428b      	cmp	r3, r1
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2b0>
 800090e:	3e02      	subs	r6, #2
 8000910:	4461      	add	r1, ip
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0x104>
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e705      	b.n	800072c <__udivmoddi4+0xa4>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e3      	b.n	80006ec <__udivmoddi4+0x64>
 8000924:	4618      	mov	r0, r3
 8000926:	e6f8      	b.n	800071a <__udivmoddi4+0x92>
 8000928:	454b      	cmp	r3, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f8>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000934:	3801      	subs	r0, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f8>
 8000938:	4646      	mov	r6, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x28a>
 800093c:	4620      	mov	r0, r4
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1e2>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x260>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b8>
 8000948:	3b02      	subs	r3, #2
 800094a:	4461      	add	r1, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x12c>
 800094e:	4630      	mov	r0, r6
 8000950:	e709      	b.n	8000766 <__udivmoddi4+0xde>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x156>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SystemInit+0xb0>)
 800095e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000962:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800096a:	691a      	ldr	r2, [r3, #16]
 800096c:	f042 0210 	orr.w	r2, r2, #16
 8000970:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <SystemInit+0xb4>)
 8000974:	6813      	ldr	r3, [r2, #0]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	2b06      	cmp	r3, #6
 800097c:	d805      	bhi.n	800098a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800097e:	6813      	ldr	r3, [r2, #0]
 8000980:	f023 030f 	bic.w	r3, r3, #15
 8000984:	f043 0307 	orr.w	r3, r3, #7
 8000988:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemInit+0xb8>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f042 0201 	orr.w	r2, r2, #1
 8000992:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000998:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <SystemInit+0xbc>)
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800099e:	491c      	ldr	r1, [pc, #112]	; (8000a10 <SystemInit+0xb4>)
  RCC->CR &= 0xEAF6ED7FU;
 80009a0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	680a      	ldr	r2, [r1, #0]
 80009a4:	0712      	lsls	r2, r2, #28
 80009a6:	d505      	bpl.n	80009b4 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a8:	680a      	ldr	r2, [r1, #0]
 80009aa:	f022 020f 	bic.w	r2, r2, #15
 80009ae:	f042 0207 	orr.w	r2, r2, #7
 80009b2:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009b4:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b6:	4919      	ldr	r1, [pc, #100]	; (8000a1c <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 80009b8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80009ba:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80009bc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80009be:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009c0:	4917      	ldr	r1, [pc, #92]	; (8000a20 <SystemInit+0xc4>)
 80009c2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009c4:	4917      	ldr	r1, [pc, #92]	; (8000a24 <SystemInit+0xc8>)
 80009c6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009ca:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009ce:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80009d8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009e0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SystemInit+0xcc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	0c1b      	lsrs	r3, r3, #16
 80009f2:	041b      	lsls	r3, r3, #16
 80009f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009f8:	d203      	bcs.n	8000a02 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SystemInit+0xd0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <SystemInit+0xd4>)
 8000a04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a08:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	52002000 	.word	0x52002000
 8000a14:	58024400 	.word	0x58024400
 8000a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a1c:	02020200 	.word	0x02020200
 8000a20:	01ff0000 	.word	0x01ff0000
 8000a24:	01010280 	.word	0x01010280
 8000a28:	5c001000 	.word	0x5c001000
 8000a2c:	51008000 	.word	0x51008000
 8000a30:	52004000 	.word	0x52004000

08000a34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a34:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a36:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_CRC_Init+0x24>)
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_CRC_Init+0x28>)
 8000a3a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	8083      	strh	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a40:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a44:	2301      	movs	r3, #1
 8000a46:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a48:	f000 fc78 	bl	800133c <HAL_CRC_Init>
 8000a4c:	b118      	cbz	r0, 8000a56 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a52:	f000 ba21 	b.w	8000e98 <Error_Handler>
}
 8000a56:	bd08      	pop	{r3, pc}
 8000a58:	240040fc 	.word	0x240040fc
 8000a5c:	58024c00 	.word	0x58024c00

08000a60 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000a60:	6802      	ldr	r2, [r0, #0]
{
 8000a62:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_CRC_MspInit+0x2c>)
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d10d      	bne.n	8000a86 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a6a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a72:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	58024c00 	.word	0x58024c00

08000a90 <MX_ETH_Init>:
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a90:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_ETH_Init+0x54>)
  MACAddr[0] = 0x00;
  MACAddr[1] = 0x80;
 8000a92:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_ETH_Init+0x58>)
  MACAddr[0] = 0x00;
 8000a96:	2200      	movs	r2, #0
{
 8000a98:	b510      	push	{r4, lr}
  heth.Instance = ETH;
 8000a9a:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_ETH_Init+0x5c>)
  MACAddr[1] = 0x80;
 8000a9e:	7059      	strb	r1, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aa0:	21e1      	movs	r1, #225	; 0xe1
  MACAddr[0] = 0x00;
 8000aa2:	701a      	strb	r2, [r3, #0]
  MACAddr[2] = 0xE1;
 8000aa4:	7099      	strb	r1, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa6:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aa8:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aaa:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aac:	6043      	str	r3, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_ETH_Init+0x60>)
 8000ab4:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ETH_Init+0x64>)
 8000ab8:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8000aba:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8000abe:	6143      	str	r3, [r0, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ac0:	f000 fdf6 	bl	80016b0 <HAL_ETH_Init>
 8000ac4:	b108      	cbz	r0, 8000aca <MX_ETH_Init+0x3a>
  {
    Error_Handler();
 8000ac6:	f000 f9e7 	bl	8000e98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aca:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <MX_ETH_Init+0x68>)
 8000acc:	2234      	movs	r2, #52	; 0x34
 8000ace:	2100      	movs	r1, #0
 8000ad0:	1d20      	adds	r0, r4, #4
 8000ad2:	f010 fcab 	bl	801142c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad6:	2321      	movs	r3, #33	; 0x21
 8000ad8:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ada:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ade:	6163      	str	r3, [r4, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ae0:	bd10      	pop	{r4, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24004160 	.word	0x24004160
 8000ae8:	40028000 	.word	0x40028000
 8000aec:	24004120 	.word	0x24004120
 8000af0:	24004070 	.word	0x24004070
 8000af4:	24004010 	.word	0x24004010
 8000af8:	24004128 	.word	0x24004128

08000afc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	2214      	movs	r2, #20
 8000b04:	2100      	movs	r1, #0
 8000b06:	a807      	add	r0, sp, #28
 8000b08:	f010 fc90 	bl	801142c <memset>
  if(ethHandle->Instance==ETH)
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <HAL_ETH_MspInit+0x11c>)
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d17f      	bne.n	8000c14 <HAL_ETH_MspInit+0x118>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b14:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <HAL_ETH_MspInit+0x120>)
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b18:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b1c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	483f      	ldr	r0, [pc, #252]	; (8000c20 <HAL_ETH_MspInit+0x124>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b28:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000b2c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000b30:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000b34:	9200      	str	r2, [sp, #0]
 8000b36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b38:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000b3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b40:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000b44:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000b48:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b50:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000b54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b58:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000b5c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000b60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b64:	9202      	str	r2, [sp, #8]
 8000b66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b6c:	f042 0204 	orr.w	r2, r2, #4
 8000b70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b78:	f002 0204 	and.w	r2, r2, #4
 8000b7c:	9203      	str	r2, [sp, #12]
 8000b7e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b84:	f042 0201 	orr.w	r2, r2, #1
 8000b88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b90:	f002 0201 	and.w	r2, r2, #1
 8000b94:	9204      	str	r2, [sp, #16]
 8000b96:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b9c:	f042 0202 	orr.w	r2, r2, #2
 8000ba0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ba4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba8:	f002 0202 	and.w	r2, r2, #2
 8000bac:	9205      	str	r2, [sp, #20]
 8000bae:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	9306      	str	r3, [sp, #24]
 8000bc8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2332      	movs	r3, #50	; 0x32
 8000bcc:	e9cd 3607 	strd	r3, r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f000 fe7e 	bl	80018d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bd4:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	a907      	add	r1, sp, #28
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <HAL_ETH_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f000 fe74 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	a907      	add	r1, sp, #28
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f000 fe69 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c02:	a907      	add	r1, sp, #28
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c10:	f000 fe5e 	bl	80018d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c14:	b00c      	add	sp, #48	; 0x30
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020800 	.word	0x58020800
 8000c24:	58020000 	.word	0x58020000
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58021800 	.word	0x58021800

08000c30 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0x98>)
{
 8000c32:	b086      	sub	sp, #24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c38:	f042 0204 	orr.w	r2, r2, #4
 8000c3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c44:	f002 0204 	and.w	r2, r2, #4
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c5c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c60:	9201      	str	r2, [sp, #4]
 8000c62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c68:	f042 0201 	orr.w	r2, r2, #1
 8000c6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c74:	f002 0201 	and.w	r2, r2, #1
 8000c78:	9202      	str	r2, [sp, #8]
 8000c7a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c80:	f042 0202 	orr.w	r2, r2, #2
 8000c84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c8c:	f002 0202 	and.w	r2, r2, #2
 8000c90:	9203      	str	r2, [sp, #12]
 8000c92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c98:	f042 0208 	orr.w	r2, r2, #8
 8000c9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ca4:	f002 0208 	and.w	r2, r2, #8
 8000ca8:	9204      	str	r2, [sp, #16]
 8000caa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	9305      	str	r3, [sp, #20]
 8000cc2:	9b05      	ldr	r3, [sp, #20]

}
 8000cc4:	b006      	add	sp, #24
 8000cc6:	4770      	bx	lr
 8000cc8:	58024400 	.word	0x58024400

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd0:	224c      	movs	r2, #76	; 0x4c
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	a809      	add	r0, sp, #36	; 0x24
 8000cd6:	f010 fba9 	bl	801142c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cda:	2220      	movs	r2, #32
 8000cdc:	2100      	movs	r1, #0
 8000cde:	a801      	add	r0, sp, #4
 8000ce0:	f010 fba4 	bl	801142c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f000 ff91 	bl	8001c0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <SystemClock_Config+0xc0>)
 8000cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <SystemClock_Config+0xc4>)
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	6993      	ldr	r3, [r2, #24]
 8000d04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	6993      	ldr	r3, [r2, #24]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d18:	6993      	ldr	r3, [r2, #24]
 8000d1a:	049c      	lsls	r4, r3, #18
 8000d1c:	d5fc      	bpl.n	8000d18 <SystemClock_Config+0x4c>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <SystemClock_Config+0xc8>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 75;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	200c      	movs	r0, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d24:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d36:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d38:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000d3c:	234b      	movs	r3, #75	; 0x4b
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d3e:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d4a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d50:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f000 ff9e 	bl	8001c94 <HAL_RCC_OscConfig>
 8000d58:	b108      	cbz	r0, 8000d5e <SystemClock_Config+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <SystemClock_Config+0x90>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	223f      	movs	r2, #63	; 0x3f
 8000d60:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d62:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d6c:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d72:	e9cd 1304 	strd	r1, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d76:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d78:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d7a:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7e:	f001 fabb 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000d82:	b108      	cbz	r0, 8000d88 <SystemClock_Config+0xbc>
 8000d84:	b672      	cpsid	i
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <SystemClock_Config+0xba>
}
 8000d88:	b01c      	add	sp, #112	; 0x70
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	58000400 	.word	0x58000400
 8000d90:	58024800 	.word	0x58024800
 8000d94:	58024400 	.word	0x58024400

08000d98 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d98:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <main+0xf8>)
 8000d9a:	695a      	ldr	r2, [r3, #20]
 8000d9c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 8000da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000da2:	d111      	bne.n	8000dc8 <main+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000dbe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dc4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dc8:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <main+0xf8>)
 8000dca:	6953      	ldr	r3, [r2, #20]
 8000dcc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000dd0:	d123      	bne.n	8000e1a <main+0x82>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000dd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dda:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dde:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000de6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000dea:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dec:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000df0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000df6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000dfc:	d2f9      	bcs.n	8000df2 <main+0x5a>
    } while(sets-- != 0U);
 8000dfe:	3b20      	subs	r3, #32
 8000e00:	f113 0f20 	cmn.w	r3, #32
 8000e04:	d1f2      	bne.n	8000dec <main+0x54>
 8000e06:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e0a:	6953      	ldr	r3, [r2, #20]
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e16:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	4d1d      	ldr	r5, [pc, #116]	; (8000e94 <main+0xfc>)
 8000e20:	682c      	ldr	r4, [r5, #0]
 8000e22:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000e26:	d012      	beq.n	8000e4e <main+0xb6>
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	d1f9      	bne.n	8000e20 <main+0x88>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0x96>
  MX_GPIO_Init();
 8000e30:	f7ff fefe 	bl	8000c30 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e34:	f7ff fe2c 	bl	8000a90 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e38:	f000 f86c 	bl	8000f14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e3c:	f000 f8e4 	bl	8001008 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000e40:	f7ff fdf8 	bl	8000a34 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000e44:	f004 f9f6 	bl	8005234 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8000e48:	f004 f9fb 	bl	8005242 <MX_X_CUBE_AI_Process>
  while (1)
 8000e4c:	e7fc      	b.n	8000e48 <main+0xb0>
  HAL_Init();
 8000e4e:	f000 f9af 	bl	80011b0 <HAL_Init>
  SystemClock_Config();
 8000e52:	f7ff ff3b 	bl	8000ccc <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e56:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e5a:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e60:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e64:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e70:	f000 fe1a 	bl	8001aa8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e74:	4621      	mov	r1, r4
 8000e76:	4620      	mov	r0, r4
 8000e78:	f000 fe24 	bl	8001ac4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <main+0xfc>)
 8000e82:	6811      	ldr	r1, [r2, #0]
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	d4d3      	bmi.n	8000e30 <main+0x98>
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	d1fa      	bne.n	8000e82 <main+0xea>
 8000e8c:	b672      	cpsid	i
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <main+0xf6>
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	58024400 	.word	0x58024400

08000e98 <Error_Handler>:
 8000e98:	b672      	cpsid	i
 8000e9a:	e7fe      	b.n	8000e9a <Error_Handler+0x2>

08000e9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_MspInit+0x20>)
{
 8000e9e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ea4:	f042 0202 	orr.w	r2, r2, #2
 8000ea8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	b002      	add	sp, #8
 8000eba:	4770      	bx	lr
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler>

08000ec2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler>

08000ec4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler>

08000ec6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler>

08000ec8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler>

08000eca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 b99c 	b.w	800120c <HAL_IncTick>

08000ed4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <_sbrk+0x30>)
{
 8000ed6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000ed8:	6811      	ldr	r1, [r2, #0]
{
 8000eda:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000edc:	b909      	cbnz	r1, 8000ee2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000ede:	490a      	ldr	r1, [pc, #40]	; (8000f08 <_sbrk+0x34>)
 8000ee0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	6810      	ldr	r0, [r2, #0]
 8000ee4:	4909      	ldr	r1, [pc, #36]	; (8000f0c <_sbrk+0x38>)
 8000ee6:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <_sbrk+0x3c>)
 8000ee8:	4403      	add	r3, r0
 8000eea:	1b09      	subs	r1, r1, r4
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d906      	bls.n	8000efe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ef0:	f010 f886 	bl	8011000 <__errno>
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000efc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000efe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000f00:	e7fc      	b.n	8000efc <_sbrk+0x28>
 8000f02:	bf00      	nop
 8000f04:	24004210 	.word	0x24004210
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	24080000 	.word	0x24080000
 8000f10:	00000800 	.word	0x00000800

08000f14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f14:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 115200;
 8000f18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f1c:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <MX_USART3_UART_Init+0x60>)
 8000f1e:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f24:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f26:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f30:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f38:	f002 fdda 	bl	8003af0 <HAL_UART_Init>
 8000f3c:	b108      	cbz	r0, 8000f42 <MX_USART3_UART_Init+0x2e>
  {
    Error_Handler();
 8000f3e:	f7ff ffab 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <MX_USART3_UART_Init+0x5c>)
 8000f46:	f002 fe40 	bl	8003bca <HAL_UARTEx_SetTxFifoThreshold>
 8000f4a:	b108      	cbz	r0, 8000f50 <MX_USART3_UART_Init+0x3c>
  {
    Error_Handler();
 8000f4c:	f7ff ffa4 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_USART3_UART_Init+0x5c>)
 8000f54:	f002 fe5d 	bl	8003c12 <HAL_UARTEx_SetRxFifoThreshold>
 8000f58:	b108      	cbz	r0, 8000f5e <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f7ff ff9d 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_USART3_UART_Init+0x5c>)
 8000f60:	f002 fe18 	bl	8003b94 <HAL_UARTEx_DisableFifoMode>
 8000f64:	b118      	cbz	r0, 8000f6e <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f6a:	f7ff bf95 	b.w	8000e98 <Error_Handler>
}
 8000f6e:	bd08      	pop	{r3, pc}
 8000f70:	24004214 	.word	0x24004214
 8000f74:	40004800 	.word	0x40004800

08000f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	b0b6      	sub	sp, #216	; 0xd8
 8000f7c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	2214      	movs	r2, #20
 8000f80:	2100      	movs	r1, #0
 8000f82:	a802      	add	r0, sp, #8
 8000f84:	f010 fa52 	bl	801142c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	22bc      	movs	r2, #188	; 0xbc
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	a807      	add	r0, sp, #28
 8000f8e:	f010 fa4d 	bl	801142c <memset>
  if(uartHandle->Instance==USART3)
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d12e      	bne.n	8000ff8 <HAL_UART_MspInit+0x80>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f9a:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f9e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f001 fc06 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	b108      	cbz	r0, 8000faa <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000fa6:	f7ff ff77 	bl	8000e98 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	a902      	add	r1, sp, #8
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000fb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000fbc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000fc0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fcc:	f042 0208 	orr.w	r2, r2, #8
 8000fd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff4:	f000 fc6c 	bl	80018d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff8:	b036      	add	sp, #216	; 0xd8
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	40004800 	.word	0x40004800
 8001000:	58024400 	.word	0x58024400
 8001004:	58020c00 	.word	0x58020c00

08001008 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001008:	b508      	push	{r3, lr}
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x34>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800100c:	2309      	movs	r3, #9
 800100e:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x38>)
 8001010:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	2202      	movs	r2, #2
 8001018:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800101c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001020:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001022:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001024:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001028:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800102c:	f000 fd52 	bl	8001ad4 <HAL_PCD_Init>
 8001030:	b118      	cbz	r0, 800103a <MX_USB_OTG_FS_PCD_Init+0x32>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001036:	f7ff bf2f 	b.w	8000e98 <Error_Handler>
}
 800103a:	bd08      	pop	{r3, pc}
 800103c:	240042a4 	.word	0x240042a4
 8001040:	40080000 	.word	0x40080000

08001044 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001044:	b530      	push	{r4, r5, lr}
 8001046:	b0b7      	sub	sp, #220	; 0xdc
 8001048:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	2214      	movs	r2, #20
 800104c:	2100      	movs	r1, #0
 800104e:	a802      	add	r0, sp, #8
 8001050:	f010 f9ec 	bl	801142c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	22bc      	movs	r2, #188	; 0xbc
 8001056:	2100      	movs	r1, #0
 8001058:	a807      	add	r0, sp, #28
 800105a:	f010 f9e7 	bl	801142c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <HAL_PCD_MspInit+0xc0>)
 8001062:	429a      	cmp	r2, r3
 8001064:	d14c      	bne.n	8001100 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001066:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800106a:	2001      	movs	r0, #1
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800106c:	2203      	movs	r2, #3
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800106e:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001070:	2312      	movs	r3, #18
 8001072:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001076:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800107a:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800107e:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001080:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001084:	9315      	str	r3, [sp, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8001086:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108a:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800108c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001090:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001092:	f001 fb8d 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	b108      	cbz	r0, 800109c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001098:	f7ff fefe 	bl	8000e98 <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4c1a      	ldr	r4, [pc, #104]	; (8001108 <HAL_PCD_MspInit+0xc4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800109e:	f000 fdf1 	bl	8001c84 <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	a902      	add	r1, sp, #8
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <HAL_PCD_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80010b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010ca:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010d0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f000 fbfd 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	a902      	add	r1, sp, #8
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_PCD_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f000 fbf4 	bl	80018d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010e8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80010ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010f0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80010f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80010f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001100:	b037      	add	sp, #220	; 0xdc
 8001102:	bd30      	pop	{r4, r5, pc}
 8001104:	40080000 	.word	0x40080000
 8001108:	58024400 	.word	0x58024400
 800110c:	58020000 	.word	0x58020000

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001114:	f7ff fc22 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f010 f92f 	bl	80113a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fe29 	bl	8000d98 <main>
  bx  lr
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800114c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001150:	24004010 	.word	0x24004010
  ldr r2, =_sidata
 8001154:	0804e7e0 	.word	0x0804e7e0
  ldr r2, =_sbss
 8001158:	240040e0 	.word	0x240040e0
  ldr r4, =_ebss
 800115c:	2405b11c 	.word	0x2405b11c

08001160 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC3_IRQHandler>
	...

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_InitTick+0x40>)
{
 8001168:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	b908      	cbnz	r0, 8001172 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001170:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_InitTick+0x44>)
 8001178:	fbb3 f3f0 	udiv	r3, r3, r0
 800117c:	6810      	ldr	r0, [r2, #0]
 800117e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001182:	f000 f8c7 	bl	8001314 <HAL_SYSTICK_Config>
 8001186:	4604      	mov	r4, r0
 8001188:	2800      	cmp	r0, #0
 800118a:	d1f0      	bne.n	800116e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118c:	2d0f      	cmp	r5, #15
 800118e:	d8ee      	bhi.n	800116e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	4602      	mov	r2, r0
 8001192:	4629      	mov	r1, r5
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f000 f88a 	bl	80012b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_InitTick+0x48>)
 800119e:	4620      	mov	r0, r4
 80011a0:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80011a2:	e7e5      	b.n	8001170 <HAL_InitTick+0xc>
 80011a4:	24000008 	.word	0x24000008
 80011a8:	24000000 	.word	0x24000000
 80011ac:	2400000c 	.word	0x2400000c

080011b0 <HAL_Init>:
{
 80011b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f86a 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b8:	f000 fffe 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80011bc:	490f      	ldr	r1, [pc, #60]	; (80011fc <HAL_Init+0x4c>)
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_Init+0x50>)
 80011c0:	698b      	ldr	r3, [r1, #24]
 80011c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ce:	698b      	ldr	r3, [r1, #24]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_Init+0x54>)
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	fa20 f303 	lsr.w	r3, r0, r3
 80011e0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_Init+0x58>)
 80011e4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff ffbc 	bl	8001164 <HAL_InitTick>
 80011ec:	4604      	mov	r4, r0
 80011ee:	b918      	cbnz	r0, 80011f8 <HAL_Init+0x48>
  HAL_MspInit();
 80011f0:	f7ff fe54 	bl	8000e9c <HAL_MspInit>
}
 80011f4:	4620      	mov	r0, r4
 80011f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011f8:	2401      	movs	r4, #1
 80011fa:	e7fb      	b.n	80011f4 <HAL_Init+0x44>
 80011fc:	58024400 	.word	0x58024400
 8001200:	080147a4 	.word	0x080147a4
 8001204:	24000004 	.word	0x24000004
 8001208:	24000000 	.word	0x24000000

0800120c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x10>)
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_IncTick+0x14>)
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	440b      	add	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	240047b0 	.word	0x240047b0
 8001220:	24000008 	.word	0x24000008

08001224 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetTick+0x8>)
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	240047b0 	.word	0x240047b0

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff6 	bl	8001224 <HAL_GetTick>
 8001238:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800123c:	bf1e      	ittt	ne
 800123e:	4b04      	ldrne	r3, [pc, #16]	; (8001250 <HAL_Delay+0x20>)
 8001240:	781b      	ldrbne	r3, [r3, #0]
 8001242:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	1b43      	subs	r3, r0, r5
 800124a:	42a3      	cmp	r3, r4
 800124c:	d3fa      	bcc.n	8001244 <HAL_Delay+0x14>
  {
  }
}
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	24000008 	.word	0x24000008

08001254 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 8001254:	4800      	ldr	r0, [pc, #0]	; (8001258 <HAL_GetHalVersion+0x4>)
 8001256:	4770      	bx	lr
 8001258:	010b0000 	.word	0x010b0000

0800125c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800125c:	4b01      	ldr	r3, [pc, #4]	; (8001264 <HAL_GetREVID+0x8>)
 800125e:	6818      	ldr	r0, [r3, #0]
}
 8001260:	0c00      	lsrs	r0, r0, #16
 8001262:	4770      	bx	lr
 8001264:	5c001000 	.word	0x5c001000

08001268 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_GetDEVID+0xc>)
 800126a:	6818      	ldr	r0, [r3, #0]
}
 800126c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	5c001000 	.word	0x5c001000

08001278 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800127a:	6853      	ldr	r3, [r2, #4]
 800127c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001280:	4318      	orrs	r0, r3
 8001282:	6050      	str	r0, [r2, #4]
}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	58000400 	.word	0x58000400

0800128c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001292:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b2:	b530      	push	{r4, r5, lr}
 80012b4:	68dc      	ldr	r4, [r3, #12]
 80012b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ba:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	2d04      	cmp	r5, #4
 80012c2:	bf28      	it	cs
 80012c4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012cc:	bf8c      	ite	hi
 80012ce:	3c03      	subhi	r4, #3
 80012d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80012d6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	fa01 f104 	lsl.w	r1, r1, r4
 80012e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80012f0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80012f2:	db06      	blt.n	8001302 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012fc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001300:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	f000 000f 	and.w	r0, r0, #15
 8001306:	4a02      	ldr	r2, [pc, #8]	; (8001310 <HAL_NVIC_SetPriority+0x60>)
 8001308:	5413      	strb	r3, [r2, r0]
 800130a:	e7f9      	b.n	8001300 <HAL_NVIC_SetPriority+0x50>
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	e000ed14 	.word	0xe000ed14

08001314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	3801      	subs	r0, #1
 8001316:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800131a:	d20b      	bcs.n	8001334 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_SYSTICK_Config+0x24>)
 8001322:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001324:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001326:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001330:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001332:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001334:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800133c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800133e:	4604      	mov	r4, r0
 8001340:	b908      	cbnz	r0, 8001346 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001344:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001346:	7f43      	ldrb	r3, [r0, #29]
 8001348:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800134c:	b913      	cbnz	r3, 8001354 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800134e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001350:	f7ff fb86 	bl	8000a60 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001354:	2302      	movs	r3, #2
 8001356:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001358:	7923      	ldrb	r3, [r4, #4]
 800135a:	b9e3      	cbnz	r3, 8001396 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_CRC_Init+0x70>)
 8001360:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	f022 0218 	bic.w	r2, r2, #24
 8001368:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800136a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800136c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800136e:	b9d2      	cbnz	r2, 80013a6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001374:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	6961      	ldr	r1, [r4, #20]
 800137c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001380:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001382:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001384:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138c:	430a      	orrs	r2, r1
 800138e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001390:	2301      	movs	r3, #1
 8001392:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001394:	e7d6      	b.n	8001344 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001396:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800139a:	4620      	mov	r0, r4
 800139c:	f000 f808 	bl	80013b0 <HAL_CRCEx_Polynomial_Set>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0e2      	beq.n	800136a <HAL_CRC_Init+0x2e>
 80013a4:	e7cd      	b.n	8001342 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80013a6:	6922      	ldr	r2, [r4, #16]
 80013a8:	e7e4      	b.n	8001374 <HAL_CRC_Init+0x38>
 80013aa:	bf00      	nop
 80013ac:	04c11db7 	.word	0x04c11db7

080013b0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80013b0:	231f      	movs	r3, #31
{
 80013b2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80013b4:	3b01      	subs	r3, #1
 80013b6:	d31c      	bcc.n	80013f2 <HAL_CRCEx_Polynomial_Set+0x42>
 80013b8:	fa21 f403 	lsr.w	r4, r1, r3
 80013bc:	07e4      	lsls	r4, r4, #31
 80013be:	d5f9      	bpl.n	80013b4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80013c0:	2a10      	cmp	r2, #16
 80013c2:	d012      	beq.n	80013ea <HAL_CRCEx_Polynomial_Set+0x3a>
 80013c4:	d804      	bhi.n	80013d0 <HAL_CRCEx_Polynomial_Set+0x20>
 80013c6:	b13a      	cbz	r2, 80013d8 <HAL_CRCEx_Polynomial_Set+0x28>
 80013c8:	2a08      	cmp	r2, #8
 80013ca:	d010      	beq.n	80013ee <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80013cc:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80013ce:	e00b      	b.n	80013e8 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80013d0:	2a18      	cmp	r2, #24
 80013d2:	d1fb      	bne.n	80013cc <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80013d4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80013d6:	d8f9      	bhi.n	80013cc <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80013d8:	6800      	ldr	r0, [r0, #0]
 80013da:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80013dc:	6883      	ldr	r3, [r0, #8]
 80013de:	f023 0318 	bic.w	r3, r3, #24
 80013e2:	431a      	orrs	r2, r3
 80013e4:	6082      	str	r2, [r0, #8]
 80013e6:	2000      	movs	r0, #0
}
 80013e8:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	e7f3      	b.n	80013d6 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	e7f1      	b.n	80013d6 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d1ea      	bne.n	80013cc <HAL_CRCEx_Polynomial_Set+0x1c>
 80013f6:	e7ef      	b.n	80013d8 <HAL_CRCEx_Polynomial_Set+0x28>

080013f8 <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80013f8:	688b      	ldr	r3, [r1, #8]
 80013fa:	680a      	ldr	r2, [r1, #0]
{
 80013fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001400:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
               ((uint32_t)macconf->Support2KPacket  << 22) |
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001402:	7c0b      	ldrb	r3, [r1, #16]
{
 8001404:	b085      	sub	sp, #20
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001406:	f891 a004 	ldrb.w	sl, [r1, #4]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800140a:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800140c:	f891 900c 	ldrb.w	r9, [r1, #12]
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001410:	f891 800d 	ldrb.w	r8, [r1, #13]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001414:	bf0c      	ite	eq
 8001416:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800141a:	2300      	movne	r3, #0
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800141c:	f891 e00e 	ldrb.w	lr, [r1, #14]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001420:	9301      	str	r3, [sp, #4]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001422:	7c4b      	ldrb	r3, [r1, #17]
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001424:	f891 c00f 	ldrb.w	ip, [r1, #15]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001428:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->JumboPacket << 16) |
 800142a:	7c8e      	ldrb	r6, [r1, #18]
               macconf->Speed |
               macconf->DuplexMode |
               ((uint32_t)macconf->LoopbackMode << 12) |
 800142c:	7f0d      	ldrb	r5, [r1, #28]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800142e:	bf0c      	ite	eq
 8001430:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8001434:	2300      	movne	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001436:	f891 b01d 	ldrb.w	fp, [r1, #29]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	694b      	ldr	r3, [r1, #20]
 800143e:	431a      	orrs	r2, r3
 8001440:	698b      	ldr	r3, [r1, #24]
 8001442:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001444:	7f8a      	ldrb	r2, [r1, #30]
 8001446:	2a00      	cmp	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001448:	7fca      	ldrb	r2, [r1, #31]
 800144a:	9203      	str	r2, [sp, #12]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800144c:	bf08      	it	eq
 800144e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001452:	f891 2020 	ldrb.w	r2, [r1, #32]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001456:	bf18      	it	ne
 8001458:	2700      	movne	r7, #0
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800145a:	2a00      	cmp	r2, #0
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001460:	bf0c      	ite	eq
 8001462:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8001466:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001468:	9000      	str	r0, [sp, #0]
 800146a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800146c:	4303      	orrs	r3, r0
 800146e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001470:	4303      	orrs	r3, r0
 8001472:	9800      	ldr	r0, [sp, #0]
 8001474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001478:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 800147c:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8001480:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 8001484:	4303      	orrs	r3, r0
 8001486:	9803      	ldr	r0, [sp, #12]
 8001488:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 800148c:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 8001490:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 8001494:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 8001498:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800149c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80014a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 80014a4:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80014a8:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014ac:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80014b0:	9801      	ldr	r0, [sp, #4]
 80014b2:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 80014b6:	4303      	orrs	r3, r0
 80014b8:	9802      	ldr	r0, [sp, #8]
 80014ba:	4303      	orrs	r3, r0
 80014bc:	433b      	orrs	r3, r7
 80014be:	431c      	orrs	r4, r3
 80014c0:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80014c2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80014c4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80014c8:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80014cc:	2b00      	cmp	r3, #0
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014ce:	6853      	ldr	r3, [r2, #4]
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80014d0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014d4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80014d8:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80014dc:	bf0c      	ite	eq
 80014de:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80014e2:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014e4:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 80014e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ec:	f023 0307 	bic.w	r3, r3, #7
 80014f0:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 80014f4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80014f6:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));
 80014f8:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014fa:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80014fe:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8001502:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001504:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8001508:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800150a:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800150c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800150e:	68d3      	ldr	r3, [r2, #12]
 8001510:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800151a:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800151e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001522:	60d3      	str	r3, [r2, #12]
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001524:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001528:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800152c:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800152e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001530:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001534:	bf0c      	ite	eq
 8001536:	2080      	moveq	r0, #128	; 0x80
 8001538:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001542:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001544:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001546:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800154a:	4303      	orrs	r3, r0
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800154e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001552:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001556:	f020 0003 	bic.w	r0, r0, #3
 800155a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800155c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001560:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001564:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800156a:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800156e:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8001572:	4303      	orrs	r3, r0
 8001574:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001578:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800157c:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001580:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001582:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001586:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800158a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800158e:	bf0c      	ite	eq
 8001590:	2040      	moveq	r0, #64	; 0x40
 8001592:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001594:	432b      	orrs	r3, r5
 8001596:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800159a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800159e:	4303      	orrs	r3, r0
 80015a0:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80015a4:	b005      	add	sp, #20
 80015a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080015ac <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	6808      	ldr	r0, [r1, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80015ba:	f022 0202 	bic.w	r2, r2, #2
 80015be:	4302      	orrs	r2, r0
{
 80015c0:	b510      	push	{r4, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80015c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80015c4:	7b0a      	ldrb	r2, [r1, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80015c6:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015c8:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80015ca:	03d2      	lsls	r2, r2, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80015cc:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015d0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80015d4:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80015d6:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015da:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80015dc:	4302      	orrs	r2, r0
 80015de:	605a      	str	r2, [r3, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80015e0:	6a0a      	ldr	r2, [r1, #32]
 80015e2:	7b48      	ldrb	r0, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80015e4:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80015e8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <ETH_SetDMAConfig+0x84>)
 80015ee:	4020      	ands	r0, r4
 80015f0:	4302      	orrs	r2, r0
 80015f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80015f6:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80015f8:	7d08      	ldrb	r0, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80015fa:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80015fc:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8001600:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8001604:	6908      	ldr	r0, [r1, #16]
 8001606:	4302      	orrs	r2, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001608:	480a      	ldr	r0, [pc, #40]	; (8001634 <ETH_SetDMAConfig+0x88>)
 800160a:	4020      	ands	r0, r4
 800160c:	4302      	orrs	r2, r0
 800160e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001612:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001616:	7f0c      	ldrb	r4, [r1, #28]
 8001618:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800161a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800161e:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001622:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8001626:	430a      	orrs	r2, r1
 8001628:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800162c:	bd10      	pop	{r4, pc}
 800162e:	bf00      	nop
 8001630:	fffec000 	.word	0xfffec000
 8001634:	ffc0efef 	.word	0xffc0efef

08001638 <HAL_ETH_SetMDIOClockRange>:
{
 8001638:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800163a:	6803      	ldr	r3, [r0, #0]
{
 800163c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800163e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8001642:	f000 ff7f 	bl	8002544 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800164a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800164e:	4403      	add	r3, r0
 8001650:	4293      	cmp	r3, r2
 8001652:	d205      	bcs.n	8001660 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001654:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 800165e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_ETH_SetMDIOClockRange+0x64>)
 8001664:	4403      	add	r3, r0
 8001666:	4293      	cmp	r3, r2
 8001668:	d802      	bhi.n	8001670 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800166a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800166e:	e7f3      	b.n	8001658 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001674:	4403      	add	r3, r0
 8001676:	4293      	cmp	r3, r2
 8001678:	d3ee      	bcc.n	8001658 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_ETH_SetMDIOClockRange+0x70>)
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_ETH_SetMDIOClockRange+0x74>)
 800167e:	4403      	add	r3, r0
 8001680:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001682:	bf94      	ite	ls
 8001684:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001688:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 800168c:	e7e4      	b.n	8001658 <HAL_ETH_SetMDIOClockRange+0x20>
 800168e:	bf00      	nop
 8001690:	feced300 	.word	0xfeced300
 8001694:	00e4e1c0 	.word	0x00e4e1c0
 8001698:	fde9f140 	.word	0xfde9f140
 800169c:	017d783f 	.word	0x017d783f
 80016a0:	fc6c7900 	.word	0xfc6c7900
 80016a4:	02625a00 	.word	0x02625a00
 80016a8:	fa0a1f00 	.word	0xfa0a1f00
 80016ac:	02faf07f 	.word	0x02faf07f

080016b0 <HAL_ETH_Init>:
{
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80016b2:	4604      	mov	r4, r0
{
 80016b4:	b0a5      	sub	sp, #148	; 0x94
  if (heth == NULL)
 80016b6:	2800      	cmp	r0, #0
 80016b8:	f000 80b0 	beq.w	800181c <HAL_ETH_Init+0x16c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016bc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80016c0:	b923      	cbnz	r3, 80016cc <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80016c2:	2323      	movs	r3, #35	; 0x23
 80016c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80016c8:	f7ff fa18 	bl	8000afc <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_ETH_Init+0x210>)
 80016ce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80016d2:	f042 0202 	orr.w	r2, r2, #2
 80016d6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80016da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016de:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016e8:	2800      	cmp	r0, #0
 80016ea:	f040 8087 	bne.w	80017fc <HAL_ETH_Init+0x14c>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016ee:	f7ff fdc3 	bl	8001278 <HAL_SYSCFG_ETHInterfaceSelect>
  (void)SYSCFG->PMCR;
 80016f2:	4b74      	ldr	r3, [pc, #464]	; (80018c4 <HAL_ETH_Init+0x214>)
 80016f4:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001704:	f7ff fd8e 	bl	8001224 <HAL_GetTick>
 8001708:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	681d      	ldr	r5, [r3, #0]
 8001712:	f015 0501 	ands.w	r5, r5, #1
 8001716:	d174      	bne.n	8001802 <HAL_ETH_Init+0x152>
  HAL_ETH_SetMDIOClockRange(heth);
 8001718:	4620      	mov	r0, r4
  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 800171a:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800171c:	f7ff ff8c 	bl	8001638 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001720:	f000 ff10 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <HAL_ETH_Init+0x218>)
 8001726:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
  macDefaultConf.CRCStripTypePacket = ENABLE;
  macDefaultConf.DeferralCheck = DISABLE;
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800172c:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.DeferralCheck = DISABLE;
 800172e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001732:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001736:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
  macDefaultConf.Jabber = ENABLE;
  macDefaultConf.JumboPacket = DISABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
  macDefaultConf.PauseTime = 0x0;
 8001738:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800173a:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800173e:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001742:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.SlowProtocolDetect = DISABLE;
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.Support2KPacket = DISABLE;
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001744:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001748:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800174c:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800174e:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001752:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8001754:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.Watchdog = ENABLE;
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001758:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ChecksumOffload = ENABLE;
 800175a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.RetryTransmission = ENABLE;
 800175e:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001762:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001766:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800176a:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800176e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001772:	3801      	subs	r0, #1
 8001774:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001778:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800177c:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800177e:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001780:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001784:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 800178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001792:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 8001794:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001796:	2320      	movs	r3, #32
 8001798:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_ETH_Init+0x21c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 800179e:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80017a0:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 80017a2:	f240 1301 	movw	r3, #257	; 0x101
 80017a6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017aa:	f7ff fe25 	bl	80013f8 <ETH_SetMACConfig>
  dmaDefaultConf.FlushRxPacket = DISABLE;
  dmaDefaultConf.PBLx8Mode = DISABLE;
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
  dmaDefaultConf.SecondPacketOperate = DISABLE;
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017b2:	a902      	add	r1, sp, #8
 80017b4:	4620      	mov	r0, r4
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80017b6:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017b8:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ba:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80017bc:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80017c0:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80017c4:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80017c8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80017cc:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017ce:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017d2:	9604      	str	r6, [sp, #16]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017d4:	f7ff feea 	bl	80015ac <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017d8:	6825      	ldr	r5, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017da:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017dc:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017e0:	f010 0103 	ands.w	r1, r0, #3
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017e4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80017e8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80017ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017f4:	d014      	beq.n	8001820 <HAL_ETH_Init+0x170>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017f6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80017fa:	e00c      	b.n	8001816 <HAL_ETH_Init+0x166>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001800:	e775      	b.n	80016ee <HAL_ETH_Init+0x3e>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001802:	f7ff fd0f 	bl	8001224 <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800180c:	f67f af7d 	bls.w	800170a <HAL_ETH_Init+0x5a>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001810:	2304      	movs	r3, #4
 8001812:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8001816:	23e0      	movs	r3, #224	; 0xe0
 8001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
 800181e:	e04c      	b.n	80018ba <HAL_ETH_Init+0x20a>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001820:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8001824:	f104 0618 	add.w	r6, r4, #24
 8001828:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800182c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8001830:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8001834:	68e0      	ldr	r0, [r4, #12]
 8001836:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
{
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800183a:	f100 0760 	add.w	r7, r0, #96	; 0x60
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800183e:	4603      	mov	r3, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001840:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001842:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001844:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001846:	60d9      	str	r1, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001848:	f846 3b04 	str.w	r3, [r6], #4
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800184c:	3318      	adds	r3, #24
 800184e:	42bb      	cmp	r3, r7
 8001850:	d1f6      	bne.n	8001840 <HAL_ETH_Init+0x190>
  }

  heth->TxDescList.CurTxDesc = 0;

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001852:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8001854:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001856:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800185a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800185e:	2300      	movs	r3, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001860:	f8c2 0114 	str.w	r0, [r2, #276]	; 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001864:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
    dmarxdesc =  heth->Init.RxDesc + i;
 8001868:	6920      	ldr	r0, [r4, #16]
 800186a:	f100 0760 	add.w	r7, r0, #96	; 0x60
 800186e:	4601      	mov	r1, r0
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001870:	600b      	str	r3, [r1, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001872:	604b      	str	r3, [r1, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001874:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001876:	60cb      	str	r3, [r1, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001878:	e9c1 3304 	strd	r3, r3, [r1, #16]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800187c:	f846 1b04 	str.w	r1, [r6], #4
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001880:	3118      	adds	r1, #24
 8001882:	42b9      	cmp	r1, r7
 8001884:	d1f4      	bne.n	8001870 <HAL_ETH_Init+0x1c0>
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001886:	2103      	movs	r1, #3
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001888:	65a3      	str	r3, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800188a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800188e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001892:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001896:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800189a:	3048      	adds	r0, #72	; 0x48
 800189c:	f8c2 0128 	str.w	r0, [r2, #296]	; 0x128
  return HAL_OK;
 80018a0:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018a2:	6862      	ldr	r2, [r4, #4]
 80018a4:	8891      	ldrh	r1, [r2, #4]
 80018a6:	f8c5 1300 	str.w	r1, [r5, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018aa:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ac:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018b4:	2310      	movs	r3, #16
 80018b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80018ba:	b025      	add	sp, #148	; 0x94
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018be:	bf00      	nop
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58000400 	.word	0x58000400
 80018c8:	000f4240 	.word	0x000f4240
 80018cc:	01010000 	.word	0x01010000

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80018d4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8001aa4 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018da:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018de:	680a      	ldr	r2, [r1, #0]
 80018e0:	fa32 f503 	lsrs.w	r5, r2, r3
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80018e6:	b003      	add	sp, #12
 80018e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018ec:	f04f 0e01 	mov.w	lr, #1
 80018f0:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 80018f4:	ea1e 0202 	ands.w	r2, lr, r2
 80018f8:	f000 80bd 	beq.w	8001a76 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018fc:	684e      	ldr	r6, [r1, #4]
 80018fe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001902:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001906:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800190a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001910:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001914:	2f01      	cmp	r7, #1
 8001916:	d834      	bhi.n	8001982 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001918:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800191a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	68cf      	ldr	r7, [r1, #12]
 8001920:	fa07 f708 	lsl.w	r7, r7, r8
 8001924:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001928:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800192a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001934:	409f      	lsls	r7, r3
 8001936:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800193a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800193c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001940:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	688f      	ldr	r7, [r1, #8]
 8001946:	fa07 f708 	lsl.w	r7, r7, r8
 800194a:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800194e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	d119      	bne.n	8001986 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8001952:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001956:	f003 0b07 	and.w	fp, r3, #7
 800195a:	f04f 0e0f 	mov.w	lr, #15
 800195e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001962:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001966:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800196a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800196e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001972:	690f      	ldr	r7, [r1, #16]
 8001974:	fa07 f70b 	lsl.w	r7, r7, fp
 8001978:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800197c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001982:	2d03      	cmp	r5, #3
 8001984:	d1da      	bne.n	800193c <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8001986:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001988:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800198c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001990:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001994:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8001998:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199a:	d06c      	beq.n	8001a76 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80019a0:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019a4:	f003 0c03 	and.w	ip, r3, #3
 80019a8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	f045 0502 	orr.w	r5, r5, #2
 80019b0:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80019bc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80019c0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80019c4:	f005 0502 	and.w	r5, r5, #2
 80019c8:	9501      	str	r5, [sp, #4]
 80019ca:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019cc:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80019d0:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019d4:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019d8:	4d31      	ldr	r5, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x1d0>)
 80019da:	42a8      	cmp	r0, r5
 80019dc:	d04d      	beq.n	8001a7a <HAL_GPIO_Init+0x1aa>
 80019de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019e2:	42a8      	cmp	r0, r5
 80019e4:	d04b      	beq.n	8001a7e <HAL_GPIO_Init+0x1ae>
 80019e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	d049      	beq.n	8001a82 <HAL_GPIO_Init+0x1b2>
 80019ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	d047      	beq.n	8001a86 <HAL_GPIO_Init+0x1b6>
 80019f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019fa:	42a8      	cmp	r0, r5
 80019fc:	d045      	beq.n	8001a8a <HAL_GPIO_Init+0x1ba>
 80019fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a02:	42a8      	cmp	r0, r5
 8001a04:	d043      	beq.n	8001a8e <HAL_GPIO_Init+0x1be>
 8001a06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0a:	42a8      	cmp	r0, r5
 8001a0c:	d041      	beq.n	8001a92 <HAL_GPIO_Init+0x1c2>
 8001a0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a12:	42a8      	cmp	r0, r5
 8001a14:	d03f      	beq.n	8001a96 <HAL_GPIO_Init+0x1c6>
 8001a16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a1a:	42a8      	cmp	r0, r5
 8001a1c:	d03d      	beq.n	8001a9a <HAL_GPIO_Init+0x1ca>
 8001a1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a22:	42a8      	cmp	r0, r5
 8001a24:	bf0c      	ite	eq
 8001a26:	2509      	moveq	r5, #9
 8001a28:	250a      	movne	r5, #10
 8001a2a:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a32:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a36:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8001a38:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8001a3c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001a3e:	bf0c      	ite	eq
 8001a40:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001a42:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a44:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8001a48:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001a4a:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8001a4c:	bf0c      	ite	eq
 8001a4e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001a50:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a52:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8001a56:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001a58:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8001a5c:	bf0c      	ite	eq
 8001a5e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001a60:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8001a64:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8001a68:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8001a6c:	bf54      	ite	pl
 8001a6e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001a70:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8001a72:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8001a76:	3301      	adds	r3, #1
 8001a78:	e731      	b.n	80018de <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	e7d5      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a7e:	2501      	movs	r5, #1
 8001a80:	e7d3      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a82:	2502      	movs	r5, #2
 8001a84:	e7d1      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a86:	2503      	movs	r5, #3
 8001a88:	e7cf      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a8a:	2504      	movs	r5, #4
 8001a8c:	e7cd      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a8e:	2505      	movs	r5, #5
 8001a90:	e7cb      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a92:	2506      	movs	r5, #6
 8001a94:	e7c9      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a96:	2507      	movs	r5, #7
 8001a98:	e7c7      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a9a:	2508      	movs	r5, #8
 8001a9c:	e7c5      	b.n	8001a2a <HAL_GPIO_Init+0x15a>
 8001a9e:	bf00      	nop
 8001aa0:	58020000 	.word	0x58020000
 8001aa4:	58024400 	.word	0x58024400

08001aa8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_HSEM_FastTake+0x14>)
 8001aaa:	3020      	adds	r0, #32
 8001aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_HSEM_FastTake+0x18>)
 8001ab2:	1ac0      	subs	r0, r0, r3
 8001ab4:	bf18      	it	ne
 8001ab6:	2001      	movne	r0, #1
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	58026400 	.word	0x58026400
 8001ac0:	80000300 	.word	0x80000300

08001ac4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ac4:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001ac8:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_HSEM_Release+0xc>)
 8001aca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8001ace:	4770      	bx	lr
 8001ad0:	58026400 	.word	0x58026400

08001ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad6:	4604      	mov	r4, r0
{
 8001ad8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001ada:	b360      	cbz	r0, 8001b36 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001adc:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8001ae0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ae2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ae6:	b91b      	cbnz	r3, 8001af0 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae8:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aec:	f7ff faaa 	bl	8001044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001af2:	466e      	mov	r6, sp
 8001af4:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af6:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001afa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8001afc:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001afe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001b02:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001b06:	bf08      	it	eq
 8001b08:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001b0a:	f002 f917 	bl	8003d3c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b1a:	4625      	mov	r5, r4
 8001b1c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001b20:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001b24:	f855 0b10 	ldr.w	r0, [r5], #16
 8001b28:	f002 f8be 	bl	8003ca8 <USB_CoreInit>
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	b120      	cbz	r0, 8001b3a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b36:	2501      	movs	r5, #1
 8001b38:	e052      	b.n	8001be0 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	f002 f903 	bl	8003d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	4630      	mov	r0, r6
 8001b44:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b48:	2624      	movs	r6, #36	; 0x24
 8001b4a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b4e:	4601      	mov	r1, r0
 8001b50:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b52:	3001      	adds	r0, #1
 8001b54:	4594      	cmp	ip, r2
 8001b56:	d81b      	bhi.n	8001b90 <HAL_PCD_Init+0xbc>
 8001b58:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b5a:	2624      	movs	r6, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b60:	3301      	adds	r3, #1
 8001b62:	4584      	cmp	ip, r0
 8001b64:	d822      	bhi.n	8001bac <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b66:	466e      	mov	r6, sp
 8001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b74:	e886 0003 	stmia.w	r6, {r0, r1}
 8001b78:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001b7c:	6820      	ldr	r0, [r4, #0]
 8001b7e:	f002 f963 	bl	8003e48 <USB_DevInit>
 8001b82:	2301      	movs	r3, #1
 8001b84:	4605      	mov	r5, r0
 8001b86:	b1f0      	cbz	r0, 8001bc6 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b8e:	e7d2      	b.n	8001b36 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001b90:	fb06 4302 	mla	r3, r6, r2, r4
 8001b94:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba4:	6559      	str	r1, [r3, #84]	; 0x54
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ba6:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	e7d1      	b.n	8001b50 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001bac:	fb06 4200 	mla	r2, r6, r0, r4
 8001bb0:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001bb4:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb8:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bbc:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bc0:	e9c2 11a2 	strd	r1, r1, [r2, #648]	; 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	e7cb      	b.n	8001b5e <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8001bc6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bca:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f000 f806 	bl	8001be6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	f002 f9ea 	bl	8003fb4 <USB_DevDisconnect>

  return HAL_OK;
}
 8001be0:	4628      	mov	r0, r5
 8001be2:	b00b      	add	sp, #44	; 0x2c
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be6 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be6:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001be8:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 8001bea:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 8001bec:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8001bf0:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 8001bf4:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bf6:	6993      	ldr	r3, [r2, #24]
 8001bf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bfc:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bfe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	f043 0303 	orr.w	r3, r3, #3
 8001c08:	6553      	str	r3, [r2, #84]	; 0x54
}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c0e:	4d1c      	ldr	r5, [pc, #112]	; (8001c80 <HAL_PWREx_ConfigSupply+0x74>)
{
 8001c10:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c12:	68eb      	ldr	r3, [r5, #12]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	2b06      	cmp	r3, #6
 8001c1a:	d006      	beq.n	8001c2a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c1c:	68e8      	ldr	r0, [r5, #12]
 8001c1e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c22:	1b00      	subs	r0, r0, r4
 8001c24:	bf18      	it	ne
 8001c26:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c2a:	68eb      	ldr	r3, [r5, #12]
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c30:	4303      	orrs	r3, r0
 8001c32:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8001c34:	f7ff faf6 	bl	8001224 <HAL_GetTick>
 8001c38:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c3a:	686b      	ldr	r3, [r5, #4]
 8001c3c:	049a      	lsls	r2, r3, #18
 8001c3e:	d508      	bpl.n	8001c52 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c40:	f1a4 031d 	sub.w	r3, r4, #29
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d90c      	bls.n	8001c62 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c48:	3c2d      	subs	r4, #45	; 0x2d
 8001c4a:	2c01      	cmp	r4, #1
 8001c4c:	d909      	bls.n	8001c62 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7ea      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c52:	f7ff fae7 	bl	8001224 <HAL_GetTick>
 8001c56:	1b80      	subs	r0, r0, r6
 8001c58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c5c:	d9ed      	bls.n	8001c3a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e7e2      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8001c62:	f7ff fadf 	bl	8001224 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c66:	4d06      	ldr	r5, [pc, #24]	; (8001c80 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8001c68:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c6a:	68eb      	ldr	r3, [r5, #12]
 8001c6c:	03db      	lsls	r3, r3, #15
 8001c6e:	d4ee      	bmi.n	8001c4e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c70:	f7ff fad8 	bl	8001224 <HAL_GetTick>
 8001c74:	1b00      	subs	r0, r0, r4
 8001c76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c7a:	d9f6      	bls.n	8001c6a <HAL_PWREx_ConfigSupply+0x5e>
 8001c7c:	e7ef      	b.n	8001c5e <HAL_PWREx_ConfigSupply+0x52>
 8001c7e:	bf00      	nop
 8001c80:	58024800 	.word	0x58024800

08001c84 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001c84:	4a02      	ldr	r2, [pc, #8]	; (8001c90 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8001c86:	68d3      	ldr	r3, [r2, #12]
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	60d3      	str	r3, [r2, #12]
}
 8001c8e:	4770      	bx	lr
 8001c90:	58024800 	.word	0x58024800

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c96:	4604      	mov	r4, r0
 8001c98:	b908      	cbnz	r0, 8001c9e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e08b      	b.n	8001db6 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	07df      	lsls	r7, r3, #31
 8001ca2:	d45e      	bmi.n	8001d62 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	079e      	lsls	r6, r3, #30
 8001ca8:	f100 80af 	bmi.w	8001e0a <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	06da      	lsls	r2, r3, #27
 8001cb0:	d527      	bpl.n	8001d02 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b9e      	ldr	r3, [pc, #632]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001cb4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cb6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cbc:	2a08      	cmp	r2, #8
 8001cbe:	d007      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3c>
 8001cc0:	2a18      	cmp	r2, #24
 8001cc2:	f040 8107 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x240>
 8001cc6:	f001 0203 	and.w	r2, r1, #3
 8001cca:	2a01      	cmp	r2, #1
 8001ccc:	f040 8102 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	d502      	bpl.n	8001cdc <HAL_RCC_OscConfig+0x48>
 8001cd6:	69e3      	ldr	r3, [r4, #28]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d1de      	bne.n	8001c9a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cdc:	f7ff fabe 	bl	800125c <HAL_GetREVID>
 8001ce0:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ce4:	6a21      	ldr	r1, [r4, #32]
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001cea:	f200 80ec 	bhi.w	8001ec6 <HAL_RCC_OscConfig+0x232>
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8001cf6:	bf0c      	ite	eq
 8001cf8:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8001cfc:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8001d00:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	0719      	lsls	r1, r3, #28
 8001d06:	f100 8127 	bmi.w	8001f58 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	069a      	lsls	r2, r3, #26
 8001d0e:	f100 8148 	bmi.w	8001fa2 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	075d      	lsls	r5, r3, #29
 8001d16:	d51e      	bpl.n	8001d56 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8001d18:	4d85      	ldr	r5, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x29c>)
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001d22:	f7ff fa7f 	bl	8001224 <HAL_GetTick>
 8001d26:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	05da      	lsls	r2, r3, #23
 8001d2c:	f140 815e 	bpl.w	8001fec <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	4d7e      	ldr	r5, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f040 8160 	bne.w	8001ffa <HAL_RCC_OscConfig+0x366>
 8001d3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d46:	f7ff fa6d 	bl	8001224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d4a:	4e78      	ldr	r6, [pc, #480]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8001d4c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d4e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001d50:	079b      	lsls	r3, r3, #30
 8001d52:	f140 8178 	bpl.w	8002046 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f040 817b 	bne.w	8002054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e029      	b.n	8001db6 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b72      	ldr	r3, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001d64:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d66:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d68:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d6c:	2a10      	cmp	r2, #16
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe8>
 8001d70:	2a18      	cmp	r2, #24
 8001d72:	d10a      	bne.n	8001d8a <HAL_RCC_OscConfig+0xf6>
 8001d74:	f001 0203 	and.w	r2, r1, #3
 8001d78:	2a02      	cmp	r2, #2
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	039d      	lsls	r5, r3, #14
 8001d80:	d590      	bpl.n	8001ca4 <HAL_RCC_OscConfig+0x10>
 8001d82:	6863      	ldr	r3, [r4, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d18d      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10>
 8001d88:	e787      	b.n	8001c9a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	6862      	ldr	r2, [r4, #4]
 8001d8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001d90:	d112      	bne.n	8001db8 <HAL_RCC_OscConfig+0x124>
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa43 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9e:	4e63      	ldr	r6, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8001da0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da2:	6833      	ldr	r3, [r6, #0]
 8001da4:	0398      	lsls	r0, r3, #14
 8001da6:	f53f af7d 	bmi.w	8001ca4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001daa:	f7ff fa3b 	bl	8001224 <HAL_GetTick>
 8001dae:	1b40      	subs	r0, r0, r5
 8001db0:	2864      	cmp	r0, #100	; 0x64
 8001db2:	d9f6      	bls.n	8001da2 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8001db4:	2003      	movs	r0, #3
}
 8001db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	4d5c      	ldr	r5, [pc, #368]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	b99a      	cbnz	r2, 8001de6 <HAL_RCC_OscConfig+0x152>
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	602b      	str	r3, [r5, #0]
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa2a 	bl	8001224 <HAL_GetTick>
 8001dd0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	0399      	lsls	r1, r3, #14
 8001dd6:	f57f af65 	bpl.w	8001ca4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dda:	f7ff fa23 	bl	8001224 <HAL_GetTick>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	2864      	cmp	r0, #100	; 0x64
 8001de2:	d9f6      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x13e>
 8001de4:	e7e6      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x168>
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	602b      	str	r3, [r5, #0]
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	602b      	str	r3, [r5, #0]
 8001dfa:	e7ce      	b.n	8001d9a <HAL_RCC_OscConfig+0x106>
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e08:	e7f6      	b.n	8001df8 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001e0c:	68e1      	ldr	r1, [r4, #12]
 8001e0e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e10:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e12:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8001e16:	d003      	beq.n	8001e20 <HAL_RCC_OscConfig+0x18c>
 8001e18:	2a18      	cmp	r2, #24
 8001e1a:	d12b      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1e0>
 8001e1c:	0782      	lsls	r2, r0, #30
 8001e1e:	d129      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	075b      	lsls	r3, r3, #29
 8001e24:	d502      	bpl.n	8001e2c <HAL_RCC_OscConfig+0x198>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	f43f af37 	beq.w	8001c9a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e2c:	4d3f      	ldr	r5, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
 8001e2e:	682a      	ldr	r2, [r5, #0]
 8001e30:	f022 0219 	bic.w	r2, r2, #25
 8001e34:	430a      	orrs	r2, r1
 8001e36:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8001e38:	f7ff f9f4 	bl	8001224 <HAL_GetTick>
 8001e3c:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	075f      	lsls	r7, r3, #29
 8001e42:	d511      	bpl.n	8001e68 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	f7ff fa0a 	bl	800125c <HAL_GetREVID>
 8001e48:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e4c:	6922      	ldr	r2, [r4, #16]
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	686b      	ldr	r3, [r5, #4]
 8001e52:	d822      	bhi.n	8001e9a <HAL_RCC_OscConfig+0x206>
 8001e54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e58:	2a40      	cmp	r2, #64	; 0x40
 8001e5a:	bf0c      	ite	eq
 8001e5c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001e60:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001e64:	606b      	str	r3, [r5, #4]
 8001e66:	e721      	b.n	8001cac <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff f9dc 	bl	8001224 <HAL_GetTick>
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9e5      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1aa>
 8001e72:	e79f      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e74:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e76:	b1a9      	cbz	r1, 8001ea4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e78:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e7c:	4d2b      	ldr	r5, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e82:	f7ff f9cf 	bl	8001224 <HAL_GetTick>
 8001e86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e88:	682b      	ldr	r3, [r5, #0]
 8001e8a:	0758      	lsls	r0, r3, #29
 8001e8c:	d4da      	bmi.n	8001e44 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f9c9 	bl	8001224 <HAL_GetTick>
 8001e92:	1b80      	subs	r0, r0, r6
 8001e94:	2802      	cmp	r0, #2
 8001e96:	d9f7      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1f4>
 8001e98:	e78c      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001e9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ea2:	e7df      	b.n	8001e64 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea8:	4e20      	ldr	r6, [pc, #128]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eac:	f7ff f9ba 	bl	8001224 <HAL_GetTick>
 8001eb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb2:	6833      	ldr	r3, [r6, #0]
 8001eb4:	0759      	lsls	r1, r3, #29
 8001eb6:	f57f aef9 	bpl.w	8001cac <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff f9b3 	bl	8001224 <HAL_GetTick>
 8001ebe:	1b40      	subs	r0, r0, r5
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f6      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x21e>
 8001ec4:	e776      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8001ecc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	e716      	b.n	8001d02 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ed4:	69e2      	ldr	r2, [r4, #28]
 8001ed6:	b36a      	cbz	r2, 8001f34 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8001ed8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eda:	4d14      	ldr	r5, [pc, #80]	; (8001f2c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8001edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f99f 	bl	8001224 <HAL_GetTick>
 8001ee6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	05df      	lsls	r7, r3, #23
 8001eec:	d511      	bpl.n	8001f12 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eee:	f7ff f9b5 	bl	800125c <HAL_GetREVID>
 8001ef2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ef6:	6a22      	ldr	r2, [r4, #32]
 8001ef8:	4298      	cmp	r0, r3
 8001efa:	d810      	bhi.n	8001f1e <HAL_RCC_OscConfig+0x28a>
 8001efc:	686b      	ldr	r3, [r5, #4]
 8001efe:	2a20      	cmp	r2, #32
 8001f00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f04:	bf0c      	ite	eq
 8001f06:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001f0a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001f0e:	606b      	str	r3, [r5, #4]
 8001f10:	e6f7      	b.n	8001d02 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f12:	f7ff f987 	bl	8001224 <HAL_GetTick>
 8001f16:	1b80      	subs	r0, r0, r6
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9e5      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x254>
 8001f1c:	e74a      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f1e:	68eb      	ldr	r3, [r5, #12]
 8001f20:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001f24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f28:	60eb      	str	r3, [r5, #12]
 8001f2a:	e6ea      	b.n	8001d02 <HAL_RCC_OscConfig+0x6e>
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8001f34:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f36:	4e9f      	ldr	r6, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f971 	bl	8001224 <HAL_GetTick>
 8001f42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f44:	6833      	ldr	r3, [r6, #0]
 8001f46:	05d8      	lsls	r0, r3, #23
 8001f48:	f57f aedb 	bpl.w	8001d02 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f4c:	f7ff f96a 	bl	8001224 <HAL_GetTick>
 8001f50:	1b40      	subs	r0, r0, r5
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9f6      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2b0>
 8001f56:	e72d      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f58:	6963      	ldr	r3, [r4, #20]
 8001f5a:	4d96      	ldr	r5, [pc, #600]	; (80021b4 <HAL_RCC_OscConfig+0x520>)
 8001f5c:	b183      	cbz	r3, 8001f80 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001f66:	f7ff f95d 	bl	8001224 <HAL_GetTick>
 8001f6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f6e:	079b      	lsls	r3, r3, #30
 8001f70:	f53f aecb 	bmi.w	8001d0a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff f956 	bl	8001224 <HAL_GetTick>
 8001f78:	1b80      	subs	r0, r0, r6
 8001f7a:	2802      	cmp	r0, #2
 8001f7c:	d9f6      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2d8>
 8001f7e:	e719      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8001f80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001f88:	f7ff f94c 	bl	8001224 <HAL_GetTick>
 8001f8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f90:	079f      	lsls	r7, r3, #30
 8001f92:	f57f aeba 	bpl.w	8001d0a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff f945 	bl	8001224 <HAL_GetTick>
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	2802      	cmp	r0, #2
 8001f9e:	d9f6      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2fa>
 8001fa0:	e708      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001fa2:	69a3      	ldr	r3, [r4, #24]
 8001fa4:	4d83      	ldr	r5, [pc, #524]	; (80021b4 <HAL_RCC_OscConfig+0x520>)
 8001fa6:	b183      	cbz	r3, 8001fca <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f938 	bl	8001224 <HAL_GetTick>
 8001fb4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	0498      	lsls	r0, r3, #18
 8001fba:	f53f aeaa 	bmi.w	8001d12 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001fbe:	f7ff f931 	bl	8001224 <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	2802      	cmp	r0, #2
 8001fc6:	d9f6      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x322>
 8001fc8:	e6f4      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f927 	bl	8001224 <HAL_GetTick>
 8001fd6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	0499      	lsls	r1, r3, #18
 8001fdc:	f57f ae99 	bpl.w	8001d12 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001fe0:	f7ff f920 	bl	8001224 <HAL_GetTick>
 8001fe4:	1b80      	subs	r0, r0, r6
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9f6      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x344>
 8001fea:	e6e3      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7ff f91a 	bl	8001224 <HAL_GetTick>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	2864      	cmp	r0, #100	; 0x64
 8001ff4:	f67f ae98 	bls.w	8001d28 <HAL_RCC_OscConfig+0x94>
 8001ff8:	e6dc      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	b9b3      	cbnz	r3, 800202a <HAL_RCC_OscConfig+0x396>
 8001ffc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	672b      	str	r3, [r5, #112]	; 0x70
 8002008:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002010:	f7ff f908 	bl	8001224 <HAL_GetTick>
 8002014:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002016:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002018:	0798      	lsls	r0, r3, #30
 800201a:	f57f ae9c 	bpl.w	8001d56 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff f901 	bl	8001224 <HAL_GetTick>
 8002022:	1b80      	subs	r0, r0, r6
 8002024:	42b8      	cmp	r0, r7
 8002026:	d9f6      	bls.n	8002016 <HAL_RCC_OscConfig+0x382>
 8002028:	e6c4      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	2b05      	cmp	r3, #5
 800202c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800202e:	d103      	bne.n	8002038 <HAL_RCC_OscConfig+0x3a4>
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	672b      	str	r3, [r5, #112]	; 0x70
 8002036:	e680      	b.n	8001d3a <HAL_RCC_OscConfig+0xa6>
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	672b      	str	r3, [r5, #112]	; 0x70
 800203e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	e67c      	b.n	8001d40 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7ff f8ed 	bl	8001224 <HAL_GetTick>
 800204a:	1b40      	subs	r0, r0, r5
 800204c:	42b8      	cmp	r0, r7
 800204e:	f67f ae7e 	bls.w	8001d4e <HAL_RCC_OscConfig+0xba>
 8002052:	e6af      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002054:	4d57      	ldr	r5, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x520>)
 8002056:	692b      	ldr	r3, [r5, #16]
 8002058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800205c:	2b18      	cmp	r3, #24
 800205e:	d07a      	beq.n	8002156 <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8002060:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002062:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002068:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	d167      	bne.n	800213c <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800206c:	f7ff f8da 	bl	8001224 <HAL_GetTick>
 8002070:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	0199      	lsls	r1, r3, #6
 8002076:	d45b      	bmi.n	8002130 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800207a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800207c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8002080:	f023 0303 	bic.w	r3, r3, #3
 8002084:	4313      	orrs	r3, r2
 8002086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002088:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800208c:	62ab      	str	r3, [r5, #40]	; 0x28
 800208e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002090:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002092:	3b01      	subs	r3, #1
 8002094:	3a01      	subs	r2, #1
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	0412      	lsls	r2, r2, #16
 800209a:	b29b      	uxth	r3, r3
 800209c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80020a0:	4313      	orrs	r3, r2
 80020a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020a4:	3a01      	subs	r2, #1
 80020a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020aa:	4313      	orrs	r3, r2
 80020ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0612      	lsls	r2, r2, #24
 80020b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80020b6:	4313      	orrs	r3, r2
 80020b8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80020ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80020c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80020c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020d2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020d8:	f023 030c 	bic.w	r3, r3, #12
 80020dc:	4313      	orrs	r3, r2
 80020de:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	4313      	orrs	r3, r2
 80020ea:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002102:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002104:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002114:	f7ff f886 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002118:	4d26      	ldr	r5, [pc, #152]	; (80021b4 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 800211a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	019a      	lsls	r2, r3, #6
 8002120:	f53f ae1d 	bmi.w	8001d5e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f87e 	bl	8001224 <HAL_GetTick>
 8002128:	1b00      	subs	r0, r0, r4
 800212a:	2802      	cmp	r0, #2
 800212c:	d9f6      	bls.n	800211c <HAL_RCC_OscConfig+0x488>
 800212e:	e641      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff f878 	bl	8001224 <HAL_GetTick>
 8002134:	1b80      	subs	r0, r0, r6
 8002136:	2802      	cmp	r0, #2
 8002138:	d99b      	bls.n	8002072 <HAL_RCC_OscConfig+0x3de>
 800213a:	e63b      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800213c:	f7ff f872 	bl	8001224 <HAL_GetTick>
 8002140:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	f57f ae0a 	bpl.w	8001d5e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff f86b 	bl	8001224 <HAL_GetTick>
 800214e:	1b00      	subs	r0, r0, r4
 8002150:	2802      	cmp	r0, #2
 8002152:	d9f6      	bls.n	8002142 <HAL_RCC_OscConfig+0x4ae>
 8002154:	e62e      	b.n	8001db4 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002158:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800215a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215c:	f43f ae2b 	beq.w	8001db6 <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002160:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002164:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002166:	4281      	cmp	r1, r0
 8002168:	f47f ad97 	bne.w	8001c9a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800216c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002172:	428a      	cmp	r2, r1
 8002174:	f47f ad91 	bne.w	8001c9a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002178:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800217a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800217e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002180:	4291      	cmp	r1, r2
 8002182:	f47f ad8a 	bne.w	8001c9a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002186:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002188:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800218c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800218e:	4291      	cmp	r1, r2
 8002190:	f47f ad83 	bne.w	8001c9a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002194:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002196:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800219a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800219c:	4291      	cmp	r1, r2
 800219e:	f47f ad7c 	bne.w	8001c9a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80021a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80021a8:	3801      	subs	r0, #1
  return HAL_OK;
 80021aa:	1a18      	subs	r0, r3, r0
 80021ac:	bf18      	it	ne
 80021ae:	2001      	movne	r0, #1
 80021b0:	e601      	b.n	8001db6 <HAL_RCC_OscConfig+0x122>
 80021b2:	bf00      	nop
 80021b4:	58024400 	.word	0x58024400

080021b8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_RCC_GetSysClockFreq+0x124>)
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80021c0:	2a10      	cmp	r2, #16
{
 80021c2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c4:	f000 8086 	beq.w	80022d4 <HAL_RCC_GetSysClockFreq+0x11c>
 80021c8:	2a18      	cmp	r2, #24
 80021ca:	d00c      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	f040 8083 	bne.w	80022d8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4842      	ldr	r0, [pc, #264]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x128>)
 80021d6:	f012 0f20 	tst.w	r2, #32
 80021da:	d003      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80021e2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80021e4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021e8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80021ec:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021f0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 80021f6:	d0f5      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021f8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021fc:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002200:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002204:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002208:	4362      	muls	r2, r4
 800220a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800220e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002212:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002214:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002218:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800221c:	d04c      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x100>
 800221e:	2902      	cmp	r1, #2
 8002220:	d03c      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0xe4>
 8002222:	2900      	cmp	r1, #0
 8002224:	d148      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	0692      	lsls	r2, r2, #26
 800222a:	d527      	bpl.n	800227c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002230:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002236:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223c:	ee07 2a10 	vmov	s14, r2
 8002240:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002244:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002248:	ee06 3a90 	vmov	s13, r3
 800224c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002254:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800225a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002264:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002266:	ee07 3a10 	vmov	s14, r3
 800226a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800226e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002272:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002276:	ee17 0a90 	vmov	r0, s15
 800227a:	e7b3      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	ee07 3a10 	vmov	s14, r3
 8002286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002292:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80022e4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002296:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800229a:	e7dd      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a2:	ee07 3a10 	vmov	s14, r3
 80022a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80022b2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x130>
 80022b6:	e7ee      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022be:	ee07 3a10 	vmov	s14, r3
 80022c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80022ce:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80022ec <HAL_RCC_GetSysClockFreq+0x134>
 80022d2:	e7e0      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022d6:	e785      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022da:	e783      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80022dc:	58024400 	.word	0x58024400
 80022e0:	03d09000 	.word	0x03d09000
 80022e4:	4c742400 	.word	0x4c742400
 80022e8:	4af42400 	.word	0x4af42400
 80022ec:	4a742400 	.word	0x4a742400
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <HAL_RCC_ClockConfig>:
{
 80022f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022fe:	4604      	mov	r4, r0
 8002300:	b910      	cbnz	r0, 8002308 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
}
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4a88      	ldr	r2, [pc, #544]	; (800252c <HAL_RCC_ClockConfig+0x234>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	428b      	cmp	r3, r1
 8002312:	f0c0 8093 	bcc.w	800243c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	075f      	lsls	r7, r3, #29
 800231a:	f100 809b 	bmi.w	8002454 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231e:	071e      	lsls	r6, r3, #28
 8002320:	d50b      	bpl.n	800233a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002322:	4983      	ldr	r1, [pc, #524]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002324:	6966      	ldr	r6, [r4, #20]
 8002326:	69c8      	ldr	r0, [r1, #28]
 8002328:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800232c:	4286      	cmp	r6, r0
 800232e:	d904      	bls.n	800233a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002330:	69ca      	ldr	r2, [r1, #28]
 8002332:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002336:	4332      	orrs	r2, r6
 8002338:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	06d8      	lsls	r0, r3, #27
 800233c:	d50b      	bpl.n	8002356 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800233e:	497c      	ldr	r1, [pc, #496]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002340:	69a6      	ldr	r6, [r4, #24]
 8002342:	69c8      	ldr	r0, [r1, #28]
 8002344:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002348:	4286      	cmp	r6, r0
 800234a:	d904      	bls.n	8002356 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800234c:	69ca      	ldr	r2, [r1, #28]
 800234e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002352:	4332      	orrs	r2, r6
 8002354:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002356:	0699      	lsls	r1, r3, #26
 8002358:	d50b      	bpl.n	8002372 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800235a:	4975      	ldr	r1, [pc, #468]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 800235c:	69e6      	ldr	r6, [r4, #28]
 800235e:	6a08      	ldr	r0, [r1, #32]
 8002360:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002364:	4286      	cmp	r6, r0
 8002366:	d904      	bls.n	8002372 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002368:	6a0a      	ldr	r2, [r1, #32]
 800236a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800236e:	4332      	orrs	r2, r6
 8002370:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002372:	079a      	lsls	r2, r3, #30
 8002374:	d50b      	bpl.n	800238e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002376:	496e      	ldr	r1, [pc, #440]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002378:	68e6      	ldr	r6, [r4, #12]
 800237a:	6988      	ldr	r0, [r1, #24]
 800237c:	f000 000f 	and.w	r0, r0, #15
 8002380:	4286      	cmp	r6, r0
 8002382:	d904      	bls.n	800238e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	698a      	ldr	r2, [r1, #24]
 8002386:	f022 020f 	bic.w	r2, r2, #15
 800238a:	4332      	orrs	r2, r6
 800238c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	07df      	lsls	r7, r3, #31
 8002390:	d46e      	bmi.n	8002470 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	079e      	lsls	r6, r3, #30
 8002396:	f100 80a1 	bmi.w	80024dc <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239a:	4964      	ldr	r1, [pc, #400]	; (800252c <HAL_RCC_ClockConfig+0x234>)
 800239c:	680a      	ldr	r2, [r1, #0]
 800239e:	f002 020f 	and.w	r2, r2, #15
 80023a2:	42aa      	cmp	r2, r5
 80023a4:	f200 80a8 	bhi.w	80024f8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a8:	0758      	lsls	r0, r3, #29
 80023aa:	f100 80b1 	bmi.w	8002510 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ae:	0719      	lsls	r1, r3, #28
 80023b0:	d50b      	bpl.n	80023ca <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023b2:	495f      	ldr	r1, [pc, #380]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 80023b4:	6965      	ldr	r5, [r4, #20]
 80023b6:	69c8      	ldr	r0, [r1, #28]
 80023b8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80023bc:	4285      	cmp	r5, r0
 80023be:	d204      	bcs.n	80023ca <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023c0:	69ca      	ldr	r2, [r1, #28]
 80023c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023c6:	432a      	orrs	r2, r5
 80023c8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	06da      	lsls	r2, r3, #27
 80023cc:	d50b      	bpl.n	80023e6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023ce:	4958      	ldr	r1, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 80023d0:	69a5      	ldr	r5, [r4, #24]
 80023d2:	69c8      	ldr	r0, [r1, #28]
 80023d4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80023d8:	4285      	cmp	r5, r0
 80023da:	d204      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023dc:	69ca      	ldr	r2, [r1, #28]
 80023de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023e2:	432a      	orrs	r2, r5
 80023e4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	d50b      	bpl.n	8002402 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023ea:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 80023ec:	69e0      	ldr	r0, [r4, #28]
 80023ee:	6a11      	ldr	r1, [r2, #32]
 80023f0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80023f4:	4288      	cmp	r0, r1
 80023f6:	d204      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023f8:	6a13      	ldr	r3, [r2, #32]
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	4303      	orrs	r3, r0
 8002400:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002402:	f7ff fed9 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002406:	494a      	ldr	r1, [pc, #296]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_RCC_ClockConfig+0x23c>)
 800240a:	698b      	ldr	r3, [r1, #24]
 800240c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002418:	698b      	ldr	r3, [r1, #24]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_RCC_ClockConfig+0x240>)
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa20 f303 	lsr.w	r3, r0, r3
 800242a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_ClockConfig+0x244>)
 800242e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002430:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_ClockConfig+0x248>)
}
 8002432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f7fe be94 	b.w	8001164 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f023 030f 	bic.w	r3, r3, #15
 8002442:	430b      	orrs	r3, r1
 8002444:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	428b      	cmp	r3, r1
 800244e:	f47f af58 	bne.w	8002302 <HAL_RCC_ClockConfig+0xa>
 8002452:	e760      	b.n	8002316 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002454:	4936      	ldr	r1, [pc, #216]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002456:	6926      	ldr	r6, [r4, #16]
 8002458:	6988      	ldr	r0, [r1, #24]
 800245a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800245e:	4286      	cmp	r6, r0
 8002460:	f67f af5d 	bls.w	800231e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002464:	698a      	ldr	r2, [r1, #24]
 8002466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800246a:	4332      	orrs	r2, r6
 800246c:	618a      	str	r2, [r1, #24]
 800246e:	e756      	b.n	800231e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002472:	68a1      	ldr	r1, [r4, #8]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800247a:	430a      	orrs	r2, r1
 800247c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002480:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	2a02      	cmp	r2, #2
 8002484:	d11d      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002486:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	f43f af3a 	beq.w	8002302 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4e28      	ldr	r6, [pc, #160]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002494:	6933      	ldr	r3, [r6, #16]
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	4313      	orrs	r3, r2
 800249c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800249e:	f7fe fec1 	bl	8001224 <HAL_GetTick>
 80024a2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	6933      	ldr	r3, [r6, #16]
 80024a6:	6862      	ldr	r2, [r4, #4]
 80024a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80024b0:	f43f af6f 	beq.w	8002392 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe feb6 	bl	8001224 <HAL_GetTick>
 80024b8:	1bc0      	subs	r0, r0, r7
 80024ba:	4540      	cmp	r0, r8
 80024bc:	d9f2      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e720      	b.n	8002304 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	2a03      	cmp	r2, #3
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024ca:	e7de      	b.n	800248a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024cc:	2a01      	cmp	r2, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024d4:	e7d9      	b.n	800248a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	f013 0f04 	tst.w	r3, #4
 80024da:	e7d6      	b.n	800248a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024dc:	4914      	ldr	r1, [pc, #80]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 80024de:	68e6      	ldr	r6, [r4, #12]
 80024e0:	6988      	ldr	r0, [r1, #24]
 80024e2:	f000 000f 	and.w	r0, r0, #15
 80024e6:	4286      	cmp	r6, r0
 80024e8:	f4bf af57 	bcs.w	800239a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	698a      	ldr	r2, [r1, #24]
 80024ee:	f022 020f 	bic.w	r2, r2, #15
 80024f2:	4332      	orrs	r2, r6
 80024f4:	618a      	str	r2, [r1, #24]
 80024f6:	e750      	b.n	800239a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f8:	680a      	ldr	r2, [r1, #0]
 80024fa:	f022 020f 	bic.w	r2, r2, #15
 80024fe:	432a      	orrs	r2, r5
 8002500:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	f002 020f 	and.w	r2, r2, #15
 8002508:	42aa      	cmp	r2, r5
 800250a:	f47f aefa 	bne.w	8002302 <HAL_RCC_ClockConfig+0xa>
 800250e:	e74b      	b.n	80023a8 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <HAL_RCC_ClockConfig+0x238>)
 8002512:	6925      	ldr	r5, [r4, #16]
 8002514:	6988      	ldr	r0, [r1, #24]
 8002516:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800251a:	4285      	cmp	r5, r0
 800251c:	f4bf af47 	bcs.w	80023ae <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002520:	698a      	ldr	r2, [r1, #24]
 8002522:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002526:	432a      	orrs	r2, r5
 8002528:	618a      	str	r2, [r1, #24]
 800252a:	e740      	b.n	80023ae <HAL_RCC_ClockConfig+0xb6>
 800252c:	52002000 	.word	0x52002000
 8002530:	58024400 	.word	0x58024400
 8002534:	080147a4 	.word	0x080147a4
 8002538:	24000004 	.word	0x24000004
 800253c:	24000000 	.word	0x24000000
 8002540:	2400000c 	.word	0x2400000c

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002546:	4c0c      	ldr	r4, [pc, #48]	; (8002578 <HAL_RCC_GetHCLKFreq+0x34>)
 8002548:	f7ff fe36 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800254c:	490b      	ldr	r1, [pc, #44]	; (800257c <HAL_RCC_GetHCLKFreq+0x38>)
 800254e:	69a3      	ldr	r3, [r4, #24]
 8002550:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002554:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002556:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002558:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800255c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002560:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	fa22 f003 	lsr.w	r0, r2, r3
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002570:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_GetHCLKFreq+0x40>)
 8002574:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	58024400 	.word	0x58024400
 800257c:	080147a4 	.word	0x080147a4
 8002580:	24000004 	.word	0x24000004
 8002584:	24000000 	.word	0x24000000

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800258a:	f7ff ffdb 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800259e:	40d8      	lsrs	r0, r3
 80025a0:	bd08      	pop	{r3, pc}
 80025a2:	bf00      	nop
 80025a4:	58024400 	.word	0x58024400
 80025a8:	080147a4 	.word	0x080147a4

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025ae:	f7ff ffc9 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025b4:	4a05      	ldr	r2, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025c2:	40d8      	lsrs	r0, r3
 80025c4:	bd08      	pop	{r3, pc}
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400
 80025cc:	080147a4 	.word	0x080147a4

080025d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80025d2:	4c3a      	ldr	r4, [pc, #232]	; (80026bc <RCCEx_PLL2_Config+0xec>)
{
 80025d4:	4606      	mov	r6, r0
 80025d6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80025d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d069      	beq.n	80026b6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025e8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ea:	f7fe fe1b 	bl	8001224 <HAL_GetTick>
 80025ee:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	011a      	lsls	r2, r3, #4
 80025f4:	d44b      	bmi.n	800268e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80025f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025f8:	6832      	ldr	r2, [r6, #0]
 80025fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025fe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002602:	62a3      	str	r3, [r4, #40]	; 0x28
 8002604:	68b3      	ldr	r3, [r6, #8]
 8002606:	68f2      	ldr	r2, [r6, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	3a01      	subs	r2, #1
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	0412      	lsls	r2, r2, #16
 8002610:	b29b      	uxth	r3, r3
 8002612:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002616:	4313      	orrs	r3, r2
 8002618:	6872      	ldr	r2, [r6, #4]
 800261a:	3a01      	subs	r2, #1
 800261c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002620:	4313      	orrs	r3, r2
 8002622:	6932      	ldr	r2, [r6, #16]
 8002624:	3a01      	subs	r2, #1
 8002626:	0612      	lsls	r2, r2, #24
 8002628:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800262c:	4313      	orrs	r3, r2
 800262e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002630:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002632:	6972      	ldr	r2, [r6, #20]
 8002634:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002638:	4313      	orrs	r3, r2
 800263a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800263c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800263e:	69b2      	ldr	r2, [r6, #24]
 8002640:	f023 0320 	bic.w	r3, r3, #32
 8002644:	4313      	orrs	r3, r2
 8002646:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002652:	69f2      	ldr	r2, [r6, #28]
 8002654:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002658:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800265c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002660:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800266a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800266c:	b9b5      	cbnz	r5, 800269c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800266e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002672:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002674:	4c11      	ldr	r4, [pc, #68]	; (80026bc <RCCEx_PLL2_Config+0xec>)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800267c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267e:	f7fe fdd1 	bl	8001224 <HAL_GetTick>
 8002682:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	d50f      	bpl.n	80026aa <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800268a:	2000      	movs	r0, #0
 800268c:	e005      	b.n	800269a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800268e:	f7fe fdc9 	bl	8001224 <HAL_GetTick>
 8002692:	1bc0      	subs	r0, r0, r7
 8002694:	2802      	cmp	r0, #2
 8002696:	d9ab      	bls.n	80025f0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
}
 800269a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800269c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800269e:	bf0c      	ite	eq
 80026a0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80026a4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80026a8:	e7e3      	b.n	8002672 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80026aa:	f7fe fdbb 	bl	8001224 <HAL_GetTick>
 80026ae:	1b40      	subs	r0, r0, r5
 80026b0:	2802      	cmp	r0, #2
 80026b2:	d9e7      	bls.n	8002684 <RCCEx_PLL2_Config+0xb4>
 80026b4:	e7f0      	b.n	8002698 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
 80026b8:	e7ef      	b.n	800269a <RCCEx_PLL2_Config+0xca>
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400

080026c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80026c2:	4c3a      	ldr	r4, [pc, #232]	; (80027ac <RCCEx_PLL3_Config+0xec>)
{
 80026c4:	4606      	mov	r6, r0
 80026c6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80026c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d069      	beq.n	80027a6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026da:	f7fe fda3 	bl	8001224 <HAL_GetTick>
 80026de:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	009a      	lsls	r2, r3, #2
 80026e4:	d44b      	bmi.n	800277e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80026e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026e8:	6832      	ldr	r2, [r6, #0]
 80026ea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80026ee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80026f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80026f4:	68b3      	ldr	r3, [r6, #8]
 80026f6:	68f2      	ldr	r2, [r6, #12]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	0412      	lsls	r2, r2, #16
 8002700:	b29b      	uxth	r3, r3
 8002702:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002706:	4313      	orrs	r3, r2
 8002708:	6872      	ldr	r2, [r6, #4]
 800270a:	3a01      	subs	r2, #1
 800270c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002710:	4313      	orrs	r3, r2
 8002712:	6932      	ldr	r2, [r6, #16]
 8002714:	3a01      	subs	r2, #1
 8002716:	0612      	lsls	r2, r2, #24
 8002718:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800271c:	4313      	orrs	r3, r2
 800271e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002722:	6972      	ldr	r2, [r6, #20]
 8002724:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002728:	4313      	orrs	r3, r2
 800272a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800272c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800272e:	69b2      	ldr	r2, [r6, #24]
 8002730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002734:	4313      	orrs	r3, r2
 8002736:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800273a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800273e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002740:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002742:	69f2      	ldr	r2, [r6, #28]
 8002744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002748:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800274c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002750:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800275a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800275c:	b9b5      	cbnz	r5, 800278c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800275e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002762:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002764:	4c11      	ldr	r4, [pc, #68]	; (80027ac <RCCEx_PLL3_Config+0xec>)
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276e:	f7fe fd59 	bl	8001224 <HAL_GetTick>
 8002772:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	d50f      	bpl.n	800279a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800277a:	2000      	movs	r0, #0
 800277c:	e005      	b.n	800278a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800277e:	f7fe fd51 	bl	8001224 <HAL_GetTick>
 8002782:	1bc0      	subs	r0, r0, r7
 8002784:	2802      	cmp	r0, #2
 8002786:	d9ab      	bls.n	80026e0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8002788:	2003      	movs	r0, #3
}
 800278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800278c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800278e:	bf0c      	ite	eq
 8002790:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002794:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002798:	e7e3      	b.n	8002762 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800279a:	f7fe fd43 	bl	8001224 <HAL_GetTick>
 800279e:	1b40      	subs	r0, r0, r5
 80027a0:	2802      	cmp	r0, #2
 80027a2:	d9e7      	bls.n	8002774 <RCCEx_PLL3_Config+0xb4>
 80027a4:	e7f0      	b.n	8002788 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	e7ef      	b.n	800278a <RCCEx_PLL3_Config+0xca>
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80027b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027b4:	6806      	ldr	r6, [r0, #0]
{
 80027b6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027b8:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80027be:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80027c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c4:	d02e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027c6:	d813      	bhi.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027c8:	b1f3      	cbz	r3, 8002808 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ce:	d021      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027d0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	05dc      	lsls	r4, r3, #23
 80027d6:	f140 80ea 	bpl.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80027dc:	2b04      	cmp	r3, #4
 80027de:	f200 80e5 	bhi.w	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80027e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027e6:	0024      	.short	0x0024
 80027e8:	00dd002b 	.word	0x00dd002b
 80027ec:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 80027f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027f4:	d1ec      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027f6:	4aa6      	ldr	r2, [pc, #664]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027f8:	2600      	movs	r6, #0
 80027fa:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80027fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80027fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002802:	430b      	orrs	r3, r1
 8002804:	6513      	str	r3, [r2, #80]	; 0x50
 8002806:	e7e4      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002808:	4aa1      	ldr	r2, [pc, #644]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800280a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002812:	e7f0      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002814:	2102      	movs	r1, #2
 8002816:	3004      	adds	r0, #4
 8002818:	f7ff feda 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800281c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800281e:	2800      	cmp	r0, #0
 8002820:	d1d7      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002822:	e7e8      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002824:	2102      	movs	r1, #2
 8002826:	3024      	adds	r0, #36	; 0x24
 8002828:	f7ff ff4a 	bl	80026c0 <RCCEx_PLL3_Config>
 800282c:	e7f6      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282e:	4a98      	ldr	r2, [pc, #608]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002830:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002836:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8002838:	4634      	mov	r4, r6
 800283a:	e004      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800283c:	2100      	movs	r1, #0
 800283e:	1d28      	adds	r0, r5, #4
 8002840:	f7ff fec6 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002844:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002846:	2c00      	cmp	r4, #0
 8002848:	f040 80b3 	bne.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284c:	4a90      	ldr	r2, [pc, #576]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800284e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8002850:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	430b      	orrs	r3, r1
 8002858:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	0598      	lsls	r0, r3, #22
 800285e:	d50d      	bpl.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002860:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002862:	2b80      	cmp	r3, #128	; 0x80
 8002864:	f000 80c2 	beq.w	80029ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8002868:	f200 80a5 	bhi.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80b1 	beq.w	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	f000 80b4 	beq.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002878:	2601      	movs	r6, #1
 800287a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	0559      	lsls	r1, r3, #21
 8002880:	d510      	bpl.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002882:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288a:	f000 80d4 	beq.w	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800288e:	f200 80b5 	bhi.w	80029fc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80c3 	beq.w	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289c:	f000 80c5 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80028a0:	2601      	movs	r6, #1
 80028a2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	051a      	lsls	r2, r3, #20
 80028a8:	d510      	bpl.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 80028aa:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80028ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b2:	f000 80e5 	beq.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80028b6:	f200 80c6 	bhi.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80d4 	beq.w	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	f000 80d6 	beq.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80028c8:	2601      	movs	r6, #1
 80028ca:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	d50d      	bpl.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 80028d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	f000 80ef 	beq.w	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80028da:	f200 80db 	bhi.w	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80db 	beq.w	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	f000 80e1 	beq.w	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80028ea:	2601      	movs	r6, #1
 80028ec:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	04df      	lsls	r7, r3, #19
 80028f2:	d50f      	bpl.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 80028f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	f000 8101 	beq.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80028fe:	f200 80e3 	bhi.w	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80f0 	beq.w	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	f000 80f2 	beq.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002910:	2601      	movs	r6, #1
 8002912:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	0498      	lsls	r0, r3, #18
 8002918:	d50f      	bpl.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 800291a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800291c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002920:	f000 810e 	beq.w	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002924:	f200 80f4 	bhi.w	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80fa 	beq.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	f000 80ff 	beq.w	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002936:	2601      	movs	r6, #1
 8002938:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	0459      	lsls	r1, r3, #17
 800293e:	d510      	bpl.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002940:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002948:	f000 811b 	beq.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800294c:	f200 8100 	bhi.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8106 	beq.w	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8002956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800295a:	f000 810c 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800295e:	2601      	movs	r6, #1
 8002960:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002962:	682b      	ldr	r3, [r5, #0]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	d50d      	bpl.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8002968:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296e:	f000 8110 	beq.w	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002976:	f000 811a 	beq.w	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 810e 	beq.w	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002980:	2601      	movs	r6, #1
 8002982:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	f140 8127 	bpl.w	8002bda <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 800298c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800298e:	2b03      	cmp	r3, #3
 8002990:	f200 8167 	bhi.w	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002994:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002998:	01130118 	.word	0x01130118
 800299c:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a0:	2100      	movs	r1, #0
 80029a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80029a6:	f7ff fe8b 	bl	80026c0 <RCCEx_PLL3_Config>
 80029aa:	e74b      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029ac:	2601      	movs	r6, #1
 80029ae:	4634      	mov	r4, r6
 80029b0:	e753      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80029b2:	4626      	mov	r6, r4
 80029b4:	e751      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 80029b6:	2bc0      	cmp	r3, #192	; 0xc0
 80029b8:	d003      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	f47f af5b 	bne.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 80029c2:	b9cc      	cbnz	r4, 80029f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029c4:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029c6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80029c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80029ca:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6513      	str	r3, [r2, #80]	; 0x50
 80029d2:	e753      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80029de:	e7f0      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029e0:	2100      	movs	r1, #0
 80029e2:	1d28      	adds	r0, r5, #4
 80029e4:	f7ff fdf4 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029e8:	4604      	mov	r4, r0
      break;
 80029ea:	e7ea      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ec:	2100      	movs	r1, #0
 80029ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80029f2:	f7ff fe65 	bl	80026c0 <RCCEx_PLL3_Config>
 80029f6:	e7f7      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80029f8:	4626      	mov	r6, r4
 80029fa:	e73f      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 80029fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a00:	d003      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a06:	f47f af4b 	bne.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8002a0a:	b9d4      	cbnz	r4, 8002a42 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a0e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8002a12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a14:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	e742      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002a28:	e7ef      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	1d28      	adds	r0, r5, #4
 8002a2e:	f7ff fdcf 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a32:	4604      	mov	r4, r0
      break;
 8002a34:	e7e9      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a36:	2100      	movs	r1, #0
 8002a38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002a3c:	f7ff fe40 	bl	80026c0 <RCCEx_PLL3_Config>
 8002a40:	e7f7      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002a42:	4626      	mov	r6, r4
 8002a44:	e72e      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a4a:	d003      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a50:	f47f af3a 	bne.w	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8002a54:	b9d4      	cbnz	r4, 8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a58:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8002a5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a62:	430b      	orrs	r3, r1
 8002a64:	6593      	str	r3, [r2, #88]	; 0x58
 8002a66:	e731      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002a72:	e7ef      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a74:	2100      	movs	r1, #0
 8002a76:	1d28      	adds	r0, r5, #4
 8002a78:	f7ff fdaa 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a7c:	4604      	mov	r4, r0
      break;
 8002a7e:	e7e9      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a80:	2100      	movs	r1, #0
 8002a82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002a86:	f7ff fe1b 	bl	80026c0 <RCCEx_PLL3_Config>
 8002a8a:	e7f7      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002a8c:	4626      	mov	r6, r4
 8002a8e:	e71d      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002a90:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	f47f af28 	bne.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8002a9a:	b99c      	cbnz	r4, 8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a9c:	4a9d      	ldr	r2, [pc, #628]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002a9e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002aa0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002aa2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	e720      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aac:	4a99      	ldr	r2, [pc, #612]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002aae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002ab6:	e7f0      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab8:	2102      	movs	r1, #2
 8002aba:	1d28      	adds	r0, r5, #4
 8002abc:	f7ff fd88 	bl	80025d0 <RCCEx_PLL2_Config>
 8002ac0:	4604      	mov	r4, r0
      break;
 8002ac2:	e7ea      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8002ac4:	4626      	mov	r6, r4
 8002ac6:	e712      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ad2:	f47f af1d 	bne.w	8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8002ad6:	b9cc      	cbnz	r4, 8002b0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ad8:	4a8e      	ldr	r2, [pc, #568]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002ada:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8002adc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6513      	str	r3, [r2, #80]	; 0x50
 8002ae6:	e715      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae8:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002aea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002af2:	e7f0      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002af4:	2100      	movs	r1, #0
 8002af6:	1d28      	adds	r0, r5, #4
 8002af8:	f7ff fd6a 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002afc:	4604      	mov	r4, r0
      break;
 8002afe:	e7ea      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b00:	2100      	movs	r1, #0
 8002b02:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002b06:	f7ff fddb 	bl	80026c0 <RCCEx_PLL3_Config>
 8002b0a:	e7f7      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002b0c:	4626      	mov	r6, r4
 8002b0e:	e701      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b14:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002b18:	d003      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1e:	f47f af0a 	bne.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8002b22:	b99c      	cbnz	r4, 8002b4c <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b24:	4a7b      	ldr	r2, [pc, #492]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002b26:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8002b28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002b2a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6513      	str	r3, [r2, #80]	; 0x50
 8002b32:	e702      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b34:	2101      	movs	r1, #1
 8002b36:	1d28      	adds	r0, r5, #4
 8002b38:	f7ff fd4a 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b3c:	4604      	mov	r4, r0
      break;
 8002b3e:	e7f0      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b40:	2101      	movs	r1, #1
 8002b42:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002b46:	f7ff fdbb 	bl	80026c0 <RCCEx_PLL3_Config>
 8002b4a:	e7f7      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8002b4c:	4626      	mov	r6, r4
 8002b4e:	e6f4      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b58:	d003      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8002b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b5e:	f47f aefe 	bne.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8002b62:	b9a4      	cbnz	r4, 8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b64:	4a6b      	ldr	r2, [pc, #428]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002b66:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8002b6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b6c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
 8002b74:	e6f5      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b76:	2101      	movs	r1, #1
 8002b78:	1d28      	adds	r0, r5, #4
 8002b7a:	f7ff fd29 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b7e:	4604      	mov	r4, r0
      break;
 8002b80:	e7ef      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b82:	2101      	movs	r1, #1
 8002b84:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002b88:	f7ff fd9a 	bl	80026c0 <RCCEx_PLL3_Config>
 8002b8c:	e7f7      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002b8e:	4626      	mov	r6, r4
 8002b90:	e6e7      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b92:	4a60      	ldr	r2, [pc, #384]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002b94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002b9c:	b96c      	cbnz	r4, 8002bba <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b9e:	4a5d      	ldr	r2, [pc, #372]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002ba0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8002ba2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ba4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6513      	str	r3, [r2, #80]	; 0x50
 8002bac:	e6ea      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	1d28      	adds	r0, r5, #4
 8002bb2:	f7ff fd0d 	bl	80025d0 <RCCEx_PLL2_Config>
 8002bb6:	4604      	mov	r4, r0
      break;
 8002bb8:	e7f0      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002bba:	4626      	mov	r6, r4
 8002bbc:	e6e2      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbe:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002bc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002bc8:	2c00      	cmp	r4, #0
 8002bca:	d14d      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002bce:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002bd0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bda:	682b      	ldr	r3, [r5, #0]
 8002bdc:	025f      	lsls	r7, r3, #9
 8002bde:	d54d      	bpl.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be0:	4f4d      	ldr	r7, [pc, #308]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002bea:	f7fe fb1b 	bl	8001224 <HAL_GetTick>
 8002bee:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	05d8      	lsls	r0, r3, #23
 8002bf4:	d53a      	bpl.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	d16c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bfa:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002bfc:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8002c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c02:	4042      	eors	r2, r0
 8002c04:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002c16:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c1a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002c1e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002c20:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c22:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002c26:	d040      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c28:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8002c2c:	4939      	ldr	r1, [pc, #228]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002c2e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002c32:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002c36:	d149      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8002c38:	6908      	ldr	r0, [r1, #16]
 8002c3a:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8002c3c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002c40:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002c44:	4302      	orrs	r2, r0
 8002c46:	610a      	str	r2, [r1, #16]
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002c4e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	e012      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c56:	2102      	movs	r1, #2
 8002c58:	1d28      	adds	r0, r5, #4
 8002c5a:	f7ff fcb9 	bl	80025d0 <RCCEx_PLL2_Config>
 8002c5e:	4604      	mov	r4, r0
      break;
 8002c60:	e7b2      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8002c62:	2601      	movs	r6, #1
 8002c64:	4634      	mov	r4, r6
 8002c66:	e7b8      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002c68:	4626      	mov	r6, r4
 8002c6a:	e7b6      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe fada 	bl	8001224 <HAL_GetTick>
 8002c70:	eba0 0008 	sub.w	r0, r0, r8
 8002c74:	2864      	cmp	r0, #100	; 0x64
 8002c76:	d9bb      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8002c78:	2603      	movs	r6, #3
 8002c7a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	07da      	lsls	r2, r3, #31
 8002c80:	d508      	bpl.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c82:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d03c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8002c88:	d826      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002c8a:	b35b      	cbz	r3, 8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d032      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8002c90:	2601      	movs	r6, #1
 8002c92:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	079b      	lsls	r3, r3, #30
 8002c98:	d54f      	bpl.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d862      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8002ca0:	e8df f003 	tbb	[pc, r3]
 8002ca4:	435b3e43 	.word	0x435b3e43
 8002ca8:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 8002caa:	f7fe fabb 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cae:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8002cb2:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002cbc:	0799      	lsls	r1, r3, #30
 8002cbe:	d4b3      	bmi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fab0 	bl	8001224 <HAL_GetTick>
 8002cc4:	1bc0      	subs	r0, r0, r7
 8002cc6:	4548      	cmp	r0, r9
 8002cc8:	d9f6      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002cca:	e7d5      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ccc:	690a      	ldr	r2, [r1, #16]
 8002cce:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002cd2:	e7b8      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002cd4:	4626      	mov	r6, r4
 8002cd6:	e7d1      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002cd8:	f023 0208 	bic.w	r2, r3, #8
 8002cdc:	2a20      	cmp	r2, #32
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002ce0:	2b18      	cmp	r3, #24
 8002ce2:	d1d5      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8002ce4:	b99c      	cbnz	r4, 8002d0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002ce8:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8002cea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002cec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6553      	str	r3, [r2, #84]	; 0x54
 8002cf4:	e7ce      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	1d28      	adds	r0, r5, #4
 8002cfa:	f7ff fc69 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cfe:	4604      	mov	r4, r0
      break;
 8002d00:	e7f0      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d02:	2101      	movs	r1, #1
 8002d04:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d08:	f7ff fcda 	bl	80026c0 <RCCEx_PLL3_Config>
 8002d0c:	e7f7      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8002d0e:	4626      	mov	r6, r4
 8002d10:	e7c0      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d12:	bf00      	nop
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58024800 	.word	0x58024800
 8002d1c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d20:	2101      	movs	r1, #1
 8002d22:	1d28      	adds	r0, r5, #4
 8002d24:	f7ff fc54 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d28:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002d2a:	b9fc      	cbnz	r4, 8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d2c:	4aa6      	ldr	r2, [pc, #664]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002d2e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8002d30:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002d32:	f023 0307 	bic.w	r3, r3, #7
 8002d36:	430b      	orrs	r3, r1
 8002d38:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d3a:	682b      	ldr	r3, [r5, #0]
 8002d3c:	075f      	lsls	r7, r3, #29
 8002d3e:	d527      	bpl.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d40:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	f200 8139 	bhi.w	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002d4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002d4e:	0016      	.short	0x0016
 8002d50:	01310011 	.word	0x01310011
 8002d54:	00160016 	.word	0x00160016
 8002d58:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d60:	f7ff fcae 	bl	80026c0 <RCCEx_PLL3_Config>
 8002d64:	e7e0      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d66:	2601      	movs	r6, #1
 8002d68:	4634      	mov	r4, r6
 8002d6a:	e7e6      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002d6c:	4626      	mov	r6, r4
 8002d6e:	e7e4      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d70:	2101      	movs	r1, #1
 8002d72:	1d28      	adds	r0, r5, #4
 8002d74:	f7ff fc2c 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d78:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002d7a:	2c00      	cmp	r4, #0
 8002d7c:	f040 8121 	bne.w	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d80:	4a91      	ldr	r2, [pc, #580]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002d82:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8002d86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d88:	f023 0307 	bic.w	r3, r3, #7
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	0698      	lsls	r0, r3, #26
 8002d94:	d510      	bpl.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d96:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d9e:	f000 812e 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002da2:	f200 8113 	bhi.w	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8119 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8002dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db0:	f000 811f 	beq.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002db4:	2601      	movs	r6, #1
 8002db6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	0659      	lsls	r1, r3, #25
 8002dbc:	d510      	bpl.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dbe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc6:	f000 813b 	beq.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8002dca:	f200 8120 	bhi.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8126 	beq.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	f000 812c 	beq.w	8003034 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8002ddc:	2601      	movs	r6, #1
 8002dde:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	061a      	lsls	r2, r3, #24
 8002de4:	d510      	bpl.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002de6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dee:	f000 8148 	beq.w	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8002df2:	f200 812d 	bhi.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8133 	beq.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8002dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e00:	f000 8139 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8002e04:	2601      	movs	r6, #1
 8002e06:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	071b      	lsls	r3, r3, #28
 8002e0c:	d514      	bpl.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e0e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	d107      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e18:	2102      	movs	r1, #2
 8002e1a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002e1e:	f7ff fc4f 	bl	80026c0 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002e22:	2800      	cmp	r0, #0
 8002e24:	bf18      	it	ne
 8002e26:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e28:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002e2a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8002e2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	06df      	lsls	r7, r3, #27
 8002e3c:	d514      	bpl.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002e3e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d107      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e48:	2102      	movs	r1, #2
 8002e4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002e4e:	f7ff fc37 	bl	80026c0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8002e52:	2800      	cmp	r0, #0
 8002e54:	bf18      	it	ne
 8002e56:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e58:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002e5a:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8002e5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	0318      	lsls	r0, r3, #12
 8002e6c:	d51a      	bpl.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8002e6e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8002e72:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002e76:	f000 810c 	beq.w	8003092 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e7a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002e7e:	d006      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8002e80:	2900      	cmp	r1, #0
 8002e82:	f040 810c 	bne.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e86:	1d28      	adds	r0, r5, #4
 8002e88:	f7ff fba2 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e8c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	f040 8108 	bne.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e94:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002e96:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8002e9a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e9c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	0359      	lsls	r1, r3, #13
 8002ea8:	d51c      	bpl.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 8002eaa:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb2:	f000 80f9 	beq.w	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8002eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec0:	f040 80f9 	bne.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec4:	4a40      	ldr	r2, [pc, #256]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002ec6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002ece:	2c00      	cmp	r4, #0
 8002ed0:	f040 80f4 	bne.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed4:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002ed6:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8002eda:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002edc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	03da      	lsls	r2, r3, #15
 8002ee8:	d509      	bpl.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002eea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80e7 	beq.w	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	f000 80f1 	beq.w	80030dc <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8002efa:	2601      	movs	r6, #1
 8002efc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002efe:	682b      	ldr	r3, [r5, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	d507      	bpl.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f04:	2102      	movs	r1, #2
 8002f06:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002f0a:	f7ff fbd9 	bl	80026c0 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	bf18      	it	ne
 8002f12:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	039f      	lsls	r7, r3, #14
 8002f18:	d50a      	bpl.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 8002f1a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002f1c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002f20:	f000 80f2 	beq.w	8003108 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8002f24:	f200 80e2 	bhi.w	80030ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	f000 80e5 	beq.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8002f2e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f30:	02dc      	lsls	r4, r3, #11
 8002f32:	d506      	bpl.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f34:	4924      	ldr	r1, [pc, #144]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f36:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8002f38:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002f3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f3e:	4302      	orrs	r2, r0
 8002f40:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f42:	00d8      	lsls	r0, r3, #3
 8002f44:	d507      	bpl.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f46:	4920      	ldr	r1, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f48:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8002f4c:	690a      	ldr	r2, [r1, #16]
 8002f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f52:	4302      	orrs	r2, r0
 8002f54:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f56:	0299      	lsls	r1, r3, #10
 8002f58:	d506      	bpl.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f5a:	491b      	ldr	r1, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f5c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8002f5e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002f60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f64:	4302      	orrs	r2, r0
 8002f66:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	d509      	bpl.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f6e:	6911      	ldr	r1, [r2, #16]
 8002f70:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002f74:	6111      	str	r1, [r2, #16]
 8002f76:	6911      	ldr	r1, [r2, #16]
 8002f78:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8002f7c:	4301      	orrs	r1, r0
 8002f7e:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da06      	bge.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f84:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f86:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002f88:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002f8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f8e:	4302      	orrs	r2, r0
 8002f90:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	d507      	bpl.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002f98:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8002f9c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002fa6:	1e30      	subs	r0, r6, #0
 8002fa8:	bf18      	it	ne
 8002faa:	2001      	movne	r0, #1
 8002fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002fb6:	f7ff fb83 	bl	80026c0 <RCCEx_PLL3_Config>
 8002fba:	e6dd      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fbc:	2601      	movs	r6, #1
 8002fbe:	4634      	mov	r4, r6
 8002fc0:	e6e6      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8002fc2:	4626      	mov	r6, r4
 8002fc4:	e6e4      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8002fc6:	bf00      	nop
 8002fc8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fcc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fd0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8002fd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fda:	f47f aeeb 	bne.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8002fde:	b9a4      	cbnz	r4, 800300a <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002fe2:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8002fe6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fe8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6553      	str	r3, [r2, #84]	; 0x54
 8002ff0:	e6e2      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	1d28      	adds	r0, r5, #4
 8002ff6:	f7ff faeb 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ffa:	4604      	mov	r4, r0
      break;
 8002ffc:	e7ef      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ffe:	2102      	movs	r1, #2
 8003000:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003004:	f7ff fb5c 	bl	80026c0 <RCCEx_PLL3_Config>
 8003008:	e7f7      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800300a:	4626      	mov	r6, r4
 800300c:	e6d4      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800300e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003012:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003016:	d003      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8003018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800301c:	f47f aede 	bne.w	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8003020:	b9a4      	cbnz	r4, 800304c <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003022:	4a3d      	ldr	r2, [pc, #244]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8003024:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8003028:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800302a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800302e:	430b      	orrs	r3, r1
 8003030:	6593      	str	r3, [r2, #88]	; 0x58
 8003032:	e6d5      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003034:	2100      	movs	r1, #0
 8003036:	1d28      	adds	r0, r5, #4
 8003038:	f7ff faca 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800303c:	4604      	mov	r4, r0
      break;
 800303e:	e7ef      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003040:	2102      	movs	r1, #2
 8003042:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003046:	f7ff fb3b 	bl	80026c0 <RCCEx_PLL3_Config>
 800304a:	e7f7      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800304c:	4626      	mov	r6, r4
 800304e:	e6c7      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003054:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800305a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800305e:	f47f aed1 	bne.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 8003062:	b9a4      	cbnz	r4, 800308e <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003064:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8003066:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800306a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800306c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003070:	430b      	orrs	r3, r1
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	e6c8      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003076:	2100      	movs	r1, #0
 8003078:	1d28      	adds	r0, r5, #4
 800307a:	f7ff faa9 	bl	80025d0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800307e:	4604      	mov	r4, r0
      break;
 8003080:	e7ef      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003082:	2102      	movs	r1, #2
 8003084:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003088:	f7ff fb1a 	bl	80026c0 <RCCEx_PLL3_Config>
 800308c:	e7f7      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800308e:	4626      	mov	r6, r4
 8003090:	e6ba      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003092:	2102      	movs	r1, #2
 8003094:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003098:	f7ff fb12 	bl	80026c0 <RCCEx_PLL3_Config>
 800309c:	e6f6      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 800309e:	2601      	movs	r6, #1
 80030a0:	4634      	mov	r4, r6
 80030a2:	e6ff      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80030a4:	4626      	mov	r6, r4
 80030a6:	e6fd      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030a8:	2101      	movs	r1, #1
 80030aa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80030ae:	f7ff fb07 	bl	80026c0 <RCCEx_PLL3_Config>
 80030b2:	4604      	mov	r4, r0
      break;
 80030b4:	e70b      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 80030b6:	2601      	movs	r6, #1
 80030b8:	4634      	mov	r4, r6
 80030ba:	e713      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x734>
 80030bc:	4626      	mov	r6, r4
 80030be:	e711      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80030c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80030ca:	b96c      	cbnz	r4, 80030e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80030ce:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80030d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	430b      	orrs	r3, r1
 80030d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030da:	e710      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030dc:	2102      	movs	r1, #2
 80030de:	1d28      	adds	r0, r5, #4
 80030e0:	f7ff fa76 	bl	80025d0 <RCCEx_PLL2_Config>
 80030e4:	4604      	mov	r4, r0
      break;
 80030e6:	e7f0      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x91a>
 80030e8:	4626      	mov	r6, r4
 80030ea:	e708      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 80030ec:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80030f0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80030f4:	f47f af1b 	bne.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 80030f8:	b964      	cbnz	r4, 8003114 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030fa:	4807      	ldr	r0, [pc, #28]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80030fc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80030fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003102:	430a      	orrs	r2, r1
 8003104:	6542      	str	r2, [r0, #84]	; 0x54
 8003106:	e713      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4803      	ldr	r0, [pc, #12]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800310a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800310c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003110:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8003112:	e7f1      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8003114:	4626      	mov	r6, r4
 8003116:	e70b      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8003118:	58024400 	.word	0x58024400

0800311c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800311c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800311e:	f7ff fa11 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003124:	4a05      	ldr	r2, [pc, #20]	; (800313c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
}
 8003132:	40d8      	lsrs	r0, r3
 8003134:	bd08      	pop	{r3, pc}
 8003136:	bf00      	nop
 8003138:	58024400 	.word	0x58024400
 800313c:	080147a4 	.word	0x080147a4

08003140 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003140:	4a4e      	ldr	r2, [pc, #312]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8003142:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003144:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003146:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003148:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800314a:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800314e:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003152:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8003154:	f000 808d 	beq.w	8003272 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003158:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800315c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003160:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003164:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003168:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800316c:	434b      	muls	r3, r1
    switch (pllsource)
 800316e:	2c01      	cmp	r4, #1
 8003170:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003174:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003178:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 800317c:	d06b      	beq.n	8003256 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 800317e:	2c02      	cmp	r4, #2
 8003180:	d05b      	beq.n	800323a <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8003182:	2c00      	cmp	r4, #0
 8003184:	d167      	bne.n	8003256 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	d546      	bpl.n	800321a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800318c:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800318e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003190:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003194:	4a3a      	ldr	r2, [pc, #232]	; (8003280 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800319a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800319c:	ee07 2a10 	vmov	s14, r2
 80031a0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80031a4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80031a8:	ee06 3a90 	vmov	s13, r3
 80031ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80031b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b4:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031b8:	4a30      	ldr	r2, [pc, #192]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80031c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80031c4:	ee07 3a10 	vmov	s14, r3
 80031c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80031d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80031d8:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80031dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80031de:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80031e2:	ee07 3a10 	vmov	s14, r3
 80031e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 80031ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80031f6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80031fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80031fc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003200:	ee07 3a10 	vmov	s14, r3
 8003204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003208:	ee37 6a06 	vadd.f32	s12, s14, s12
 800320c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003210:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003214:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003218:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800321a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800321c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003224:	ee07 3a10 	vmov	s14, r3
 8003228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800322c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003230:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003234:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003238:	e7be      	b.n	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800323a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800323c:	eddf 5a12 	vldr	s11, [pc, #72]	; 8003288 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	ee07 3a10 	vmov	s14, r3
 8003248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003254:	e7ee      	b.n	8003234 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003256:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003258:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800328c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	ee07 3a10 	vmov	s14, r3
 8003264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003270:	e7e0      	b.n	8003234 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003272:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003276:	6081      	str	r1, [r0, #8]
}
 8003278:	e7ce      	b.n	8003218 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	03d09000 	.word	0x03d09000
 8003284:	4c742400 	.word	0x4c742400
 8003288:	4af42400 	.word	0x4af42400
 800328c:	4a742400 	.word	0x4a742400

08003290 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003290:	4a4e      	ldr	r2, [pc, #312]	; (80033cc <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8003292:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003294:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003296:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003298:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800329a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800329e:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032a2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80032a4:	f000 808d 	beq.w	80033c2 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032a8:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032ac:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80032b0:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032b4:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032bc:	434b      	muls	r3, r1
    switch (pllsource)
 80032be:	2c01      	cmp	r4, #1
 80032c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032c4:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032c8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80032cc:	d06b      	beq.n	80033a6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 80032ce:	2c02      	cmp	r4, #2
 80032d0:	d05b      	beq.n	800338a <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d167      	bne.n	80033a6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	069b      	lsls	r3, r3, #26
 80032da:	d546      	bpl.n	800336a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032dc:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032de:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032e0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80032e4:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032ea:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032ec:	ee07 2a10 	vmov	s14, r2
 80032f0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80032f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80032f8:	ee06 3a90 	vmov	s13, r3
 80032fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003304:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003308:	4a30      	ldr	r2, [pc, #192]	; (80033cc <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800330a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800330e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003310:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003314:	ee07 3a10 	vmov	s14, r3
 8003318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800331c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003324:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003328:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800332c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800332e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003332:	ee07 3a10 	vmov	s14, r3
 8003336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800333a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800333e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003342:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003346:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800334a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800334c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003350:	ee07 3a10 	vmov	s14, r3
 8003354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003358:	ee37 6a06 	vadd.f32	s12, s14, s12
 800335c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003360:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003364:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003368:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800336a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800336c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80033d4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003374:	ee07 3a10 	vmov	s14, r3
 8003378:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003384:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003388:	e7be      	b.n	8003308 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800338a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800338c:	eddf 5a12 	vldr	s11, [pc, #72]	; 80033d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003394:	ee07 3a10 	vmov	s14, r3
 8003398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80033a4:	e7ee      	b.n	8003384 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80033a8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80033dc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	ee07 3a10 	vmov	s14, r3
 80033b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80033c0:	e7e0      	b.n	8003384 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80033c2:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80033c6:	6081      	str	r1, [r0, #8]
}
 80033c8:	e7ce      	b.n	8003368 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80033ca:	bf00      	nop
 80033cc:	58024400 	.word	0x58024400
 80033d0:	03d09000 	.word	0x03d09000
 80033d4:	4c742400 	.word	0x4c742400
 80033d8:	4af42400 	.word	0x4af42400
 80033dc:	4a742400 	.word	0x4a742400

080033e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b530      	push	{r4, r5, lr}
 80033e2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80033e4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e6:	69c0      	ldr	r0, [r0, #28]
{
 80033e8:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ea:	6921      	ldr	r1, [r4, #16]
 80033ec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ee:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	430a      	orrs	r2, r1
 80033f2:	6961      	ldr	r1, [r4, #20]
 80033f4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f6:	4997      	ldr	r1, [pc, #604]	; (8003654 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033fa:	4029      	ands	r1, r5
 80033fc:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033fe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003400:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003408:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800340e:	4a92      	ldr	r2, [pc, #584]	; (8003658 <UART_SetConfig+0x278>)
 8003410:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003412:	bf1c      	itt	ne
 8003414:	6a22      	ldrne	r2, [r4, #32]
 8003416:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800341e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003422:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003424:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003426:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	f022 020f 	bic.w	r2, r2, #15
 800342e:	430a      	orrs	r2, r1
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003432:	4a8a      	ldr	r2, [pc, #552]	; (800365c <UART_SetConfig+0x27c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d11b      	bne.n	8003470 <UART_SetConfig+0x90>
 8003438:	4b89      	ldr	r3, [pc, #548]	; (8003660 <UART_SetConfig+0x280>)
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003440:	2b28      	cmp	r3, #40	; 0x28
 8003442:	d86c      	bhi.n	800351e <UART_SetConfig+0x13e>
 8003444:	4a87      	ldr	r2, [pc, #540]	; (8003664 <UART_SetConfig+0x284>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003446:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	f040 8132 	bne.w	80036b4 <UART_SetConfig+0x2d4>
  {
    switch (clocksource)
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80c0 	bhi.w	80035d6 <UART_SetConfig+0x1f6>
 8003456:	2b08      	cmp	r3, #8
 8003458:	d861      	bhi.n	800351e <UART_SetConfig+0x13e>
 800345a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800345e:	00e7      	.short	0x00e7
 8003460:	006000ec 	.word	0x006000ec
 8003464:	00ef0060 	.word	0x00ef0060
 8003468:	00600060 	.word	0x00600060
 800346c:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003470:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <UART_SetConfig+0x288>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d107      	bne.n	8003486 <UART_SetConfig+0xa6>
 8003476:	4b7a      	ldr	r3, [pc, #488]	; (8003660 <UART_SetConfig+0x280>)
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	2b05      	cmp	r3, #5
 8003480:	d84d      	bhi.n	800351e <UART_SetConfig+0x13e>
 8003482:	4a7a      	ldr	r2, [pc, #488]	; (800366c <UART_SetConfig+0x28c>)
 8003484:	e7df      	b.n	8003446 <UART_SetConfig+0x66>
 8003486:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <UART_SetConfig+0x290>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d107      	bne.n	800349c <UART_SetConfig+0xbc>
 800348c:	4b74      	ldr	r3, [pc, #464]	; (8003660 <UART_SetConfig+0x280>)
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	2b05      	cmp	r3, #5
 8003496:	d842      	bhi.n	800351e <UART_SetConfig+0x13e>
 8003498:	4a76      	ldr	r2, [pc, #472]	; (8003674 <UART_SetConfig+0x294>)
 800349a:	e7d4      	b.n	8003446 <UART_SetConfig+0x66>
 800349c:	4a76      	ldr	r2, [pc, #472]	; (8003678 <UART_SetConfig+0x298>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d107      	bne.n	80034b2 <UART_SetConfig+0xd2>
 80034a2:	4b6f      	ldr	r3, [pc, #444]	; (8003660 <UART_SetConfig+0x280>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d837      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <UART_SetConfig+0x29c>)
 80034b0:	e7c9      	b.n	8003446 <UART_SetConfig+0x66>
 80034b2:	4a73      	ldr	r2, [pc, #460]	; (8003680 <UART_SetConfig+0x2a0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d107      	bne.n	80034c8 <UART_SetConfig+0xe8>
 80034b8:	4b69      	ldr	r3, [pc, #420]	; (8003660 <UART_SetConfig+0x280>)
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d82c      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034c4:	4a6f      	ldr	r2, [pc, #444]	; (8003684 <UART_SetConfig+0x2a4>)
 80034c6:	e7be      	b.n	8003446 <UART_SetConfig+0x66>
 80034c8:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <UART_SetConfig+0x2a8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d107      	bne.n	80034de <UART_SetConfig+0xfe>
 80034ce:	4b64      	ldr	r3, [pc, #400]	; (8003660 <UART_SetConfig+0x280>)
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d6:	2b28      	cmp	r3, #40	; 0x28
 80034d8:	d821      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034da:	4a6c      	ldr	r2, [pc, #432]	; (800368c <UART_SetConfig+0x2ac>)
 80034dc:	e7b3      	b.n	8003446 <UART_SetConfig+0x66>
 80034de:	4a6c      	ldr	r2, [pc, #432]	; (8003690 <UART_SetConfig+0x2b0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d107      	bne.n	80034f4 <UART_SetConfig+0x114>
 80034e4:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <UART_SetConfig+0x280>)
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	d816      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034f0:	4a68      	ldr	r2, [pc, #416]	; (8003694 <UART_SetConfig+0x2b4>)
 80034f2:	e7a8      	b.n	8003446 <UART_SetConfig+0x66>
 80034f4:	4a68      	ldr	r2, [pc, #416]	; (8003698 <UART_SetConfig+0x2b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d107      	bne.n	800350a <UART_SetConfig+0x12a>
 80034fa:	4b59      	ldr	r3, [pc, #356]	; (8003660 <UART_SetConfig+0x280>)
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b05      	cmp	r3, #5
 8003504:	d80b      	bhi.n	800351e <UART_SetConfig+0x13e>
 8003506:	4a65      	ldr	r2, [pc, #404]	; (800369c <UART_SetConfig+0x2bc>)
 8003508:	e79d      	b.n	8003446 <UART_SetConfig+0x66>
 800350a:	4a53      	ldr	r2, [pc, #332]	; (8003658 <UART_SetConfig+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d106      	bne.n	800351e <UART_SetConfig+0x13e>
 8003510:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003514:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	2b05      	cmp	r3, #5
 800351c:	d901      	bls.n	8003522 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351e:	2001      	movs	r0, #1
 8003520:	e00e      	b.n	8003540 <UART_SetConfig+0x160>
 8003522:	495f      	ldr	r1, [pc, #380]	; (80036a0 <UART_SetConfig+0x2c0>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8003526:	2b10      	cmp	r3, #16
 8003528:	d023      	beq.n	8003572 <UART_SetConfig+0x192>
 800352a:	d811      	bhi.n	8003550 <UART_SetConfig+0x170>
 800352c:	2b04      	cmp	r3, #4
 800352e:	d016      	beq.n	800355e <UART_SetConfig+0x17e>
 8003530:	2b08      	cmp	r3, #8
 8003532:	d019      	beq.n	8003568 <UART_SetConfig+0x188>
 8003534:	2b02      	cmp	r3, #2
 8003536:	d1f2      	bne.n	800351e <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003538:	f7ff fdf0 	bl	800311c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800353c:	bb10      	cbnz	r0, 8003584 <UART_SetConfig+0x1a4>
 800353e:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8003540:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003544:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003546:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003548:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 800354c:	b007      	add	sp, #28
 800354e:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8003550:	2b20      	cmp	r3, #32
 8003552:	d03e      	beq.n	80035d2 <UART_SetConfig+0x1f2>
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d1e2      	bne.n	800351e <UART_SetConfig+0x13e>
 8003558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800355c:	e012      	b.n	8003584 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800355e:	4668      	mov	r0, sp
 8003560:	f7ff fdee 	bl	8003140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003564:	9801      	ldr	r0, [sp, #4]
        break;
 8003566:	e7e9      	b.n	800353c <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003568:	a803      	add	r0, sp, #12
 800356a:	f7ff fe91 	bl	8003290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800356e:	9804      	ldr	r0, [sp, #16]
        break;
 8003570:	e7e4      	b.n	800353c <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	484b      	ldr	r0, [pc, #300]	; (80036a4 <UART_SetConfig+0x2c4>)
 8003576:	f013 0f20 	tst.w	r3, #32
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003582:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003584:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <UART_SetConfig+0x2c8>)
 8003586:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003588:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800358a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800358e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003592:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003596:	4299      	cmp	r1, r3
 8003598:	d8c1      	bhi.n	800351e <UART_SetConfig+0x13e>
 800359a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800359e:	d8be      	bhi.n	800351e <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a0:	2300      	movs	r3, #0
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fd f802 	bl	80005ac <__aeabi_uldivmod>
 80035a8:	462a      	mov	r2, r5
 80035aa:	0209      	lsls	r1, r1, #8
 80035ac:	086b      	lsrs	r3, r5, #1
 80035ae:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80035b2:	0200      	lsls	r0, r0, #8
 80035b4:	18c0      	adds	r0, r0, r3
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	f141 0100 	adc.w	r1, r1, #0
 80035be:	f7fc fff5 	bl	80005ac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <UART_SetConfig+0x2cc>)
 80035c4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d8a8      	bhi.n	800351e <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	60d8      	str	r0, [r3, #12]
 80035d0:	e7b5      	b.n	800353e <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 80035d2:	4837      	ldr	r0, [pc, #220]	; (80036b0 <UART_SetConfig+0x2d0>)
 80035d4:	e7d6      	b.n	8003584 <UART_SetConfig+0x1a4>
    switch (clocksource)
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d03a      	beq.n	8003650 <UART_SetConfig+0x270>
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d00b      	beq.n	80035f6 <UART_SetConfig+0x216>
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d19d      	bne.n	800351e <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <UART_SetConfig+0x280>)
 80035e4:	482f      	ldr	r0, [pc, #188]	; (80036a4 <UART_SetConfig+0x2c4>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f012 0f20 	tst.w	r2, #32
 80035ec:	d003      	beq.n	80035f6 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80035f4:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <UART_SetConfig+0x2c8>)
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003600:	fbb0 f3f3 	udiv	r3, r0, r3
 8003604:	0850      	lsrs	r0, r2, #1
 8003606:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800360e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003612:	f1a0 0210 	sub.w	r2, r0, #16
 8003616:	429a      	cmp	r2, r3
 8003618:	d881      	bhi.n	800351e <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800361a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800361e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003622:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003624:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003626:	4318      	orrs	r0, r3
 8003628:	60d0      	str	r0, [r2, #12]
 800362a:	e788      	b.n	800353e <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe ffac 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003630:	2800      	cmp	r0, #0
 8003632:	d084      	beq.n	800353e <UART_SetConfig+0x15e>
 8003634:	e7df      	b.n	80035f6 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003636:	f7fe ffb9 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
        break;
 800363a:	e7f9      	b.n	8003630 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800363c:	4668      	mov	r0, sp
 800363e:	f7ff fd7f 	bl	8003140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003642:	9801      	ldr	r0, [sp, #4]
        break;
 8003644:	e7f4      	b.n	8003630 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003646:	a803      	add	r0, sp, #12
 8003648:	f7ff fe22 	bl	8003290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800364c:	9804      	ldr	r0, [sp, #16]
        break;
 800364e:	e7ef      	b.n	8003630 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8003650:	4817      	ldr	r0, [pc, #92]	; (80036b0 <UART_SetConfig+0x2d0>)
 8003652:	e7d0      	b.n	80035f6 <UART_SetConfig+0x216>
 8003654:	cfff69f3 	.word	0xcfff69f3
 8003658:	58000c00 	.word	0x58000c00
 800365c:	40011000 	.word	0x40011000
 8003660:	58024400 	.word	0x58024400
 8003664:	080147b4 	.word	0x080147b4
 8003668:	40004400 	.word	0x40004400
 800366c:	080147dd 	.word	0x080147dd
 8003670:	40004800 	.word	0x40004800
 8003674:	080147dd 	.word	0x080147dd
 8003678:	40004c00 	.word	0x40004c00
 800367c:	080147dd 	.word	0x080147dd
 8003680:	40005000 	.word	0x40005000
 8003684:	080147dd 	.word	0x080147dd
 8003688:	40011400 	.word	0x40011400
 800368c:	080147b4 	.word	0x080147b4
 8003690:	40007800 	.word	0x40007800
 8003694:	080147dd 	.word	0x080147dd
 8003698:	40007c00 	.word	0x40007c00
 800369c:	080147dd 	.word	0x080147dd
 80036a0:	080147e3 	.word	0x080147e3
 80036a4:	03d09000 	.word	0x03d09000
 80036a8:	080147ea 	.word	0x080147ea
 80036ac:	000ffcff 	.word	0x000ffcff
 80036b0:	003d0900 	.word	0x003d0900
    switch (clocksource)
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d817      	bhi.n	80036e8 <UART_SetConfig+0x308>
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	f63f af30 	bhi.w	800351e <UART_SetConfig+0x13e>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0x2e4>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	0800372b 	.word	0x0800372b
 80036c8:	08003737 	.word	0x08003737
 80036cc:	0800351f 	.word	0x0800351f
 80036d0:	0800351f 	.word	0x0800351f
 80036d4:	0800373d 	.word	0x0800373d
 80036d8:	0800351f 	.word	0x0800351f
 80036dc:	0800351f 	.word	0x0800351f
 80036e0:	0800351f 	.word	0x0800351f
 80036e4:	08003747 	.word	0x08003747
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d031      	beq.n	8003750 <UART_SetConfig+0x370>
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d031      	beq.n	8003754 <UART_SetConfig+0x374>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	f47f af14 	bne.w	800351e <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <UART_SetConfig+0x37c>)
 80036f8:	4819      	ldr	r0, [pc, #100]	; (8003760 <UART_SetConfig+0x380>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f012 0f20 	tst.w	r2, #32
 8003700:	d003      	beq.n	800370a <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003708:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800370a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <UART_SetConfig+0x384>)
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003714:	fbb0 f0f2 	udiv	r0, r0, r2
 8003718:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800371c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003720:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003724:	f1a0 0210 	sub.w	r2, r0, #16
 8003728:	e74e      	b.n	80035c8 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800372a:	f7fe ff2d 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800372e:	2800      	cmp	r0, #0
 8003730:	f43f af05 	beq.w	800353e <UART_SetConfig+0x15e>
 8003734:	e7e9      	b.n	800370a <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003736:	f7fe ff39 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
        break;
 800373a:	e7f8      	b.n	800372e <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800373c:	4668      	mov	r0, sp
 800373e:	f7ff fcff 	bl	8003140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003742:	9801      	ldr	r0, [sp, #4]
        break;
 8003744:	e7f3      	b.n	800372e <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003746:	a803      	add	r0, sp, #12
 8003748:	f7ff fda2 	bl	8003290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800374c:	9804      	ldr	r0, [sp, #16]
        break;
 800374e:	e7ee      	b.n	800372e <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <UART_SetConfig+0x388>)
 8003752:	e7da      	b.n	800370a <UART_SetConfig+0x32a>
    switch (clocksource)
 8003754:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003758:	e7d7      	b.n	800370a <UART_SetConfig+0x32a>
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
 8003760:	03d09000 	.word	0x03d09000
 8003764:	080147ea 	.word	0x080147ea
 8003768:	003d0900 	.word	0x003d0900

0800376c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800376c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800376e:	07da      	lsls	r2, r3, #31
{
 8003770:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003772:	d506      	bpl.n	8003782 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003774:	6801      	ldr	r1, [r0, #0]
 8003776:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003778:	684a      	ldr	r2, [r1, #4]
 800377a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800377e:	4322      	orrs	r2, r4
 8003780:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003782:	079c      	lsls	r4, r3, #30
 8003784:	d506      	bpl.n	8003794 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003786:	6801      	ldr	r1, [r0, #0]
 8003788:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800378a:	684a      	ldr	r2, [r1, #4]
 800378c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003790:	4322      	orrs	r2, r4
 8003792:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003794:	0759      	lsls	r1, r3, #29
 8003796:	d506      	bpl.n	80037a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003798:	6801      	ldr	r1, [r0, #0]
 800379a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800379c:	684a      	ldr	r2, [r1, #4]
 800379e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037a2:	4322      	orrs	r2, r4
 80037a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	071a      	lsls	r2, r3, #28
 80037a8:	d506      	bpl.n	80037b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037aa:	6801      	ldr	r1, [r0, #0]
 80037ac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80037ae:	684a      	ldr	r2, [r1, #4]
 80037b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b4:	4322      	orrs	r2, r4
 80037b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b8:	06dc      	lsls	r4, r3, #27
 80037ba:	d506      	bpl.n	80037ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037bc:	6801      	ldr	r1, [r0, #0]
 80037be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80037c0:	688a      	ldr	r2, [r1, #8]
 80037c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c6:	4322      	orrs	r2, r4
 80037c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ca:	0699      	lsls	r1, r3, #26
 80037cc:	d506      	bpl.n	80037dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ce:	6801      	ldr	r1, [r0, #0]
 80037d0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80037d2:	688a      	ldr	r2, [r1, #8]
 80037d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d8:	4322      	orrs	r2, r4
 80037da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037dc:	065a      	lsls	r2, r3, #25
 80037de:	d510      	bpl.n	8003802 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e0:	6801      	ldr	r1, [r0, #0]
 80037e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80037e4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037e6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80037ee:	ea42 0204 	orr.w	r2, r2, r4
 80037f2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037f4:	d105      	bne.n	8003802 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f6:	684a      	ldr	r2, [r1, #4]
 80037f8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80037fa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80037fe:	4322      	orrs	r2, r4
 8003800:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003802:	061b      	lsls	r3, r3, #24
 8003804:	d506      	bpl.n	8003814 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003806:	6802      	ldr	r2, [r0, #0]
 8003808:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800380a:	6853      	ldr	r3, [r2, #4]
 800380c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003810:	430b      	orrs	r3, r1
 8003812:	6053      	str	r3, [r2, #4]
  }
}
 8003814:	bd10      	pop	{r4, pc}

08003816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800381e:	4604      	mov	r4, r0
 8003820:	460e      	mov	r6, r1
 8003822:	4615      	mov	r5, r2
 8003824:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	69d3      	ldr	r3, [r2, #28]
 800382a:	ea36 0303 	bics.w	r3, r6, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	42ab      	cmp	r3, r5
 8003836:	d001      	beq.n	800383c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2000      	movs	r0, #0
 800383a:	e027      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800383c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003840:	d0f2      	beq.n	8003828 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fd fcef 	bl	8001224 <HAL_GetTick>
 8003846:	1bc0      	subs	r0, r0, r7
 8003848:	4540      	cmp	r0, r8
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	d802      	bhi.n	8003854 <UART_WaitOnFlagUntilTimeout+0x3e>
 800384e:	f1b8 0f00 	cmp.w	r8, #0
 8003852:	d11d      	bne.n	8003890 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	e840 3200 	strex	r2, r3, [r0]
 8003860:	2a00      	cmp	r2, #0
 8003862:	d1f7      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f100 0308 	add.w	r3, r0, #8
 8003868:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	f100 0108 	add.w	r1, r0, #8
 8003874:	e841 3200 	strex	r2, r3, [r1]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d1f3      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800387c:	2320      	movs	r3, #32
 800387e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003882:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8003886:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003888:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 800388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	075a      	lsls	r2, r3, #29
 8003894:	d5c7      	bpl.n	8003826 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003896:	69c3      	ldr	r3, [r0, #28]
 8003898:	051b      	lsls	r3, r3, #20
 800389a:	d5c4      	bpl.n	8003826 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a0:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	e840 3200 	strex	r2, r3, [r0]
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	d1f7      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	f100 0308 	add.w	r3, r0, #8
 80038b6:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f100 0108 	add.w	r1, r0, #8
 80038c2:	e841 3200 	strex	r2, r3, [r1]
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d1f3      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 80038ca:	2320      	movs	r3, #32
 80038cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80038d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80038d8:	e7d5      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0x70>

080038da <HAL_UART_Transmit>:
{
 80038da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80038de:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80038e4:	4604      	mov	r4, r0
 80038e6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80038e8:	2b20      	cmp	r3, #32
{
 80038ea:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80038ec:	d150      	bne.n	8003990 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 80038ee:	2900      	cmp	r1, #0
 80038f0:	d04c      	beq.n	800398c <HAL_UART_Transmit+0xb2>
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d04a      	beq.n	800398c <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80038f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d048      	beq.n	8003990 <HAL_UART_Transmit+0xb6>
 80038fe:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003902:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003906:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003910:	f7fd fc88 	bl	8001224 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003916:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8003918:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003920:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	d103      	bne.n	800392e <HAL_UART_Transmit+0x54>
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	b90a      	cbnz	r2, 800392e <HAL_UART_Transmit+0x54>
 800392a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800392c:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800392e:	2200      	movs	r2, #0
 8003930:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8003934:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003938:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800393c:	b292      	uxth	r2, r2
 800393e:	b942      	cbnz	r2, 8003952 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4620      	mov	r0, r4
 8003944:	f7ff ff67 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 8003948:	b958      	cbnz	r0, 8003962 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800394a:	2320      	movs	r3, #32
 800394c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8003950:	e008      	b.n	8003964 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	4620      	mov	r0, r4
 8003958:	9303      	str	r3, [sp, #12]
 800395a:	f7ff ff5c 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 800395e:	9b03      	ldr	r3, [sp, #12]
 8003960:	b118      	cbz	r0, 800396a <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8003962:	2003      	movs	r0, #3
}
 8003964:	b004      	add	sp, #16
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396a:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800396c:	b95e      	cbnz	r6, 8003986 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003972:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003976:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003978:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800397c:	3a01      	subs	r2, #1
 800397e:	b292      	uxth	r2, r2
 8003980:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8003984:	e7d6      	b.n	8003934 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003986:	f816 2b01 	ldrb.w	r2, [r6], #1
 800398a:	e7f4      	b.n	8003976 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7e9      	b.n	8003964 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8003990:	2002      	movs	r0, #2
 8003992:	e7e7      	b.n	8003964 <HAL_UART_Transmit+0x8a>

08003994 <HAL_UART_Receive>:
{
 8003994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003998:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800399a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800399e:	4604      	mov	r4, r0
 80039a0:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a2:	2b20      	cmp	r3, #32
{
 80039a4:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a6:	d16a      	bne.n	8003a7e <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d066      	beq.n	8003a7a <HAL_UART_Receive+0xe6>
 80039ac:	2a00      	cmp	r2, #0
 80039ae:	d064      	beq.n	8003a7a <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 80039b0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d062      	beq.n	8003a7e <HAL_UART_Receive+0xea>
 80039b8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 80039be:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c2:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80039d0:	f7fd fc28 	bl	8001224 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80039d4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80039d6:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 80039d8:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80039e0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 80039e4:	d11d      	bne.n	8003a22 <HAL_UART_Receive+0x8e>
 80039e6:	6922      	ldr	r2, [r4, #16]
 80039e8:	b9ca      	cbnz	r2, 8003a1e <HAL_UART_Receive+0x8a>
 80039ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039ee:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 80039f6:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fa:	d123      	bne.n	8003a44 <HAL_UART_Receive+0xb0>
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	bb0b      	cbnz	r3, 8003a44 <HAL_UART_Receive+0xb0>
 8003a00:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8003a02:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8003a04:	2300      	movs	r3, #0
 8003a06:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8003a0a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003a0e:	b290      	uxth	r0, r2
 8003a10:	b9d0      	cbnz	r0, 8003a48 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 8003a12:	2320      	movs	r3, #32
 8003a14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8003a18:	b003      	add	sp, #12
 8003a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8003a1e:	22ff      	movs	r2, #255	; 0xff
 8003a20:	e7e5      	b.n	80039ee <HAL_UART_Receive+0x5a>
 8003a22:	b923      	cbnz	r3, 8003a2e <HAL_UART_Receive+0x9a>
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d0f9      	beq.n	8003a1e <HAL_UART_Receive+0x8a>
 8003a2a:	227f      	movs	r2, #127	; 0x7f
 8003a2c:	e7df      	b.n	80039ee <HAL_UART_Receive+0x5a>
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_Receive+0xaa>
 8003a34:	6922      	ldr	r2, [r4, #16]
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d0f7      	beq.n	8003a2a <HAL_UART_Receive+0x96>
 8003a3a:	223f      	movs	r2, #63	; 0x3f
 8003a3c:	e7d7      	b.n	80039ee <HAL_UART_Receive+0x5a>
 8003a3e:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8003a42:	e7d6      	b.n	80039f2 <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 8003a44:	2600      	movs	r6, #0
 8003a46:	e7dd      	b.n	8003a04 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a48:	464b      	mov	r3, r9
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	4620      	mov	r0, r4
 8003a50:	9700      	str	r7, [sp, #0]
 8003a52:	f7ff fee0 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 8003a56:	b9a0      	cbnz	r0, 8003a82 <HAL_UART_Receive+0xee>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8003a60:	b945      	cbnz	r5, 8003a74 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a62:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8003a66:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003a6a:	3a01      	subs	r2, #1
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8003a72:	e7ca      	b.n	8003a0a <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a74:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8003a78:	e7f5      	b.n	8003a66 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7cc      	b.n	8003a18 <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8003a7e:	2002      	movs	r0, #2
 8003a80:	e7ca      	b.n	8003a18 <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 8003a82:	2003      	movs	r0, #3
 8003a84:	e7c8      	b.n	8003a18 <HAL_UART_Receive+0x84>

08003a86 <UART_CheckIdleState>:
{
 8003a86:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	2500      	movs	r5, #0
{
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8e:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003a92:	f7fd fbc7 	bl	8001224 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003a98:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	0711      	lsls	r1, r2, #28
 8003a9e:	d417      	bmi.n	8003ad0 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	0752      	lsls	r2, r2, #29
 8003aa6:	d509      	bpl.n	8003abc <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003aac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	9200      	str	r2, [sp, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f7ff feae 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 8003aba:	b9b0      	cbnz	r0, 8003aea <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003ac4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8003ace:	e00d      	b.n	8003aec <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003ad4:	9003      	str	r0, [sp, #12]
 8003ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ada:	4620      	mov	r0, r4
 8003adc:	9200      	str	r2, [sp, #0]
 8003ade:	462a      	mov	r2, r5
 8003ae0:	f7ff fe99 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d0da      	beq.n	8003aa0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003aea:	2003      	movs	r0, #3
}
 8003aec:	b005      	add	sp, #20
 8003aee:	bd30      	pop	{r4, r5, pc}

08003af0 <HAL_UART_Init>:
{
 8003af0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003af2:	4604      	mov	r4, r0
 8003af4:	b350      	cbz	r0, 8003b4c <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003afa:	b91b      	cbnz	r3, 8003b04 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003afc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8003b00:	f7fd fa3a 	bl	8000f78 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003b04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b06:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b08:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003b0a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b16:	f7ff fc63 	bl	80033e0 <UART_SetConfig>
 8003b1a:	2801      	cmp	r0, #1
 8003b1c:	d016      	beq.n	8003b4c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b20:	b113      	cbz	r3, 8003b28 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003b22:	4620      	mov	r0, r4
 8003b24:	f7ff fe22 	bl	800376c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b28:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003b2a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
}
 8003b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003b46:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003b48:	f7ff bf9d 	b.w	8003a86 <UART_CheckIdleState>
}
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b50:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003b52:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b54:	b91b      	cbnz	r3, 8003b5e <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8003b56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003b5a:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b5c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b5e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b60:	4d0a      	ldr	r5, [pc, #40]	; (8003b8c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b62:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b64:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b66:	4c0a      	ldr	r4, [pc, #40]	; (8003b90 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b68:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b6c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b6e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b70:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b78:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b7c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b7e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b86:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8003b8a:	e7e7      	b.n	8003b5c <UARTEx_SetNbDataToProcess+0xc>
 8003b8c:	0801480a 	.word	0x0801480a
 8003b90:	08014802 	.word	0x08014802

08003b94 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003b94:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d014      	beq.n	8003bc6 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b9e:	2324      	movs	r3, #36	; 0x24
 8003ba0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003ba6:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ba8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003bba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003bc6:	2002      	movs	r0, #2
}
 8003bc8:	4770      	bx	lr

08003bca <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003bca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003bcc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8003bd0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d01b      	beq.n	8003c0e <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	2324      	movs	r3, #36	; 0x24
 8003bde:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be2:	6803      	ldr	r3, [r0, #0]
 8003be4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003bf8:	f7ff ffaa 	bl	8003b50 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bfc:	6803      	ldr	r3, [r0, #0]
 8003bfe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	2320      	movs	r3, #32
 8003c02:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003c0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003c0e:	2002      	movs	r0, #2
 8003c10:	e7fc      	b.n	8003c0c <HAL_UARTEx_SetTxFifoThreshold+0x42>

08003c12 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003c12:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003c14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8003c18:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d01b      	beq.n	8003c56 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	2324      	movs	r3, #36	; 0x24
 8003c26:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c2a:	6803      	ldr	r3, [r0, #0]
 8003c2c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003c40:	f7ff ff86 	bl	8003b50 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003c56:	2002      	movs	r0, #2
 8003c58:	e7fc      	b.n	8003c54 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08003c5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003c5e:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8003c60:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8003c62:	9301      	str	r3, [sp, #4]
    count++;
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	3301      	adds	r3, #1
 8003c68:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003c6a:	9b01      	ldr	r3, [sp, #4]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d816      	bhi.n	8003c9e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c70:	6903      	ldr	r3, [r0, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	daf6      	bge.n	8003c64 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8003c76:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <USB_CoreReset+0x48>)
  count = 0U;
 8003c7a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c7c:	6903      	ldr	r3, [r0, #16]
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6103      	str	r3, [r0, #16]
    count++;
 8003c84:	9b01      	ldr	r3, [sp, #4]
 8003c86:	3301      	adds	r3, #1
 8003c88:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003c8a:	9b01      	ldr	r3, [sp, #4]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d806      	bhi.n	8003c9e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c90:	6903      	ldr	r3, [r0, #16]
 8003c92:	f013 0301 	ands.w	r3, r3, #1
 8003c96:	d1f5      	bne.n	8003c84 <USB_CoreReset+0x28>

  return HAL_OK;
 8003c98:	4618      	mov	r0, r3
}
 8003c9a:	b002      	add	sp, #8
 8003c9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	e7fb      	b.n	8003c9a <USB_CoreReset+0x3e>
 8003ca2:	bf00      	nop
 8003ca4:	00030d40 	.word	0x00030d40

08003ca8 <USB_CoreInit>:
{
 8003ca8:	b084      	sub	sp, #16
 8003caa:	b538      	push	{r3, r4, r5, lr}
 8003cac:	ad05      	add	r5, sp, #20
 8003cae:	4604      	mov	r4, r0
 8003cb0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12f      	bne.n	8003d1a <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cc2:	68c3      	ldr	r3, [r0, #12]
 8003cc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ccc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cce:	68c3      	ldr	r3, [r0, #12]
 8003cd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003cd4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d103      	bne.n	8003ce4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cdc:	68c3      	ldr	r3, [r0, #12]
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff ffb9 	bl	8003c5c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003cea:	9b08      	ldr	r3, [sp, #32]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d110      	bne.n	8003d12 <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003cf0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003cf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cf8:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d00:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	f043 0306 	orr.w	r3, r3, #6
 8003d08:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d0a:	68a3      	ldr	r3, [r4, #8]
 8003d0c:	f043 0320 	orr.w	r3, r3, #32
 8003d10:	60a3      	str	r3, [r4, #8]
}
 8003d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d16:	b004      	add	sp, #16
 8003d18:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d1a:	68c3      	ldr	r3, [r0, #12]
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d20:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003d22:	f7ff ff9b 	bl	8003c5c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d28:	b923      	cbnz	r3, 8003d34 <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d30:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d32:	e7da      	b.n	8003cea <USB_CoreInit+0x42>
 8003d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	e7f9      	b.n	8003d30 <USB_CoreInit+0x88>

08003d3c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d3c:	6883      	ldr	r3, [r0, #8]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6083      	str	r3, [r0, #8]
}
 8003d44:	2000      	movs	r0, #0
 8003d46:	4770      	bx	lr

08003d48 <USB_SetCurrentMode>:
{
 8003d48:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d4a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003d4c:	2901      	cmp	r1, #1
{
 8003d4e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d54:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003d56:	d10f      	bne.n	8003d78 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d58:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8003d5a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d60:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8003d62:	2001      	movs	r0, #1
      ms++;
 8003d64:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8003d66:	f7fd fa63 	bl	8001230 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003d6a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d6c:	07d9      	lsls	r1, r3, #31
 8003d6e:	d414      	bmi.n	8003d9a <USB_SetCurrentMode+0x52>
 8003d70:	2c32      	cmp	r4, #50	; 0x32
 8003d72:	d1f6      	bne.n	8003d62 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d1fb      	bne.n	8003d74 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d7c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8003d7e:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d84:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8003d86:	2001      	movs	r0, #1
      ms++;
 8003d88:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8003d8a:	f7fd fa51 	bl	8001230 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003d8e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d90:	07da      	lsls	r2, r3, #31
 8003d92:	d502      	bpl.n	8003d9a <USB_SetCurrentMode+0x52>
 8003d94:	2c32      	cmp	r4, #50	; 0x32
 8003d96:	d1f6      	bne.n	8003d86 <USB_SetCurrentMode+0x3e>
 8003d98:	e7ec      	b.n	8003d74 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8003d9a:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8003d9e:	4258      	negs	r0, r3
 8003da0:	4158      	adcs	r0, r3
 8003da2:	e7e8      	b.n	8003d76 <USB_SetCurrentMode+0x2e>

08003da4 <USB_FlushTxFifo>:
{
 8003da4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003da6:	2300      	movs	r3, #0
    if (count > 200000U)
 8003da8:	4a10      	ldr	r2, [pc, #64]	; (8003dec <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8003daa:	9301      	str	r3, [sp, #4]
    count++;
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003db2:	9b01      	ldr	r3, [sp, #4]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d816      	bhi.n	8003de6 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db8:	6903      	ldr	r3, [r0, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	daf6      	bge.n	8003dac <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dbe:	0189      	lsls	r1, r1, #6
  count = 0U;
 8003dc0:	2300      	movs	r3, #0
    if (count > 200000U)
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dc4:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003dc8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dca:	6101      	str	r1, [r0, #16]
    count++;
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003dd2:	9b01      	ldr	r3, [sp, #4]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d806      	bhi.n	8003de6 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dd8:	6903      	ldr	r3, [r0, #16]
 8003dda:	f013 0320 	ands.w	r3, r3, #32
 8003dde:	d1f5      	bne.n	8003dcc <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8003de0:	4618      	mov	r0, r3
}
 8003de2:	b002      	add	sp, #8
 8003de4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003de6:	2003      	movs	r0, #3
 8003de8:	e7fb      	b.n	8003de2 <USB_FlushTxFifo+0x3e>
 8003dea:	bf00      	nop
 8003dec:	00030d40 	.word	0x00030d40

08003df0 <USB_FlushRxFifo>:
{
 8003df0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003df2:	2300      	movs	r3, #0
    if (count > 200000U)
 8003df4:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8003df6:	9301      	str	r3, [sp, #4]
    count++;
 8003df8:	9b01      	ldr	r3, [sp, #4]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d814      	bhi.n	8003e2e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e04:	6903      	ldr	r3, [r0, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	daf6      	bge.n	8003df8 <USB_FlushRxFifo+0x8>
  count = 0U;
 8003e0a:	2300      	movs	r3, #0
    if (count > 200000U)
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <USB_FlushRxFifo+0x44>)
  count = 0U;
 8003e0e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e10:	2310      	movs	r3, #16
 8003e12:	6103      	str	r3, [r0, #16]
    count++;
 8003e14:	9b01      	ldr	r3, [sp, #4]
 8003e16:	3301      	adds	r3, #1
 8003e18:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e1a:	9b01      	ldr	r3, [sp, #4]
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d806      	bhi.n	8003e2e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e20:	6903      	ldr	r3, [r0, #16]
 8003e22:	f013 0310 	ands.w	r3, r3, #16
 8003e26:	d1f5      	bne.n	8003e14 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8003e28:	4618      	mov	r0, r3
}
 8003e2a:	b002      	add	sp, #8
 8003e2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003e2e:	2003      	movs	r0, #3
 8003e30:	e7fb      	b.n	8003e2a <USB_FlushRxFifo+0x3a>
 8003e32:	bf00      	nop
 8003e34:	00030d40 	.word	0x00030d40

08003e38 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003e38:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003e3c:	4319      	orrs	r1, r3
 8003e3e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003e42:	2000      	movs	r0, #0
 8003e44:	4770      	bx	lr
	...

08003e48 <USB_DevInit>:
{
 8003e48:	b084      	sub	sp, #16
 8003e4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e4e:	4604      	mov	r4, r0
 8003e50:	a809      	add	r0, sp, #36	; 0x24
 8003e52:	460e      	mov	r6, r1
 8003e54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003e5a:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8003e62:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8003e64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003e68:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003e6a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003e6c:	d1f7      	bne.n	8003e5e <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e6e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	d16c      	bne.n	8003f50 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f043 0302 	orr.w	r3, r3, #2
 8003e7c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e84:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e9c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003ea0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d159      	bne.n	8003f5e <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 8003eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d154      	bne.n	8003f5a <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eb0:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eb2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eb6:	f7ff ffbf 	bl	8003e38 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003eba:	2110      	movs	r1, #16
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7ff ff71 	bl	8003da4 <USB_FlushTxFifo>
 8003ec2:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff ff93 	bl	8003df0 <USB_FlushRxFifo>
 8003eca:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ed2:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ed4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ed8:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eda:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 8003ede:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8003ee0:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ee2:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8003ee4:	bf18      	it	ne
 8003ee6:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8003ee8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eea:	42b3      	cmp	r3, r6
 8003eec:	d139      	bne.n	8003f62 <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ef4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ef8:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003efc:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003efe:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f02:	42b2      	cmp	r2, r6
 8003f04:	d140      	bne.n	8003f88 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0c:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f12:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003f16:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f1a:	b91b      	cbnz	r3, 8003f24 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f1c:	69a3      	ldr	r3, [r4, #24]
 8003f1e:	f043 0310 	orr.w	r3, r3, #16
 8003f22:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f24:	69a2      	ldr	r2, [r4, #24]
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <USB_DevInit+0x168>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f2e:	b11b      	cbz	r3, 8003f38 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f30:	69a3      	ldr	r3, [r4, #24]
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003f38:	2d01      	cmp	r5, #1
 8003f3a:	d105      	bne.n	8003f48 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f3c:	69a3      	ldr	r3, [r4, #24]
 8003f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	61a3      	str	r3, [r4, #24]
}
 8003f48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	b004      	add	sp, #16
 8003f4e:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f56:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f58:	e79d      	b.n	8003e96 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	e7a8      	b.n	8003eb0 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f5e:	2103      	movs	r1, #3
 8003f60:	e7a6      	b.n	8003eb0 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f62:	f8d2 9000 	ldr.w	r9, [r2]
 8003f66:	f1b9 0f00 	cmp.w	r9, #0
 8003f6a:	da0b      	bge.n	8003f84 <USB_DevInit+0x13c>
      if (i == 0U)
 8003f6c:	b93b      	cbnz	r3, 8003f7e <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f6e:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f72:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f74:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f76:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7a:	3220      	adds	r2, #32
 8003f7c:	e7b5      	b.n	8003eea <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f7e:	f8c2 c000 	str.w	ip, [r2]
 8003f82:	e7f6      	b.n	8003f72 <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	e7f4      	b.n	8003f72 <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f88:	f8d3 9000 	ldr.w	r9, [r3]
 8003f8c:	f1b9 0f00 	cmp.w	r9, #0
 8003f90:	da0b      	bge.n	8003faa <USB_DevInit+0x162>
      if (i == 0U)
 8003f92:	b93a      	cbnz	r2, 8003fa4 <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f94:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f98:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f9c:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fa0:	3320      	adds	r3, #32
 8003fa2:	e7ae      	b.n	8003f02 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fa4:	f8c3 c000 	str.w	ip, [r3]
 8003fa8:	e7f6      	b.n	8003f98 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003faa:	6019      	str	r1, [r3, #0]
 8003fac:	e7f4      	b.n	8003f98 <USB_DevInit+0x150>
 8003fae:	bf00      	nop
 8003fb0:	803c3800 	.word	0x803c3800

08003fb4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fb4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003fb8:	f023 0303 	bic.w	r3, r3, #3
 8003fbc:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fc0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003fcc:	2000      	movs	r0, #0
 8003fce:	4770      	bx	lr

08003fd0 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003fd4:	221c      	movs	r2, #28
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <_mon_alloc_reset+0x20>)
 8003fda:	f00d fa27 	bl	801142c <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8003fde:	200a      	movs	r0, #10
 8003fe0:	f000 ffa2 	bl	8004f28 <__wrap_malloc>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ffc6 	bl	8004f78 <__wrap_free>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	2400486c 	.word	0x2400486c

08003ff4 <dwtIpInit>:
};

#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <dwtIpInit+0x24>)
 8003ff6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8004002:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 8004006:	2300      	movs	r3, #0
 8004008:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 800401c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <cyclesCounterEnd+0x3c>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8004020:	2100      	movs	r1, #0
 8004022:	4d0e      	ldr	r5, [pc, #56]	; (800405c <cyclesCounterEnd+0x40>)
  return DWT->CYCCNT;
 8004024:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8004026:	686b      	ldr	r3, [r5, #4]
 8004028:	9101      	str	r1, [sp, #4]
 800402a:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800402c:	f7fd f8fa 	bl	8001224 <HAL_GetTick>
 8004030:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8004032:	682a      	ldr	r2, [r5, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8004034:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8004036:	9901      	ldr	r1, [sp, #4]
 8004038:	4290      	cmp	r0, r2
 800403a:	d90a      	bls.n	8004052 <cyclesCounterEnd+0x36>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 800403c:	460b      	mov	r3, r1
 800403e:	f7fc fab5 	bl	80005ac <__aeabi_uldivmod>
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004046:	fba0 0303 	umull	r0, r3, r0, r3
 800404a:	1a59      	subs	r1, r3, r1
 800404c:	1904      	adds	r4, r0, r4
 800404e:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 8004052:	4620      	mov	r0, r4
 8004054:	b003      	add	sp, #12
 8004056:	bd30      	pop	{r4, r5, pc}
 8004058:	e0001000 	.word	0xe0001000
 800405c:	24004860 	.word	0x24004860

08004060 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8004060:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004064:	4604      	mov	r4, r0
 8004066:	460e      	mov	r6, r1
 8004068:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 800406a:	f7ff ffd7 	bl	800401c <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 800406e:	e9d4 3200 	ldrd	r3, r2, [r4]
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8004072:	e9cd 0100 	strd	r0, r1, [sp]
  u_obs->n_cb += 1;
 8004076:	3301      	adds	r3, #1
 8004078:	f142 0200 	adc.w	r2, r2, #0
 800407c:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8004080:	0773      	lsls	r3, r6, #29
 8004082:	d51f      	bpl.n	80040c4 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
    u_obs->k_dur_t += end_t;
    u_obs->nodes[node->c_idx].dur += end_t;
 8004084:	6a26      	ldr	r6, [r4, #32]
    const uint64_t end_t = ts - u_obs->start_t;
 8004086:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800408a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800408e:	1a51      	subs	r1, r2, r1
 8004090:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 8004094:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8004098:	185b      	adds	r3, r3, r1
 800409a:	eb40 0202 	adc.w	r2, r0, r2
 800409e:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 80040a2:	882b      	ldrh	r3, [r5, #0]
 80040a4:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80040a8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80040ac:	f856 200c 	ldr.w	r2, [r6, ip]
 80040b0:	685d      	ldr	r5, [r3, #4]
 80040b2:	1852      	adds	r2, r2, r1
 80040b4:	f846 200c 	str.w	r2, [r6, ip]
 80040b8:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 80040bc:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 80040be:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 80040c0:	3201      	adds	r2, #1
 80040c2:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 80040c4:	f7ff ffaa 	bl	800401c <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80040c8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80040cc:	e9dd 8900 	ldrd	r8, r9, [sp]
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 80040d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80040d4:	ebb3 0308 	subs.w	r3, r3, r8
 80040d8:	eb62 0209 	sbc.w	r2, r2, r9
 80040dc:	181b      	adds	r3, r3, r0
  return 0;
}
 80040de:	f04f 0000 	mov.w	r0, #0
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 80040e2:	eb41 0102 	adc.w	r1, r1, r2
 80040e6:	e9c4 3104 	strd	r3, r1, [r4, #16]
}
 80040ea:	b002      	add	sp, #8
 80040ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080040f0 <aiDeInit>:
{
 80040f0:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 80040f2:	4c09      	ldr	r4, [pc, #36]	; (8004118 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 80040f4:	4809      	ldr	r0, [pc, #36]	; (800411c <aiDeInit+0x2c>)
 80040f6:	f000 ff05 	bl	8004f04 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 80040fa:	6820      	ldr	r0, [r4, #0]
 80040fc:	b150      	cbz	r0, 8004114 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 80040fe:	f001 f8e5 	bl	80052cc <ai_mnetwork_destroy>
 8004102:	b128      	cbz	r0, 8004110 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8004104:	6820      	ldr	r0, [r4, #0]
 8004106:	f001 f902 	bl	800530e <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 800410a:	4905      	ldr	r1, [pc, #20]	; (8004120 <aiDeInit+0x30>)
 800410c:	f000 fcf6 	bl	8004afc <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	6023      	str	r3, [r4, #0]
}
 8004114:	bd10      	pop	{r4, pc}
 8004116:	bf00      	nop
 8004118:	240047b4 	.word	0x240047b4
 800411c:	08013b20 	.word	0x08013b20
 8004120:	08013b3f 	.word	0x08013b3f

08004124 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8004124:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8004126:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8004128:	f241 3188 	movw	r1, #5000	; 0x1388
 800412c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8004130:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8004134:	f000 feb2 	bl	8004e9c <ioRawGetUint8>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d015      	beq.n	8004168 <aiTestConsole+0x44>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 800413c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004140:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004144:	2b51      	cmp	r3, #81	; 0x51
 8004146:	d011      	beq.n	800416c <aiTestConsole+0x48>
    return CONS_EVT_QUIT;

  if ((c == 'd') || (c == 'D'))
 8004148:	2b44      	cmp	r3, #68	; 0x44
 800414a:	d011      	beq.n	8004170 <aiTestConsole+0x4c>
    return CONS_EVT_HIDE;

  if ((c == 'r') || (c == 'R'))
 800414c:	2b52      	cmp	r3, #82	; 0x52
 800414e:	d011      	beq.n	8004174 <aiTestConsole+0x50>
    return CONS_EVT_RESTART;

  if ((c == 'h') || (c == 'H') || (c == '?'))
 8004150:	2b48      	cmp	r3, #72	; 0x48
 8004152:	d011      	beq.n	8004178 <aiTestConsole+0x54>
 8004154:	2a3f      	cmp	r2, #63	; 0x3f
 8004156:	d00f      	beq.n	8004178 <aiTestConsole+0x54>
    return CONS_EVT_HELP;

  if ((c == 'p') || (c == 'P'))
 8004158:	2b50      	cmp	r3, #80	; 0x50
 800415a:	d00f      	beq.n	800417c <aiTestConsole+0x58>
    return CONS_EVT_PAUSE;

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;
 800415c:	2b58      	cmp	r3, #88	; 0x58
 800415e:	bf14      	ite	ne
 8004160:	2064      	movne	r0, #100	; 0x64
 8004162:	2005      	moveq	r0, #5

  return CONS_EVT_UNDEFINED;
}
 8004164:	b002      	add	sp, #8
 8004166:	bd10      	pop	{r4, pc}
    return CONS_EVT_TIMEOUT;
 8004168:	4620      	mov	r0, r4
 800416a:	e7fb      	b.n	8004164 <aiTestConsole+0x40>
    return CONS_EVT_QUIT;
 800416c:	2001      	movs	r0, #1
 800416e:	e7f9      	b.n	8004164 <aiTestConsole+0x40>
    return CONS_EVT_HIDE;
 8004170:	2006      	movs	r0, #6
 8004172:	e7f7      	b.n	8004164 <aiTestConsole+0x40>
    return CONS_EVT_RESTART;
 8004174:	2002      	movs	r0, #2
 8004176:	e7f5      	b.n	8004164 <aiTestConsole+0x40>
    return CONS_EVT_HELP;
 8004178:	2003      	movs	r0, #3
 800417a:	e7f3      	b.n	8004164 <aiTestConsole+0x40>
    return CONS_EVT_PAUSE;
 800417c:	2004      	movs	r0, #4
 800417e:	e7f1      	b.n	8004164 <aiTestConsole+0x40>

08004180 <aiObserverInit>:
{
 8004180:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8004182:	4604      	mov	r4, r0
{
 8004184:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8004186:	b1d0      	cbz	r0, 80041be <aiObserverInit+0x3e>
 8004188:	6800      	ldr	r0, [r0, #0]
 800418a:	b1c0      	cbz	r0, 80041be <aiObserverInit+0x3e>
 800418c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800418e:	b1b3      	cbz	r3, 80041be <aiObserverInit+0x3e>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8004190:	4d16      	ldr	r5, [pc, #88]	; (80041ec <aiObserverInit+0x6c>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8004192:	aa04      	add	r2, sp, #16
 8004194:	a903      	add	r1, sp, #12
 8004196:	f001 f8f7 	bl	8005388 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 800419a:	2228      	movs	r2, #40	; 0x28
 800419c:	2100      	movs	r1, #0
 800419e:	4628      	mov	r0, r5
 80041a0:	f00d f944 	bl	801142c <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 80041a4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80041a6:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 80041a8:	4610      	mov	r0, r2
 80041aa:	9201      	str	r2, [sp, #4]
 80041ac:	f000 febc 	bl	8004f28 <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 80041b0:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 80041b2:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 80041b4:	b928      	cbnz	r0, 80041c2 <aiObserverInit+0x42>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 80041b6:	4611      	mov	r1, r2
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <aiObserverInit+0x70>)
 80041ba:	f000 fea3 	bl	8004f04 <lc_print>
}
 80041be:	b013      	add	sp, #76	; 0x4c
 80041c0:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 80041c2:	2100      	movs	r1, #0
 80041c4:	f00d f932 	bl	801142c <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 80041c8:	2306      	movs	r3, #6
 80041ca:	462a      	mov	r2, r5
 80041cc:	4909      	ldr	r1, [pc, #36]	; (80041f4 <aiObserverInit+0x74>)
 80041ce:	9803      	ldr	r0, [sp, #12]
 80041d0:	f004 fb92 	bl	80088f8 <ai_platform_observer_register>
  if (!res) {
 80041d4:	4604      	mov	r4, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d1f1      	bne.n	80041be <aiObserverInit+0x3e>
    LC_PRINT("W: unable to register the user CB\r\n");
 80041da:	4807      	ldr	r0, [pc, #28]	; (80041f8 <aiObserverInit+0x78>)
 80041dc:	f000 fe92 	bl	8004f04 <lc_print>
    free(u_observer_ctx.nodes);
 80041e0:	6a28      	ldr	r0, [r5, #32]
 80041e2:	f000 fec9 	bl	8004f78 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 80041e6:	622c      	str	r4, [r5, #32]
    return;
 80041e8:	e7e9      	b.n	80041be <aiObserverInit+0x3e>
 80041ea:	bf00      	nop
 80041ec:	24004838 	.word	0x24004838
 80041f0:	08013b53 	.word	0x08013b53
 80041f4:	08004061 	.word	0x08004061
 80041f8:	08013b87 	.word	0x08013b87

080041fc <aiObserverDone>:
{
 80041fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004200:	ed2d 8b02 	vpush	{d8}
 8004204:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8004206:	2800      	cmp	r0, #0
 8004208:	f000 80d9 	beq.w	80043be <aiObserverDone+0x1c2>
 800420c:	6803      	ldr	r3, [r0, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80d5 	beq.w	80043be <aiObserverDone+0x1c2>
 8004214:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004216:	2a00      	cmp	r2, #0
 8004218:	f000 80d1 	beq.w	80043be <aiObserverDone+0x1c2>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 800421c:	4d6a      	ldr	r5, [pc, #424]	; (80043c8 <aiObserverDone+0x1cc>)
 800421e:	6a2a      	ldr	r2, [r5, #32]
 8004220:	2a00      	cmp	r2, #0
 8004222:	f000 80cc 	beq.w	80043be <aiObserverDone+0x1c2>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8004226:	4618      	mov	r0, r3
 8004228:	aa12      	add	r2, sp, #72	; 0x48
 800422a:	a909      	add	r1, sp, #36	; 0x24
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 800422c:	2400      	movs	r4, #0
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 800422e:	f001 f8ab 	bl	8005388 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8004232:	462a      	mov	r2, r5
 8004234:	4965      	ldr	r1, [pc, #404]	; (80043cc <aiObserverDone+0x1d0>)
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8004236:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 800423a:	9809      	ldr	r0, [sp, #36]	; 0x24
  cumul = 0;
 800423c:	46a1      	mov	r9, r4
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 800423e:	f004 fc93 	bl	8008b68 <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 8004242:	4863      	ldr	r0, [pc, #396]	; (80043d0 <aiObserverDone+0x1d4>)
 8004244:	f000 fe5e 	bl	8004f04 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8004248:	6a2b      	ldr	r3, [r5, #32]
    LC_PRINT(fmt, node_info.c_idx,
 800424a:	eddf 8a62 	vldr	s17, [pc, #392]	; 80043d4 <aiObserverDone+0x1d8>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4623      	mov	r3, r4
 8004252:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8004256:	f7fc f9a9 	bl	80005ac <__aeabi_uldivmod>
 800425a:	aa0a      	add	r2, sp, #40	; 0x28
 800425c:	f000 fee0 	bl	8005020 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8004260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004262:	485d      	ldr	r0, [pc, #372]	; (80043d8 <aiObserverDone+0x1dc>)
 8004264:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8004268:	fb06 3101 	mla	r1, r6, r1, r3
 800426c:	f000 fe4a 	bl	8004f04 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8004270:	6a2b      	ldr	r3, [r5, #32]
 8004272:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4623      	mov	r3, r4
 800427a:	f7fc f997 	bl	80005ac <__aeabi_uldivmod>
 800427e:	aa0a      	add	r2, sp, #40	; 0x28
 8004280:	f000 fece 	bl	8005020 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8004284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004286:	4855      	ldr	r0, [pc, #340]	; (80043dc <aiObserverDone+0x1e0>)
 8004288:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 800428c:	fb06 3101 	mla	r1, r6, r1, r3
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8004290:	4e53      	ldr	r6, [pc, #332]	; (80043e0 <aiObserverDone+0x1e4>)
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8004292:	f000 fe37 	bl	8004f04 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8004296:	f1a6 0324 	sub.w	r3, r6, #36	; 0x24
 800429a:	f1a6 0221 	sub.w	r2, r6, #33	; 0x21
 800429e:	f1a6 011c 	sub.w	r1, r6, #28
 80042a2:	f1a6 0017 	sub.w	r0, r6, #23
 80042a6:	9600      	str	r6, [sp, #0]
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80042a8:	f1a6 0afd 	sub.w	sl, r6, #253	; 0xfd
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 80042ac:	f000 fe2a 	bl	8004f04 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 80042b0:	f106 000a 	add.w	r0, r6, #10
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 80042b4:	3ed6      	subs	r6, #214	; 0xd6
  LC_PRINT(" ---------------------------------------------------\r\n");
 80042b6:	f000 fe25 	bl	8004f04 <lc_print>
  node_info.c_idx = 0;
 80042ba:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 80042be:	a90e      	add	r1, sp, #56	; 0x38
 80042c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c2:	f004 fa3f 	bl	8008744 <ai_platform_observer_node_info>
 80042c6:	4680      	mov	r8, r0
 80042c8:	bb20      	cbnz	r0, 8004314 <aiObserverDone+0x118>
  LC_PRINT(" -------------------------------------------------\r\n");
 80042ca:	4846      	ldr	r0, [pc, #280]	; (80043e4 <aiObserverDone+0x1e8>)
 80042cc:	f000 fe1a 	bl	8004f04 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 80042d0:	6a2b      	ldr	r3, [r5, #32]
 80042d2:	4620      	mov	r0, r4
 80042d4:	4649      	mov	r1, r9
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4643      	mov	r3, r8
 80042da:	f7fc f967 	bl	80005ac <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 80042de:	aa0a      	add	r2, sp, #40	; 0x28
 80042e0:	f000 fe9e 	bl	8005020 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 80042e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ee:	fb00 1202 	mla	r2, r0, r2, r1
 80042f2:	493d      	ldr	r1, [pc, #244]	; (80043e8 <aiObserverDone+0x1ec>)
 80042f4:	1c48      	adds	r0, r1, #1
 80042f6:	f000 fe05 	bl	8004f04 <lc_print>
  free(u_observer_ctx.nodes);
 80042fa:	6a28      	ldr	r0, [r5, #32]
 80042fc:	f000 fe3c 	bl	8004f78 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8004300:	2228      	movs	r2, #40	; 0x28
 8004302:	4641      	mov	r1, r8
 8004304:	4830      	ldr	r0, [pc, #192]	; (80043c8 <aiObserverDone+0x1cc>)
}
 8004306:	b020      	add	sp, #128	; 0x80
 8004308:	ecbd 8b02 	vpop	{d8}
 800430c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8004310:	f00d b88c 	b.w	801142c <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8004314:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8004318:	6a2a      	ldr	r2, [r5, #32]
 800431a:	0119      	lsls	r1, r3, #4
 800431c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8004320:	5850      	ldr	r0, [r2, r1]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	1904      	adds	r4, r0, r4
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 800432c:	eb41 0909 	adc.w	r9, r1, r9
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8004330:	f7fc f93c 	bl	80005ac <__aeabi_uldivmod>
 8004334:	aa0a      	add	r2, sp, #40	; 0x28
 8004336:	f000 fe73 	bl	8005020 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 800433a:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 800433e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
    LC_PRINT(fmt, node_info.c_idx,
 8004342:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8004346:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 800434a:	ea1a 0823 	ands.w	r8, sl, r3, asr #32
 800434e:	bf38      	it	cc
 8004350:	46b0      	movcc	r8, r6
    LC_PRINT(fmt, node_info.c_idx,
 8004352:	f007 f9a9 	bl	800b6a8 <ai_layer_type_name>
 8004356:	2125      	movs	r1, #37	; 0x25
 8004358:	9007      	str	r0, [sp, #28]
 800435a:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 800435e:	9104      	str	r1, [sp, #16]
 8004360:	6a29      	ldr	r1, [r5, #32]
 8004362:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004366:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800436a:	9306      	str	r3, [sp, #24]
 800436c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004370:	f7fc f8d6 	bl	8000520 <__aeabi_ul2f>
 8004374:	ee07 0a90 	vmov	s15, r0
 8004378:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800437c:	ee27 8aa8 	vmul.f32	s16, s15, s17
 8004380:	f7fc f8ce 	bl	8000520 <__aeabi_ul2f>
 8004384:	ee07 0a90 	vmov	s15, r0
 8004388:	990d      	ldr	r1, [sp, #52]	; 0x34
 800438a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800438c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8004390:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004394:	9101      	str	r1, [sp, #4]
 8004396:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004398:	fb0c 1100 	mla	r1, ip, r0, r1
 800439c:	4640      	mov	r0, r8
 800439e:	9100      	str	r1, [sp, #0]
 80043a0:	4659      	mov	r1, fp
 80043a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80043a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80043aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043ae:	f000 fda9 	bl	8004f04 <lc_print>
    node_info.c_idx++;
 80043b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80043b6:	3301      	adds	r3, #1
 80043b8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80043bc:	e77f      	b.n	80042be <aiObserverDone+0xc2>
}
 80043be:	b020      	add	sp, #128	; 0x80
 80043c0:	ecbd 8b02 	vpop	{d8}
 80043c4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80043c8:	24004838 	.word	0x24004838
 80043cc:	08004061 	.word	0x08004061
 80043d0:	08013bf6 	.word	0x08013bf6
 80043d4:	42c80000 	.word	0x42c80000
 80043d8:	08013c14 	.word	0x08013c14
 80043dc:	08013c4f 	.word	0x08013c4f
 80043e0:	08013ca8 	.word	0x08013ca8
 80043e4:	08013ce9 	.word	0x08013ce9
 80043e8:	08013d1e 	.word	0x08013d1e

080043ec <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 80043ec:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 80043f0:	484c      	ldr	r0, [pc, #304]	; (8004524 <aiSystemPerformanceInit+0x138>)
{
 80043f2:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 80043f4:	f000 fd86 	bl	8004f04 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80043f8:	494b      	ldr	r1, [pc, #300]	; (8004528 <aiSystemPerformanceInit+0x13c>)
 80043fa:	2300      	movs	r3, #0
 80043fc:	2206      	movs	r2, #6
 80043fe:	f101 0022 	add.w	r0, r1, #34	; 0x22
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004402:	4d4a      	ldr	r5, [pc, #296]	; (800452c <aiSystemPerformanceInit+0x140>)
 8004404:	2400      	movs	r4, #0
 8004406:	f000 fd7d 	bl	8004f04 <lc_print>
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 800440a:	4849      	ldr	r0, [pc, #292]	; (8004530 <aiSystemPerformanceInit+0x144>)
 800440c:	f000 fd7a 	bl	8004f04 <lc_print>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004410:	4e48      	ldr	r6, [pc, #288]	; (8004534 <aiSystemPerformanceInit+0x148>)

  systemSettingLog();
 8004412:	f000 fe41 	bl	8005098 <systemSettingLog>
  HAL_Delay(100);
 8004416:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8004418:	f7ff fdec 	bl	8003ff4 <dwtIpInit>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800441c:	606c      	str	r4, [r5, #4]
  HAL_Delay(100);
 800441e:	f7fc ff07 	bl	8001230 <HAL_Delay>
  return DWT->CYCCNT;
 8004422:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8004424:	2564      	movs	r5, #100	; 0x64
 8004426:	aa02      	add	r2, sp, #8
 8004428:	4621      	mov	r1, r4
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800442a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8004550 <aiSystemPerformanceInit+0x164>
 800442e:	fbb0 f0f5 	udiv	r0, r0, r5
 8004432:	f000 fdf5 	bl	8005020 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 8004436:	9a05      	ldr	r2, [sp, #20]
 8004438:	483f      	ldr	r0, [pc, #252]	; (8004538 <aiSystemPerformanceInit+0x14c>)
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800443a:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 800443e:	f109 0b48 	add.w	fp, r9, #72	; 0x48
 8004442:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8004446:	fb05 3101 	mla	r1, r5, r1, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800444a:	4635      	mov	r5, r6
 800444c:	f000 fd5a 	bl	8004f04 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8004450:	aa02      	add	r2, sp, #8
 8004452:	2100      	movs	r1, #0
 8004454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004458:	f000 fde2 	bl	8005020 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800445c:	9a03      	ldr	r2, [sp, #12]
 800445e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004462:	9b04      	ldr	r3, [sp, #16]
 8004464:	fb01 3302 	mla	r3, r1, r2, r3
 8004468:	4a34      	ldr	r2, [pc, #208]	; (800453c <aiSystemPerformanceInit+0x150>)
 800446a:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 800446c:	f7ff fdc2 	bl	8003ff4 <dwtIpInit>
  aiPlatformVersion();
 8004470:	f000 fb34 	bl	8004adc <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8004474:	4832      	ldr	r0, [pc, #200]	; (8004540 <aiSystemPerformanceInit+0x154>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004476:	f845 4b04 	str.w	r4, [r5], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 800447a:	f000 fd43 	bl	8004f04 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 800447e:	4621      	mov	r1, r4
 8004480:	2000      	movs	r0, #0
 8004482:	f000 fee7 	bl	8005254 <ai_mnetwork_find>
    if (nn_name) {
 8004486:	4680      	mov	r8, r0
 8004488:	b188      	cbz	r0, 80044ae <aiSystemPerformanceInit+0xc2>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800448a:	4601      	mov	r1, r0
 800448c:	4648      	mov	r0, r9
 800448e:	f000 fd39 	bl	8004f04 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8004492:	4641      	mov	r1, r8
 8004494:	4650      	mov	r0, sl
 8004496:	f000 fd35 	bl	8004f04 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 800449a:	2200      	movs	r2, #0
 800449c:	1f29      	subs	r1, r5, #4
 800449e:	4640      	mov	r0, r8
 80044a0:	f000 fee6 	bl	8005270 <ai_mnetwork_create>
  if (err.type) {
 80044a4:	b2c3      	uxtb	r3, r0
 80044a6:	b14b      	cbz	r3, 80044bc <aiSystemPerformanceInit+0xd0>
    aiLogErr(err, "ai_mnetwork_create");
 80044a8:	4926      	ldr	r1, [pc, #152]	; (8004544 <aiSystemPerformanceInit+0x158>)
 80044aa:	f000 fb27 	bl	8004afc <aiLogErr>

  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 80044ae:	2003      	movs	r0, #3
 80044b0:	f00d fce8 	bl	8011e84 <srand>

  return 0;
}
 80044b4:	2000      	movs	r0, #0
 80044b6:	b006      	add	sp, #24
 80044b8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 80044bc:	4658      	mov	r0, fp
 80044be:	46a8      	mov	r8, r5
 80044c0:	f000 fd20 	bl	8004f04 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80044c4:	4629      	mov	r1, r5
 80044c6:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80044ca:	f000 ff15 	bl	80052f8 <ai_mnetwork_get_report>
 80044ce:	4603      	mov	r3, r0
 80044d0:	b930      	cbnz	r0, 80044e0 <aiSystemPerformanceInit+0xf4>
    err = ai_mnetwork_get_error(ctx->handle);
 80044d2:	01e4      	lsls	r4, r4, #7
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	5930      	ldr	r0, [r6, r4]
 80044d8:	f000 ff19 	bl	800530e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80044dc:	491a      	ldr	r1, [pc, #104]	; (8004548 <aiSystemPerformanceInit+0x15c>)
 80044de:	e00a      	b.n	80044f6 <aiSystemPerformanceInit+0x10a>
  if (!ai_mnetwork_init(ctx->handle)) {
 80044e0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80044e4:	f000 ff20 	bl	8005328 <ai_mnetwork_init>
 80044e8:	b968      	cbnz	r0, 8004506 <aiSystemPerformanceInit+0x11a>
    err = ai_mnetwork_get_error(ctx->handle);
 80044ea:	01e4      	lsls	r4, r4, #7
 80044ec:	9001      	str	r0, [sp, #4]
 80044ee:	5930      	ldr	r0, [r6, r4]
 80044f0:	f000 ff0d 	bl	800530e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 80044f4:	4915      	ldr	r1, [pc, #84]	; (800454c <aiSystemPerformanceInit+0x160>)
    aiLogErr(err, "ai_mnetwork_get_info");
 80044f6:	f000 fb01 	bl	8004afc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80044fa:	5930      	ldr	r0, [r6, r4]
 80044fc:	f000 fee6 	bl	80052cc <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8004504:	e7d3      	b.n	80044ae <aiSystemPerformanceInit+0xc2>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004506:	4629      	mov	r1, r5
 8004508:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800450c:	f000 fef4 	bl	80052f8 <ai_mnetwork_get_report>
 8004510:	3580      	adds	r5, #128	; 0x80
 8004512:	4603      	mov	r3, r0
 8004514:	2800      	cmp	r0, #0
 8004516:	d0dc      	beq.n	80044d2 <aiSystemPerformanceInit+0xe6>
    aiPrintNetworkInfo(&ctx->report);
 8004518:	4640      	mov	r0, r8
    idx++;
 800451a:	3401      	adds	r4, #1
    aiPrintNetworkInfo(&ctx->report);
 800451c:	f000 fbe8 	bl	8004cf0 <aiPrintNetworkInfo>
  } while (nn_name);
 8004520:	e7ad      	b.n	800447e <aiSystemPerformanceInit+0x92>
 8004522:	bf00      	nop
 8004524:	08013d33 	.word	0x08013d33
 8004528:	08013d39 	.word	0x08013d39
 800452c:	e0001000 	.word	0xe0001000
 8004530:	08013d68 	.word	0x08013d68
 8004534:	240047b4 	.word	0x240047b4
 8004538:	08013d6c 	.word	0x08013d6c
 800453c:	24004860 	.word	0x24004860
 8004540:	08013da6 	.word	0x08013da6
 8004544:	08013dfb 	.word	0x08013dfb
 8004548:	08013e29 	.word	0x08013e29
 800454c:	08013e3e 	.word	0x08013e3e
 8004550:	08013dc6 	.word	0x08013dc6

08004554 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 8004554:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004558:	b09e      	sub	sp, #120	; 0x78
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 800455a:	4c64      	ldr	r4, [pc, #400]	; (80046ec <aiSystemPerformanceProcess+0x198>)
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	b93b      	cbnz	r3, 8004570 <aiSystemPerformanceProcess+0x1c>
    LC_PRINT("E: network handle is NULL\r\n");
 8004560:	4863      	ldr	r0, [pc, #396]	; (80046f0 <aiSystemPerformanceProcess+0x19c>)
 8004562:	f000 fccf 	bl	8004f04 <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 8004566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      }
    }
  } while (r==0);

  return r;
}
 800456a:	b01e      	add	sp, #120	; 0x78
 800456c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8004570:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8004574:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8004578:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004718 <aiSystemPerformanceProcess+0x1c4>
  MON_STACK_INIT();
 800457c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004580:	f000 fd20 	bl	8004fc4 <stackMonInit>
  if (profiling_mode)
 8004584:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8004588:	f899 3000 	ldrb.w	r3, [r9]
 800458c:	b113      	cbz	r3, 8004594 <aiSystemPerformanceProcess+0x40>
    niter = _APP_ITER_ * profiling_factor;
 800458e:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <aiSystemPerformanceProcess+0x1a0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	435e      	muls	r6, r3
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8004594:	4632      	mov	r2, r6
 8004596:	6861      	ldr	r1, [r4, #4]
 8004598:	4857      	ldr	r0, [pc, #348]	; (80046f8 <aiSystemPerformanceProcess+0x1a4>)
 800459a:	f000 fcb3 	bl	8004f04 <lc_print>
 800459e:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 80045a2:	4d56      	ldr	r5, [pc, #344]	; (80046fc <aiSystemPerformanceProcess+0x1a8>)
 80045a4:	69aa      	ldr	r2, [r5, #24]
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <aiSystemPerformanceProcess+0x60>
 80045aa:	f3ef 8108 	mrs	r1, MSP
 80045ae:	4854      	ldr	r0, [pc, #336]	; (8004700 <aiSystemPerformanceProcess+0x1ac>)
 80045b0:	f000 fca8 	bl	8004f04 <lc_print>
  MON_STACK_MARK();
 80045b4:	792b      	ldrb	r3, [r5, #4]
 80045b6:	b95b      	cbnz	r3, 80045d0 <aiSystemPerformanceProcess+0x7c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 80045b8:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80045bc:	f1b8 0f01 	cmp.w	r8, #1
 80045c0:	d912      	bls.n	80045e8 <aiSystemPerformanceProcess+0x94>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 80045c2:	4850      	ldr	r0, [pc, #320]	; (8004704 <aiSystemPerformanceProcess+0x1b0>)
 80045c4:	f000 fc9e 	bl	8004f04 <lc_print>
    HAL_Delay(100);
 80045c8:	2064      	movs	r0, #100	; 0x64
 80045ca:	f7fc fe31 	bl	8001230 <HAL_Delay>
 80045ce:	e7ca      	b.n	8004566 <aiSystemPerformanceProcess+0x12>
  MON_STACK_MARK();
 80045d0:	69eb      	ldr	r3, [r5, #28]
 80045d2:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 80045d6:	3303      	adds	r3, #3
 80045d8:	f023 0303 	bic.w	r3, r3, #3
 80045dc:	69aa      	ldr	r2, [r5, #24]
 80045de:	4293      	cmp	r3, r2
 80045e0:	d2ea      	bcs.n	80045b8 <aiSystemPerformanceProcess+0x64>
 80045e2:	f843 1b04 	str.w	r1, [r3], #4
 80045e6:	e7f9      	b.n	80045dc <aiSystemPerformanceProcess+0x88>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 80045e8:	f8b4 e036 	ldrh.w	lr, [r4, #54]	; 0x36
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 80045ec:	f1be 0f01 	cmp.w	lr, #1
 80045f0:	d8e7      	bhi.n	80045c2 <aiSystemPerformanceProcess+0x6e>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80045f2:	2300      	movs	r3, #0
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80045f4:	f8df b124 	ldr.w	fp, [pc, #292]	; 800471c <aiSystemPerformanceProcess+0x1c8>
 80045f8:	e011      	b.n	800461e <aiSystemPerformanceProcess+0xca>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 80045fa:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 80045fe:	ad10      	add	r5, sp, #64	; 0x40
 8004600:	46d4      	mov	ip, sl
 8004602:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004608:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 800460c:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8004610:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8004614:	b90b      	cbnz	r3, 800461a <aiSystemPerformanceProcess+0xc6>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004616:	f8db 3000 	ldr.w	r3, [fp]
 800461a:	9311      	str	r3, [sp, #68]	; 0x44
    niter = _APP_ITER_;
 800461c:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800461e:	4598      	cmp	r8, r3
 8004620:	dceb      	bgt.n	80045fa <aiSystemPerformanceProcess+0xa6>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8004622:	2300      	movs	r3, #0
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004624:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8004720 <aiSystemPerformanceProcess+0x1cc>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8004628:	459e      	cmp	lr, r3
 800462a:	dc2d      	bgt.n	8004688 <aiSystemPerformanceProcess+0x134>
  if (profiling_mode) {
 800462c:	f899 3000 	ldrb.w	r3, [r9]
 8004630:	b14b      	cbz	r3, 8004646 <aiSystemPerformanceProcess+0xf2>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 8004632:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <aiSystemPerformanceProcess+0x1a0>)
 8004634:	4834      	ldr	r0, [pc, #208]	; (8004708 <aiSystemPerformanceProcess+0x1b4>)
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	f000 fc64 	bl	8004f04 <lc_print>
    fflush(stdout);
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <aiSystemPerformanceProcess+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6898      	ldr	r0, [r3, #8]
 8004642:	f00c fda5 	bl	8011190 <fflush>
  if (observer_mode) {
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <aiSystemPerformanceProcess+0x1bc>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b153      	cbz	r3, 8004662 <aiSystemPerformanceProcess+0x10e>
    MON_ALLOC_ENABLE();
 800464c:	4d31      	ldr	r5, [pc, #196]	; (8004714 <aiSystemPerformanceProcess+0x1c0>)
    MON_ALLOC_RESET();
 800464e:	f7ff fcbf 	bl	8003fd0 <_mon_alloc_reset>
    aiObserverInit(&net_exec_ctx[idx]);
 8004652:	4826      	ldr	r0, [pc, #152]	; (80046ec <aiSystemPerformanceProcess+0x198>)
    MON_ALLOC_ENABLE();
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 800465c:	f7ff fd90 	bl	8004180 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8004660:	696b      	ldr	r3, [r5, #20]
  tcumul = 0ULL;
 8004662:	2500      	movs	r5, #0
    MON_ALLOC_ENABLE();
 8004664:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004714 <aiSystemPerformanceProcess+0x1c0>
  int observer_heap_sz = 0UL;
 8004668:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 800466a:	f7ff fcb1 	bl	8003fd0 <_mon_alloc_reset>
  tcumul = 0ULL;
 800466e:	46aa      	mov	sl, r5
      for (iter = 0; iter < niter; iter++) {
 8004670:	46a8      	mov	r8, r5
 8004672:	45b0      	cmp	r8, r6
 8004674:	da78      	bge.n	8004768 <aiSystemPerformanceProcess+0x214>
    	  ai_i8 *in_data = (ai_i8 *)ai_input[0].data;
 8004676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004678:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800467c:	9305      	str	r3, [sp, #20]
    			  for (int c = 0; c < 3; c++) {
 800467e:	3303      	adds	r3, #3
 8004680:	9307      	str	r3, [sp, #28]
    		  for (int w = 0; w < 224; w++) {
 8004682:	f5a2 7328 	sub.w	r3, r2, #672	; 0x2a0
 8004686:	e02b      	b.n	80046e0 <aiSystemPerformanceProcess+0x18c>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8004688:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
 800468c:	ad17      	add	r5, sp, #92	; 0x5c
 800468e:	46d4      	mov	ip, sl
 8004690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 800469a:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 800469e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80046a2:	b90b      	cbnz	r3, 80046a8 <aiSystemPerformanceProcess+0x154>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80046a4:	f8d8 3000 	ldr.w	r3, [r8]
 80046a8:	9318      	str	r3, [sp, #96]	; 0x60
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80046aa:	2301      	movs	r3, #1
 80046ac:	e7bc      	b.n	8004628 <aiSystemPerformanceProcess+0xd4>
 80046ae:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
    				  in_data[h*224*3 + w*3 + c] = (ai_i8)(rand() % 256 - 128);
 80046b4:	f00d fc14 	bl	8011ee0 <rand>
 80046b8:	f1d0 0c00 	rsbs	ip, r0, #0
 80046bc:	b2c0      	uxtb	r0, r0
 80046be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046c0:	fa5f fc8c 	uxtb.w	ip, ip
    			  for (int c = 0; c < 3; c++) {
 80046c4:	9b08      	ldr	r3, [sp, #32]
 80046c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    				  in_data[h*224*3 + w*3 + c] = (ai_i8)(rand() % 256 - 128);
 80046c8:	bf58      	it	pl
 80046ca:	f1cc 0000 	rsbpl	r0, ip, #0
 80046ce:	3880      	subs	r0, #128	; 0x80
 80046d0:	f801 0b01 	strb.w	r0, [r1], #1
    			  for (int c = 0; c < 3; c++) {
 80046d4:	428b      	cmp	r3, r1
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	d1e9      	bne.n	80046ae <aiSystemPerformanceProcess+0x15a>
    		  for (int w = 0; w < 224; w++) {
 80046da:	3303      	adds	r3, #3
 80046dc:	4293      	cmp	r3, r2
 80046de:	d021      	beq.n	8004724 <aiSystemPerformanceProcess+0x1d0>
    			  for (int c = 0; c < 3; c++) {
 80046e0:	9807      	ldr	r0, [sp, #28]
 80046e2:	9905      	ldr	r1, [sp, #20]
 80046e4:	4418      	add	r0, r3
 80046e6:	1859      	adds	r1, r3, r1
 80046e8:	9008      	str	r0, [sp, #32]
 80046ea:	e7e0      	b.n	80046ae <aiSystemPerformanceProcess+0x15a>
 80046ec:	240047b4 	.word	0x240047b4
 80046f0:	08013e4f 	.word	0x08013e4f
 80046f4:	24000014 	.word	0x24000014
 80046f8:	08013e6b 	.word	0x08013e6b
 80046fc:	24004888 	.word	0x24004888
 8004700:	08013eae 	.word	0x08013eae
 8004704:	08013ef2 	.word	0x08013ef2
 8004708:	08013f28 	.word	0x08013f28
 800470c:	24003e40 	.word	0x24003e40
 8004710:	24000010 	.word	0x24000010
 8004714:	2400486c 	.word	0x2400486c
 8004718:	24004834 	.word	0x24004834
 800471c:	24000020 	.word	0x24000020
 8004720:	24000024 	.word	0x24000024
    	  for (int h = 0; h < 224; h++) {
 8004724:	f503 7228 	add.w	r2, r3, #672	; 0x2a0
 8004728:	4bae      	ldr	r3, [pc, #696]	; (80049e4 <aiSystemPerformanceProcess+0x490>)
 800472a:	429a      	cmp	r2, r3
 800472c:	d1a9      	bne.n	8004682 <aiSystemPerformanceProcess+0x12e>
    MON_ALLOC_ENABLE();
 800472e:	f8db 3000 	ldr.w	r3, [fp]
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	f8cb 3000 	str.w	r3, [fp]
  cyclesCount.tick_start = HAL_GetTick();
 800473a:	f7fc fd73 	bl	8001224 <HAL_GetTick>
 800473e:	4baa      	ldr	r3, [pc, #680]	; (80049e8 <aiSystemPerformanceProcess+0x494>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004740:	2100      	movs	r1, #0
 8004742:	4aaa      	ldr	r2, [pc, #680]	; (80049ec <aiSystemPerformanceProcess+0x498>)
  cyclesCount.tick_start = HAL_GetTick();
 8004744:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004746:	6051      	str	r1, [r2, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8004748:	a910      	add	r1, sp, #64	; 0x40
  return DWT->CYCCNT;
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	6820      	ldr	r0, [r4, #0]
  cyclesCount.dwt_start = dwtGetCycles();
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	aa17      	add	r2, sp, #92	; 0x5c
 8004752:	f000 fe08 	bl	8005366 <ai_mnetwork_run>
    if (batch != 1) {
 8004756:	2801      	cmp	r0, #1
 8004758:	f000 80ed 	beq.w	8004936 <aiSystemPerformanceProcess+0x3e2>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	f000 fdd6 	bl	800530e <ai_mnetwork_get_error>
 8004762:	49a3      	ldr	r1, [pc, #652]	; (80049f0 <aiSystemPerformanceProcess+0x49c>)
 8004764:	f000 f9ca 	bl	8004afc <aiLogErr>
  LC_PRINT("\r\n");
 8004768:	48a2      	ldr	r0, [pc, #648]	; (80049f4 <aiSystemPerformanceProcess+0x4a0>)
 800476a:	f000 fbcb 	bl	8004f04 <lc_print>
  MON_STACK_EVALUATE();
 800476e:	4aa2      	ldr	r2, [pc, #648]	; (80049f8 <aiSystemPerformanceProcess+0x4a4>)
 8004770:	2000      	movs	r0, #0
 8004772:	7916      	ldrb	r6, [r2, #4]
 8004774:	6090      	str	r0, [r2, #8]
 8004776:	b316      	cbz	r6, 80047be <aiSystemPerformanceProcess+0x26a>
 8004778:	6953      	ldr	r3, [r2, #20]
 800477a:	68d1      	ldr	r1, [r2, #12]
 800477c:	1a59      	subs	r1, r3, r1
 800477e:	69d3      	ldr	r3, [r2, #28]
 8004780:	3303      	adds	r3, #3
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	f103 0c20 	add.w	ip, r3, #32
 800478a:	f853 eb04 	ldr.w	lr, [r3], #4
 800478e:	f1be 3fde 	cmp.w	lr, #3739147998	; 0xdededede
 8004792:	bf18      	it	ne
 8004794:	4630      	movne	r0, r6
 8004796:	459c      	cmp	ip, r3
 8004798:	d1f7      	bne.n	800478a <aiSystemPerformanceProcess+0x236>
 800479a:	2800      	cmp	r0, #0
 800479c:	f040 80f0 	bne.w	8004980 <aiSystemPerformanceProcess+0x42c>
 80047a0:	4895      	ldr	r0, [pc, #596]	; (80049f8 <aiSystemPerformanceProcess+0x4a4>)
 80047a2:	2320      	movs	r3, #32
 80047a4:	6986      	ldr	r6, [r0, #24]
 80047a6:	6083      	str	r3, [r0, #8]
 80047a8:	f8dc 2000 	ldr.w	r2, [ip]
 80047ac:	6883      	ldr	r3, [r0, #8]
 80047ae:	f1b2 3fde 	cmp.w	r2, #3739147998	; 0xdededede
 80047b2:	d102      	bne.n	80047ba <aiSystemPerformanceProcess+0x266>
 80047b4:	45b4      	cmp	ip, r6
 80047b6:	f0c0 80de 	bcc.w	8004976 <aiSystemPerformanceProcess+0x422>
 80047ba:	1ac9      	subs	r1, r1, r3
 80047bc:	6081      	str	r1, [r0, #8]
  LC_PRINT("\r\n");
 80047be:	488d      	ldr	r0, [pc, #564]	; (80049f4 <aiSystemPerformanceProcess+0x4a0>)
 80047c0:	f000 fba0 	bl	8004f04 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 80047c4:	4b8d      	ldr	r3, [pc, #564]	; (80049fc <aiSystemPerformanceProcess+0x4a8>)
  tcumul /= (uint64_t)iter;
 80047c6:	4642      	mov	r2, r8
  tcumul -= u_observer_ctx.u_dur_t;
 80047c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
  tcumul /= (uint64_t)iter;
 80047cc:	ea4f 73e8 	mov.w	r3, r8, asr #31
  tcumul -= u_observer_ctx.u_dur_t;
 80047d0:	1a28      	subs	r0, r5, r0
 80047d2:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 80047d6:	f7fb fee9 	bl	80005ac <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 80047da:	aa0c      	add	r2, sp, #48	; 0x30
  tcumul /= (uint64_t)iter;
 80047dc:	468b      	mov	fp, r1
 80047de:	4605      	mov	r5, r0
 80047e0:	4606      	mov	r6, r0
  dwtCyclesToTime(tcumul, &t);
 80047e2:	f000 fc1d 	bl	8005020 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 80047e6:	6861      	ldr	r1, [r4, #4]
 80047e8:	9105      	str	r1, [sp, #20]
 80047ea:	f7fd fce5 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80047ee:	4682      	mov	sl, r0
 80047f0:	f7fd fea8 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 80047f4:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <aiSystemPerformanceProcess+0x4ac>)
 80047f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047f8:	9905      	ldr	r1, [sp, #20]
 80047fa:	9201      	str	r2, [sp, #4]
 80047fc:	4642      	mov	r2, r8
 80047fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8004802:	fbba f3f3 	udiv	r3, sl, r3
 8004806:	9000      	str	r0, [sp, #0]
 8004808:	487e      	ldr	r0, [pc, #504]	; (8004a04 <aiSystemPerformanceProcess+0x4b0>)
 800480a:	f000 fb7b 	bl	8004f04 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 800480e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004810:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004818:	fb00 3101 	mla	r1, r0, r1, r3
 800481c:	487a      	ldr	r0, [pc, #488]	; (8004a08 <aiSystemPerformanceProcess+0x4b4>)
 800481e:	f000 fb71 	bl	8004f04 <lc_print>
  if (tcumul / 100000)
 8004822:	4b7a      	ldr	r3, [pc, #488]	; (8004a0c <aiSystemPerformanceProcess+0x4b8>)
 8004824:	42ab      	cmp	r3, r5
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	eb73 030b 	sbcs.w	r3, r3, fp
 800482e:	f080 80b1 	bcs.w	8004994 <aiSystemPerformanceProcess+0x440>
    LC_PRINT(" CPU cycles   : %ld%ld (average)\r\n",
 8004832:	4a77      	ldr	r2, [pc, #476]	; (8004a10 <aiSystemPerformanceProcess+0x4bc>)
 8004834:	2300      	movs	r3, #0
 8004836:	4628      	mov	r0, r5
 8004838:	4659      	mov	r1, fp
 800483a:	f7fb feb7 	bl	80005ac <__aeabi_uldivmod>
 800483e:	4a74      	ldr	r2, [pc, #464]	; (8004a10 <aiSystemPerformanceProcess+0x4bc>)
 8004840:	4601      	mov	r1, r0
 8004842:	fb02 5210 	mls	r2, r2, r0, r5
 8004846:	4873      	ldr	r0, [pc, #460]	; (8004a14 <aiSystemPerformanceProcess+0x4c0>)
 8004848:	f000 fb5c 	bl	8004f04 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 800484c:	2564      	movs	r5, #100	; 0x64
 800484e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004850:	2300      	movs	r3, #0
 8004852:	fba6 6105 	umull	r6, r1, r6, r5
 8004856:	fb05 1b0b 	mla	fp, r5, fp, r1
 800485a:	4630      	mov	r0, r6
 800485c:	4659      	mov	r1, fp
 800485e:	f7fb fea5 	bl	80005ac <__aeabi_uldivmod>
 8004862:	2225      	movs	r2, #37	; 0x25
 8004864:	4601      	mov	r1, r0
 8004866:	486c      	ldr	r0, [pc, #432]	; (8004a18 <aiSystemPerformanceProcess+0x4c4>)
 8004868:	f000 fb4c 	bl	8004f04 <lc_print>
  cmacc = (uint32_t)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 800486c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800486e:	2300      	movs	r3, #0
 8004870:	4630      	mov	r0, r6
 8004872:	4659      	mov	r1, fp
 8004874:	f7fb fe9a 	bl	80005ac <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 8004878:	fbb0 f1f5 	udiv	r1, r0, r5
 800487c:	fb05 0211 	mls	r2, r5, r1, r0
 8004880:	4866      	ldr	r0, [pc, #408]	; (8004a1c <aiSystemPerformanceProcess+0x4c8>)
 8004882:	f000 fb3f 	bl	8004f04 <lc_print>
  MON_STACK_REPORT();
 8004886:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <aiSystemPerformanceProcess+0x4a4>)
 8004888:	791a      	ldrb	r2, [r3, #4]
 800488a:	2a00      	cmp	r2, #0
 800488c:	f000 8087 	beq.w	800499e <aiSystemPerformanceProcess+0x44a>
 8004890:	6899      	ldr	r1, [r3, #8]
 8004892:	4863      	ldr	r0, [pc, #396]	; (8004a20 <aiSystemPerformanceProcess+0x4cc>)
 8004894:	f000 fb36 	bl	8004f04 <lc_print>
  MON_ALLOC_REPORT();
 8004898:	4962      	ldr	r1, [pc, #392]	; (8004a24 <aiSystemPerformanceProcess+0x4d0>)
 800489a:	4863      	ldr	r0, [pc, #396]	; (8004a28 <aiSystemPerformanceProcess+0x4d4>)
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80048a2:	9303      	str	r3, [sp, #12]
 80048a4:	698b      	ldr	r3, [r1, #24]
 80048a6:	9302      	str	r3, [sp, #8]
 80048a8:	694b      	ldr	r3, [r1, #20]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	688b      	ldr	r3, [r1, #8]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	690b      	ldr	r3, [r1, #16]
 80048b2:	684a      	ldr	r2, [r1, #4]
 80048b4:	68c9      	ldr	r1, [r1, #12]
 80048b6:	f000 fb25 	bl	8004f04 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 80048ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80048bc:	9906      	ldr	r1, [sp, #24]
 80048be:	485b      	ldr	r0, [pc, #364]	; (8004a2c <aiSystemPerformanceProcess+0x4d8>)
 80048c0:	f000 fb20 	bl	8004f04 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 80048c4:	485a      	ldr	r0, [pc, #360]	; (8004a30 <aiSystemPerformanceProcess+0x4dc>)
 80048c6:	f7ff fc99 	bl	80041fc <aiObserverDone>
      r = aiTestConsole();
 80048ca:	f7ff fc2b 	bl	8004124 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 80048ce:	2864      	cmp	r0, #100	; 0x64
 80048d0:	f43f ae43 	beq.w	800455a <aiSystemPerformanceProcess+0x6>
      } else if (r == CONS_EVT_HELP) {
 80048d4:	2803      	cmp	r0, #3
 80048d6:	d124      	bne.n	8004922 <aiSystemPerformanceProcess+0x3ce>
        LC_PRINT("\r\n");
 80048d8:	4846      	ldr	r0, [pc, #280]	; (80049f4 <aiSystemPerformanceProcess+0x4a0>)
 80048da:	f000 fb13 	bl	8004f04 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 80048de:	4855      	ldr	r0, [pc, #340]	; (8004a34 <aiSystemPerformanceProcess+0x4e0>)
 80048e0:	f000 fb10 	bl	8004f04 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 80048e4:	4854      	ldr	r0, [pc, #336]	; (8004a38 <aiSystemPerformanceProcess+0x4e4>)
 80048e6:	f000 fb0d 	bl	8004f04 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 80048ea:	4854      	ldr	r0, [pc, #336]	; (8004a3c <aiSystemPerformanceProcess+0x4e8>)
 80048ec:	f000 fb0a 	bl	8004f04 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 80048f0:	4853      	ldr	r0, [pc, #332]	; (8004a40 <aiSystemPerformanceProcess+0x4ec>)
 80048f2:	f000 fb07 	bl	8004f04 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 80048f6:	4853      	ldr	r0, [pc, #332]	; (8004a44 <aiSystemPerformanceProcess+0x4f0>)
 80048f8:	f000 fb04 	bl	8004f04 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 80048fc:	4852      	ldr	r0, [pc, #328]	; (8004a48 <aiSystemPerformanceProcess+0x4f4>)
 80048fe:	f000 fb01 	bl	8004f04 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8004902:	4852      	ldr	r0, [pc, #328]	; (8004a4c <aiSystemPerformanceProcess+0x4f8>)
 8004904:	f000 fafe 	bl	8004f04 <lc_print>
        LC_PRINT("\r\n");
 8004908:	483a      	ldr	r0, [pc, #232]	; (80049f4 <aiSystemPerformanceProcess+0x4a0>)
 800490a:	f000 fafb 	bl	8004f04 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 800490e:	4850      	ldr	r0, [pc, #320]	; (8004a50 <aiSystemPerformanceProcess+0x4fc>)
 8004910:	f000 faf8 	bl	8004f04 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8004914:	f7ff fc06 	bl	8004124 <aiTestConsole>
 8004918:	2800      	cmp	r0, #0
 800491a:	d044      	beq.n	80049a6 <aiSystemPerformanceProcess+0x452>
        if (r == CONS_EVT_UNDEFINED)
 800491c:	2864      	cmp	r0, #100	; 0x64
 800491e:	f43f ae1c 	beq.w	800455a <aiSystemPerformanceProcess+0x6>
      if (r == CONS_EVT_PROF) {
 8004922:	2805      	cmp	r0, #5
 8004924:	d144      	bne.n	80049b0 <aiSystemPerformanceProcess+0x45c>
        profiling_mode = true;
 8004926:	2301      	movs	r3, #1
        profiling_factor *= 2;
 8004928:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <aiSystemPerformanceProcess+0x500>)
        profiling_mode = true;
 800492a:	f889 3000 	strb.w	r3, [r9]
        profiling_factor *= 2;
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]
  } while (r==0);
 8004934:	e611      	b.n	800455a <aiSystemPerformanceProcess+0x6>
    tend = cyclesCounterEnd();
 8004936:	f7ff fb71 	bl	800401c <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 800493a:	f8db 3000 	ldr.w	r3, [fp]
    tcumul += tend;
 800493e:	1945      	adds	r5, r0, r5
    dwtCyclesToTime(tend, &t);
 8004940:	aa0c      	add	r2, sp, #48	; 0x30
    MON_ALLOC_DISABLE();
 8004942:	f023 0301 	bic.w	r3, r3, #1
    tcumul += tend;
 8004946:	eb4a 0a01 	adc.w	sl, sl, r1
    MON_ALLOC_DISABLE();
 800494a:	f8cb 3000 	str.w	r3, [fp]
    dwtCyclesToTime(tend, &t);
 800494e:	f000 fb67 	bl	8005020 <dwtCyclesToTime>
    if (!profiling_mode) {
 8004952:	f899 3000 	ldrb.w	r3, [r9]
 8004956:	b95b      	cbnz	r3, 8004970 <aiSystemPerformanceProcess+0x41c>
      if (t.s > 10)
 8004958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      LC_PRINT(".");
 800495a:	483f      	ldr	r0, [pc, #252]	; (8004a58 <aiSystemPerformanceProcess+0x504>)
      if (t.s > 10)
 800495c:	2b0a      	cmp	r3, #10
 800495e:	bfc8      	it	gt
 8004960:	4646      	movgt	r6, r8
      LC_PRINT(".");
 8004962:	f000 facf 	bl	8004f04 <lc_print>
      fflush(stdout);
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <aiSystemPerformanceProcess+0x508>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6898      	ldr	r0, [r3, #8]
 800496c:	f00c fc10 	bl	8011190 <fflush>
      for (iter = 0; iter < niter; iter++) {
 8004970:	f108 0801 	add.w	r8, r8, #1
 8004974:	e67d      	b.n	8004672 <aiSystemPerformanceProcess+0x11e>
  MON_STACK_EVALUATE();
 8004976:	3304      	adds	r3, #4
 8004978:	f10c 0c04 	add.w	ip, ip, #4
 800497c:	6083      	str	r3, [r0, #8]
 800497e:	e713      	b.n	80047a8 <aiSystemPerformanceProcess+0x254>
 8004980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004984:	4836      	ldr	r0, [pc, #216]	; (8004a60 <aiSystemPerformanceProcess+0x50c>)
 8004986:	6093      	str	r3, [r2, #8]
 8004988:	f000 fabc 	bl	8004f04 <lc_print>
 800498c:	4835      	ldr	r0, [pc, #212]	; (8004a64 <aiSystemPerformanceProcess+0x510>)
 800498e:	f000 fab9 	bl	8004f04 <lc_print>
 8004992:	e714      	b.n	80047be <aiSystemPerformanceProcess+0x26a>
    LC_PRINT(" CPU cycles   : %ld (average)\r\n", (unsigned long)(tcumul));
 8004994:	4629      	mov	r1, r5
 8004996:	4834      	ldr	r0, [pc, #208]	; (8004a68 <aiSystemPerformanceProcess+0x514>)
 8004998:	f000 fab4 	bl	8004f04 <lc_print>
 800499c:	e756      	b.n	800484c <aiSystemPerformanceProcess+0x2f8>
  MON_STACK_REPORT();
 800499e:	4833      	ldr	r0, [pc, #204]	; (8004a6c <aiSystemPerformanceProcess+0x518>)
 80049a0:	f000 fab0 	bl	8004f04 <lc_print>
 80049a4:	e778      	b.n	8004898 <aiSystemPerformanceProcess+0x344>
          HAL_Delay(1000);
 80049a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049aa:	f7fc fc41 	bl	8001230 <HAL_Delay>
 80049ae:	e7b1      	b.n	8004914 <aiSystemPerformanceProcess+0x3c0>
      if (r == CONS_EVT_HIDE) {
 80049b0:	2806      	cmp	r0, #6
 80049b2:	d103      	bne.n	80049bc <aiSystemPerformanceProcess+0x468>
        observer_mode = false;
 80049b4:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <aiSystemPerformanceProcess+0x51c>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 80049ba:	e5ce      	b.n	800455a <aiSystemPerformanceProcess+0x6>
      if (r == CONS_EVT_RESTART) {
 80049bc:	2802      	cmp	r0, #2
 80049be:	d159      	bne.n	8004a74 <aiSystemPerformanceProcess+0x520>
        profiling_mode = false;
 80049c0:	2300      	movs	r3, #0
        observer_mode = true;
 80049c2:	2201      	movs	r2, #1
        LC_PRINT("\r\n");
 80049c4:	480b      	ldr	r0, [pc, #44]	; (80049f4 <aiSystemPerformanceProcess+0x4a0>)
        profiling_mode = false;
 80049c6:	f889 3000 	strb.w	r3, [r9]
        observer_mode = true;
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <aiSystemPerformanceProcess+0x51c>)
 80049cc:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 80049ce:	2205      	movs	r2, #5
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <aiSystemPerformanceProcess+0x500>)
 80049d2:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 80049d4:	f000 fa96 	bl	8004f04 <lc_print>
        aiDeInit();
 80049d8:	f7ff fb8a 	bl	80040f0 <aiDeInit>
        aiSystemPerformanceInit();
 80049dc:	f7ff fd06 	bl	80043ec <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 80049e0:	e5bb      	b.n	800455a <aiSystemPerformanceProcess+0x6>
 80049e2:	bf00      	nop
 80049e4:	00024ea0 	.word	0x00024ea0
 80049e8:	24004860 	.word	0x24004860
 80049ec:	e0001000 	.word	0xe0001000
 80049f0:	08013f41 	.word	0x08013f41
 80049f4:	08013f53 	.word	0x08013f53
 80049f8:	24004888 	.word	0x24004888
 80049fc:	24004838 	.word	0x24004838
 8004a00:	000f4240 	.word	0x000f4240
 8004a04:	08013fd3 	.word	0x08013fd3
 8004a08:	08014019 	.word	0x08014019
 8004a0c:	0001869f 	.word	0x0001869f
 8004a10:	000186a0 	.word	0x000186a0
 8004a14:	08014040 	.word	0x08014040
 8004a18:	08014083 	.word	0x08014083
 8004a1c:	080140ac 	.word	0x080140ac
 8004a20:	080140df 	.word	0x080140df
 8004a24:	2400486c 	.word	0x2400486c
 8004a28:	0801411c 	.word	0x0801411c
 8004a2c:	08014175 	.word	0x08014175
 8004a30:	240047b4 	.word	0x240047b4
 8004a34:	080141b0 	.word	0x080141b0
 8004a38:	080141dc 	.word	0x080141dc
 8004a3c:	08014200 	.word	0x08014200
 8004a40:	08014231 	.word	0x08014231
 8004a44:	08014246 	.word	0x08014246
 8004a48:	08014280 	.word	0x08014280
 8004a4c:	080142a0 	.word	0x080142a0
 8004a50:	080142c4 	.word	0x080142c4
 8004a54:	24000014 	.word	0x24000014
 8004a58:	08013f51 	.word	0x08013f51
 8004a5c:	24003e40 	.word	0x24003e40
 8004a60:	08013f56 	.word	0x08013f56
 8004a64:	08013f7a 	.word	0x08013f7a
 8004a68:	08014063 	.word	0x08014063
 8004a6c:	080140fb 	.word	0x080140fb
 8004a70:	24000010 	.word	0x24000010
      if (r == CONS_EVT_QUIT) {
 8004a74:	2801      	cmp	r0, #1
 8004a76:	d115      	bne.n	8004aa4 <aiSystemPerformanceProcess+0x550>
        profiling_mode = false;
 8004a78:	2300      	movs	r3, #0
        LC_PRINT("\r\n");
 8004a7a:	4815      	ldr	r0, [pc, #84]	; (8004ad0 <aiSystemPerformanceProcess+0x57c>)
        profiling_mode = false;
 8004a7c:	f889 3000 	strb.w	r3, [r9]
        LC_PRINT("\r\n");
 8004a80:	f000 fa40 	bl	8004f04 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a84:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004a88:	b672      	cpsid	i
        aiDeInit();
 8004a8a:	f7ff fb31 	bl	80040f0 <aiDeInit>
        LC_PRINT("\r\n");
 8004a8e:	4810      	ldr	r0, [pc, #64]	; (8004ad0 <aiSystemPerformanceProcess+0x57c>)
 8004a90:	f000 fa38 	bl	8004f04 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 8004a94:	480f      	ldr	r0, [pc, #60]	; (8004ad4 <aiSystemPerformanceProcess+0x580>)
 8004a96:	f000 fa35 	bl	8004f04 <lc_print>
          HAL_Delay(1000);
 8004a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a9e:	f7fc fbc7 	bl	8001230 <HAL_Delay>
        while (1) {
 8004aa2:	e7fa      	b.n	8004a9a <aiSystemPerformanceProcess+0x546>
      if (r == CONS_EVT_PAUSE) {
 8004aa4:	2804      	cmp	r0, #4
 8004aa6:	d003      	beq.n	8004ab0 <aiSystemPerformanceProcess+0x55c>
  } while (r==0);
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f43f ad56 	beq.w	800455a <aiSystemPerformanceProcess+0x6>
 8004aae:	e55c      	b.n	800456a <aiSystemPerformanceProcess+0x16>
        LC_PRINT("\r\n");
 8004ab0:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <aiSystemPerformanceProcess+0x57c>)
 8004ab2:	f000 fa27 	bl	8004f04 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8004ab6:	4808      	ldr	r0, [pc, #32]	; (8004ad8 <aiSystemPerformanceProcess+0x584>)
 8004ab8:	f000 fa24 	bl	8004f04 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8004abc:	f7ff fb32 	bl	8004124 <aiTestConsole>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f47f ad4a 	bne.w	800455a <aiSystemPerformanceProcess+0x6>
          HAL_Delay(1000);
 8004ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aca:	f7fc fbb1 	bl	8001230 <HAL_Delay>
 8004ace:	e7f5      	b.n	8004abc <aiSystemPerformanceProcess+0x568>
 8004ad0:	08013f53 	.word	0x08013f53
 8004ad4:	080142e2 	.word	0x080142e2
 8004ad8:	080142c4 	.word	0x080142c4

08004adc <aiPlatformVersion>:
#include <aiTestUtility.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8004adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2107      	movs	r1, #7
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4804      	ldr	r0, [pc, #16]	; (8004af8 <aiPlatformVersion+0x1c>)
 8004ae6:	9100      	str	r1, [sp, #0]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004aee:	f000 fa09 	bl	8004f04 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8004af2:	b005      	add	sp, #20
 8004af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004af8:	0801430d 	.word	0x0801430d

08004afc <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8004afc:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004afe:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8004b02:	b2c4      	uxtb	r4, r0
  if (fct)
 8004b04:	b129      	cbz	r1, 8004b12 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004b06:	4622      	mov	r2, r4
 8004b08:	4805      	ldr	r0, [pc, #20]	; (8004b20 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8004b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004b0e:	f000 b9f9 	b.w	8004f04 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004b12:	4621      	mov	r1, r4
 8004b14:	461a      	mov	r2, r3
 8004b16:	4803      	ldr	r0, [pc, #12]	; (8004b24 <aiLogErr+0x28>)
}
 8004b18:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004b1c:	f000 b9f2 	b.w	8004f04 <lc_print>
 8004b20:	0801433f 	.word	0x0801433f
 8004b24:	0801436c 	.word	0x0801436c

08004b28 <aiPrintBufferInfo>:

void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;
  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b28:	6981      	ldr	r1, [r0, #24]
{
 8004b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b2e:	68ca      	ldr	r2, [r1, #12]
{
 8004b30:	4605      	mov	r5, r0
  const ai_buffer_format fmt = buffer->format;
 8004b32:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b34:	688b      	ldr	r3, [r1, #8]
 8004b36:	684f      	ldr	r7, [r1, #4]
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004b38:	ea4f 18e6 	mov.w	r8, r6, asr #7
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b3c:	680c      	ldr	r4, [r1, #0]
 8004b3e:	2101      	movs	r1, #1
{
 8004b40:	ed2d 8b02 	vpush	{d8}
 8004b44:	b085      	sub	sp, #20
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b46:	9203      	str	r2, [sp, #12]
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	f001 fc5d 	bl	8006408 <ai_buffer_get_size>
 8004b4e:	4621      	mov	r1, r4
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004b50:	f3c6 14c6 	ubfx	r4, r6, #7, #7
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b54:	e9cd 7000 	strd	r7, r0, [sp]
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004b58:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8004b5c:	485a      	ldr	r0, [pc, #360]	; (8004cc8 <aiPrintBufferInfo+0x1a0>)
 8004b5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004b62:	f000 f9cf 	bl	8004f04 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004b66:	2f01      	cmp	r7, #1
 8004b68:	d118      	bne.n	8004b9c <aiPrintBufferInfo+0x74>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4857      	ldr	r0, [pc, #348]	; (8004ccc <aiPrintBufferInfo+0x1a4>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004b6e:	f000 f9c9 	bl	8004f04 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8004b72:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8004b74:	2101      	movs	r1, #1
 8004b76:	4628      	mov	r0, r5
  if (buffer->data)
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	f000 808f 	beq.w	8004c9c <aiPrintBufferInfo+0x174>
    LC_PRINT(" @0x%X/%d",
 8004b7e:	f001 fc43 	bl	8006408 <ai_buffer_get_size>
 8004b82:	4631      	mov	r1, r6
 8004b84:	f001 fc70 	bl	8006468 <ai_buffer_get_byte_size>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4850      	ldr	r0, [pc, #320]	; (8004cd0 <aiPrintBufferInfo+0x1a8>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8004b8e:	b005      	add	sp, #20
 8004b90:	ecbd 8b02 	vpop	{d8}
 8004b94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8004b98:	f000 b9b4 	b.w	8004f04 <lc_print>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8004b9c:	2f03      	cmp	r7, #3
 8004b9e:	d102      	bne.n	8004ba6 <aiPrintBufferInfo+0x7e>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	484c      	ldr	r0, [pc, #304]	; (8004cd4 <aiPrintBufferInfo+0x1ac>)
 8004ba4:	e7e3      	b.n	8004b6e <aiPrintBufferInfo+0x46>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8004ba6:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8004cec <aiPrintBufferInfo+0x1c4>
 8004baa:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8004bae:	4622      	mov	r2, r4
 8004bb0:	f109 0102 	add.w	r1, r9, #2
 8004bb4:	f109 0029 	add.w	r0, r9, #41	; 0x29
 8004bb8:	bf18      	it	ne
 8004bba:	4649      	movne	r1, r9
 8004bbc:	f000 f9a2 	bl	8004f04 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8004bc0:	2f02      	cmp	r7, #2
 8004bc2:	d1d6      	bne.n	8004b72 <aiPrintBufferInfo+0x4a>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8004bc4:	68ab      	ldr	r3, [r5, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d057      	beq.n	8004c7a <aiPrintBufferInfo+0x152>
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	07d2      	lsls	r2, r2, #31
 8004bce:	d554      	bpl.n	8004c7a <aiPrintBufferInfo+0x152>
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d051      	beq.n	8004c7a <aiPrintBufferInfo+0x152>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8004bd6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8004bda:	f109 002e 	add.w	r0, r9, #46	; 0x2e
      for (int idx=0; idx<max_; idx++) {
 8004bde:	2400      	movs	r4, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004be0:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8004cd8 <aiPrintBufferInfo+0x1b0>
      const int max_ = s_> 4?4:s_;
 8004be4:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", scale, zero_point);
 8004be6:	f109 0933 	add.w	r9, r9, #51	; 0x33
      LC_PRINT(" %d:", s_);
 8004bea:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8004bec:	2f04      	cmp	r7, #4
 8004bee:	bf28      	it	cs
 8004bf0:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8004bf2:	f000 f987 	bl	8004f04 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004bf6:	42bc      	cmp	r4, r7
 8004bf8:	db07      	blt.n	8004c0a <aiPrintBufferInfo+0xe2>
      LC_PRINT((s_ > max_)?"..":"");
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <aiPrintBufferInfo+0x1b4>)
 8004bfc:	1cd8      	adds	r0, r3, #3
 8004bfe:	4547      	cmp	r7, r8
 8004c00:	bf38      	it	cc
 8004c02:	4618      	movcc	r0, r3
 8004c04:	f000 f97e 	bl	8004f04 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8004c08:	e7b3      	b.n	8004b72 <aiPrintBufferInfo+0x4a>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004c0a:	68a9      	ldr	r1, [r5, #8]
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d053      	beq.n	8004cb8 <aiPrintBufferInfo+0x190>
 8004c10:	680a      	ldr	r2, [r1, #0]
 8004c12:	f012 0301 	ands.w	r3, r2, #1
 8004c16:	d02b      	beq.n	8004c70 <aiPrintBufferInfo+0x148>
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	d04c      	beq.n	8004cb8 <aiPrintBufferInfo+0x190>
 8004c1e:	684b      	ldr	r3, [r1, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d04d      	beq.n	8004cc0 <aiPrintBufferInfo+0x198>
 8004c24:	884a      	ldrh	r2, [r1, #2]
 8004c26:	42a2      	cmp	r2, r4
 8004c28:	dd4a      	ble.n	8004cc0 <aiPrintBufferInfo+0x198>
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004c30:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d041      	beq.n	8004cbc <aiPrintBufferInfo+0x194>
 8004c38:	880a      	ldrh	r2, [r1, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004c3a:	6848      	ldr	r0, [r1, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004c3c:	f012 0302 	ands.w	r3, r2, #2
 8004c40:	d00f      	beq.n	8004c62 <aiPrintBufferInfo+0x13a>
 8004c42:	b1c0      	cbz	r0, 8004c76 <aiPrintBufferInfo+0x14e>
 8004c44:	884b      	ldrh	r3, [r1, #2]
 8004c46:	42a3      	cmp	r3, r4
 8004c48:	dd38      	ble.n	8004cbc <aiPrintBufferInfo+0x194>
 8004c4a:	6843      	ldr	r3, [r0, #4]
 8004c4c:	5d1b      	ldrb	r3, [r3, r4]
        LC_PRINT("(%f,%d),", scale, zero_point);
 8004c4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8004c56:	3401      	adds	r4, #1
        LC_PRINT("(%f,%d),", scale, zero_point);
 8004c58:	ec53 2b17 	vmov	r2, r3, d7
 8004c5c:	f000 f952 	bl	8004f04 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8004c60:	e7c9      	b.n	8004bf6 <aiPrintBufferInfo+0xce>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004c62:	b140      	cbz	r0, 8004c76 <aiPrintBufferInfo+0x14e>
 8004c64:	884a      	ldrh	r2, [r1, #2]
 8004c66:	42a2      	cmp	r2, r4
 8004c68:	ddf1      	ble.n	8004c4e <aiPrintBufferInfo+0x126>
 8004c6a:	6843      	ldr	r3, [r0, #4]
 8004c6c:	571b      	ldrsb	r3, [r3, r4]
 8004c6e:	e7ee      	b.n	8004c4e <aiPrintBufferInfo+0x126>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004c70:	eef0 7a48 	vmov.f32	s15, s16
 8004c74:	e7eb      	b.n	8004c4e <aiPrintBufferInfo+0x126>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004c76:	4603      	mov	r3, r0
 8004c78:	e7e9      	b.n	8004c4e <aiPrintBufferInfo+0x126>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8004c7a:	f018 0f78 	tst.w	r8, #120	; 0x78
 8004c7e:	d102      	bne.n	8004c86 <aiPrintBufferInfo+0x15e>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004c80:	4621      	mov	r1, r4
 8004c82:	4817      	ldr	r0, [pc, #92]	; (8004ce0 <aiPrintBufferInfo+0x1b8>)
 8004c84:	e773      	b.n	8004b6e <aiPrintBufferInfo+0x46>
      LC_PRINT(" Q%d.%d",
 8004c86:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8004c8a:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8004c8e:	4815      	ldr	r0, [pc, #84]	; (8004ce4 <aiPrintBufferInfo+0x1bc>)
 8004c90:	3a40      	subs	r2, #64	; 0x40
 8004c92:	4411      	add	r1, r2
 8004c94:	1a61      	subs	r1, r4, r1
 8004c96:	f000 f935 	bl	8004f04 <lc_print>
 8004c9a:	e76a      	b.n	8004b72 <aiPrintBufferInfo+0x4a>
    LC_PRINT(" (User Domain)/%d",
 8004c9c:	f001 fbb4 	bl	8006408 <ai_buffer_get_size>
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	f001 fbe1 	bl	8006468 <ai_buffer_get_byte_size>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	480f      	ldr	r0, [pc, #60]	; (8004ce8 <aiPrintBufferInfo+0x1c0>)
}
 8004caa:	b005      	add	sp, #20
 8004cac:	ecbd 8b02 	vpop	{d8}
 8004cb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8004cb4:	f000 b926 	b.w	8004f04 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004cb8:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e7c6      	b.n	8004c4e <aiPrintBufferInfo+0x126>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004cc0:	eef0 7a48 	vmov.f32	s15, s16
 8004cc4:	e7b6      	b.n	8004c34 <aiPrintBufferInfo+0x10c>
 8004cc6:	bf00      	nop
 8004cc8:	0801439c 	.word	0x0801439c
 8004ccc:	080143ae 	.word	0x080143ae
 8004cd0:	080143e3 	.word	0x080143e3
 8004cd4:	080143b6 	.word	0x080143b6
 8004cd8:	00000000 	.word	0x00000000
 8004cdc:	08014398 	.word	0x08014398
 8004ce0:	080143d0 	.word	0x080143d0
 8004ce4:	080143db 	.word	0x080143db
 8004ce8:	080143ed 	.word	0x080143ed
 8004cec:	08014394 	.word	0x08014394

08004cf0 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8004cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8004cf6:	484e      	ldr	r0, [pc, #312]	; (8004e30 <aiPrintNetworkInfo+0x140>)
 8004cf8:	f000 f904 	bl	8004f04 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8004cfc:	484d      	ldr	r0, [pc, #308]	; (8004e34 <aiPrintNetworkInfo+0x144>)
 8004cfe:	6821      	ldr	r1, [r4, #0]
 8004d00:	f000 f900 	bl	8004f04 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8004d04:	6861      	ldr	r1, [r4, #4]
 8004d06:	484c      	ldr	r0, [pc, #304]	; (8004e38 <aiPrintNetworkInfo+0x148>)
 8004d08:	f000 f8fc 	bl	8004f04 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8004d0c:	68a1      	ldr	r1, [r4, #8]
 8004d0e:	484b      	ldr	r0, [pc, #300]	; (8004e3c <aiPrintNetworkInfo+0x14c>)
 8004d10:	f000 f8f8 	bl	8004f04 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8004d14:	68e1      	ldr	r1, [r4, #12]
 8004d16:	484a      	ldr	r0, [pc, #296]	; (8004e40 <aiPrintNetworkInfo+0x150>)
 8004d18:	f000 f8f4 	bl	8004f04 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8004d1c:	7da3      	ldrb	r3, [r4, #22]
 8004d1e:	7d21      	ldrb	r1, [r4, #20]
 8004d20:	7d62      	ldrb	r2, [r4, #21]
 8004d22:	4848      	ldr	r0, [pc, #288]	; (8004e44 <aiPrintNetworkInfo+0x154>)
 8004d24:	f000 f8ee 	bl	8004f04 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8004d28:	69a1      	ldr	r1, [r4, #24]
 8004d2a:	780b      	ldrb	r3, [r1, #0]
 8004d2c:	b113      	cbz	r3, 8004d34 <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8004d2e:	4846      	ldr	r0, [pc, #280]	; (8004e48 <aiPrintNetworkInfo+0x158>)
 8004d30:	f000 f8e8 	bl	8004f04 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004d34:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004d36:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004d38:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004d3a:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004d3e:	7f21      	ldrb	r1, [r4, #28]
 8004d40:	4842      	ldr	r0, [pc, #264]	; (8004e4c <aiPrintNetworkInfo+0x15c>)
      LC_PRINT("  [%d] ", idx);
 8004d42:	4f43      	ldr	r7, [pc, #268]	; (8004e50 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004d44:	f000 f8de 	bl	8004f04 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8004d48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d4a:	4842      	ldr	r0, [pc, #264]	; (8004e54 <aiPrintNetworkInfo+0x164>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8004d4c:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8004d50:	f000 f8d8 	bl	8004f04 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8004d54:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004d56:	4840      	ldr	r0, [pc, #256]	; (8004e58 <aiPrintNetworkInfo+0x168>)
 8004d58:	f000 f8d4 	bl	8004f04 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8004d5c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8004d60:	483e      	ldr	r0, [pc, #248]	; (8004e5c <aiPrintNetworkInfo+0x16c>)
 8004d62:	f000 f8cf 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004d66:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	dc25      	bgt.n	8004dba <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8004d6e:	4f38      	ldr	r7, [pc, #224]	; (8004e50 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8004d70:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004d72:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8004d76:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8004d7a:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8004d7e:	4838      	ldr	r0, [pc, #224]	; (8004e60 <aiPrintNetworkInfo+0x170>)
 8004d80:	f000 f8c0 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8004d84:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dc25      	bgt.n	8004dd8 <aiPrintNetworkInfo+0xe8>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8004d8c:	4e35      	ldr	r6, [pc, #212]	; (8004e64 <aiPrintNetworkInfo+0x174>)
  for (int i=0; i<report->n_inputs; i++) {
 8004d8e:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8004d90:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8004d92:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    LC_PRINT("\r\n");
 8004d94:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8004d98:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004d9a:	4833      	ldr	r0, [pc, #204]	; (8004e68 <aiPrintNetworkInfo+0x178>)
 8004d9c:	f000 f8b2 	bl	8004f04 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8004da0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8004da2:	42ab      	cmp	r3, r5
 8004da4:	dc27      	bgt.n	8004df6 <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8004da6:	4e31      	ldr	r6, [pc, #196]	; (8004e6c <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 8004da8:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8004daa:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8004dac:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8004db0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004db2:	42ab      	cmp	r3, r5
 8004db4:	dc2d      	bgt.n	8004e12 <aiPrintNetworkInfo+0x122>
  }
}
 8004db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004dba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8004dbc:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004dbe:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f000 f89e 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004dc8:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7ff feac 	bl	8004b28 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004dd0:	4648      	mov	r0, r9
 8004dd2:	f000 f897 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004dd6:	e7c6      	b.n	8004d66 <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004dd8:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8004dda:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004ddc:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8004de0:	4638      	mov	r0, r7
 8004de2:	f000 f88f 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8004de6:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff fe9d 	bl	8004b28 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004dee:	4648      	mov	r0, r9
 8004df0:	f000 f888 	bl	8004f04 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8004df4:	e7c6      	b.n	8004d84 <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 8004df6:	4629      	mov	r1, r5
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f883 	bl	8004f04 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8004dfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004e00:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8004e04:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8004e06:	f7ff fe8f 	bl	8004b28 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f000 f87a 	bl	8004f04 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8004e10:	e7c6      	b.n	8004da0 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 8004e12:	4629      	mov	r1, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 f875 	bl	8004f04 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8004e1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e1c:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8004e20:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8004e22:	f7ff fe81 	bl	8004b28 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004e26:	4640      	mov	r0, r8
 8004e28:	f000 f86c 	bl	8004f04 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8004e2c:	e7c0      	b.n	8004db0 <aiPrintNetworkInfo+0xc0>
 8004e2e:	bf00      	nop
 8004e30:	080143ff 	.word	0x080143ff
 8004e34:	08014419 	.word	0x08014419
 8004e38:	08014434 	.word	0x08014434
 8004e3c:	0801444f 	.word	0x0801444f
 8004e40:	0801446a 	.word	0x0801446a
 8004e44:	08014485 	.word	0x08014485
 8004e48:	080144a6 	.word	0x080144a6
 8004e4c:	080144c1 	.word	0x080144c1
 8004e50:	08014539 	.word	0x08014539
 8004e54:	080144e2 	.word	0x080144e2
 8004e58:	08014503 	.word	0x08014503
 8004e5c:	0801451e 	.word	0x0801451e
 8004e60:	08014544 	.word	0x08014544
 8004e64:	0801457d 	.word	0x0801457d
 8004e68:	0801455f 	.word	0x0801455f
 8004e6c:	08014586 	.word	0x08014586

08004e70 <_put_c_driver>:

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
  if (_ioWriteAllowed)
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <_put_c_driver+0x24>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
{
 8004e74:	b507      	push	{r0, r1, r2, lr}
 8004e76:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8004e7a:	b13b      	cbz	r3, 8004e8c <_put_c_driver+0x1c>
    HAL_UART_Transmit(&UartHandle, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e80:	2201      	movs	r2, #1
 8004e82:	f10d 0107 	add.w	r1, sp, #7
 8004e86:	4804      	ldr	r0, [pc, #16]	; (8004e98 <_put_c_driver+0x28>)
 8004e88:	f7fe fd27 	bl	80038da <HAL_UART_Transmit>
}
 8004e8c:	b003      	add	sp, #12
 8004e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e92:	bf00      	nop
 8004e94:	24000018 	.word	0x24000018
 8004e98:	24004214 	.word	0x24004214

08004e9c <ioRawGetUint8>:
{
 8004e9c:	b508      	push	{r3, lr}
 8004e9e:	460b      	mov	r3, r1
  if (!c)
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	b910      	cbnz	r0, 8004eaa <ioRawGetUint8+0xe>
    return -1;
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004ea8:	bd08      	pop	{r3, pc}
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1,
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4804      	ldr	r0, [pc, #16]	; (8004ec0 <ioRawGetUint8+0x24>)
 8004eae:	f7fe fd71 	bl	8003994 <HAL_UART_Receive>
  if (status == HAL_TIMEOUT)
 8004eb2:	2803      	cmp	r0, #3
 8004eb4:	d0f6      	beq.n	8004ea4 <ioRawGetUint8+0x8>
  return (status == HAL_OK ? 1 : 0);
 8004eb6:	fab0 f080 	clz	r0, r0
 8004eba:	0940      	lsrs	r0, r0, #5
 8004ebc:	e7f4      	b.n	8004ea8 <ioRawGetUint8+0xc>
 8004ebe:	bf00      	nop
 8004ec0:	24004214 	.word	0x24004214

08004ec4 <_write>:
{
 8004ec4:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8004ec6:	1e14      	subs	r4, r2, #0
 8004ec8:	da0a      	bge.n	8004ee0 <_write+0x1c>
 8004eca:	3801      	subs	r0, #1
 8004ecc:	2801      	cmp	r0, #1
 8004ece:	d907      	bls.n	8004ee0 <_write+0x1c>
    errno = EBADF;
 8004ed0:	f00c f896 	bl	8011000 <__errno>
    return -1;
 8004ed4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    errno = EBADF;
 8004ed8:	2309      	movs	r3, #9
 8004eda:	6003      	str	r3, [r0, #0]
}
 8004edc:	4620      	mov	r0, r4
 8004ede:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <_write+0x38>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f9      	beq.n	8004edc <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8004ee8:	b2a2      	uxth	r2, r4
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eee:	4804      	ldr	r0, [pc, #16]	; (8004f00 <_write+0x3c>)
 8004ef0:	f7fe fcf3 	bl	80038da <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	bf18      	it	ne
 8004ef8:	2400      	movne	r4, #0
 8004efa:	e7ef      	b.n	8004edc <_write+0x18>
 8004efc:	24000018 	.word	0x24000018
 8004f00:	24004214 	.word	0x24004214

08004f04 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8004f04:	b40f      	push	{r0, r1, r2, r3}
 8004f06:	b507      	push	{r0, r1, r2, lr}
 8004f08:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4805      	ldr	r0, [pc, #20]	; (8004f24 <lc_print+0x20>)
{
 8004f0e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8004f12:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004f14:	f000 fae6 	bl	80054e4 <vlc_print>
  va_end(ap);
}
 8004f18:	b003      	add	sp, #12
 8004f1a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f1e:	b004      	add	sp, #16
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	08004e71 	.word	0x08004e71

08004f28 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8004f28:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8004f2a:	4d11      	ldr	r5, [pc, #68]	; (8004f70 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8004f2c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8004f2e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8004f30:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004f34:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004f38:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8004f3c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004f3e:	f00c fa57 	bl	80113f0 <malloc>

  /* remember size */
  if (ptr) {
 8004f42:	b1a0      	cbz	r0, 8004f6e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004f44:	1903      	adds	r3, r0, r4
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8004f48:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	07db      	lsls	r3, r3, #31
 8004f50:	d50c      	bpl.n	8004f6c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8004f52:	68eb      	ldr	r3, [r5, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8004f58:	686b      	ldr	r3, [r5, #4]
 8004f5a:	4423      	add	r3, r4
 8004f5c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8004f5e:	69ab      	ldr	r3, [r5, #24]
 8004f60:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8004f62:	696b      	ldr	r3, [r5, #20]
 8004f64:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8004f66:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8004f68:	bf88      	it	hi
 8004f6a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8004f6c:	3004      	adds	r0, #4
}
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	2400486c 	.word	0x2400486c
 8004f74:	efdcba98 	.word	0xefdcba98

08004f78 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8004f78:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <__wrap_free+0x44>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f042 0204 	orr.w	r2, r2, #4
{
 8004f80:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8004f82:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8004f84:	4602      	mov	r2, r0
 8004f86:	b1b8      	cbz	r0, 8004fb8 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8004f88:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 8004f8c:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	; (8004fc0 <__wrap_free+0x48>)
 8004f90:	5855      	ldr	r5, [r2, r1]
 8004f92:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8004f94:	bf04      	itt	eq
 8004f96:	2400      	moveq	r4, #0
 8004f98:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	07d2      	lsls	r2, r2, #31
 8004f9e:	d508      	bpl.n	8004fb2 <__wrap_free+0x3a>
    io_malloc.free_req++;
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	3201      	adds	r2, #1
 8004fa4:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	440a      	add	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	1a52      	subs	r2, r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8004fb2:	bc30      	pop	{r4, r5}
  __real_free(p);
 8004fb4:	f00c ba24 	b.w	8011400 <free>
}
 8004fb8:	bc30      	pop	{r4, r5}
 8004fba:	4770      	bx	lr
 8004fbc:	2400486c 	.word	0x2400486c
 8004fc0:	efdcba98 	.word	0xefdcba98

08004fc4 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8004fc4:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004fc6:	4c12      	ldr	r4, [pc, #72]	; (8005010 <stackMonInit+0x4c>)
 8004fc8:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  io_stack.estack = (uint32_t)_estack;
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <stackMonInit+0x50>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004fcc:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 8004fce:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8004fd0:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 8004fd2:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 8004fd4:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8004fd6:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 8004fd8:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8004fda:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8004fe0:	d512      	bpl.n	8005008 <stackMonInit+0x44>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8004fe2:	480d      	ldr	r0, [pc, #52]	; (8005018 <stackMonInit+0x54>)
 8004fe4:	f7ff ff8e 	bl	8004f04 <lc_print>
    io_stack.stack_mon = false;
 8004fe8:	7125      	strb	r5, [r4, #4]
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8004fea:	69a3      	ldr	r3, [r4, #24]
 8004fec:	6921      	ldr	r1, [r4, #16]
 8004fee:	1ac9      	subs	r1, r1, r3

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8004ff0:	7923      	ldrb	r3, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8004ff2:	60e1      	str	r1, [r4, #12]
  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8004ff4:	b13b      	cbz	r3, 8005006 <stackMonInit+0x42>
 8004ff6:	6962      	ldr	r2, [r4, #20]
 8004ff8:	4291      	cmp	r1, r2
 8004ffa:	d904      	bls.n	8005006 <stackMonInit+0x42>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8004ffc:	4807      	ldr	r0, [pc, #28]	; (800501c <stackMonInit+0x58>)
 8004ffe:	f7ff ff81 	bl	8004f04 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8005002:	2300      	movs	r3, #0
 8005004:	7123      	strb	r3, [r4, #4]
  }
}
 8005006:	bd38      	pop	{r3, r4, r5, pc}
    io_stack.stack_mon = true;
 8005008:	2301      	movs	r3, #1
 800500a:	7123      	strb	r3, [r4, #4]
 800500c:	e7ed      	b.n	8004fea <stackMonInit+0x26>
 800500e:	bf00      	nop
 8005010:	24004888 	.word	0x24004888
 8005014:	24080000 	.word	0x24080000
 8005018:	0801458f 	.word	0x0801458f
 800501c:	080145cf 	.word	0x080145cf

08005020 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8005020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4604      	mov	r4, r0
 8005026:	468a      	mov	sl, r1
  if (!t)
 8005028:	4617      	mov	r7, r2
 800502a:	b382      	cbz	r2, 800508e <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 800502c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  return HAL_RCC_GetSysClockFreq();
 8005030:	f7fd f8c2 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
  uint64_t s  = clks / fcpu;
 8005034:	2300      	movs	r3, #0
  return HAL_RCC_GetSysClockFreq();
 8005036:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8005038:	9001      	str	r0, [sp, #4]
 800503a:	4651      	mov	r1, sl
 800503c:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800503e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005094 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 8005042:	f7fb fab3 	bl	80005ac <__aeabi_uldivmod>
 8005046:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8005048:	fba4 0106 	umull	r0, r1, r4, r6
 800504c:	9a01      	ldr	r2, [sp, #4]
 800504e:	2300      	movs	r3, #0
 8005050:	fb06 110a 	mla	r1, r6, sl, r1
 8005054:	f7fb faaa 	bl	80005ac <__aeabi_uldivmod>
  ms -= (s * 1000);
 8005058:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800505c:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 800505e:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005060:	fba4 0109 	umull	r0, r1, r4, r9
 8005064:	2300      	movs	r3, #0
 8005066:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 800506a:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800506e:	f7fb fa9d 	bl	80005ac <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8005072:	60bd      	str	r5, [r7, #8]
 8005074:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8005078:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 800507c:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 800507e:	1b40      	subs	r0, r0, r5
  t->us = us;
 8005080:	60f8      	str	r0, [r7, #12]
  return 0;
 8005082:	2000      	movs	r0, #0
  t->s = s;
 8005084:	e9c7 2b00 	strd	r2, fp, [r7]
}
 8005088:	b003      	add	sp, #12
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800508e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005092:	e7f9      	b.n	8005088 <dwtCyclesToTime+0x68>
 8005094:	000f4240 	.word	0x000f4240

08005098 <systemSettingLog>:

void systemSettingLog(void)
{

#if !defined(STM32F0) && !defined(STM32L0) && !defined(STM32G0) && !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5)
  uint32_t acr = FLASH->ACR ;
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <systemSettingLog+0x10c>)
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800509a:	2203      	movs	r2, #3
{
 800509c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800509e:	210a      	movs	r1, #10
  uint32_t acr = FLASH->ACR ;
 80050a0:	681d      	ldr	r5, [r3, #0]
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80050a2:	4841      	ldr	r0, [pc, #260]	; (80051a8 <systemSettingLog+0x110>)
 80050a4:	2301      	movs	r3, #1
 80050a6:	f7ff ff2d 	bl	8004f04 <lc_print>
#endif


  /* Display Device configuration */

  LC_PRINT("STM32 Runtime configuration...\r\n");
 80050aa:	4840      	ldr	r0, [pc, #256]	; (80051ac <systemSettingLog+0x114>)
 80050ac:	f7ff ff2a 	bl	8004f04 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80050b0:	f7fc f8da 	bl	8001268 <HAL_GetDEVID>
 80050b4:	4606      	mov	r6, r0
 80050b6:	f7fc f8d7 	bl	8001268 <HAL_GetDEVID>
 80050ba:	b283      	uxth	r3, r0
  switch (dev_id) {
 80050bc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80050c0:	d050      	beq.n	8005164 <systemSettingLog+0xcc>
 80050c2:	f240 4283 	movw	r2, #1155	; 0x483
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04e      	beq.n	8005168 <systemSettingLog+0xd0>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 80050ca:	4c39      	ldr	r4, [pc, #228]	; (80051b0 <systemSettingLog+0x118>)
 80050cc:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80050d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80050d4:	bf08      	it	eq
 80050d6:	4614      	moveq	r4, r2
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80050d8:	f7fc f8c0 	bl	800125c <HAL_GetREVID>
 80050dc:	4622      	mov	r2, r4
 80050de:	4603      	mov	r3, r0
 80050e0:	4631      	mov	r1, r6
 80050e2:	4834      	ldr	r0, [pc, #208]	; (80051b4 <systemSettingLog+0x11c>)
 80050e4:	f7ff ff0e 	bl	8004f04 <lc_print>
      (int)HAL_GetDEVID(),
      devIdToStr(HAL_GetDEVID()),
      (int)HAL_GetREVID()
  );

  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 80050e8:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <systemSettingLog+0x120>)
 80050ea:	2107      	movs	r1, #7
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 80050ec:	4c33      	ldr	r4, [pc, #204]	; (80051bc <systemSettingLog+0x124>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 80050ee:	1d5a      	adds	r2, r3, #5
 80050f0:	f103 000a 	add.w	r0, r3, #10
 80050f4:	f7ff ff06 	bl	8004f04 <lc_print>
  mconf = (1 << 16);  /* FPU present and used */
 80050f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());

  val = systemCoreClock()/1000000;
 80050fc:	4e30      	ldr	r6, [pc, #192]	; (80051c0 <systemSettingLog+0x128>)
  mconf = (1 << 16);  /* FPU present and used */
 80050fe:	6023      	str	r3, [r4, #0]
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8005100:	f7fc f8a8 	bl	8001254 <HAL_GetHalVersion>
 8005104:	4601      	mov	r1, r0
 8005106:	482f      	ldr	r0, [pc, #188]	; (80051c4 <systemSettingLog+0x12c>)
 8005108:	f7ff fefc 	bl	8004f04 <lc_print>
  return HAL_RCC_GetSysClockFreq();
 800510c:	f7fd f854 	bl	80021b8 <HAL_RCC_GetSysClockFreq>

#if !defined(STM32H7)
  LC_PRINT(" system clock : %u MHz\r\n", (int)val);
#else
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)val);
 8005110:	fbb0 f1f6 	udiv	r1, r0, r6
 8005114:	482c      	ldr	r0, [pc, #176]	; (80051c8 <systemSettingLog+0x130>)
 8005116:	f7ff fef5 	bl	8004f04 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);
 800511a:	f7fd fa13 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800511e:	fb90 f1f6 	sdiv	r1, r0, r6
 8005122:	482a      	ldr	r0, [pc, #168]	; (80051cc <systemSettingLog+0x134>)
 8005124:	f7ff feee 	bl	8004f04 <lc_print>
#endif

#if defined(STM32F7) || defined(STM32H7)
  val = SCB->CCR;
 8005128:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <systemSettingLog+0x138>)
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#else
  mconf |= (3 << 24);  /* H7 conf. */
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 800512a:	f005 020f 	and.w	r2, r5, #15
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 800512e:	4629      	mov	r1, r5
  val = SCB->CCR;
 8005130:	695e      	ldr	r6, [r3, #20]
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 8005132:	6823      	ldr	r3, [r4, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8005134:	4827      	ldr	r0, [pc, #156]	; (80051d4 <systemSettingLog+0x13c>)
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 8005136:	4313      	orrs	r3, r2
 8005138:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800513c:	6023      	str	r3, [r4, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 800513e:	f7ff fee1 	bl	8004f04 <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
#if !defined(CORE_CM4)
  if (val & SCB_CCR_IC_Msk)
 8005142:	f416 3200 	ands.w	r2, r6, #131072	; 0x20000
    mconf |= (1 << 10);
 8005146:	bf1e      	ittt	ne
 8005148:	6823      	ldrne	r3, [r4, #0]
 800514a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800514e:	6023      	strne	r3, [r4, #0]
  if (val & SCB_CCR_DC_Msk)
 8005150:	03f3      	lsls	r3, r6, #15
 8005152:	d522      	bpl.n	800519a <systemSettingLog+0x102>
    mconf |= (1 << 11);
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800515a:	6023      	str	r3, [r4, #0]
  if (val)
 800515c:	b132      	cbz	r2, 800516c <systemSettingLog+0xd4>
    return "True";
 800515e:	491e      	ldr	r1, [pc, #120]	; (80051d8 <systemSettingLog+0x140>)
    return "False";
 8005160:	460a      	mov	r2, r1
 8005162:	e005      	b.n	8005170 <systemSettingLog+0xd8>
  switch (dev_id) {
 8005164:	4c1d      	ldr	r4, [pc, #116]	; (80051dc <systemSettingLog+0x144>)
 8005166:	e7b7      	b.n	80050d8 <systemSettingLog+0x40>
  case 0x483: str = "STM32H7[2,3]x"; break;
 8005168:	4c1d      	ldr	r4, [pc, #116]	; (80051e0 <systemSettingLog+0x148>)
 800516a:	e7b5      	b.n	80050d8 <systemSettingLog+0x40>
    return "False";
 800516c:	491d      	ldr	r1, [pc, #116]	; (80051e4 <systemSettingLog+0x14c>)
    return "True";
 800516e:	1f4a      	subs	r2, r1, #5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8005170:	481d      	ldr	r0, [pc, #116]	; (80051e8 <systemSettingLog+0x150>)
 8005172:	f7ff fec7 	bl	8004f04 <lc_print>
  __HAL_RCC_CRC_CLK_ENABLE();
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <systemSettingLog+0x154>)
 8005178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800517c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005180:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	9b01      	ldr	r3, [sp, #4]
    mconf |= (1 << 9);
#endif
#endif

  crcIpInit();
}
 8005190:	b002      	add	sp, #8
 8005192:	bd70      	pop	{r4, r5, r6, pc}
    return "True";
 8005194:	4910      	ldr	r1, [pc, #64]	; (80051d8 <systemSettingLog+0x140>)
    return "False";
 8005196:	1d4a      	adds	r2, r1, #5
 8005198:	e7ea      	b.n	8005170 <systemSettingLog+0xd8>
  if (val)
 800519a:	2a00      	cmp	r2, #0
 800519c:	d1fa      	bne.n	8005194 <systemSettingLog+0xfc>
    return "False";
 800519e:	4911      	ldr	r1, [pc, #68]	; (80051e4 <systemSettingLog+0x14c>)
 80051a0:	e7de      	b.n	8005160 <systemSettingLog+0xc8>
 80051a2:	bf00      	nop
 80051a4:	52002000 	.word	0x52002000
 80051a8:	08014653 	.word	0x08014653
 80051ac:	08014670 	.word	0x08014670
 80051b0:	080145f5 	.word	0x080145f5
 80051b4:	08014691 	.word	0x08014691
 80051b8:	080146c2 	.word	0x080146c2
 80051bc:	240048a8 	.word	0x240048a8
 80051c0:	000f4240 	.word	0x000f4240
 80051c4:	080146ea 	.word	0x080146ea
 80051c8:	08014703 	.word	0x08014703
 80051cc:	0801471c 	.word	0x0801471c
 80051d0:	e000ed00 	.word	0xe000ed00
 80051d4:	08014735 	.word	0x08014735
 80051d8:	08014648 	.word	0x08014648
 80051dc:	0801460b 	.word	0x0801460b
 80051e0:	080145fd 	.word	0x080145fd
 80051e4:	0801464d 	.word	0x0801464d
 80051e8:	0801475f 	.word	0x0801475f
 80051ec:	58024400 	.word	0x58024400

080051f0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <ai_mnetwork_handle+0x18>)
 80051f2:	b120      	cbz	r0, 80051fe <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 80051f4:	4298      	cmp	r0, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	4618      	moveq	r0, r3
 80051fa:	2000      	movne	r0, #0
 80051fc:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80051fe:	681a      	ldr	r2, [r3, #0]
            return inst;
 8005200:	2a00      	cmp	r2, #0
 8005202:	bf08      	it	eq
 8005204:	4618      	moveq	r0, r3
}
 8005206:	4770      	bx	lr
 8005208:	240294b4 	.word	0x240294b4

0800520c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 800520c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800520e:	4604      	mov	r4, r0
 8005210:	b160      	cbz	r0, 800522c <ai_mnetwork_is_valid.constprop.0+0x20>
 8005212:	f7fb f865 	bl	80002e0 <strlen>
 8005216:	2807      	cmp	r0, #7
 8005218:	4602      	mov	r2, r0
 800521a:	d107      	bne.n	800522c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800521c:	4621      	mov	r1, r4
 800521e:	4804      	ldr	r0, [pc, #16]	; (8005230 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8005220:	f00c feef 	bl	8012002 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005224:	fab0 f080 	clz	r0, r0
 8005228:	0940      	lsrs	r0, r0, #5
}
 800522a:	bd10      	pop	{r4, pc}
    return false;
 800522c:	2000      	movs	r0, #0
 800522e:	e7fc      	b.n	800522a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8005230:	08014812 	.word	0x08014812

08005234 <MX_X_CUBE_AI_Init>:
{
 8005234:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8005236:	f7fb fe6d 	bl	8000f14 <MX_USART3_UART_Init>
}
 800523a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 800523e:	f7ff b8d5 	b.w	80043ec <aiSystemPerformanceInit>

08005242 <MX_X_CUBE_AI_Process>:
{
 8005242:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 8005244:	f7ff f986 	bl	8004554 <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8005248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800524c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 8005250:	f7fb bfee 	b.w	8001230 <HAL_Delay>

08005254 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8005258:	f7ff ffd8 	bl	800520c <ai_mnetwork_is_valid.constprop.0>
 800525c:	b920      	cbnz	r0, 8005268 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 800525e:	2c00      	cmp	r4, #0
 8005260:	4802      	ldr	r0, [pc, #8]	; (800526c <ai_mnetwork_find+0x18>)
 8005262:	bf18      	it	ne
 8005264:	2000      	movne	r0, #0
}
 8005266:	bd10      	pop	{r4, pc}
            return entry->name;
 8005268:	4800      	ldr	r0, [pc, #0]	; (800526c <ai_mnetwork_find+0x18>)
 800526a:	e7fc      	b.n	8005266 <ai_mnetwork_find+0x12>
 800526c:	08014812 	.word	0x08014812

08005270 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8005270:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005272:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005274:	2000      	movs	r0, #0
{
 8005276:	460d      	mov	r5, r1
 8005278:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800527a:	f7ff ffb9 	bl	80051f0 <ai_mnetwork_handle>

    if (!inst) {
 800527e:	4604      	mov	r4, r0
 8005280:	b930      	cbnz	r0, 8005290 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8005282:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8005286:	b002      	add	sp, #8
 8005288:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 800528a:	f241 0014 	movw	r0, #4116	; 0x1014
 800528e:	e7fa      	b.n	8005286 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8005290:	4630      	mov	r0, r6
 8005292:	9101      	str	r1, [sp, #4]
 8005294:	f7ff ffba 	bl	800520c <ai_mnetwork_is_valid.constprop.0>
 8005298:	9901      	ldr	r1, [sp, #4]
 800529a:	2800      	cmp	r0, #0
 800529c:	d0f5      	beq.n	800528a <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fb76 	bl	8005990 <ai_network_create>
 80052a4:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80052a8:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 80052aa:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 80052ae:	d104      	bne.n	80052ba <ai_mnetwork_create+0x4a>
        inst->entry = found;
 80052b0:	4905      	ldr	r1, [pc, #20]	; (80052c8 <ai_mnetwork_create+0x58>)
 80052b2:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 80052b4:	6829      	ldr	r1, [r5, #0]
 80052b6:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 80052b8:	602c      	str	r4, [r5, #0]
    return err;
 80052ba:	2000      	movs	r0, #0
 80052bc:	f362 0007 	bfi	r0, r2, #0, #8
 80052c0:	f363 201f 	bfi	r0, r3, #8, #24
 80052c4:	e7df      	b.n	8005286 <ai_mnetwork_create+0x16>
 80052c6:	bf00      	nop
 80052c8:	0801481c 	.word	0x0801481c

080052cc <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80052d0:	f7ff ff8e 	bl	80051f0 <ai_mnetwork_handle>
    if (inn) {
 80052d4:	4605      	mov	r5, r0
 80052d6:	b158      	cbz	r0, 80052f0 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80052d8:	6803      	ldr	r3, [r0, #0]
 80052da:	6840      	ldr	r0, [r0, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4798      	blx	r3
        if (hdl != inn->handle) {
 80052e0:	686b      	ldr	r3, [r5, #4]
 80052e2:	4283      	cmp	r3, r0
 80052e4:	d004      	beq.n	80052f0 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 80052e6:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <ai_mnetwork_destroy+0x28>)
 80052e8:	2400      	movs	r4, #0
 80052ea:	429d      	cmp	r5, r3
 80052ec:	d100      	bne.n	80052f0 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 80052ee:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 80052f0:	4620      	mov	r0, r4
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	240294b4 	.word	0x240294b4

080052f8 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80052f8:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80052fa:	f7ff ff79 	bl	80051f0 <ai_mnetwork_handle>
    if (inn)
 80052fe:	b128      	cbz	r0, 800530c <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8005300:	6802      	ldr	r2, [r0, #0]
 8005302:	6840      	ldr	r0, [r0, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8005306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 800530a:	4710      	bx	r2
}
 800530c:	bd10      	pop	{r4, pc}

0800530e <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800530e:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005310:	f7ff ff6e 	bl	80051f0 <ai_mnetwork_handle>
    if (inn)
 8005314:	b128      	cbz	r0, 8005322 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8005316:	6803      	ldr	r3, [r0, #0]
 8005318:	6840      	ldr	r0, [r0, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8005320:	4718      	bx	r3
}
 8005322:	f241 0014 	movw	r0, #4116	; 0x1014
 8005326:	bd10      	pop	{r4, pc}

08005328 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8005328:	b530      	push	{r4, r5, lr}
 800532a:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800532c:	f7ff ff60 	bl	80051f0 <ai_mnetwork_handle>
    if (inn) {
 8005330:	4604      	mov	r4, r0
 8005332:	b168      	cbz	r0, 8005350 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8005334:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8005336:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8005338:	4668      	mov	r0, sp
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 800533e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8005342:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8005344:	42aa      	cmp	r2, r5
 8005346:	dc05      	bgt.n	8005354 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4669      	mov	r1, sp
 800534c:	6860      	ldr	r0, [r4, #4]
 800534e:	4798      	blx	r3
    }
    else
        return false;
}
 8005350:	b00f      	add	sp, #60	; 0x3c
 8005352:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	4629      	mov	r1, r5
 8005358:	a803      	add	r0, sp, #12
 800535a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 800535e:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8005360:	f001 f894 	bl	800648c <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8005364:	e7eb      	b.n	800533e <ai_mnetwork_init+0x16>

08005366 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8005366:	b513      	push	{r0, r1, r4, lr}
 8005368:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800536a:	f7ff ff41 	bl	80051f0 <ai_mnetwork_handle>
    if (inn)
 800536e:	4603      	mov	r3, r0
 8005370:	b140      	cbz	r0, 8005384 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8005372:	6800      	ldr	r0, [r0, #0]
 8005374:	9a01      	ldr	r2, [sp, #4]
 8005376:	6a04      	ldr	r4, [r0, #32]
 8005378:	6858      	ldr	r0, [r3, #4]
 800537a:	4623      	mov	r3, r4
    else
        return 0;
}
 800537c:	b002      	add	sp, #8
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8005382:	4718      	bx	r3
}
 8005384:	b002      	add	sp, #8
 8005386:	bd10      	pop	{r4, pc}

08005388 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800538c:	f7ff ff30 	bl	80051f0 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8005390:	b188      	cbz	r0, 80053b6 <ai_mnetwork_get_private_handle+0x2e>
 8005392:	b181      	cbz	r1, 80053b6 <ai_mnetwork_get_private_handle+0x2e>
 8005394:	b17d      	cbz	r5, 80053b6 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8005396:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8005398:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 800539c:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 800539e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053ae:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 80053b2:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ba:	e7fb      	b.n	80053b4 <ai_mnetwork_get_private_handle+0x2c>

080053bc <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 80053c0:	6896      	ldr	r6, [r2, #8]
{
 80053c2:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 80053c4:	2500      	movs	r5, #0
{
 80053c6:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 80053c8:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 80053cc:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 80053d0:	d02a      	beq.n	8005428 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 80053d2:	42a9      	cmp	r1, r5
 80053d4:	da08      	bge.n	80053e8 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 80053d6:	6813      	ldr	r3, [r2, #0]
      number = -number;
 80053d8:	4240      	negs	r0, r0
      sign_neg = '-';
 80053da:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 80053de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      number = -number;
 80053e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	f016 0f08 	tst.w	r6, #8
 80053ec:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80053f0:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 80053f4:	f006 0a10 	and.w	sl, r6, #16
 80053f8:	bf14      	ite	ne
 80053fa:	f04f 0841 	movne.w	r8, #65	; 0x41
 80053fe:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8005402:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8005406:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 800540a:	f1ba 0f00 	cmp.w	sl, #0
 800540e:	d032      	beq.n	8005476 <_write_number+0xba>
      chr = number & 0x0F;
 8005410:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8005414:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8005416:	2b09      	cmp	r3, #9
      t = number >> 4;
 8005418:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 800541c:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8005420:	d906      	bls.n	8005430 <_write_number+0x74>
 8005422:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e004      	b.n	8005432 <_write_number+0x76>
  char sign_neg = 0;
 8005428:	461d      	mov	r5, r3
 800542a:	e7dd      	b.n	80053e8 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 800542c:	4617      	mov	r7, r2
 800542e:	e7ea      	b.n	8005406 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8005430:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8005432:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8005436:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800543a:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    count++;
 800543e:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8005442:	d1f3      	bne.n	800542c <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8005444:	f006 0101 	and.w	r1, r6, #1
 8005448:	b14d      	cbz	r5, 800545e <_write_number+0xa2>
 800544a:	b941      	cbnz	r1, 800545e <_write_number+0xa2>
    buf[idx--] = sign_neg;
 800544c:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8005450:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8005454:	eb0d 0203 	add.w	r2, sp, r3
 8005458:	f802 5c40 	strb.w	r5, [r2, #-64]
 800545c:	1eba      	subs	r2, r7, #2
 800545e:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f006 0602 	and.w	r6, r6, #2
 8005466:	bf14      	ite	ne
 8005468:	2130      	movne	r1, #48	; 0x30
 800546a:	2120      	moveq	r1, #32
 800546c:	455b      	cmp	r3, fp
 800546e:	dd13      	ble.n	8005498 <_write_number+0xdc>
 8005470:	b166      	cbz	r6, 800548c <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8005472:	b9a5      	cbnz	r5, 800549e <_write_number+0xe2>
 8005474:	e01b      	b.n	80054ae <_write_number+0xf2>
      t = number / 10;
 8005476:	2300      	movs	r3, #0
 8005478:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 800547a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 800547e:	f7fb f895 	bl	80005ac <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8005482:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005486:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 800548a:	e7cb      	b.n	8005424 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 800548c:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8005490:	f10b 0b01 	add.w	fp, fp, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	e7e9      	b.n	800546c <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8005498:	b14d      	cbz	r5, 80054ae <_write_number+0xf2>
 800549a:	455b      	cmp	r3, fp
 800549c:	d107      	bne.n	80054ae <_write_number+0xf2>
    buf[idx--] = sign_neg;
 800549e:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 80054a2:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80054a6:	3a01      	subs	r2, #1
 80054a8:	446b      	add	r3, sp
 80054aa:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80054ae:	eb0d 0602 	add.w	r6, sp, r2
 80054b2:	2500      	movs	r5, #0
 80054b4:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054bc:	6920      	ldr	r0, [r4, #16]
 80054be:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80054c0:	45ab      	cmp	fp, r5
 80054c2:	d1f7      	bne.n	80054b4 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80054c4:	68a3      	ldr	r3, [r4, #8]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d408      	bmi.n	80054dc <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 80054ca:	4628      	mov	r0, r5
 80054cc:	b011      	add	sp, #68	; 0x44
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 80054d2:	3501      	adds	r5, #1
 80054d4:	68e3      	ldr	r3, [r4, #12]
 80054d6:	2120      	movs	r1, #32
 80054d8:	6920      	ldr	r0, [r4, #16]
 80054da:	4798      	blx	r3
    while (count < specifier->width) {
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	42ab      	cmp	r3, r5
 80054e0:	dcf7      	bgt.n	80054d2 <_write_number+0x116>
 80054e2:	e7f2      	b.n	80054ca <_write_number+0x10e>

080054e4 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 80054e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e8:	4683      	mov	fp, r0
 80054ea:	460f      	mov	r7, r1
 80054ec:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 80054ee:	2500      	movs	r5, #0
{
 80054f0:	ed2d 8b02 	vpush	{d8}
 80054f4:	b09b      	sub	sp, #108	; 0x6c
  return *(*fmtP)++;
 80054f6:	4613      	mov	r3, r2
 80054f8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80054fc:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80054fe:	b929      	cbnz	r1, 800550c <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8005500:	4628      	mov	r0, r5
 8005502:	b01b      	add	sp, #108	; 0x6c
 8005504:	ecbd 8b02 	vpop	{d8}
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 800550c:	290a      	cmp	r1, #10
 800550e:	d103      	bne.n	8005518 <vlc_print+0x34>
      putc_fct(user, c);
 8005510:	4638      	mov	r0, r7
      count++;
 8005512:	3501      	adds	r5, #1
      putc_fct(user, c);
 8005514:	47d8      	blx	fp
      count++;
 8005516:	e0c9      	b.n	80056ac <vlc_print+0x1c8>
    else if (c == '%')
 8005518:	2925      	cmp	r1, #37	; 0x25
 800551a:	d1f9      	bne.n	8005510 <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800551c:	2300      	movs	r3, #0
 800551e:	f04f 090a 	mov.w	r9, #10
 8005522:	9709      	str	r7, [sp, #36]	; 0x24
 8005524:	4698      	mov	r8, r3
 8005526:	461a      	mov	r2, r3
 8005528:	469e      	mov	lr, r3
 800552a:	4618      	mov	r0, r3
      bool has_precision = false;
 800552c:	469c      	mov	ip, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800552e:	9301      	str	r3, [sp, #4]
      bool long_type = false;
 8005530:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8005532:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005536:	e9cd 3b07 	strd	r3, fp, [sp, #28]
  return *(*fmtP)++;
 800553a:	9e02      	ldr	r6, [sp, #8]
 800553c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005540:	9602      	str	r6, [sp, #8]
        if (!c)
 8005542:	2900      	cmp	r1, #0
 8005544:	f000 81c0 	beq.w	80058c8 <vlc_print+0x3e4>
        else if (c == '0')
 8005548:	2930      	cmp	r1, #48	; 0x30
 800554a:	d116      	bne.n	800557a <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 800554c:	ea50 0102 	orrs.w	r1, r0, r2
 8005550:	d107      	bne.n	8005562 <vlc_print+0x7e>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	460a      	mov	r2, r1
 8005556:	4608      	mov	r0, r1
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	2301      	movs	r3, #1
 8005560:	e7eb      	b.n	800553a <vlc_print+0x56>
          } else if (has_precision) {
 8005562:	f1bc 0f00 	cmp.w	ip, #0
 8005566:	d003      	beq.n	8005570 <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8005568:	fb09 f202 	mul.w	r2, r9, r2
 800556c:	46e0      	mov	r8, ip
 800556e:	e7e4      	b.n	800553a <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 8005570:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8005574:	f04f 0e01 	mov.w	lr, #1
 8005578:	e7df      	b.n	800553a <vlc_print+0x56>
        else if (c == '-')
 800557a:	292d      	cmp	r1, #45	; 0x2d
 800557c:	d104      	bne.n	8005588 <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	e7ea      	b.n	800555e <vlc_print+0x7a>
        else if (c == '.')
 8005588:	292e      	cmp	r1, #46	; 0x2e
 800558a:	f000 81ab 	beq.w	80058e4 <vlc_print+0x400>
        else if ((c >= '1') && (c <= '9'))
 800558e:	f1a1 0a31 	sub.w	sl, r1, #49	; 0x31
 8005592:	f1ba 0f08 	cmp.w	sl, #8
 8005596:	d809      	bhi.n	80055ac <vlc_print+0xc8>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8005598:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 800559a:	f1bc 0f00 	cmp.w	ip, #0
 800559e:	d002      	beq.n	80055a6 <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80055a0:	fb09 1202 	mla	r2, r9, r2, r1
 80055a4:	e7e2      	b.n	800556c <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 80055a6:	fb09 1000 	mla	r0, r9, r0, r1
 80055aa:	e7e3      	b.n	8005574 <vlc_print+0x90>
        else if (c == 'l')
 80055ac:	296c      	cmp	r1, #108	; 0x6c
 80055ae:	f000 819c 	beq.w	80058ea <vlc_print+0x406>
 80055b2:	f1be 0f00 	cmp.w	lr, #0
 80055b6:	d000      	beq.n	80055ba <vlc_print+0xd6>
 80055b8:	9005      	str	r0, [sp, #20]
 80055ba:	f1b8 0f00 	cmp.w	r8, #0
 80055be:	d000      	beq.n	80055c2 <vlc_print+0xde>
 80055c0:	9206      	str	r2, [sp, #24]
 80055c2:	b10b      	cbz	r3, 80055c8 <vlc_print+0xe4>
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	9307      	str	r3, [sp, #28]
          switch(c)
 80055c8:	2978      	cmp	r1, #120	; 0x78
 80055ca:	d809      	bhi.n	80055e0 <vlc_print+0xfc>
 80055cc:	2962      	cmp	r1, #98	; 0x62
 80055ce:	d813      	bhi.n	80055f8 <vlc_print+0x114>
 80055d0:	2946      	cmp	r1, #70	; 0x46
 80055d2:	f000 80b3 	beq.w	800573c <vlc_print+0x258>
 80055d6:	2958      	cmp	r1, #88	; 0x58
 80055d8:	f000 808f 	beq.w	80056fa <vlc_print+0x216>
 80055dc:	2925      	cmp	r1, #37	; 0x25
 80055de:	d097      	beq.n	8005510 <vlc_print+0x2c>
        putc_fct(user, '<');
 80055e0:	213c      	movs	r1, #60	; 0x3c
 80055e2:	4638      	mov	r0, r7
 80055e4:	47d8      	blx	fp
        putc_fct(user, '!');
 80055e6:	2121      	movs	r1, #33	; 0x21
 80055e8:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 80055ea:	3404      	adds	r4, #4
        putc_fct(user, '!');
 80055ec:	47d8      	blx	fp
        putc_fct(user, '>');
 80055ee:	213e      	movs	r1, #62	; 0x3e
 80055f0:	4638      	mov	r0, r7
        count += 3;
 80055f2:	3503      	adds	r5, #3
        putc_fct(user, '>');
 80055f4:	47d8      	blx	fp
        error = false;
 80055f6:	e059      	b.n	80056ac <vlc_print+0x1c8>
          switch(c)
 80055f8:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80055fc:	2b15      	cmp	r3, #21
 80055fe:	d8ef      	bhi.n	80055e0 <vlc_print+0xfc>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <vlc_print+0x124>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005661 	.word	0x08005661
 800560c:	0800571b 	.word	0x0800571b
 8005610:	080055e1 	.word	0x080055e1
 8005614:	0800573d 	.word	0x0800573d
 8005618:	080055e1 	.word	0x080055e1
 800561c:	080055e1 	.word	0x080055e1
 8005620:	0800571b 	.word	0x0800571b
 8005624:	080055e1 	.word	0x080055e1
 8005628:	080055e1 	.word	0x080055e1
 800562c:	080055e1 	.word	0x080055e1
 8005630:	080055e1 	.word	0x080055e1
 8005634:	080055e1 	.word	0x080055e1
 8005638:	080055e1 	.word	0x080055e1
 800563c:	080056ef 	.word	0x080056ef
 8005640:	080055e1 	.word	0x080055e1
 8005644:	080055e1 	.word	0x080055e1
 8005648:	08005669 	.word	0x08005669
 800564c:	080055e1 	.word	0x080055e1
 8005650:	08005723 	.word	0x08005723
 8005654:	080055e1 	.word	0x080055e1
 8005658:	080055e1 	.word	0x080055e1
 800565c:	08005703 	.word	0x08005703
            t = (char)va_arg(vl, signed int);
 8005660:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8005664:	b2c9      	uxtb	r1, r1
 8005666:	e753      	b.n	8005510 <vlc_print+0x2c>
            if (!str) str = "(null)";
 8005668:	4ba1      	ldr	r3, [pc, #644]	; (80058f0 <vlc_print+0x40c>)
            str = va_arg(vl, char*);
 800566a:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 800566e:	f1b9 0f00 	cmp.w	r9, #0
 8005672:	bf08      	it	eq
 8005674:	4699      	moveq	r9, r3
  int len = strlen(str);
 8005676:	4648      	mov	r0, r9
 8005678:	f7fa fe32 	bl	80002e0 <strlen>
  if (specifier->precision) {
 800567c:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 800567e:	4680      	mov	r8, r0
  if (specifier->precision) {
 8005680:	b113      	cbz	r3, 8005688 <vlc_print+0x1a4>
    len = (len > specifier->precision)?specifier->precision:len;
 8005682:	4298      	cmp	r0, r3
 8005684:	bfa8      	it	ge
 8005686:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8005688:	9e07      	ldr	r6, [sp, #28]
 800568a:	f016 0602 	ands.w	r6, r6, #2
 800568e:	d014      	beq.n	80056ba <vlc_print+0x1d6>
  int count = 0;
 8005690:	2600      	movs	r6, #0
 8005692:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8005694:	ebaa 0309 	sub.w	r3, sl, r9
 8005698:	4598      	cmp	r8, r3
 800569a:	dc14      	bgt.n	80056c6 <vlc_print+0x1e2>
  if (specifier->flags & FLAG_NEG_PAD) {
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	bfa8      	it	ge
 80056a4:	4446      	addge	r6, r8
 80056a6:	079b      	lsls	r3, r3, #30
 80056a8:	d41e      	bmi.n	80056e8 <vlc_print+0x204>
            count += _write_string(str, &specifier);
 80056aa:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 80056ac:	9a02      	ldr	r2, [sp, #8]
 80056ae:	e722      	b.n	80054f6 <vlc_print+0x12>
      _WRITE_C(' ');
 80056b0:	3601      	adds	r6, #1
 80056b2:	2120      	movs	r1, #32
 80056b4:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80056b8:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 80056ba:	eb08 0306 	add.w	r3, r8, r6
 80056be:	9a05      	ldr	r2, [sp, #20]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	dbf5      	blt.n	80056b0 <vlc_print+0x1cc>
 80056c4:	e7e5      	b.n	8005692 <vlc_print+0x1ae>
    _WRITE_C(*str++);
 80056c6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80056ca:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80056ce:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 80056d0:	e7e0      	b.n	8005694 <vlc_print+0x1b0>
      _WRITE_C(' ');
 80056d2:	3601      	adds	r6, #1
 80056d4:	2120      	movs	r1, #32
 80056d6:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80056da:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 80056dc:	eb08 0306 	add.w	r3, r8, r6
 80056e0:	9a05      	ldr	r2, [sp, #20]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	dcf5      	bgt.n	80056d2 <vlc_print+0x1ee>
 80056e6:	e7e0      	b.n	80056aa <vlc_print+0x1c6>
 80056e8:	eba8 0806 	sub.w	r8, r8, r6
 80056ec:	e7f6      	b.n	80056dc <vlc_print+0x1f8>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 80056f6:	2308      	movs	r3, #8
 80056f8:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 80056fa:	9b07      	ldr	r3, [sp, #28]
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8005702:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8005704:	aa05      	add	r2, sp, #20
 8005706:	f854 0b04 	ldr.w	r0, [r4], #4
 800570a:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 800570c:	f043 0310 	orr.w	r3, r3, #16
 8005710:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8005712:	f7ff fe53 	bl	80053bc <_write_number>
 8005716:	4405      	add	r5, r0
            break;
 8005718:	e7c8      	b.n	80056ac <vlc_print+0x1c8>
            specifier.flags |= FLAG_IS_SIGNED;
 800571a:	9b07      	ldr	r3, [sp, #28]
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	9307      	str	r3, [sp, #28]
            if (c == 'u')
 8005722:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	f104 0604 	add.w	r6, r4, #4
            count += _write_number(val, &specifier);
 800572a:	aa05      	add	r2, sp, #20
              val = va_arg(vl, unsigned int);
 800572c:	bf0c      	ite	eq
 800572e:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 8005730:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8005732:	f7ff fe43 	bl	80053bc <_write_number>
            break;
 8005736:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 8005738:	4405      	add	r5, r0
            break;
 800573a:	e7b7      	b.n	80056ac <vlc_print+0x1c8>
            dbl = va_arg(vl, double);
 800573c:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 800573e:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 8005740:	f024 0407 	bic.w	r4, r4, #7
 8005744:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8005748:	b90b      	cbnz	r3, 800574e <vlc_print+0x26a>
              specifier.precision = 6;
 800574a:	2306      	movs	r3, #6
 800574c:	9306      	str	r3, [sp, #24]
  float mul = 1.0;
 800574e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8005752:	9e06      	ldr	r6, [sp, #24]
    mul *= 10;
 8005754:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	42b3      	cmp	r3, r6
 800575c:	f2c0 80a6 	blt.w	80058ac <vlc_print+0x3c8>
  if (is_signed)
 8005760:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	f140 80a4 	bpl.w	80058b4 <vlc_print+0x3d0>
    number = -number;
 800576c:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 8005770:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  uint32_t count = 0;
 8005774:	f04f 0800 	mov.w	r8, #0
  number += (half_ / mul);
 8005778:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t idx = sizeof(buf) - 1;
 800577c:	f04f 093f 	mov.w	r9, #63	; 0x3f
  number += (half_ / mul);
 8005780:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8005784:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8005788:	ee26 7b07 	vmul.f64	d7, d6, d7
 800578c:	ec51 0b17 	vmov	r0, r1, d7
 8005790:	f7fa ff5a 	bl	8000648 <__aeabi_d2ulz>
 8005794:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 8005796:	469a      	mov	sl, r3
 8005798:	220a      	movs	r2, #10
 800579a:	2300      	movs	r3, #0
 800579c:	9101      	str	r1, [sp, #4]
 800579e:	4650      	mov	r0, sl
 80057a0:	f7fa ff04 	bl	80005ac <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80057a4:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 80057a8:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 80057aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 80057ae:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    chr = (val - t * 10) + '0';
 80057b2:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 80057b6:	f109 0c68 	add.w	ip, r9, #104	; 0x68
 80057ba:	44ec      	add	ip, sp
 80057bc:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 80057c0:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 80057c4:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 80057c6:	bf05      	ittet	eq
 80057c8:	3268      	addeq	r2, #104	; 0x68
 80057ca:	202e      	moveq	r0, #46	; 0x2e
    buf[idx--] = chr;
 80057cc:	4691      	movne	r9, r2
      buf[idx--] = '.';
 80057ce:	f1a9 0902 	subeq.w	r9, r9, #2
 80057d2:	bf05      	ittet	eq
 80057d4:	446a      	addeq	r2, sp
      count++;
 80057d6:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 80057da:	4680      	movne	r8, r0
      buf[idx--] = '.';
 80057dc:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 80057e0:	f1ba 0f0a 	cmp.w	sl, #10
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	f172 0200 	sbcs.w	r2, r2, #0
 80057ea:	d2d4      	bcs.n	8005796 <vlc_print+0x2b2>
    buf[idx--] = '0';
 80057ec:	45b0      	cmp	r8, r6
 80057ee:	f1c6 0001 	rsb	r0, r6, #1
 80057f2:	eba6 0a08 	sub.w	sl, r6, r8
 80057f6:	ab0a      	add	r3, sp, #40	; 0x28
 80057f8:	4440      	add	r0, r8
 80057fa:	bf84      	itt	hi
 80057fc:	2001      	movhi	r0, #1
 80057fe:	f04f 0a00 	movhi.w	sl, #0
 8005802:	2130      	movs	r1, #48	; 0x30
 8005804:	4448      	add	r0, r9
 8005806:	4652      	mov	r2, sl
 8005808:	4418      	add	r0, r3
 800580a:	f00b fe0f 	bl	801142c <memset>
 800580e:	eba8 0306 	sub.w	r3, r8, r6
 8005812:	45b0      	cmp	r8, r6
 8005814:	bf88      	it	hi
 8005816:	2300      	movhi	r3, #0
 8005818:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 800581a:	4546      	cmp	r6, r8
 800581c:	4499      	add	r9, r3
 800581e:	f106 0601 	add.w	r6, r6, #1
 8005822:	d108      	bne.n	8005836 <vlc_print+0x352>
    buf[idx--] = '.';
 8005824:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8005828:	222e      	movs	r2, #46	; 0x2e
    count++;
 800582a:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 800582c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005830:	446b      	add	r3, sp
 8005832:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8005836:	4546      	cmp	r6, r8
 8005838:	d109      	bne.n	800584e <vlc_print+0x36a>
    buf[idx--] = '0';
 800583a:	f109 0368 	add.w	r3, r9, #104	; 0x68
 800583e:	2230      	movs	r2, #48	; 0x30
    count++;
 8005840:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 8005844:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005848:	446b      	add	r3, sp
 800584a:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 800584e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8005852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005856:	d509      	bpl.n	800586c <vlc_print+0x388>
    buf[idx--] = '-';
 8005858:	f109 0368 	add.w	r3, r9, #104	; 0x68
 800585c:	222d      	movs	r2, #45	; 0x2d
    count++;
 800585e:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 8005862:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005866:	446b      	add	r3, sp
 8005868:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 800586c:	9e05      	ldr	r6, [sp, #20]
    buf[idx--] = ' ';
 800586e:	ab0a      	add	r3, sp, #40	; 0x28
 8005870:	2120      	movs	r1, #32
 8005872:	45b0      	cmp	r8, r6
 8005874:	f1c6 0001 	rsb	r0, r6, #1
 8005878:	eba6 0a08 	sub.w	sl, r6, r8
 800587c:	4440      	add	r0, r8
 800587e:	bf84      	itt	hi
 8005880:	2001      	movhi	r0, #1
 8005882:	f04f 0a00 	movhi.w	sl, #0
 8005886:	4448      	add	r0, r9
 8005888:	4652      	mov	r2, sl
 800588a:	4418      	add	r0, r3
 800588c:	f00b fdce 	bl	801142c <memset>
  for(int i = 0; i < count; i++) {
 8005890:	eba8 0306 	sub.w	r3, r8, r6
 8005894:	45b0      	cmp	r8, r6
 8005896:	bf88      	it	hi
 8005898:	2300      	movhi	r3, #0
 800589a:	44d0      	add	r8, sl
 800589c:	2600      	movs	r6, #0
 800589e:	4499      	add	r9, r3
 80058a0:	ab0a      	add	r3, sp, #40	; 0x28
 80058a2:	4499      	add	r9, r3
 80058a4:	45b0      	cmp	r8, r6
 80058a6:	d108      	bne.n	80058ba <vlc_print+0x3d6>
            count += _write_double(dbl, &specifier);
 80058a8:	4445      	add	r5, r8
            break;
 80058aa:	e6ff      	b.n	80056ac <vlc_print+0x1c8>
    mul *= 10;
 80058ac:	ee27 7a27 	vmul.f32	s14, s14, s15
  for (int i=0;i <specifier->precision; i++)
 80058b0:	3301      	adds	r3, #1
 80058b2:	e752      	b.n	800575a <vlc_print+0x276>
 80058b4:	eeb0 5b48 	vmov.f64	d5, d8
 80058b8:	e75a      	b.n	8005770 <vlc_print+0x28c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80058ba:	f819 1f01 	ldrb.w	r1, [r9, #1]!
  for(int i = 0; i < count; i++) {
 80058be:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80058c0:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80058c4:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80058c6:	e7ed      	b.n	80058a4 <vlc_print+0x3c0>
 80058c8:	f1be 0f00 	cmp.w	lr, #0
 80058cc:	d000      	beq.n	80058d0 <vlc_print+0x3ec>
 80058ce:	9005      	str	r0, [sp, #20]
 80058d0:	f1b8 0f00 	cmp.w	r8, #0
 80058d4:	d000      	beq.n	80058d8 <vlc_print+0x3f4>
 80058d6:	9206      	str	r2, [sp, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f43f ae81 	beq.w	80055e0 <vlc_print+0xfc>
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	e67d      	b.n	80055e0 <vlc_print+0xfc>
          has_precision = true;
 80058e4:	f04f 0c01 	mov.w	ip, #1
 80058e8:	e627      	b.n	800553a <vlc_print+0x56>
          long_type = true;
 80058ea:	2101      	movs	r1, #1
 80058ec:	9103      	str	r1, [sp, #12]
      while (done == false) {
 80058ee:	e624      	b.n	800553a <vlc_print+0x56>
 80058f0:	08014848 	.word	0x08014848

080058f4 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	460d      	mov	r5, r1
 80058f8:	b0a0      	sub	sp, #128	; 0x80
 80058fa:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80058fc:	f001 f960 	bl	8006bc0 <ai_platform_context_acquire>
 8005900:	4604      	mov	r4, r0

  if (report && net_ctx)
 8005902:	2d00      	cmp	r5, #0
 8005904:	d032      	beq.n	800596c <ai_network_get_report+0x78>
 8005906:	2800      	cmp	r0, #0
 8005908:	d02d      	beq.n	8005966 <ai_network_get_report+0x72>
  {
    ai_network_report r = {
 800590a:	226c      	movs	r2, #108	; 0x6c
 800590c:	2100      	movs	r1, #0
 800590e:	a805      	add	r0, sp, #20
 8005910:	f00b fd8c 	bl	801142c <memset>
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <ai_network_get_report+0x7c>)
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <ai_network_get_report+0x80>)
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <ai_network_get_report+0x84>)
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	4b16      	ldr	r3, [pc, #88]	; (800597c <ai_network_get_report+0x88>)
 8005922:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005924:	f000 ff1e 	bl	8006764 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005928:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 800592a:	f000 ff99 	bl	8006860 <ai_platform_runtime_get_version>
    ai_network_report r = {
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <ai_network_get_report+0x8c>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005930:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	f240 1307 	movw	r3, #263	; 0x107
 8005938:	f8ad 3020 	strh.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800593c:	f001 f820 	bl	8006980 <ai_platform_api_get_version>
 8005940:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005942:	f001 f8ad 	bl	8006aa0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <ai_network_get_report+0x90>)
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005948:	a901      	add	r1, sp, #4
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800594a:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800594c:	4630      	mov	r0, r6
    ai_network_report r = {
 800594e:	930c      	str	r3, [sp, #48]	; 0x30
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <ai_network_get_report+0x94>)
 8005952:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005954:	f001 fab2 	bl	8006ebc <ai_platform_api_get_network_report>
 8005958:	4604      	mov	r4, r0
 800595a:	b120      	cbz	r0, 8005966 <ai_network_get_report+0x72>

    *report = r;
 800595c:	227c      	movs	r2, #124	; 0x7c
 800595e:	a901      	add	r1, sp, #4
 8005960:	4628      	mov	r0, r5
 8005962:	f00b fd55 	bl	8011410 <memcpy>
    return true;
  }
  return false;
}
 8005966:	4620      	mov	r0, r4
 8005968:	b020      	add	sp, #128	; 0x80
 800596a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800596c:	462c      	mov	r4, r5
 800596e:	e7fa      	b.n	8005966 <ai_network_get_report+0x72>
 8005970:	08014812 	.word	0x08014812
 8005974:	0801484f 	.word	0x0801484f
 8005978:	08014870 	.word	0x08014870
 800597c:	08014889 	.word	0x08014889
 8005980:	0804e4e1 	.word	0x0804e4e1
 8005984:	02779b3f 	.word	0x02779b3f
 8005988:	a1facade 	.word	0xa1facade

0800598c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800598c:	f001 b99c 	b.w	8006cc8 <ai_platform_network_get_error>

08005990 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005990:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005992:	2305      	movs	r3, #5
 8005994:	2200      	movs	r2, #0
 8005996:	e9cd 3200 	strd	r3, r2, [sp]
 800599a:	2301      	movs	r3, #1
 800599c:	4a02      	ldr	r2, [pc, #8]	; (80059a8 <ai_network_create+0x18>)
 800599e:	f001 febb 	bl	8007718 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80059a2:	b003      	add	sp, #12
 80059a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059a8:	24003d1c 	.word	0x24003d1c

080059ac <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80059ac:	f002 b854 	b.w	8007a58 <ai_platform_network_destroy>

080059b0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b2:	4606      	mov	r6, r0
 80059b4:	460f      	mov	r7, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80059b6:	f002 f941 	bl	8007c3c <ai_platform_network_init>
  if (!net_ctx) return false;
 80059ba:	4604      	mov	r4, r0
 80059bc:	2800      	cmp	r0, #0
 80059be:	f000 84ab 	beq.w	8006318 <ai_network_init+0x968>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80059c2:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80059c4:	463a      	mov	r2, r7
 80059c6:	2101      	movs	r1, #1
 80059c8:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80059ca:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80059cc:	f000 fdfe 	bl	80065cc <ai_platform_get_weights_map>
 80059d0:	4605      	mov	r5, r0
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f000 84a2 	beq.w	800631c <ai_network_init+0x96c>
    predict_hub_input_Sub_ypredict_hub_input_Sub_y_array.format |= AI_FMT_FLAG_CONST;
 80059d8:	4ac0      	ldr	r2, [pc, #768]	; (8005cdc <ai_network_init+0x32c>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e0:	6013      	str	r3, [r2, #0]
    predict_hub_input_Sub_ypredict_hub_input_Sub_y_array.data = AI_PTR(weights_map[0] + 0);
 80059e2:	9b01      	ldr	r3, [sp, #4]
    predict_hub_input_Sub_ypredict_hub_input_Sub_y_array.data_start = AI_PTR(weights_map[0] + 0);
 80059e4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    predict_hub_input_Mul_ypredict_hub_input_Mul_y_array.format |= AI_FMT_FLAG_CONST;
 80059e8:	4abd      	ldr	r2, [pc, #756]	; (8005ce0 <ai_network_init+0x330>)
 80059ea:	6811      	ldr	r1, [r2, #0]
 80059ec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059f0:	6011      	str	r1, [r2, #0]
    predict_hub_input_Mul_ypredict_hub_input_Mul_y_array.data = AI_PTR(weights_map[0] + 4);
 80059f2:	1d19      	adds	r1, r3, #4
    predict_hub_input_Mul_ypredict_hub_input_Mul_y_array.data_start = AI_PTR(weights_map[0] + 4);
 80059f4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80059f8:	4aba      	ldr	r2, [pc, #744]	; (8005ce4 <ai_network_init+0x334>)
 80059fa:	6811      	ldr	r1, [r2, #0]
 80059fc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a00:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(weights_map[0] + 8);
 8005a02:	f103 0108 	add.w	r1, r3, #8
    conv2d_3_weights_array.data_start = AI_PTR(weights_map[0] + 8);
 8005a06:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a0a:	4ab7      	ldr	r2, [pc, #732]	; (8005ce8 <ai_network_init+0x338>)
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a12:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights_map[0] + 224);
 8005a14:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    conv2d_3_bias_array.data_start = AI_PTR(weights_map[0] + 224);
 8005a18:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a1c:	4ab3      	ldr	r2, [pc, #716]	; (8005cec <ai_network_init+0x33c>)
 8005a1e:	6811      	ldr	r1, [r2, #0]
 8005a20:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a24:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 256);
 8005a26:	f503 7180 	add.w	r1, r3, #256	; 0x100
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 256);
 8005a2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a2e:	4ab0      	ldr	r2, [pc, #704]	; (8005cf0 <ai_network_init+0x340>)
 8005a30:	6811      	ldr	r1, [r2, #0]
 8005a32:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a36:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 328);
 8005a38:	f503 71a4 	add.w	r1, r3, #328	; 0x148
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 328);
 8005a3c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a40:	4aac      	ldr	r2, [pc, #688]	; (8005cf4 <ai_network_init+0x344>)
 8005a42:	6811      	ldr	r1, [r2, #0]
 8005a44:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a48:	6011      	str	r1, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(weights_map[0] + 360);
 8005a4a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    conv2d_5_weights_array.data_start = AI_PTR(weights_map[0] + 360);
 8005a4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a52:	4aa9      	ldr	r2, [pc, #676]	; (8005cf8 <ai_network_init+0x348>)
 8005a54:	6811      	ldr	r1, [r2, #0]
 8005a56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a5a:	6011      	str	r1, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(weights_map[0] + 488);
 8005a5c:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
    conv2d_5_bias_array.data_start = AI_PTR(weights_map[0] + 488);
 8005a60:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a64:	4aa5      	ldr	r2, [pc, #660]	; (8005cfc <ai_network_init+0x34c>)
 8005a66:	6811      	ldr	r1, [r2, #0]
 8005a68:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a6c:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 552);
 8005a6e:	f503 710a 	add.w	r1, r3, #552	; 0x228
    conv2d_6_weights_array.data_start = AI_PTR(weights_map[0] + 552);
 8005a72:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a76:	4aa2      	ldr	r2, [pc, #648]	; (8005d00 <ai_network_init+0x350>)
 8005a78:	6811      	ldr	r1, [r2, #0]
 8005a7a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a7e:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 696);
 8005a80:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
    conv2d_6_bias_array.data_start = AI_PTR(weights_map[0] + 696);
 8005a84:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a88:	4a9e      	ldr	r2, [pc, #632]	; (8005d04 <ai_network_init+0x354>)
 8005a8a:	6811      	ldr	r1, [r2, #0]
 8005a8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a90:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(weights_map[0] + 760);
 8005a92:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
    conv2d_7_weights_array.data_start = AI_PTR(weights_map[0] + 760);
 8005a96:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a9a:	4a9b      	ldr	r2, [pc, #620]	; (8005d08 <ai_network_init+0x358>)
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005aa2:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(weights_map[0] + 1272);
 8005aa4:	f503 619f 	add.w	r1, r3, #1272	; 0x4f8
    conv2d_7_bias_array.data_start = AI_PTR(weights_map[0] + 1272);
 8005aa8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aac:	4a97      	ldr	r2, [pc, #604]	; (8005d0c <ai_network_init+0x35c>)
 8005aae:	6811      	ldr	r1, [r2, #0]
 8005ab0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ab4:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(weights_map[0] + 1400);
 8005ab6:	f503 61af 	add.w	r1, r3, #1400	; 0x578
    conv2d_8_weights_array.data_start = AI_PTR(weights_map[0] + 1400);
 8005aba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005abe:	4a94      	ldr	r2, [pc, #592]	; (8005d10 <ai_network_init+0x360>)
 8005ac0:	6811      	ldr	r1, [r2, #0]
 8005ac2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ac6:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(weights_map[0] + 1688);
 8005ac8:	f503 61d3 	add.w	r1, r3, #1688	; 0x698
    conv2d_8_bias_array.data_start = AI_PTR(weights_map[0] + 1688);
 8005acc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ad0:	4a90      	ldr	r2, [pc, #576]	; (8005d14 <ai_network_init+0x364>)
 8005ad2:	6811      	ldr	r1, [r2, #0]
 8005ad4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ad8:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(weights_map[0] + 1816);
 8005ada:	f503 61e3 	add.w	r1, r3, #1816	; 0x718
    conv2d_9_weights_array.data_start = AI_PTR(weights_map[0] + 1816);
 8005ade:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ae2:	4a8d      	ldr	r2, [pc, #564]	; (8005d18 <ai_network_init+0x368>)
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005aea:	6011      	str	r1, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(weights_map[0] + 2840);
 8005aec:	f603 3118 	addw	r1, r3, #2840	; 0xb18
    conv2d_9_bias_array.data_start = AI_PTR(weights_map[0] + 2840);
 8005af0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005af4:	4a89      	ldr	r2, [pc, #548]	; (8005d1c <ai_network_init+0x36c>)
 8005af6:	6811      	ldr	r1, [r2, #0]
 8005af8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005afc:	6011      	str	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 2968);
 8005afe:	f603 3198 	addw	r1, r3, #2968	; 0xb98
    conv2d_10_weights_array.data_start = AI_PTR(weights_map[0] + 2968);
 8005b02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b06:	4a86      	ldr	r2, [pc, #536]	; (8005d20 <ai_network_init+0x370>)
 8005b08:	6811      	ldr	r1, [r2, #0]
 8005b0a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b0e:	6011      	str	r1, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 3256);
 8005b10:	f603 41b8 	addw	r1, r3, #3256	; 0xcb8
    conv2d_10_bias_array.data_start = AI_PTR(weights_map[0] + 3256);
 8005b14:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b18:	4a82      	ldr	r2, [pc, #520]	; (8005d24 <ai_network_init+0x374>)
 8005b1a:	6811      	ldr	r1, [r2, #0]
 8005b1c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b20:	6011      	str	r1, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(weights_map[0] + 3384);
 8005b22:	f603 5138 	addw	r1, r3, #3384	; 0xd38
    conv2d_11_weights_array.data_start = AI_PTR(weights_map[0] + 3384);
 8005b26:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b2a:	4a7f      	ldr	r2, [pc, #508]	; (8005d28 <ai_network_init+0x378>)
 8005b2c:	6811      	ldr	r1, [r2, #0]
 8005b2e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b32:	6011      	str	r1, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(weights_map[0] + 5432);
 8005b34:	f503 51a9 	add.w	r1, r3, #5408	; 0x1520
 8005b38:	3118      	adds	r1, #24
    conv2d_11_bias_array.data_start = AI_PTR(weights_map[0] + 5432);
 8005b3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b3e:	4a7b      	ldr	r2, [pc, #492]	; (8005d2c <ai_network_init+0x37c>)
 8005b40:	6811      	ldr	r1, [r2, #0]
 8005b42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b46:	6011      	str	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 5688);
 8005b48:	f503 51b1 	add.w	r1, r3, #5664	; 0x1620
 8005b4c:	3118      	adds	r1, #24
    conv2d_12_weights_array.data_start = AI_PTR(weights_map[0] + 5688);
 8005b4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b52:	4a77      	ldr	r2, [pc, #476]	; (8005d30 <ai_network_init+0x380>)
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b5a:	6011      	str	r1, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(weights_map[0] + 6264);
 8005b5c:	f503 51c3 	add.w	r1, r3, #6240	; 0x1860
 8005b60:	3118      	adds	r1, #24
    conv2d_12_bias_array.data_start = AI_PTR(weights_map[0] + 6264);
 8005b62:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b66:	4a73      	ldr	r2, [pc, #460]	; (8005d34 <ai_network_init+0x384>)
 8005b68:	6811      	ldr	r1, [r2, #0]
 8005b6a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b6e:	6011      	str	r1, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(weights_map[0] + 6520);
 8005b70:	f503 51cb 	add.w	r1, r3, #6496	; 0x1960
 8005b74:	3118      	adds	r1, #24
    conv2d_13_weights_array.data_start = AI_PTR(weights_map[0] + 6520);
 8005b76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7a:	4a6f      	ldr	r2, [pc, #444]	; (8005d38 <ai_network_init+0x388>)
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b82:	6011      	str	r1, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(weights_map[0] + 10616);
 8005b84:	f503 5125 	add.w	r1, r3, #10560	; 0x2940
 8005b88:	3138      	adds	r1, #56	; 0x38
    conv2d_13_bias_array.data_start = AI_PTR(weights_map[0] + 10616);
 8005b8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b8e:	4a6b      	ldr	r2, [pc, #428]	; (8005d3c <ai_network_init+0x38c>)
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b96:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 10872);
 8005b98:	f503 5129 	add.w	r1, r3, #10816	; 0x2a40
 8005b9c:	3138      	adds	r1, #56	; 0x38
    conv2d_14_weights_array.data_start = AI_PTR(weights_map[0] + 10872);
 8005b9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba2:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <ai_network_init+0x390>)
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005baa:	6011      	str	r1, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 11448);
 8005bac:	f503 5132 	add.w	r1, r3, #11392	; 0x2c80
 8005bb0:	3138      	adds	r1, #56	; 0x38
    conv2d_14_bias_array.data_start = AI_PTR(weights_map[0] + 11448);
 8005bb2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bb6:	4a63      	ldr	r2, [pc, #396]	; (8005d44 <ai_network_init+0x394>)
 8005bb8:	6811      	ldr	r1, [r2, #0]
 8005bba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bbe:	6011      	str	r1, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 11704);
 8005bc0:	f503 5136 	add.w	r1, r3, #11648	; 0x2d80
 8005bc4:	3138      	adds	r1, #56	; 0x38
    conv2d_15_weights_array.data_start = AI_PTR(weights_map[0] + 11704);
 8005bc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bca:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <ai_network_init+0x398>)
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bd2:	6011      	str	r1, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 19896);
 8005bd4:	f503 419b 	add.w	r1, r3, #19840	; 0x4d80
 8005bd8:	3138      	adds	r1, #56	; 0x38
    conv2d_15_bias_array.data_start = AI_PTR(weights_map[0] + 19896);
 8005bda:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bde:	4a5b      	ldr	r2, [pc, #364]	; (8005d4c <ai_network_init+0x39c>)
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005be6:	6011      	str	r1, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 20408);
 8005be8:	f503 419f 	add.w	r1, r3, #20352	; 0x4f80
 8005bec:	3138      	adds	r1, #56	; 0x38
    conv2d_16_weights_array.data_start = AI_PTR(weights_map[0] + 20408);
 8005bee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bf2:	4a57      	ldr	r2, [pc, #348]	; (8005d50 <ai_network_init+0x3a0>)
 8005bf4:	6811      	ldr	r1, [r2, #0]
 8005bf6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bfa:	6011      	str	r1, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 21560);
 8005bfc:	f503 41a8 	add.w	r1, r3, #21504	; 0x5400
 8005c00:	3138      	adds	r1, #56	; 0x38
    conv2d_16_bias_array.data_start = AI_PTR(weights_map[0] + 21560);
 8005c02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c06:	4a53      	ldr	r2, [pc, #332]	; (8005d54 <ai_network_init+0x3a4>)
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c0e:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 22072);
 8005c10:	f503 41ac 	add.w	r1, r3, #22016	; 0x5600
 8005c14:	3138      	adds	r1, #56	; 0x38
    conv2d_17_weights_array.data_start = AI_PTR(weights_map[0] + 22072);
 8005c16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c1a:	4a4f      	ldr	r2, [pc, #316]	; (8005d58 <ai_network_init+0x3a8>)
 8005c1c:	6811      	ldr	r1, [r2, #0]
 8005c1e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c22:	6011      	str	r1, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 38456);
 8005c24:	f503 4116 	add.w	r1, r3, #38400	; 0x9600
 8005c28:	3138      	adds	r1, #56	; 0x38
    conv2d_17_bias_array.data_start = AI_PTR(weights_map[0] + 38456);
 8005c2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2e:	4a4b      	ldr	r2, [pc, #300]	; (8005d5c <ai_network_init+0x3ac>)
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c36:	6011      	str	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 38968);
 8005c38:	f503 4118 	add.w	r1, r3, #38912	; 0x9800
 8005c3c:	3138      	adds	r1, #56	; 0x38
    conv2d_18_weights_array.data_start = AI_PTR(weights_map[0] + 38968);
 8005c3e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c42:	4a47      	ldr	r2, [pc, #284]	; (8005d60 <ai_network_init+0x3b0>)
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c4a:	6011      	str	r1, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 40120);
 8005c4c:	f503 411c 	add.w	r1, r3, #39936	; 0x9c00
 8005c50:	31b8      	adds	r1, #184	; 0xb8
    conv2d_18_bias_array.data_start = AI_PTR(weights_map[0] + 40120);
 8005c52:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c56:	4a43      	ldr	r2, [pc, #268]	; (8005d64 <ai_network_init+0x3b4>)
 8005c58:	6811      	ldr	r1, [r2, #0]
 8005c5a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c5e:	6011      	str	r1, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(weights_map[0] + 40632);
 8005c60:	f503 411e 	add.w	r1, r3, #40448	; 0x9e00
 8005c64:	31b8      	adds	r1, #184	; 0xb8
    conv2d_19_weights_array.data_start = AI_PTR(weights_map[0] + 40632);
 8005c66:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <ai_network_init+0x3b8>)
 8005c6c:	6811      	ldr	r1, [r2, #0]
 8005c6e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c72:	6011      	str	r1, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(weights_map[0] + 57016);
 8005c74:	f503 415e 	add.w	r1, r3, #56832	; 0xde00
 8005c78:	31b8      	adds	r1, #184	; 0xb8
    conv2d_19_bias_array.data_start = AI_PTR(weights_map[0] + 57016);
 8005c7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c7e:	4a3b      	ldr	r2, [pc, #236]	; (8005d6c <ai_network_init+0x3bc>)
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c86:	6011      	str	r1, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 57528);
 8005c88:	f503 4160 	add.w	r1, r3, #57344	; 0xe000
 8005c8c:	31b8      	adds	r1, #184	; 0xb8
    conv2d_20_weights_array.data_start = AI_PTR(weights_map[0] + 57528);
 8005c8e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c92:	4a37      	ldr	r2, [pc, #220]	; (8005d70 <ai_network_init+0x3c0>)
 8005c94:	6811      	ldr	r1, [r2, #0]
 8005c96:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c9a:	6011      	str	r1, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 58680);
 8005c9c:	f503 4165 	add.w	r1, r3, #58624	; 0xe500
 8005ca0:	3138      	adds	r1, #56	; 0x38
    conv2d_20_bias_array.data_start = AI_PTR(weights_map[0] + 58680);
 8005ca2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ca6:	4a33      	ldr	r2, [pc, #204]	; (8005d74 <ai_network_init+0x3c4>)
 8005ca8:	6811      	ldr	r1, [r2, #0]
 8005caa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cae:	6011      	str	r1, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 59192);
 8005cb0:	f503 4167 	add.w	r1, r3, #59136	; 0xe700
 8005cb4:	3138      	adds	r1, #56	; 0x38
    conv2d_21_weights_array.data_start = AI_PTR(weights_map[0] + 59192);
 8005cb6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cba:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <ai_network_init+0x3c8>)
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cc2:	6011      	str	r1, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 75576);
 8005cc4:	f503 3193 	add.w	r1, r3, #75264	; 0x12600
 8005cc8:	f501 719c 	add.w	r1, r1, #312	; 0x138
    conv2d_21_bias_array.data_start = AI_PTR(weights_map[0] + 75576);
 8005ccc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <ai_network_init+0x3cc>)
 8005cd2:	6811      	ldr	r1, [r2, #0]
 8005cd4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cd8:	e052      	b.n	8005d80 <ai_network_init+0x3d0>
 8005cda:	bf00      	nop
 8005cdc:	24003dac 	.word	0x24003dac
 8005ce0:	24003d80 	.word	0x24003d80
 8005ce4:	2400348c 	.word	0x2400348c
 8005ce8:	2400339c 	.word	0x2400339c
 8005cec:	240035a8 	.word	0x240035a8
 8005cf0:	240034b8 	.word	0x240034b8
 8005cf4:	240036c4 	.word	0x240036c4
 8005cf8:	240035d4 	.word	0x240035d4
 8005cfc:	240037e0 	.word	0x240037e0
 8005d00:	240036f0 	.word	0x240036f0
 8005d04:	240038fc 	.word	0x240038fc
 8005d08:	2400380c 	.word	0x2400380c
 8005d0c:	24003a18 	.word	0x24003a18
 8005d10:	24003928 	.word	0x24003928
 8005d14:	24003b34 	.word	0x24003b34
 8005d18:	24003a44 	.word	0x24003a44
 8005d1c:	24001e14 	.word	0x24001e14
 8005d20:	24001d24 	.word	0x24001d24
 8005d24:	24001f30 	.word	0x24001f30
 8005d28:	24001e40 	.word	0x24001e40
 8005d2c:	2400204c 	.word	0x2400204c
 8005d30:	24001f5c 	.word	0x24001f5c
 8005d34:	24002168 	.word	0x24002168
 8005d38:	24002078 	.word	0x24002078
 8005d3c:	24002284 	.word	0x24002284
 8005d40:	24002194 	.word	0x24002194
 8005d44:	240023a0 	.word	0x240023a0
 8005d48:	240022b0 	.word	0x240022b0
 8005d4c:	240024bc 	.word	0x240024bc
 8005d50:	240023cc 	.word	0x240023cc
 8005d54:	240025d8 	.word	0x240025d8
 8005d58:	240024e8 	.word	0x240024e8
 8005d5c:	240026f4 	.word	0x240026f4
 8005d60:	24002604 	.word	0x24002604
 8005d64:	24002810 	.word	0x24002810
 8005d68:	24002720 	.word	0x24002720
 8005d6c:	2400292c 	.word	0x2400292c
 8005d70:	2400283c 	.word	0x2400283c
 8005d74:	24002a48 	.word	0x24002a48
 8005d78:	24002958 	.word	0x24002958
 8005d7c:	24002b64 	.word	0x24002b64
 8005d80:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 76088);
 8005d82:	f503 3194 	add.w	r1, r3, #75776	; 0x12800
 8005d86:	f501 719c 	add.w	r1, r1, #312	; 0x138
    conv2d_22_weights_array.data_start = AI_PTR(weights_map[0] + 76088);
 8005d8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d8e:	4aca      	ldr	r2, [pc, #808]	; (80060b8 <ai_network_init+0x708>)
 8005d90:	6811      	ldr	r1, [r2, #0]
 8005d92:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d96:	6011      	str	r1, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 77240);
 8005d98:	f503 3196 	add.w	r1, r3, #76800	; 0x12c00
 8005d9c:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_22_bias_array.data_start = AI_PTR(weights_map[0] + 77240);
 8005da0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 8005da4:	4ac5      	ldr	r2, [pc, #788]	; (80060bc <ai_network_init+0x70c>)
 8005da6:	6811      	ldr	r1, [r2, #0]
 8005da8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dac:	6011      	str	r1, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(weights_map[0] + 77752);
 8005dae:	f503 3197 	add.w	r1, r3, #77312	; 0x12e00
 8005db2:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_23_weights_array.data_start = AI_PTR(weights_map[0] + 77752);
 8005db6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dba:	4ac1      	ldr	r2, [pc, #772]	; (80060c0 <ai_network_init+0x710>)
 8005dbc:	6811      	ldr	r1, [r2, #0]
 8005dbe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dc2:	6011      	str	r1, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(weights_map[0] + 94136);
 8005dc4:	f503 31b7 	add.w	r1, r3, #93696	; 0x16e00
 8005dc8:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_23_bias_array.data_start = AI_PTR(weights_map[0] + 94136);
 8005dcc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dd0:	4abc      	ldr	r2, [pc, #752]	; (80060c4 <ai_network_init+0x714>)
 8005dd2:	6811      	ldr	r1, [r2, #0]
 8005dd4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dd8:	6011      	str	r1, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 94648);
 8005dda:	f503 31b8 	add.w	r1, r3, #94208	; 0x17000
 8005dde:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_24_weights_array.data_start = AI_PTR(weights_map[0] + 94648);
 8005de2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005de6:	4ab8      	ldr	r2, [pc, #736]	; (80060c8 <ai_network_init+0x718>)
 8005de8:	6811      	ldr	r1, [r2, #0]
 8005dea:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dee:	6011      	str	r1, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 95800);
 8005df0:	f503 31bb 	add.w	r1, r3, #95744	; 0x17600
 8005df4:	3138      	adds	r1, #56	; 0x38
    conv2d_24_bias_array.data_start = AI_PTR(weights_map[0] + 95800);
 8005df6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dfa:	4ab4      	ldr	r2, [pc, #720]	; (80060cc <ai_network_init+0x71c>)
 8005dfc:	6811      	ldr	r1, [r2, #0]
 8005dfe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e02:	6011      	str	r1, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(weights_map[0] + 96312);
 8005e04:	f503 31bc 	add.w	r1, r3, #96256	; 0x17800
 8005e08:	3138      	adds	r1, #56	; 0x38
    conv2d_25_weights_array.data_start = AI_PTR(weights_map[0] + 96312);
 8005e0a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e0e:	4ab0      	ldr	r2, [pc, #704]	; (80060d0 <ai_network_init+0x720>)
 8005e10:	6811      	ldr	r1, [r2, #0]
 8005e12:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e16:	6011      	str	r1, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(weights_map[0] + 112696);
 8005e18:	f503 31dc 	add.w	r1, r3, #112640	; 0x1b800
 8005e1c:	3138      	adds	r1, #56	; 0x38
    conv2d_25_bias_array.data_start = AI_PTR(weights_map[0] + 112696);
 8005e1e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e22:	4aac      	ldr	r2, [pc, #688]	; (80060d4 <ai_network_init+0x724>)
 8005e24:	6811      	ldr	r1, [r2, #0]
 8005e26:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e2a:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 113208);
 8005e2c:	f503 31dd 	add.w	r1, r3, #113152	; 0x1ba00
 8005e30:	3138      	adds	r1, #56	; 0x38
    conv2d_26_weights_array.data_start = AI_PTR(weights_map[0] + 113208);
 8005e32:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e36:	4aa8      	ldr	r2, [pc, #672]	; (80060d8 <ai_network_init+0x728>)
 8005e38:	6811      	ldr	r1, [r2, #0]
 8005e3a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e3e:	6011      	str	r1, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 114360);
 8005e40:	f503 31df 	add.w	r1, r3, #114176	; 0x1be00
 8005e44:	31b8      	adds	r1, #184	; 0xb8
    conv2d_26_bias_array.data_start = AI_PTR(weights_map[0] + 114360);
 8005e46:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e4a:	4aa4      	ldr	r2, [pc, #656]	; (80060dc <ai_network_init+0x72c>)
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e52:	6011      	str	r1, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 114872);
 8005e54:	f503 31e0 	add.w	r1, r3, #114688	; 0x1c000
 8005e58:	31b8      	adds	r1, #184	; 0xb8
    conv2d_27_weights_array.data_start = AI_PTR(weights_map[0] + 114872);
 8005e5a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e5e:	4aa0      	ldr	r2, [pc, #640]	; (80060e0 <ai_network_init+0x730>)
 8005e60:	6811      	ldr	r1, [r2, #0]
 8005e62:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e66:	6011      	str	r1, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 147640);
 8005e68:	f503 3110 	add.w	r1, r3, #147456	; 0x24000
 8005e6c:	31b8      	adds	r1, #184	; 0xb8
    conv2d_27_bias_array.data_start = AI_PTR(weights_map[0] + 147640);
 8005e6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e72:	4a9c      	ldr	r2, [pc, #624]	; (80060e4 <ai_network_init+0x734>)
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e7a:	6011      	str	r1, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 148664);
 8005e7c:	f503 3111 	add.w	r1, r3, #148480	; 0x24400
 8005e80:	31b8      	adds	r1, #184	; 0xb8
    conv2d_28_weights_array.data_start = AI_PTR(weights_map[0] + 148664);
 8005e82:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e86:	4a98      	ldr	r2, [pc, #608]	; (80060e8 <ai_network_init+0x738>)
 8005e88:	6811      	ldr	r1, [r2, #0]
 8005e8a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e8e:	6011      	str	r1, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 150968);
 8005e90:	f503 3113 	add.w	r1, r3, #150528	; 0x24c00
 8005e94:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_28_bias_array.data_start = AI_PTR(weights_map[0] + 150968);
 8005e98:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e9c:	4a93      	ldr	r2, [pc, #588]	; (80060ec <ai_network_init+0x73c>)
 8005e9e:	6811      	ldr	r1, [r2, #0]
 8005ea0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ea4:	6011      	str	r1, [r2, #0]
    conv2d_29_weights_array.data = AI_PTR(weights_map[0] + 151992);
 8005ea6:	f503 3114 	add.w	r1, r3, #151552	; 0x25000
 8005eaa:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_29_weights_array.data_start = AI_PTR(weights_map[0] + 151992);
 8005eae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eb2:	4a8f      	ldr	r2, [pc, #572]	; (80060f0 <ai_network_init+0x740>)
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005eba:	6011      	str	r1, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(weights_map[0] + 217528);
 8005ebc:	f503 3154 	add.w	r1, r3, #217088	; 0x35000
 8005ec0:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    conv2d_29_bias_array.data_start = AI_PTR(weights_map[0] + 217528);
 8005ec4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ec8:	4a8a      	ldr	r2, [pc, #552]	; (80060f4 <ai_network_init+0x744>)
 8005eca:	6811      	ldr	r1, [r2, #0]
 8005ecc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ed0:	6011      	str	r1, [r2, #0]
    dense_32_weights_array.data = AI_PTR(weights_map[0] + 218552);
 8005ed2:	f503 3155 	add.w	r1, r3, #218112	; 0x35400
    dense_32_bias_array.data = AI_PTR(weights_map[0] + 219832);
 8005ed6:	f503 3356 	add.w	r3, r3, #219136	; 0x35800
    dense_32_weights_array.data = AI_PTR(weights_map[0] + 218552);
 8005eda:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
    dense_32_bias_array.data = AI_PTR(weights_map[0] + 219832);
 8005ede:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
    dense_32_weights_array.data_start = AI_PTR(weights_map[0] + 218552);
 8005ee2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ee6:	4a84      	ldr	r2, [pc, #528]	; (80060f8 <ai_network_init+0x748>)
 8005ee8:	6811      	ldr	r1, [r2, #0]
 8005eea:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_32_bias_array.data_start = AI_PTR(weights_map[0] + 219832);
 8005eee:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ef2:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005ef4:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	2101      	movs	r1, #1
 8005efa:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005efc:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005efe:	f000 fbbb 	bl	8006678 <ai_platform_get_activations_map>
 8005f02:	4607      	mov	r7, r0
 8005f04:	2800      	cmp	r0, #0
 8005f06:	f000 820f 	beq.w	8006328 <ai_network_init+0x978>
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 3324);
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	497b      	ldr	r1, [pc, #492]	; (80060fc <ai_network_init+0x74c>)
 8005f0e:	f603 42fc 	addw	r2, r3, #3324	; 0xcfc
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 103072);
 8005f12:	487b      	ldr	r0, [pc, #492]	; (8006100 <ai_network_init+0x750>)
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 4740);
 8005f14:	f503 5c94 	add.w	ip, r3, #4736	; 0x1280
    conv2d_18_scratch1_array.data = AI_PTR(activations_map[0] + 51968);
 8005f18:	4c7a      	ldr	r4, [pc, #488]	; (8006104 <ai_network_init+0x754>)
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 77056);
 8005f1a:	f8df e29c 	ldr.w	lr, [pc, #668]	; 80061b8 <ai_network_init+0x808>
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 4740);
 8005f1e:	f10c 0c04 	add.w	ip, ip, #4
    conversion_0_output_array.data_start = AI_PTR(activations_map[0] + 3324);
 8005f22:	e9c1 2202 	strd	r2, r2, [r1, #8]
    eltwise_1_output_array.data = AI_PTR(activations_map[0] + 3324);
 8005f26:	4978      	ldr	r1, [pc, #480]	; (8006108 <ai_network_init+0x758>)
    eltwise_1_output_array.data_start = AI_PTR(activations_map[0] + 3324);
 8005f28:	e9c1 2202 	strd	r2, r2, [r1, #8]
    eltwise_2_output_array.data = AI_PTR(activations_map[0] + 3324);
 8005f2c:	4977      	ldr	r1, [pc, #476]	; (800610c <ai_network_init+0x75c>)
    eltwise_2_output_array.data_start = AI_PTR(activations_map[0] + 3324);
 8005f2e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(activations_map[0] + 153856);
 8005f32:	f503 3216 	add.w	r2, r3, #153600	; 0x25800
 8005f36:	4976      	ldr	r1, [pc, #472]	; (8006110 <ai_network_init+0x760>)
 8005f38:	f502 7280 	add.w	r2, r2, #256	; 0x100
    conv2d_3_scratch0_array.data_start = AI_PTR(activations_map[0] + 153856);
 8005f3c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch1_array.data = AI_PTR(activations_map[0] + 2420);
 8005f40:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8005f44:	4973      	ldr	r1, [pc, #460]	; (8006114 <ai_network_init+0x764>)
    conv2d_3_scratch1_array.data_start = AI_PTR(activations_map[0] + 2420);
 8005f46:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(activations_map[0] + 2420);
 8005f4a:	4973      	ldr	r1, [pc, #460]	; (8006118 <ai_network_init+0x768>)
    conv2d_3_output_array.data_start = AI_PTR(activations_map[0] + 2420);
 8005f4c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 102772);
 8005f50:	f503 32c8 	add.w	r2, r3, #102400	; 0x19000
 8005f54:	4971      	ldr	r1, [pc, #452]	; (800611c <ai_network_init+0x76c>)
 8005f56:	f502 72ba 	add.w	r2, r2, #372	; 0x174
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 102772);
 8005f5a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_4_scratch1_array.data = AI_PTR(activations_map[0] + 612);
 8005f5e:	f503 7219 	add.w	r2, r3, #612	; 0x264
 8005f62:	496f      	ldr	r1, [pc, #444]	; (8006120 <ai_network_init+0x770>)
    conv2d_4_scratch1_array.data_start = AI_PTR(activations_map[0] + 612);
 8005f64:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 103072);
 8005f68:	f503 31c9 	add.w	r1, r3, #102912	; 0x19200
 8005f6c:	31a0      	adds	r1, #160	; 0xa0
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 103072);
 8005f6e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_5_scratch0_array.data = AI_PTR(activations_map[0] + 612);
 8005f72:	496c      	ldr	r1, [pc, #432]	; (8006124 <ai_network_init+0x774>)
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 26880);
 8005f74:	486c      	ldr	r0, [pc, #432]	; (8006128 <ai_network_init+0x778>)
    conv2d_5_scratch0_array.data_start = AI_PTR(activations_map[0] + 612);
 8005f76:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_5_scratch1_array.data = AI_PTR(activations_map[0] + 912);
 8005f7a:	f503 7264 	add.w	r2, r3, #912	; 0x390
 8005f7e:	496b      	ldr	r1, [pc, #428]	; (800612c <ai_network_init+0x77c>)
    conv2d_5_scratch1_array.data_start = AI_PTR(activations_map[0] + 912);
 8005f80:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_5_output_array.data = AI_PTR(activations_map[0] + 912);
 8005f84:	496a      	ldr	r1, [pc, #424]	; (8006130 <ai_network_init+0x780>)
    conv2d_5_output_array.data_start = AI_PTR(activations_map[0] + 912);
 8005f86:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_scratch0_array.data = AI_PTR(activations_map[0] + 202828);
 8005f8a:	f503 3246 	add.w	r2, r3, #202752	; 0x31800
 8005f8e:	4969      	ldr	r1, [pc, #420]	; (8006134 <ai_network_init+0x784>)
 8005f90:	324c      	adds	r2, #76	; 0x4c
    conv2d_6_scratch0_array.data_start = AI_PTR(activations_map[0] + 202828);
 8005f92:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 8005f96:	4a68      	ldr	r2, [pc, #416]	; (8006138 <ai_network_init+0x788>)
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 50176);
 8005f98:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
    conv2d_6_scratch1_array.data_start = AI_PTR(activations_map[0] + 0);
 8005f9c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 0);
 8005fa0:	4a66      	ldr	r2, [pc, #408]	; (800613c <ai_network_init+0x78c>)
    conv2d_6_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005fa2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 50176);
 8005fa6:	4a66      	ldr	r2, [pc, #408]	; (8006140 <ai_network_init+0x790>)
    conv2d_7_scratch0_array.data_start = AI_PTR(activations_map[0] + 50176);
 8005fa8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_scratch1_array.data = AI_PTR(activations_map[0] + 50560);
 8005fac:	f503 4245 	add.w	r2, r3, #50432	; 0xc500
 8005fb0:	4964      	ldr	r1, [pc, #400]	; (8006144 <ai_network_init+0x794>)
 8005fb2:	3280      	adds	r2, #128	; 0x80
    conv2d_7_scratch1_array.data_start = AI_PTR(activations_map[0] + 50560);
 8005fb4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(activations_map[0] + 50560);
 8005fb8:	4963      	ldr	r1, [pc, #396]	; (8006148 <ai_network_init+0x798>)
    conv2d_7_output_array.data_start = AI_PTR(activations_map[0] + 50560);
 8005fba:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005fbe:	4a63      	ldr	r2, [pc, #396]	; (800614c <ai_network_init+0x79c>)
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 46912);
 8005fc0:	4963      	ldr	r1, [pc, #396]	; (8006150 <ai_network_init+0x7a0>)
    conv2d_8_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8005fc2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 46912);
 8005fc6:	f503 4237 	add.w	r2, r3, #46848	; 0xb700
 8005fca:	3240      	adds	r2, #64	; 0x40
    conv2d_8_scratch1_array.data_start = AI_PTR(activations_map[0] + 46912);
 8005fcc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 46912);
 8005fd0:	4960      	ldr	r1, [pc, #384]	; (8006154 <ai_network_init+0x7a4>)
    conv2d_8_output_array.data_start = AI_PTR(activations_map[0] + 46912);
 8005fd2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_9_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005fd6:	4a60      	ldr	r2, [pc, #384]	; (8006158 <ai_network_init+0x7a8>)
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 45088);
 8005fd8:	4960      	ldr	r1, [pc, #384]	; (800615c <ai_network_init+0x7ac>)
    conv2d_9_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8005fda:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 45088);
 8005fde:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
 8005fe2:	3220      	adds	r2, #32
    conv2d_9_scratch1_array.data_start = AI_PTR(activations_map[0] + 45088);
 8005fe4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 45088);
 8005fe8:	495d      	ldr	r1, [pc, #372]	; (8006160 <ai_network_init+0x7b0>)
    conv2d_9_output_array.data_start = AI_PTR(activations_map[0] + 45088);
 8005fea:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005fee:	4a5d      	ldr	r2, [pc, #372]	; (8006164 <ai_network_init+0x7b4>)
    conv2d_10_scratch1_array.data = AI_PTR(activations_map[0] + 1188);
 8005ff0:	f203 41a4 	addw	r1, r3, #1188	; 0x4a4
    conv2d_10_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8005ff4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_10_scratch1_array.data = AI_PTR(activations_map[0] + 1188);
 8005ff8:	4a5b      	ldr	r2, [pc, #364]	; (8006168 <ai_network_init+0x7b8>)
    conv2d_10_scratch1_array.data_start = AI_PTR(activations_map[0] + 1188);
 8005ffa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_output_array.data = AI_PTR(activations_map[0] + 145440);
 8005ffe:	f503 320e 	add.w	r2, r3, #145408	; 0x23800
 8006002:	495a      	ldr	r1, [pc, #360]	; (800616c <ai_network_init+0x7bc>)
 8006004:	3220      	adds	r2, #32
    conv2d_10_output_array.data_start = AI_PTR(activations_map[0] + 145440);
 8006006:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_11_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800600a:	4a59      	ldr	r2, [pc, #356]	; (8006170 <ai_network_init+0x7c0>)
    conv2d_11_scratch1_array.data = AI_PTR(activations_map[0] + 768);
 800600c:	f503 7140 	add.w	r1, r3, #768	; 0x300
    conv2d_11_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006010:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_11_scratch1_array.data = AI_PTR(activations_map[0] + 768);
 8006014:	4a57      	ldr	r2, [pc, #348]	; (8006174 <ai_network_init+0x7c4>)
    conv2d_11_scratch1_array.data_start = AI_PTR(activations_map[0] + 768);
 8006016:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_output_array.data = AI_PTR(activations_map[0] + 50944);
 800601a:	f503 4147 	add.w	r1, r3, #50944	; 0xc700
 800601e:	4a56      	ldr	r2, [pc, #344]	; (8006178 <ai_network_init+0x7c8>)
    conv2d_11_output_array.data_start = AI_PTR(activations_map[0] + 50944);
 8006020:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006024:	4a55      	ldr	r2, [pc, #340]	; (800617c <ai_network_init+0x7cc>)
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 101120);
 8006026:	4956      	ldr	r1, [pc, #344]	; (8006180 <ai_network_init+0x7d0>)
    conv2d_12_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006028:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 101120);
 800602c:	f503 32c5 	add.w	r2, r3, #100864	; 0x18a00
 8006030:	f502 7280 	add.w	r2, r2, #256	; 0x100
    conv2d_12_scratch1_array.data_start = AI_PTR(activations_map[0] + 101120);
 8006034:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 151296);
 8006038:	f503 3213 	add.w	r2, r3, #150528	; 0x24c00
 800603c:	4951      	ldr	r1, [pc, #324]	; (8006184 <ai_network_init+0x7d4>)
 800603e:	f502 7240 	add.w	r2, r2, #768	; 0x300
    conv2d_12_output_array.data_start = AI_PTR(activations_map[0] + 151296);
 8006042:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_13_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006046:	4a50      	ldr	r2, [pc, #320]	; (8006188 <ai_network_init+0x7d8>)
    conv2d_13_scratch1_array.data = AI_PTR(activations_map[0] + 896);
 8006048:	f503 7160 	add.w	r1, r3, #896	; 0x380
    conv2d_13_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800604c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_13_scratch1_array.data = AI_PTR(activations_map[0] + 896);
 8006050:	4a4e      	ldr	r2, [pc, #312]	; (800618c <ai_network_init+0x7dc>)
    conv2d_13_scratch1_array.data_start = AI_PTR(activations_map[0] + 896);
 8006052:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_output_array.data = AI_PTR(activations_map[0] + 51072);
 8006056:	f503 4247 	add.w	r2, r3, #50944	; 0xc700
 800605a:	494d      	ldr	r1, [pc, #308]	; (8006190 <ai_network_init+0x7e0>)
 800605c:	3280      	adds	r2, #128	; 0x80
    conv2d_13_output_array.data_start = AI_PTR(activations_map[0] + 51072);
 800605e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_14_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006062:	4a4c      	ldr	r2, [pc, #304]	; (8006194 <ai_network_init+0x7e4>)
    conv2d_14_scratch1_array.data = AI_PTR(activations_map[0] + 2372);
 8006064:	f603 1144 	addw	r1, r3, #2372	; 0x944
    conv2d_14_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006068:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_14_scratch1_array.data = AI_PTR(activations_map[0] + 2372);
 800606c:	4a4a      	ldr	r2, [pc, #296]	; (8006198 <ai_network_init+0x7e8>)
    conv2d_14_scratch1_array.data_start = AI_PTR(activations_map[0] + 2372);
 800606e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14916);
 8006072:	f503 5269 	add.w	r2, r3, #14912	; 0x3a40
 8006076:	4949      	ldr	r1, [pc, #292]	; (800619c <ai_network_init+0x7ec>)
 8006078:	3204      	adds	r2, #4
    conv2d_14_output_array.data_start = AI_PTR(activations_map[0] + 14916);
 800607a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_15_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800607e:	4a48      	ldr	r2, [pc, #288]	; (80061a0 <ai_network_init+0x7f0>)
    conv2d_15_scratch1_array.data = AI_PTR(activations_map[0] + 27460);
 8006080:	4948      	ldr	r1, [pc, #288]	; (80061a4 <ai_network_init+0x7f4>)
    conv2d_15_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006082:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_15_scratch1_array.data = AI_PTR(activations_map[0] + 27460);
 8006086:	f503 42d6 	add.w	r2, r3, #27392	; 0x6b00
 800608a:	3244      	adds	r2, #68	; 0x44
    conv2d_15_scratch1_array.data_start = AI_PTR(activations_map[0] + 27460);
 800608c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_15_output_array.data = AI_PTR(activations_map[0] + 52548);
 8006090:	f503 424d 	add.w	r2, r3, #52480	; 0xcd00
 8006094:	4944      	ldr	r1, [pc, #272]	; (80061a8 <ai_network_init+0x7f8>)
 8006096:	3244      	adds	r2, #68	; 0x44
    conv2d_15_output_array.data_start = AI_PTR(activations_map[0] + 52548);
 8006098:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800609c:	4a43      	ldr	r2, [pc, #268]	; (80061ac <ai_network_init+0x7fc>)
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 77636);
 800609e:	4944      	ldr	r1, [pc, #272]	; (80061b0 <ai_network_init+0x800>)
    conv2d_16_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80060a0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 4740);
 80060a4:	4a43      	ldr	r2, [pc, #268]	; (80061b4 <ai_network_init+0x804>)
    conv2d_16_scratch1_array.data_start = AI_PTR(activations_map[0] + 4740);
 80060a6:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 77636);
 80060aa:	f503 3297 	add.w	r2, r3, #77312	; 0x12e00
 80060ae:	f502 72a2 	add.w	r2, r2, #324	; 0x144
    conv2d_16_output_array.data_start = AI_PTR(activations_map[0] + 77636);
 80060b2:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80060b6:	e081      	b.n	80061bc <ai_network_init+0x80c>
 80060b8:	24002a74 	.word	0x24002a74
 80060bc:	24002c80 	.word	0x24002c80
 80060c0:	24002b90 	.word	0x24002b90
 80060c4:	24002d9c 	.word	0x24002d9c
 80060c8:	24002cac 	.word	0x24002cac
 80060cc:	24002eb8 	.word	0x24002eb8
 80060d0:	24002dc8 	.word	0x24002dc8
 80060d4:	24002fd4 	.word	0x24002fd4
 80060d8:	24002ee4 	.word	0x24002ee4
 80060dc:	240030f0 	.word	0x240030f0
 80060e0:	24003000 	.word	0x24003000
 80060e4:	2400320c 	.word	0x2400320c
 80060e8:	2400311c 	.word	0x2400311c
 80060ec:	24003370 	.word	0x24003370
 80060f0:	24003238 	.word	0x24003238
 80060f4:	24003c6c 	.word	0x24003c6c
 80060f8:	24003bf8 	.word	0x24003bf8
 80060fc:	24003b80 	.word	0x24003b80
 8006100:	24003524 	.word	0x24003524
 8006104:	240026c8 	.word	0x240026c8
 8006108:	24003cbc 	.word	0x24003cbc
 800610c:	24003d0c 	.word	0x24003d0c
 8006110:	24003434 	.word	0x24003434
 8006114:	24003460 	.word	0x24003460
 8006118:	24003408 	.word	0x24003408
 800611c:	24003550 	.word	0x24003550
 8006120:	2400357c 	.word	0x2400357c
 8006124:	2400366c 	.word	0x2400366c
 8006128:	24002554 	.word	0x24002554
 800612c:	24003698 	.word	0x24003698
 8006130:	24003640 	.word	0x24003640
 8006134:	24003788 	.word	0x24003788
 8006138:	240037b4 	.word	0x240037b4
 800613c:	2400375c 	.word	0x2400375c
 8006140:	240038a4 	.word	0x240038a4
 8006144:	240038d0 	.word	0x240038d0
 8006148:	24003878 	.word	0x24003878
 800614c:	240039c0 	.word	0x240039c0
 8006150:	240039ec 	.word	0x240039ec
 8006154:	24003994 	.word	0x24003994
 8006158:	24003adc 	.word	0x24003adc
 800615c:	24003b08 	.word	0x24003b08
 8006160:	24003ab0 	.word	0x24003ab0
 8006164:	24001dbc 	.word	0x24001dbc
 8006168:	24001de8 	.word	0x24001de8
 800616c:	24001d90 	.word	0x24001d90
 8006170:	24001ed8 	.word	0x24001ed8
 8006174:	24001f04 	.word	0x24001f04
 8006178:	24001eac 	.word	0x24001eac
 800617c:	24001ff4 	.word	0x24001ff4
 8006180:	24002020 	.word	0x24002020
 8006184:	24001fc8 	.word	0x24001fc8
 8006188:	24002110 	.word	0x24002110
 800618c:	2400213c 	.word	0x2400213c
 8006190:	240020e4 	.word	0x240020e4
 8006194:	2400222c 	.word	0x2400222c
 8006198:	24002258 	.word	0x24002258
 800619c:	24002200 	.word	0x24002200
 80061a0:	24002348 	.word	0x24002348
 80061a4:	24002374 	.word	0x24002374
 80061a8:	2400231c 	.word	0x2400231c
 80061ac:	24002464 	.word	0x24002464
 80061b0:	24002438 	.word	0x24002438
 80061b4:	24002490 	.word	0x24002490
 80061b8:	24002670 	.word	0x24002670
    conv2d_17_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80061bc:	4a5d      	ldr	r2, [pc, #372]	; (8006334 <ai_network_init+0x984>)
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 80061be:	f503 61e0 	add.w	r1, r3, #1792	; 0x700
    conv2d_17_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80061c2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 80061c6:	4a5c      	ldr	r2, [pc, #368]	; (8006338 <ai_network_init+0x988>)
    conv2d_17_scratch1_array.data_start = AI_PTR(activations_map[0] + 1792);
 80061c8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 26880);
 80061cc:	f503 42d2 	add.w	r2, r3, #26880	; 0x6900
    conv2d_17_output_array.data_start = AI_PTR(activations_map[0] + 26880);
 80061d0:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_18_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80061d4:	4859      	ldr	r0, [pc, #356]	; (800633c <ai_network_init+0x98c>)
    conv2d_18_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80061d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_18_scratch1_array.data = AI_PTR(activations_map[0] + 51968);
 80061da:	f503 404b 	add.w	r0, r3, #51968	; 0xcb00
    conv2d_18_scratch1_array.data_start = AI_PTR(activations_map[0] + 51968);
 80061de:	e9c4 0002 	strd	r0, r0, [r4, #8]
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 77056);
 80061e2:	f503 3496 	add.w	r4, r3, #76800	; 0x12c00
 80061e6:	f504 7480 	add.w	r4, r4, #256	; 0x100
    conv2d_18_output_array.data_start = AI_PTR(activations_map[0] + 77056);
 80061ea:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_19_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80061ee:	f8df e198 	ldr.w	lr, [pc, #408]	; 8006388 <ai_network_init+0x9d8>
    conv2d_19_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80061f2:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_19_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 80061f6:	f8df e194 	ldr.w	lr, [pc, #404]	; 800638c <ai_network_init+0x9dc>
    conv2d_19_scratch1_array.data_start = AI_PTR(activations_map[0] + 1792);
 80061fa:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv2d_19_output_array.data = AI_PTR(activations_map[0] + 26880);
 80061fe:	f8df e190 	ldr.w	lr, [pc, #400]	; 8006390 <ai_network_init+0x9e0>
    conv2d_19_output_array.data_start = AI_PTR(activations_map[0] + 26880);
 8006202:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_20_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006206:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8006394 <ai_network_init+0x9e4>
    conv2d_20_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800620a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 51968);
 800620e:	f8df e188 	ldr.w	lr, [pc, #392]	; 8006398 <ai_network_init+0x9e8>
    conv2d_20_scratch1_array.data_start = AI_PTR(activations_map[0] + 51968);
 8006212:	e9ce 0002 	strd	r0, r0, [lr, #8]
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 77056);
 8006216:	f8df e184 	ldr.w	lr, [pc, #388]	; 800639c <ai_network_init+0x9ec>
    conv2d_20_output_array.data_start = AI_PTR(activations_map[0] + 77056);
 800621a:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_21_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800621e:	f8df e180 	ldr.w	lr, [pc, #384]	; 80063a0 <ai_network_init+0x9f0>
    conv2d_21_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006222:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 8006226:	f8df e17c 	ldr.w	lr, [pc, #380]	; 80063a4 <ai_network_init+0x9f4>
    conv2d_21_scratch1_array.data_start = AI_PTR(activations_map[0] + 1792);
 800622a:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 26880);
 800622e:	f8df e178 	ldr.w	lr, [pc, #376]	; 80063a8 <ai_network_init+0x9f8>
    conv2d_21_output_array.data_start = AI_PTR(activations_map[0] + 26880);
 8006232:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_22_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006236:	f8df e174 	ldr.w	lr, [pc, #372]	; 80063ac <ai_network_init+0x9fc>
    conv2d_22_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800623a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_22_scratch1_array.data = AI_PTR(activations_map[0] + 51968);
 800623e:	f8df e170 	ldr.w	lr, [pc, #368]	; 80063b0 <ai_network_init+0xa00>
    conv2d_22_scratch1_array.data_start = AI_PTR(activations_map[0] + 51968);
 8006242:	e9ce 0002 	strd	r0, r0, [lr, #8]
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 77056);
 8006246:	f8df e16c 	ldr.w	lr, [pc, #364]	; 80063b4 <ai_network_init+0xa04>
    conv2d_22_output_array.data_start = AI_PTR(activations_map[0] + 77056);
 800624a:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_23_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800624e:	f8df e168 	ldr.w	lr, [pc, #360]	; 80063b8 <ai_network_init+0xa08>
    conv2d_23_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006252:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_23_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 8006256:	f8df e164 	ldr.w	lr, [pc, #356]	; 80063bc <ai_network_init+0xa0c>
    conv2d_23_scratch1_array.data_start = AI_PTR(activations_map[0] + 1792);
 800625a:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv2d_23_output_array.data = AI_PTR(activations_map[0] + 26880);
 800625e:	f8df e160 	ldr.w	lr, [pc, #352]	; 80063c0 <ai_network_init+0xa10>
    conv2d_23_output_array.data_start = AI_PTR(activations_map[0] + 26880);
 8006262:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_24_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006266:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80063c4 <ai_network_init+0xa14>
    conv2d_24_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800626a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 51968);
 800626e:	f8df e158 	ldr.w	lr, [pc, #344]	; 80063c8 <ai_network_init+0xa18>
    conv2d_24_scratch1_array.data_start = AI_PTR(activations_map[0] + 51968);
 8006272:	e9ce 0002 	strd	r0, r0, [lr, #8]
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 77056);
 8006276:	4832      	ldr	r0, [pc, #200]	; (8006340 <ai_network_init+0x990>)
    conv2d_24_output_array.data_start = AI_PTR(activations_map[0] + 77056);
 8006278:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_25_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800627c:	4831      	ldr	r0, [pc, #196]	; (8006344 <ai_network_init+0x994>)
    conv2d_25_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800627e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_25_scratch1_array.data = AI_PTR(activations_map[0] + 1792);
 8006282:	4831      	ldr	r0, [pc, #196]	; (8006348 <ai_network_init+0x998>)
    conv2d_25_scratch1_array.data_start = AI_PTR(activations_map[0] + 1792);
 8006284:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_25_output_array.data = AI_PTR(activations_map[0] + 26880);
 8006288:	4930      	ldr	r1, [pc, #192]	; (800634c <ai_network_init+0x99c>)
    conv2d_25_output_array.data_start = AI_PTR(activations_map[0] + 26880);
 800628a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_26_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800628e:	4a30      	ldr	r2, [pc, #192]	; (8006350 <ai_network_init+0x9a0>)
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 11012);
 8006290:	4930      	ldr	r1, [pc, #192]	; (8006354 <ai_network_init+0x9a4>)
    conv2d_26_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006292:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_26_scratch1_array.data = AI_PTR(activations_map[0] + 4740);
 8006296:	4a30      	ldr	r2, [pc, #192]	; (8006358 <ai_network_init+0x9a8>)
    conv2d_26_scratch1_array.data_start = AI_PTR(activations_map[0] + 4740);
 8006298:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 11012);
 800629c:	f503 522c 	add.w	r2, r3, #11008	; 0x2b00
 80062a0:	3204      	adds	r2, #4
    conv2d_26_output_array.data_start = AI_PTR(activations_map[0] + 11012);
 80062a2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_27_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80062a6:	4a2d      	ldr	r2, [pc, #180]	; (800635c <ai_network_init+0x9ac>)
    conv2d_27_scratch1_array.data = AI_PTR(activations_map[0] + 17284);
 80062a8:	492d      	ldr	r1, [pc, #180]	; (8006360 <ai_network_init+0x9b0>)
    conv2d_27_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80062aa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_27_scratch1_array.data = AI_PTR(activations_map[0] + 17284);
 80062ae:	f503 4287 	add.w	r2, r3, #17280	; 0x4380
 80062b2:	3204      	adds	r2, #4
    conv2d_27_scratch1_array.data_start = AI_PTR(activations_map[0] + 17284);
 80062b4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 29828);
 80062b8:	f503 42e9 	add.w	r2, r3, #29824	; 0x7480
 80062bc:	4929      	ldr	r1, [pc, #164]	; (8006364 <ai_network_init+0x9b4>)
 80062be:	3204      	adds	r2, #4
    conv2d_27_output_array.data_start = AI_PTR(activations_map[0] + 29828);
 80062c0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80062c4:	4a28      	ldr	r2, [pc, #160]	; (8006368 <ai_network_init+0x9b8>)
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 9476);
 80062c6:	4929      	ldr	r1, [pc, #164]	; (800636c <ai_network_init+0x9bc>)
    conv2d_28_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80062c8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 9476);
 80062cc:	f503 5214 	add.w	r2, r3, #9472	; 0x2500
 80062d0:	3204      	adds	r2, #4
    conv2d_28_scratch1_array.data_start = AI_PTR(activations_map[0] + 9476);
 80062d2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 42372);
 80062d6:	f503 4225 	add.w	r2, r3, #42240	; 0xa500
 80062da:	4925      	ldr	r1, [pc, #148]	; (8006370 <ai_network_init+0x9c0>)
 80062dc:	3284      	adds	r2, #132	; 0x84
    conv2d_28_output_array.data_start = AI_PTR(activations_map[0] + 42372);
 80062de:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_29_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80062e2:	4a24      	ldr	r2, [pc, #144]	; (8006374 <ai_network_init+0x9c4>)
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 3584);
 80062e4:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    conv2d_29_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80062e8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 3584);
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <ai_network_init+0x9c8>)
    conv2d_29_scratch1_array.data_start = AI_PTR(activations_map[0] + 3584);
 80062ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_scratch2_array.data = AI_PTR(activations_map[0] + 16128);
 80062f2:	f503 517c 	add.w	r1, r3, #16128	; 0x3f00
 80062f6:	4a21      	ldr	r2, [pc, #132]	; (800637c <ai_network_init+0x9cc>)
    conv2d_29_scratch2_array.data_start = AI_PTR(activations_map[0] + 16128);
 80062f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 28672);
 80062fc:	4a20      	ldr	r2, [pc, #128]	; (8006380 <ai_network_init+0x9d0>)
 80062fe:	f503 41e0 	add.w	r1, r3, #28672	; 0x7000
    conv2d_29_output_array.data_start = AI_PTR(activations_map[0] + 28672);
 8006302:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_32_output_array.data = AI_PTR(activations_map[0] + 0);
 8006306:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <ai_network_init+0x9d4>)
    dense_32_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8006308:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800630c:	4630      	mov	r0, r6
 800630e:	f001 fe27 	bl	8007f60 <ai_platform_network_post_init>
 8006312:	4038      	ands	r0, r7
 8006314:	4028      	ands	r0, r5
 8006316:	b2c0      	uxtb	r0, r0

  return ok;
}
 8006318:	b003      	add	sp, #12
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800631c:	2212      	movs	r2, #18
 800631e:	2130      	movs	r1, #48	; 0x30
 8006320:	4620      	mov	r0, r4
 8006322:	f000 fdc5 	bl	8006eb0 <ai_platform_network_set_error>
  return false;
 8006326:	e5e5      	b.n	8005ef4 <ai_network_init+0x544>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006328:	2213      	movs	r2, #19
 800632a:	2130      	movs	r1, #48	; 0x30
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fdbf 	bl	8006eb0 <ai_platform_network_set_error>
  return false;
 8006332:	e7eb      	b.n	800630c <ai_network_init+0x95c>
 8006334:	24002580 	.word	0x24002580
 8006338:	240025ac 	.word	0x240025ac
 800633c:	2400269c 	.word	0x2400269c
 8006340:	24002d18 	.word	0x24002d18
 8006344:	24002e60 	.word	0x24002e60
 8006348:	24002e8c 	.word	0x24002e8c
 800634c:	24002e34 	.word	0x24002e34
 8006350:	24002f7c 	.word	0x24002f7c
 8006354:	24002f50 	.word	0x24002f50
 8006358:	24002fa8 	.word	0x24002fa8
 800635c:	24003098 	.word	0x24003098
 8006360:	240030c4 	.word	0x240030c4
 8006364:	2400306c 	.word	0x2400306c
 8006368:	240031b4 	.word	0x240031b4
 800636c:	240031e0 	.word	0x240031e0
 8006370:	24003188 	.word	0x24003188
 8006374:	240032ec 	.word	0x240032ec
 8006378:	24003318 	.word	0x24003318
 800637c:	24003344 	.word	0x24003344
 8006380:	240032c0 	.word	0x240032c0
 8006384:	24003c40 	.word	0x24003c40
 8006388:	240027b8 	.word	0x240027b8
 800638c:	240027e4 	.word	0x240027e4
 8006390:	2400278c 	.word	0x2400278c
 8006394:	240028d4 	.word	0x240028d4
 8006398:	24002900 	.word	0x24002900
 800639c:	240028a8 	.word	0x240028a8
 80063a0:	240029f0 	.word	0x240029f0
 80063a4:	24002a1c 	.word	0x24002a1c
 80063a8:	240029c4 	.word	0x240029c4
 80063ac:	24002b0c 	.word	0x24002b0c
 80063b0:	24002b38 	.word	0x24002b38
 80063b4:	24002ae0 	.word	0x24002ae0
 80063b8:	24002c28 	.word	0x24002c28
 80063bc:	24002c54 	.word	0x24002c54
 80063c0:	24002bfc 	.word	0x24002bfc
 80063c4:	24002d44 	.word	0x24002d44
 80063c8:	24002d70 	.word	0x24002d70

080063cc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80063cc:	f001 bede 	b.w	800818c <ai_platform_network_process>

080063d0 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80063d0:	2200      	movs	r2, #0
 80063d2:	f001 bedb 	b.w	800818c <ai_platform_network_process>
	...

080063d8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80063d8:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80063da:	4603      	mov	r3, r0
{
 80063dc:	b085      	sub	sp, #20
  if (!params) return false;
 80063de:	b170      	cbz	r0, 80063fe <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80063e0:	4c08      	ldr	r4, [pc, #32]	; (8006404 <ai_network_data_params_get+0x2c>)
 80063e2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80063e4:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80063e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ea:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80063ee:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80063f2:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80063f6:	4629      	mov	r1, r5
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 f995 	bl	8006728 <ai_platform_bind_network_params>
}
 80063fe:	b005      	add	sp, #20
 8006400:	bd30      	pop	{r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	08014780 	.word	0x08014780

08006408 <ai_buffer_get_size>:
 8006408:	b340      	cbz	r0, 800645c <ai_buffer_get_size+0x54>
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <ai_buffer_get_size+0x58>)
 800640c:	b430      	push	{r4, r5}
 800640e:	6802      	ldr	r2, [r0, #0]
 8006410:	4d14      	ldr	r5, [pc, #80]	; (8006464 <ai_buffer_get_size+0x5c>)
 8006412:	4013      	ands	r3, r2
 8006414:	6984      	ldr	r4, [r0, #24]
 8006416:	42ab      	cmp	r3, r5
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	d103      	bne.n	8006424 <ai_buffer_get_size+0x1c>
 800641c:	b111      	cbz	r1, 8006424 <ai_buffer_get_size+0x1c>
 800641e:	321f      	adds	r2, #31
 8006420:	f022 021f 	bic.w	r2, r2, #31
 8006424:	7d03      	ldrb	r3, [r0, #20]
 8006426:	6941      	ldr	r1, [r0, #20]
 8006428:	f1a3 0301 	sub.w	r3, r3, #1
 800642c:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8006430:	fab3 f383 	clz	r3, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	428b      	cmp	r3, r1
 8006438:	da0c      	bge.n	8006454 <ai_buffer_get_size+0x4c>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d103      	bne.n	8006446 <ai_buffer_get_size+0x3e>
 800643e:	2902      	cmp	r1, #2
 8006440:	f04f 0302 	mov.w	r3, #2
 8006444:	d006      	beq.n	8006454 <ai_buffer_get_size+0x4c>
 8006446:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800644a:	3301      	adds	r3, #1
 800644c:	428b      	cmp	r3, r1
 800644e:	fb00 f202 	mul.w	r2, r0, r2
 8006452:	d1f2      	bne.n	800643a <ai_buffer_get_size+0x32>
 8006454:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006458:	bc30      	pop	{r4, r5}
 800645a:	4770      	bx	lr
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	017fffff 	.word	0x017fffff
 8006464:	000400c0 	.word	0x000400c0

08006468 <ai_buffer_get_byte_size>:
 8006468:	b128      	cbz	r0, 8006476 <ai_buffer_get_byte_size+0xe>
 800646a:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800646e:	fb00 f001 	mul.w	r0, r0, r1
 8006472:	3007      	adds	r0, #7
 8006474:	08c0      	lsrs	r0, r0, #3
 8006476:	4770      	bx	lr

08006478 <ai_buffer_array_sane>:
 8006478:	b138      	cbz	r0, 800648a <ai_buffer_array_sane+0x12>
 800647a:	6843      	ldr	r3, [r0, #4]
 800647c:	b123      	cbz	r3, 8006488 <ai_buffer_array_sane+0x10>
 800647e:	8840      	ldrh	r0, [r0, #2]
 8006480:	3000      	adds	r0, #0
 8006482:	bf18      	it	ne
 8006484:	2001      	movne	r0, #1
 8006486:	4770      	bx	lr
 8006488:	4618      	mov	r0, r3
 800648a:	4770      	bx	lr

0800648c <ai_buffer_array_item_set_address>:
 800648c:	b120      	cbz	r0, 8006498 <ai_buffer_array_item_set_address+0xc>
 800648e:	6843      	ldr	r3, [r0, #4]
 8006490:	b11b      	cbz	r3, 800649a <ai_buffer_array_item_set_address+0xe>
 8006492:	8840      	ldrh	r0, [r0, #2]
 8006494:	b918      	cbnz	r0, 800649e <ai_buffer_array_item_set_address+0x12>
 8006496:	4770      	bx	lr
 8006498:	4770      	bx	lr
 800649a:	4618      	mov	r0, r3
 800649c:	4770      	bx	lr
 800649e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80064a2:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80064a6:	d0f7      	beq.n	8006498 <ai_buffer_array_item_set_address+0xc>
 80064a8:	6042      	str	r2, [r0, #4]
 80064aa:	2001      	movs	r0, #1
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <_platform_observer_node_exec_cb>:
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	d050      	beq.n	8006556 <_platform_observer_node_exec_cb+0xa6>
 80064b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b8:	6816      	ldr	r6, [r2, #0]
 80064ba:	b085      	sub	sp, #20
 80064bc:	2e00      	cmp	r6, #0
 80064be:	d050      	beq.n	8006562 <_platform_observer_node_exec_cb+0xb2>
 80064c0:	8993      	ldrh	r3, [r2, #12]
 80064c2:	f240 3802 	movw	r8, #770	; 0x302
 80064c6:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 80064ca:	f240 3701 	movw	r7, #769	; 0x301
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f240 2c02 	movw	ip, #514	; 0x202
 80064d4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80064d8:	f240 2501 	movw	r5, #513	; 0x201
 80064dc:	bf04      	itt	eq
 80064de:	46c4      	moveq	ip, r8
 80064e0:	463d      	moveq	r5, r7
 80064e2:	f240 1401 	movw	r4, #257	; 0x101
 80064e6:	bf0b      	itete	eq
 80064e8:	f44f 7982 	moveq.w	r9, #260	; 0x104
 80064ec:	f04f 0904 	movne.w	r9, #4
 80064f0:	f44f 7781 	moveq.w	r7, #258	; 0x102
 80064f4:	2702      	movne	r7, #2
 80064f6:	bf16      	itet	ne
 80064f8:	2401      	movne	r4, #1
 80064fa:	f44f 7841 	moveq.w	r8, #772	; 0x304
 80064fe:	f44f 7801 	movne.w	r8, #516	; 0x204
 8006502:	459e      	cmp	lr, r3
 8006504:	d002      	beq.n	800650c <_platform_observer_node_exec_cb+0x5c>
 8006506:	46c8      	mov	r8, r9
 8006508:	46bc      	mov	ip, r7
 800650a:	4625      	mov	r5, r4
 800650c:	4614      	mov	r4, r2
 800650e:	460f      	mov	r7, r1
 8006510:	b9c8      	cbnz	r0, 8006546 <_platform_observer_node_exec_cb+0x96>
 8006512:	6892      	ldr	r2, [r2, #8]
 8006514:	07d2      	lsls	r2, r2, #31
 8006516:	d510      	bpl.n	800653a <_platform_observer_node_exec_cb+0x8a>
 8006518:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800651c:	466a      	mov	r2, sp
 800651e:	f8ad 3000 	strh.w	r3, [sp]
 8006522:	4629      	mov	r1, r5
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	9002      	str	r0, [sp, #8]
 8006528:	8838      	ldrh	r0, [r7, #0]
 800652a:	f8ad c004 	strh.w	ip, [sp, #4]
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	f8ad 0002 	strh.w	r0, [sp, #2]
 8006534:	6860      	ldr	r0, [r4, #4]
 8006536:	47b0      	blx	r6
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	2000      	movs	r0, #0
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	b005      	add	sp, #20
 8006542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006546:	2801      	cmp	r0, #1
 8006548:	d007      	beq.n	800655a <_platform_observer_node_exec_cb+0xaa>
 800654a:	2802      	cmp	r0, #2
 800654c:	d00d      	beq.n	800656a <_platform_observer_node_exec_cb+0xba>
 800654e:	2803      	cmp	r0, #3
 8006550:	d021      	beq.n	8006596 <_platform_observer_node_exec_cb+0xe6>
 8006552:	2000      	movs	r0, #0
 8006554:	e7f4      	b.n	8006540 <_platform_observer_node_exec_cb+0x90>
 8006556:	2001      	movs	r0, #1
 8006558:	4770      	bx	lr
 800655a:	2000      	movs	r0, #0
 800655c:	6121      	str	r1, [r4, #16]
 800655e:	8190      	strh	r0, [r2, #12]
 8006560:	e7ee      	b.n	8006540 <_platform_observer_node_exec_cb+0x90>
 8006562:	2001      	movs	r0, #1
 8006564:	b005      	add	sp, #20
 8006566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	6121      	str	r1, [r4, #16]
 800656e:	0791      	lsls	r1, r2, #30
 8006570:	d5ef      	bpl.n	8006552 <_platform_observer_node_exec_cb+0xa2>
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	2500      	movs	r5, #0
 8006576:	f8ad 3000 	strh.w	r3, [sp]
 800657a:	4661      	mov	r1, ip
 800657c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	883a      	ldrh	r2, [r7, #0]
 8006584:	6860      	ldr	r0, [r4, #4]
 8006586:	f8ad 2002 	strh.w	r2, [sp, #2]
 800658a:	466a      	mov	r2, sp
 800658c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8006590:	47b0      	blx	r6
 8006592:	4628      	mov	r0, r5
 8006594:	e7d4      	b.n	8006540 <_platform_observer_node_exec_cb+0x90>
 8006596:	6892      	ldr	r2, [r2, #8]
 8006598:	0752      	lsls	r2, r2, #29
 800659a:	d5ce      	bpl.n	800653a <_platform_observer_node_exec_cb+0x8a>
 800659c:	6920      	ldr	r0, [r4, #16]
 800659e:	2500      	movs	r5, #0
 80065a0:	f8ad 3000 	strh.w	r3, [sp]
 80065a4:	4641      	mov	r1, r8
 80065a6:	8843      	ldrh	r3, [r0, #2]
 80065a8:	466a      	mov	r2, sp
 80065aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80065ae:	8803      	ldrh	r3, [r0, #0]
 80065b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80065b4:	6983      	ldr	r3, [r0, #24]
 80065b6:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80065ba:	6860      	ldr	r0, [r4, #4]
 80065bc:	47b0      	blx	r6
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	e7bb      	b.n	800653a <_platform_observer_node_exec_cb+0x8a>
 80065c2:	bf00      	nop

080065c4 <_ai_platform_acquire_crc>:
 80065c4:	2001      	movs	r0, #1
 80065c6:	4770      	bx	lr

080065c8 <_ai_platform_release_crc>:
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop

080065cc <ai_platform_get_weights_map>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	fab1 f381 	clz	r3, r1
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	2800      	cmp	r0, #0
 80065d6:	bf08      	it	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2a00      	cmp	r2, #0
 80065dc:	bf14      	ite	ne
 80065de:	461c      	movne	r4, r3
 80065e0:	2401      	moveq	r4, #1
 80065e2:	b114      	cbz	r4, 80065ea <ai_platform_get_weights_map+0x1e>
 80065e4:	2400      	movs	r4, #0
 80065e6:	4620      	mov	r0, r4
 80065e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ea:	4b22      	ldr	r3, [pc, #136]	; (8006674 <ai_platform_get_weights_map+0xa8>)
 80065ec:	6815      	ldr	r5, [r2, #0]
 80065ee:	429d      	cmp	r5, r3
 80065f0:	d00c      	beq.n	800660c <ai_platform_get_weights_map+0x40>
 80065f2:	6855      	ldr	r5, [r2, #4]
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	d0f5      	beq.n	80065e4 <ai_platform_get_weights_map+0x18>
 80065f8:	682e      	ldr	r6, [r5, #0]
 80065fa:	429e      	cmp	r6, r3
 80065fc:	d022      	beq.n	8006644 <ai_platform_get_weights_map+0x78>
 80065fe:	f1a1 0401 	sub.w	r4, r1, #1
 8006602:	6005      	str	r5, [r0, #0]
 8006604:	fab4 f484 	clz	r4, r4
 8006608:	0964      	lsrs	r4, r4, #5
 800660a:	e7ec      	b.n	80065e6 <ai_platform_get_weights_map+0x1a>
 800660c:	4606      	mov	r6, r0
 800660e:	1d10      	adds	r0, r2, #4
 8006610:	4615      	mov	r5, r2
 8006612:	460f      	mov	r7, r1
 8006614:	f7ff ff30 	bl	8006478 <ai_buffer_array_sane>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0e3      	beq.n	80065e4 <ai_platform_get_weights_map+0x18>
 800661c:	88eb      	ldrh	r3, [r5, #6]
 800661e:	429f      	cmp	r7, r3
 8006620:	d1e0      	bne.n	80065e4 <ai_platform_get_weights_map+0x18>
 8006622:	1f33      	subs	r3, r6, #4
 8006624:	4620      	mov	r0, r4
 8006626:	68aa      	ldr	r2, [r5, #8]
 8006628:	4422      	add	r2, r4
 800662a:	341c      	adds	r4, #28
 800662c:	6852      	ldr	r2, [r2, #4]
 800662e:	b122      	cbz	r2, 800663a <ai_platform_get_weights_map+0x6e>
 8006630:	3001      	adds	r0, #1
 8006632:	f843 2f04 	str.w	r2, [r3, #4]!
 8006636:	4287      	cmp	r7, r0
 8006638:	d8f5      	bhi.n	8006626 <ai_platform_get_weights_map+0x5a>
 800663a:	1a3c      	subs	r4, r7, r0
 800663c:	fab4 f484 	clz	r4, r4
 8006640:	0964      	lsrs	r4, r4, #5
 8006642:	e7d0      	b.n	80065e6 <ai_platform_get_weights_map+0x1a>
 8006644:	686b      	ldr	r3, [r5, #4]
 8006646:	3504      	adds	r5, #4
 8006648:	42b3      	cmp	r3, r6
 800664a:	d0cc      	beq.n	80065e6 <ai_platform_get_weights_map+0x1a>
 800664c:	3804      	subs	r0, #4
 800664e:	462f      	mov	r7, r5
 8006650:	4622      	mov	r2, r4
 8006652:	e003      	b.n	800665c <ai_platform_get_weights_map+0x90>
 8006654:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006658:	42b3      	cmp	r3, r6
 800665a:	d0c4      	beq.n	80065e6 <ai_platform_get_weights_map+0x1a>
 800665c:	3201      	adds	r2, #1
 800665e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006662:	4291      	cmp	r1, r2
 8006664:	d1f6      	bne.n	8006654 <ai_platform_get_weights_map+0x88>
 8006666:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 800666a:	4b02      	ldr	r3, [pc, #8]	; (8006674 <ai_platform_get_weights_map+0xa8>)
 800666c:	429a      	cmp	r2, r3
 800666e:	bf08      	it	eq
 8006670:	2401      	moveq	r4, #1
 8006672:	e7b8      	b.n	80065e6 <ai_platform_get_weights_map+0x1a>
 8006674:	a1facade 	.word	0xa1facade

08006678 <ai_platform_get_activations_map>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	fab1 f381 	clz	r3, r1
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2800      	cmp	r0, #0
 8006682:	bf08      	it	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2a00      	cmp	r2, #0
 8006688:	bf14      	ite	ne
 800668a:	461c      	movne	r4, r3
 800668c:	2401      	moveq	r4, #1
 800668e:	b114      	cbz	r4, 8006696 <ai_platform_get_activations_map+0x1e>
 8006690:	2400      	movs	r4, #0
 8006692:	4620      	mov	r0, r4
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006696:	4b23      	ldr	r3, [pc, #140]	; (8006724 <ai_platform_get_activations_map+0xac>)
 8006698:	6815      	ldr	r5, [r2, #0]
 800669a:	429d      	cmp	r5, r3
 800669c:	d00c      	beq.n	80066b8 <ai_platform_get_activations_map+0x40>
 800669e:	6a15      	ldr	r5, [r2, #32]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	d0f5      	beq.n	8006690 <ai_platform_get_activations_map+0x18>
 80066a4:	682e      	ldr	r6, [r5, #0]
 80066a6:	429e      	cmp	r6, r3
 80066a8:	d023      	beq.n	80066f2 <ai_platform_get_activations_map+0x7a>
 80066aa:	f1a1 0401 	sub.w	r4, r1, #1
 80066ae:	6005      	str	r5, [r0, #0]
 80066b0:	fab4 f484 	clz	r4, r4
 80066b4:	0964      	lsrs	r4, r4, #5
 80066b6:	e7ec      	b.n	8006692 <ai_platform_get_activations_map+0x1a>
 80066b8:	4606      	mov	r6, r0
 80066ba:	f102 000c 	add.w	r0, r2, #12
 80066be:	4615      	mov	r5, r2
 80066c0:	460f      	mov	r7, r1
 80066c2:	f7ff fed9 	bl	8006478 <ai_buffer_array_sane>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0e2      	beq.n	8006690 <ai_platform_get_activations_map+0x18>
 80066ca:	89eb      	ldrh	r3, [r5, #14]
 80066cc:	429f      	cmp	r7, r3
 80066ce:	d1df      	bne.n	8006690 <ai_platform_get_activations_map+0x18>
 80066d0:	1f33      	subs	r3, r6, #4
 80066d2:	4620      	mov	r0, r4
 80066d4:	692a      	ldr	r2, [r5, #16]
 80066d6:	4422      	add	r2, r4
 80066d8:	341c      	adds	r4, #28
 80066da:	6852      	ldr	r2, [r2, #4]
 80066dc:	b122      	cbz	r2, 80066e8 <ai_platform_get_activations_map+0x70>
 80066de:	3001      	adds	r0, #1
 80066e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80066e4:	4287      	cmp	r7, r0
 80066e6:	d8f5      	bhi.n	80066d4 <ai_platform_get_activations_map+0x5c>
 80066e8:	1a3c      	subs	r4, r7, r0
 80066ea:	fab4 f484 	clz	r4, r4
 80066ee:	0964      	lsrs	r4, r4, #5
 80066f0:	e7cf      	b.n	8006692 <ai_platform_get_activations_map+0x1a>
 80066f2:	686b      	ldr	r3, [r5, #4]
 80066f4:	3504      	adds	r5, #4
 80066f6:	42b3      	cmp	r3, r6
 80066f8:	d0cb      	beq.n	8006692 <ai_platform_get_activations_map+0x1a>
 80066fa:	3804      	subs	r0, #4
 80066fc:	462f      	mov	r7, r5
 80066fe:	4622      	mov	r2, r4
 8006700:	e003      	b.n	800670a <ai_platform_get_activations_map+0x92>
 8006702:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006706:	42b3      	cmp	r3, r6
 8006708:	d0c3      	beq.n	8006692 <ai_platform_get_activations_map+0x1a>
 800670a:	3201      	adds	r2, #1
 800670c:	f840 3f04 	str.w	r3, [r0, #4]!
 8006710:	4291      	cmp	r1, r2
 8006712:	d1f6      	bne.n	8006702 <ai_platform_get_activations_map+0x8a>
 8006714:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8006718:	4b02      	ldr	r3, [pc, #8]	; (8006724 <ai_platform_get_activations_map+0xac>)
 800671a:	429a      	cmp	r2, r3
 800671c:	bf08      	it	eq
 800671e:	2401      	moveq	r4, #1
 8006720:	e7b7      	b.n	8006692 <ai_platform_get_activations_map+0x1a>
 8006722:	bf00      	nop
 8006724:	a1facade 	.word	0xa1facade

08006728 <ai_platform_bind_network_params>:
 8006728:	2a00      	cmp	r2, #0
 800672a:	bf18      	it	ne
 800672c:	2900      	cmpne	r1, #0
 800672e:	b470      	push	{r4, r5, r6}
 8006730:	d011      	beq.n	8006756 <ai_platform_bind_network_params+0x2e>
 8006732:	b180      	cbz	r0, 8006756 <ai_platform_bind_network_params+0x2e>
 8006734:	4603      	mov	r3, r0
 8006736:	4e0a      	ldr	r6, [pc, #40]	; (8006760 <ai_platform_bind_network_params+0x38>)
 8006738:	f100 050c 	add.w	r5, r0, #12
 800673c:	2401      	movs	r4, #1
 800673e:	f843 6b04 	str.w	r6, [r3], #4
 8006742:	c903      	ldmia	r1, {r0, r1}
 8006744:	e883 0003 	stmia.w	r3, {r0, r1}
 8006748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800674c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006750:	4620      	mov	r0, r4
 8006752:	bc70      	pop	{r4, r5, r6}
 8006754:	4770      	bx	lr
 8006756:	2400      	movs	r4, #0
 8006758:	4620      	mov	r0, r4
 800675a:	bc70      	pop	{r4, r5, r6}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	a1facade 	.word	0xa1facade

08006764 <ai_platform_runtime_get_revision>:
 8006764:	4a34      	ldr	r2, [pc, #208]	; (8006838 <ai_platform_runtime_get_revision+0xd4>)
 8006766:	b508      	push	{r3, lr}
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	f7ff ff28 	bl	80065c4 <_ai_platform_acquire_crc>
 8006774:	4b31      	ldr	r3, [pc, #196]	; (800683c <ai_platform_runtime_get_revision+0xd8>)
 8006776:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006780:	189a      	adds	r2, r3, r2
 8006782:	2a01      	cmp	r2, #1
 8006784:	d91b      	bls.n	80067be <ai_platform_runtime_get_revision+0x5a>
 8006786:	f240 4249 	movw	r2, #1097	; 0x449
 800678a:	4293      	cmp	r3, r2
 800678c:	d017      	beq.n	80067be <ai_platform_runtime_get_revision+0x5a>
 800678e:	4b2c      	ldr	r3, [pc, #176]	; (8006840 <ai_platform_runtime_get_revision+0xdc>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006796:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800679a:	d01f      	beq.n	80067dc <ai_platform_runtime_get_revision+0x78>
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	f240 4183 	movw	r1, #1155	; 0x483
 80067a2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80067a6:	428a      	cmp	r2, r1
 80067a8:	d036      	beq.n	8006818 <ai_platform_runtime_get_revision+0xb4>
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067b0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80067b4:	d021      	beq.n	80067fa <ai_platform_runtime_get_revision+0x96>
 80067b6:	f7ff ff07 	bl	80065c8 <_ai_platform_release_crc>
 80067ba:	4822      	ldr	r0, [pc, #136]	; (8006844 <ai_platform_runtime_get_revision+0xe0>)
 80067bc:	bd08      	pop	{r3, pc}
 80067be:	4b22      	ldr	r3, [pc, #136]	; (8006848 <ai_platform_runtime_get_revision+0xe4>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	4619      	mov	r1, r3
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1fc      	bne.n	80067c6 <ai_platform_runtime_get_revision+0x62>
 80067cc:	4b1f      	ldr	r3, [pc, #124]	; (800684c <ai_platform_runtime_get_revision+0xe8>)
 80067ce:	4920      	ldr	r1, [pc, #128]	; (8006850 <ai_platform_runtime_get_revision+0xec>)
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <ai_platform_runtime_get_revision+0xf0>)
 80067d2:	6019      	str	r1, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d0ed      	beq.n	80067b6 <ai_platform_runtime_get_revision+0x52>
 80067da:	e7fe      	b.n	80067da <ai_platform_runtime_get_revision+0x76>
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <ai_platform_runtime_get_revision+0xf4>)
 80067de:	2201      	movs	r2, #1
 80067e0:	4619      	mov	r1, r3
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	680b      	ldr	r3, [r1, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1fc      	bne.n	80067e4 <ai_platform_runtime_get_revision+0x80>
 80067ea:	4b1c      	ldr	r3, [pc, #112]	; (800685c <ai_platform_runtime_get_revision+0xf8>)
 80067ec:	4918      	ldr	r1, [pc, #96]	; (8006850 <ai_platform_runtime_get_revision+0xec>)
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <ai_platform_runtime_get_revision+0xf0>)
 80067f0:	6019      	str	r1, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d0de      	beq.n	80067b6 <ai_platform_runtime_get_revision+0x52>
 80067f8:	e7fe      	b.n	80067f8 <ai_platform_runtime_get_revision+0x94>
 80067fa:	4b13      	ldr	r3, [pc, #76]	; (8006848 <ai_platform_runtime_get_revision+0xe4>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	4619      	mov	r1, r3
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	680b      	ldr	r3, [r1, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1fc      	bne.n	8006802 <ai_platform_runtime_get_revision+0x9e>
 8006808:	4b10      	ldr	r3, [pc, #64]	; (800684c <ai_platform_runtime_get_revision+0xe8>)
 800680a:	4911      	ldr	r1, [pc, #68]	; (8006850 <ai_platform_runtime_get_revision+0xec>)
 800680c:	4a11      	ldr	r2, [pc, #68]	; (8006854 <ai_platform_runtime_get_revision+0xf0>)
 800680e:	6019      	str	r1, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4293      	cmp	r3, r2
 8006814:	d0cf      	beq.n	80067b6 <ai_platform_runtime_get_revision+0x52>
 8006816:	e7fe      	b.n	8006816 <ai_platform_runtime_get_revision+0xb2>
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <ai_platform_runtime_get_revision+0xf4>)
 800681a:	2201      	movs	r2, #1
 800681c:	4619      	mov	r1, r3
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1fc      	bne.n	8006820 <ai_platform_runtime_get_revision+0xbc>
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <ai_platform_runtime_get_revision+0xf8>)
 8006828:	4909      	ldr	r1, [pc, #36]	; (8006850 <ai_platform_runtime_get_revision+0xec>)
 800682a:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <ai_platform_runtime_get_revision+0xf0>)
 800682c:	6019      	str	r1, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4293      	cmp	r3, r2
 8006832:	d0c0      	beq.n	80067b6 <ai_platform_runtime_get_revision+0x52>
 8006834:	e7fe      	b.n	8006834 <ai_platform_runtime_get_revision+0xd0>
 8006836:	bf00      	nop
 8006838:	e0002000 	.word	0xe0002000
 800683c:	e0042000 	.word	0xe0042000
 8006840:	5c001000 	.word	0x5c001000
 8006844:	0804e1dc 	.word	0x0804e1dc
 8006848:	40023008 	.word	0x40023008
 800684c:	40023000 	.word	0x40023000
 8006850:	f407a5c2 	.word	0xf407a5c2
 8006854:	b5e8b5cd 	.word	0xb5e8b5cd
 8006858:	58024c08 	.word	0x58024c08
 800685c:	58024c00 	.word	0x58024c00

08006860 <ai_platform_runtime_get_version>:
 8006860:	4a3d      	ldr	r2, [pc, #244]	; (8006958 <ai_platform_runtime_get_version+0xf8>)
 8006862:	b510      	push	{r4, lr}
 8006864:	6813      	ldr	r3, [r2, #0]
 8006866:	b082      	sub	sp, #8
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	f7ff fea9 	bl	80065c4 <_ai_platform_acquire_crc>
 8006872:	4b3a      	ldr	r3, [pc, #232]	; (800695c <ai_platform_runtime_get_version+0xfc>)
 8006874:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687e:	189a      	adds	r2, r3, r2
 8006880:	2a01      	cmp	r2, #1
 8006882:	d92c      	bls.n	80068de <ai_platform_runtime_get_version+0x7e>
 8006884:	f240 4249 	movw	r2, #1097	; 0x449
 8006888:	4293      	cmp	r3, r2
 800688a:	d028      	beq.n	80068de <ai_platform_runtime_get_version+0x7e>
 800688c:	4b34      	ldr	r3, [pc, #208]	; (8006960 <ai_platform_runtime_get_version+0x100>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006894:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006898:	d030      	beq.n	80068fc <ai_platform_runtime_get_version+0x9c>
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f240 4183 	movw	r1, #1155	; 0x483
 80068a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80068a4:	428a      	cmp	r2, r1
 80068a6:	d047      	beq.n	8006938 <ai_platform_runtime_get_version+0xd8>
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80068b2:	d032      	beq.n	800691a <ai_platform_runtime_get_version+0xba>
 80068b4:	f7ff fe88 	bl	80065c8 <_ai_platform_release_crc>
 80068b8:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <ai_platform_runtime_get_version+0x104>)
 80068ba:	2000      	movs	r0, #0
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	b2dc      	uxtb	r4, r3
 80068c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80068c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f364 0007 	bfi	r0, r4, #0, #8
 80068ce:	f361 200f 	bfi	r0, r1, #8, #8
 80068d2:	f362 4017 	bfi	r0, r2, #16, #8
 80068d6:	f363 601f 	bfi	r0, r3, #24, #8
 80068da:	b002      	add	sp, #8
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	4b22      	ldr	r3, [pc, #136]	; (8006968 <ai_platform_runtime_get_version+0x108>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	4619      	mov	r1, r3
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	680b      	ldr	r3, [r1, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1fc      	bne.n	80068e6 <ai_platform_runtime_get_version+0x86>
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <ai_platform_runtime_get_version+0x10c>)
 80068ee:	4920      	ldr	r1, [pc, #128]	; (8006970 <ai_platform_runtime_get_version+0x110>)
 80068f0:	4a20      	ldr	r2, [pc, #128]	; (8006974 <ai_platform_runtime_get_version+0x114>)
 80068f2:	6019      	str	r1, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d0dc      	beq.n	80068b4 <ai_platform_runtime_get_version+0x54>
 80068fa:	e7fe      	b.n	80068fa <ai_platform_runtime_get_version+0x9a>
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <ai_platform_runtime_get_version+0x118>)
 80068fe:	2201      	movs	r2, #1
 8006900:	4619      	mov	r1, r3
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	680b      	ldr	r3, [r1, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1fc      	bne.n	8006904 <ai_platform_runtime_get_version+0xa4>
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <ai_platform_runtime_get_version+0x11c>)
 800690c:	4918      	ldr	r1, [pc, #96]	; (8006970 <ai_platform_runtime_get_version+0x110>)
 800690e:	4a19      	ldr	r2, [pc, #100]	; (8006974 <ai_platform_runtime_get_version+0x114>)
 8006910:	6019      	str	r1, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4293      	cmp	r3, r2
 8006916:	d0cd      	beq.n	80068b4 <ai_platform_runtime_get_version+0x54>
 8006918:	e7fe      	b.n	8006918 <ai_platform_runtime_get_version+0xb8>
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <ai_platform_runtime_get_version+0x108>)
 800691c:	2201      	movs	r2, #1
 800691e:	4619      	mov	r1, r3
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	680b      	ldr	r3, [r1, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1fc      	bne.n	8006922 <ai_platform_runtime_get_version+0xc2>
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <ai_platform_runtime_get_version+0x10c>)
 800692a:	4911      	ldr	r1, [pc, #68]	; (8006970 <ai_platform_runtime_get_version+0x110>)
 800692c:	4a11      	ldr	r2, [pc, #68]	; (8006974 <ai_platform_runtime_get_version+0x114>)
 800692e:	6019      	str	r1, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4293      	cmp	r3, r2
 8006934:	d0be      	beq.n	80068b4 <ai_platform_runtime_get_version+0x54>
 8006936:	e7fe      	b.n	8006936 <ai_platform_runtime_get_version+0xd6>
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <ai_platform_runtime_get_version+0x118>)
 800693a:	2201      	movs	r2, #1
 800693c:	4619      	mov	r1, r3
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1fc      	bne.n	8006940 <ai_platform_runtime_get_version+0xe0>
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <ai_platform_runtime_get_version+0x11c>)
 8006948:	4909      	ldr	r1, [pc, #36]	; (8006970 <ai_platform_runtime_get_version+0x110>)
 800694a:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <ai_platform_runtime_get_version+0x114>)
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4293      	cmp	r3, r2
 8006952:	d0af      	beq.n	80068b4 <ai_platform_runtime_get_version+0x54>
 8006954:	e7fe      	b.n	8006954 <ai_platform_runtime_get_version+0xf4>
 8006956:	bf00      	nop
 8006958:	e0002000 	.word	0xe0002000
 800695c:	e0042000 	.word	0xe0042000
 8006960:	5c001000 	.word	0x5c001000
 8006964:	0804e190 	.word	0x0804e190
 8006968:	40023008 	.word	0x40023008
 800696c:	40023000 	.word	0x40023000
 8006970:	f407a5c2 	.word	0xf407a5c2
 8006974:	b5e8b5cd 	.word	0xb5e8b5cd
 8006978:	58024c08 	.word	0x58024c08
 800697c:	58024c00 	.word	0x58024c00

08006980 <ai_platform_api_get_version>:
 8006980:	4a3d      	ldr	r2, [pc, #244]	; (8006a78 <ai_platform_api_get_version+0xf8>)
 8006982:	b510      	push	{r4, lr}
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	b082      	sub	sp, #8
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f7ff fe19 	bl	80065c4 <_ai_platform_acquire_crc>
 8006992:	4b3a      	ldr	r3, [pc, #232]	; (8006a7c <ai_platform_api_get_version+0xfc>)
 8006994:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800699e:	189a      	adds	r2, r3, r2
 80069a0:	2a01      	cmp	r2, #1
 80069a2:	d92c      	bls.n	80069fe <ai_platform_api_get_version+0x7e>
 80069a4:	f240 4249 	movw	r2, #1097	; 0x449
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d028      	beq.n	80069fe <ai_platform_api_get_version+0x7e>
 80069ac:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <ai_platform_api_get_version+0x100>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80069b4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80069b8:	d030      	beq.n	8006a1c <ai_platform_api_get_version+0x9c>
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f240 4183 	movw	r1, #1155	; 0x483
 80069c0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80069c4:	428a      	cmp	r2, r1
 80069c6:	d047      	beq.n	8006a58 <ai_platform_api_get_version+0xd8>
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80069d2:	d032      	beq.n	8006a3a <ai_platform_api_get_version+0xba>
 80069d4:	f7ff fdf8 	bl	80065c8 <_ai_platform_release_crc>
 80069d8:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <ai_platform_api_get_version+0x104>)
 80069da:	2000      	movs	r0, #0
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	b2dc      	uxtb	r4, r3
 80069e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80069e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80069e8:	0e1b      	lsrs	r3, r3, #24
 80069ea:	f364 0007 	bfi	r0, r4, #0, #8
 80069ee:	f361 200f 	bfi	r0, r1, #8, #8
 80069f2:	f362 4017 	bfi	r0, r2, #16, #8
 80069f6:	f363 601f 	bfi	r0, r3, #24, #8
 80069fa:	b002      	add	sp, #8
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <ai_platform_api_get_version+0x108>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1fc      	bne.n	8006a06 <ai_platform_api_get_version+0x86>
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <ai_platform_api_get_version+0x10c>)
 8006a0e:	4920      	ldr	r1, [pc, #128]	; (8006a90 <ai_platform_api_get_version+0x110>)
 8006a10:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <ai_platform_api_get_version+0x114>)
 8006a12:	6019      	str	r1, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d0dc      	beq.n	80069d4 <ai_platform_api_get_version+0x54>
 8006a1a:	e7fe      	b.n	8006a1a <ai_platform_api_get_version+0x9a>
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <ai_platform_api_get_version+0x118>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4619      	mov	r1, r3
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1fc      	bne.n	8006a24 <ai_platform_api_get_version+0xa4>
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <ai_platform_api_get_version+0x11c>)
 8006a2c:	4918      	ldr	r1, [pc, #96]	; (8006a90 <ai_platform_api_get_version+0x110>)
 8006a2e:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <ai_platform_api_get_version+0x114>)
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d0cd      	beq.n	80069d4 <ai_platform_api_get_version+0x54>
 8006a38:	e7fe      	b.n	8006a38 <ai_platform_api_get_version+0xb8>
 8006a3a:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <ai_platform_api_get_version+0x108>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4619      	mov	r1, r3
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	680b      	ldr	r3, [r1, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1fc      	bne.n	8006a42 <ai_platform_api_get_version+0xc2>
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <ai_platform_api_get_version+0x10c>)
 8006a4a:	4911      	ldr	r1, [pc, #68]	; (8006a90 <ai_platform_api_get_version+0x110>)
 8006a4c:	4a11      	ldr	r2, [pc, #68]	; (8006a94 <ai_platform_api_get_version+0x114>)
 8006a4e:	6019      	str	r1, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d0be      	beq.n	80069d4 <ai_platform_api_get_version+0x54>
 8006a56:	e7fe      	b.n	8006a56 <ai_platform_api_get_version+0xd6>
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <ai_platform_api_get_version+0x118>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1fc      	bne.n	8006a60 <ai_platform_api_get_version+0xe0>
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <ai_platform_api_get_version+0x11c>)
 8006a68:	4909      	ldr	r1, [pc, #36]	; (8006a90 <ai_platform_api_get_version+0x110>)
 8006a6a:	4a0a      	ldr	r2, [pc, #40]	; (8006a94 <ai_platform_api_get_version+0x114>)
 8006a6c:	6019      	str	r1, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d0af      	beq.n	80069d4 <ai_platform_api_get_version+0x54>
 8006a74:	e7fe      	b.n	8006a74 <ai_platform_api_get_version+0xf4>
 8006a76:	bf00      	nop
 8006a78:	e0002000 	.word	0xe0002000
 8006a7c:	e0042000 	.word	0xe0042000
 8006a80:	5c001000 	.word	0x5c001000
 8006a84:	0804e194 	.word	0x0804e194
 8006a88:	40023008 	.word	0x40023008
 8006a8c:	40023000 	.word	0x40023000
 8006a90:	f407a5c2 	.word	0xf407a5c2
 8006a94:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a98:	58024c08 	.word	0x58024c08
 8006a9c:	58024c00 	.word	0x58024c00

08006aa0 <ai_platform_interface_api_get_version>:
 8006aa0:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <ai_platform_interface_api_get_version+0xf8>)
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	6813      	ldr	r3, [r2, #0]
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	f7ff fd89 	bl	80065c4 <_ai_platform_acquire_crc>
 8006ab2:	4b3a      	ldr	r3, [pc, #232]	; (8006b9c <ai_platform_interface_api_get_version+0xfc>)
 8006ab4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006abe:	189a      	adds	r2, r3, r2
 8006ac0:	2a01      	cmp	r2, #1
 8006ac2:	d92c      	bls.n	8006b1e <ai_platform_interface_api_get_version+0x7e>
 8006ac4:	f240 4249 	movw	r2, #1097	; 0x449
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d028      	beq.n	8006b1e <ai_platform_interface_api_get_version+0x7e>
 8006acc:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <ai_platform_interface_api_get_version+0x100>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ad4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006ad8:	d030      	beq.n	8006b3c <ai_platform_interface_api_get_version+0x9c>
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f240 4183 	movw	r1, #1155	; 0x483
 8006ae0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	d047      	beq.n	8006b78 <ai_platform_interface_api_get_version+0xd8>
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006af2:	d032      	beq.n	8006b5a <ai_platform_interface_api_get_version+0xba>
 8006af4:	f7ff fd68 	bl	80065c8 <_ai_platform_release_crc>
 8006af8:	4b2a      	ldr	r3, [pc, #168]	; (8006ba4 <ai_platform_interface_api_get_version+0x104>)
 8006afa:	2000      	movs	r0, #0
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	b2dc      	uxtb	r4, r3
 8006b00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006b04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006b08:	0e1b      	lsrs	r3, r3, #24
 8006b0a:	f364 0007 	bfi	r0, r4, #0, #8
 8006b0e:	f361 200f 	bfi	r0, r1, #8, #8
 8006b12:	f362 4017 	bfi	r0, r2, #16, #8
 8006b16:	f363 601f 	bfi	r0, r3, #24, #8
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	4b22      	ldr	r3, [pc, #136]	; (8006ba8 <ai_platform_interface_api_get_version+0x108>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	4619      	mov	r1, r3
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1fc      	bne.n	8006b26 <ai_platform_interface_api_get_version+0x86>
 8006b2c:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <ai_platform_interface_api_get_version+0x10c>)
 8006b2e:	4920      	ldr	r1, [pc, #128]	; (8006bb0 <ai_platform_interface_api_get_version+0x110>)
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <ai_platform_interface_api_get_version+0x114>)
 8006b32:	6019      	str	r1, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d0dc      	beq.n	8006af4 <ai_platform_interface_api_get_version+0x54>
 8006b3a:	e7fe      	b.n	8006b3a <ai_platform_interface_api_get_version+0x9a>
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <ai_platform_interface_api_get_version+0x118>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4619      	mov	r1, r3
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	680b      	ldr	r3, [r1, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1fc      	bne.n	8006b44 <ai_platform_interface_api_get_version+0xa4>
 8006b4a:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <ai_platform_interface_api_get_version+0x11c>)
 8006b4c:	4918      	ldr	r1, [pc, #96]	; (8006bb0 <ai_platform_interface_api_get_version+0x110>)
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <ai_platform_interface_api_get_version+0x114>)
 8006b50:	6019      	str	r1, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d0cd      	beq.n	8006af4 <ai_platform_interface_api_get_version+0x54>
 8006b58:	e7fe      	b.n	8006b58 <ai_platform_interface_api_get_version+0xb8>
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <ai_platform_interface_api_get_version+0x108>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4619      	mov	r1, r3
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	680b      	ldr	r3, [r1, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1fc      	bne.n	8006b62 <ai_platform_interface_api_get_version+0xc2>
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <ai_platform_interface_api_get_version+0x10c>)
 8006b6a:	4911      	ldr	r1, [pc, #68]	; (8006bb0 <ai_platform_interface_api_get_version+0x110>)
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <ai_platform_interface_api_get_version+0x114>)
 8006b6e:	6019      	str	r1, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d0be      	beq.n	8006af4 <ai_platform_interface_api_get_version+0x54>
 8006b76:	e7fe      	b.n	8006b76 <ai_platform_interface_api_get_version+0xd6>
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <ai_platform_interface_api_get_version+0x118>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	680b      	ldr	r3, [r1, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1fc      	bne.n	8006b80 <ai_platform_interface_api_get_version+0xe0>
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <ai_platform_interface_api_get_version+0x11c>)
 8006b88:	4909      	ldr	r1, [pc, #36]	; (8006bb0 <ai_platform_interface_api_get_version+0x110>)
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <ai_platform_interface_api_get_version+0x114>)
 8006b8c:	6019      	str	r1, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d0af      	beq.n	8006af4 <ai_platform_interface_api_get_version+0x54>
 8006b94:	e7fe      	b.n	8006b94 <ai_platform_interface_api_get_version+0xf4>
 8006b96:	bf00      	nop
 8006b98:	e0002000 	.word	0xe0002000
 8006b9c:	e0042000 	.word	0xe0042000
 8006ba0:	5c001000 	.word	0x5c001000
 8006ba4:	0804e198 	.word	0x0804e198
 8006ba8:	40023008 	.word	0x40023008
 8006bac:	40023000 	.word	0x40023000
 8006bb0:	f407a5c2 	.word	0xf407a5c2
 8006bb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bb8:	58024c08 	.word	0x58024c08
 8006bbc:	58024c00 	.word	0x58024c00

08006bc0 <ai_platform_context_acquire>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b120      	cbz	r0, 8006bd0 <ai_platform_context_acquire+0x10>
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <ai_platform_context_acquire+0xe0>)
 8006bc8:	6802      	ldr	r2, [r0, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	bf18      	it	ne
 8006bce:	2400      	movne	r4, #0
 8006bd0:	4a34      	ldr	r2, [pc, #208]	; (8006ca4 <ai_platform_context_acquire+0xe4>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	f7ff fcf3 	bl	80065c4 <_ai_platform_acquire_crc>
 8006bde:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <ai_platform_context_acquire+0xe8>)
 8006be0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bea:	189a      	adds	r2, r3, r2
 8006bec:	2a01      	cmp	r2, #1
 8006bee:	d91b      	bls.n	8006c28 <ai_platform_context_acquire+0x68>
 8006bf0:	f240 4249 	movw	r2, #1097	; 0x449
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d017      	beq.n	8006c28 <ai_platform_context_acquire+0x68>
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <ai_platform_context_acquire+0xec>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c00:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006c04:	d01f      	beq.n	8006c46 <ai_platform_context_acquire+0x86>
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	f240 4183 	movw	r1, #1155	; 0x483
 8006c0c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d036      	beq.n	8006c82 <ai_platform_context_acquire+0xc2>
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c1e:	d021      	beq.n	8006c64 <ai_platform_context_acquire+0xa4>
 8006c20:	f7ff fcd2 	bl	80065c8 <_ai_platform_release_crc>
 8006c24:	4620      	mov	r0, r4
 8006c26:	bd10      	pop	{r4, pc}
 8006c28:	4b21      	ldr	r3, [pc, #132]	; (8006cb0 <ai_platform_context_acquire+0xf0>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1fc      	bne.n	8006c30 <ai_platform_context_acquire+0x70>
 8006c36:	4b1f      	ldr	r3, [pc, #124]	; (8006cb4 <ai_platform_context_acquire+0xf4>)
 8006c38:	491f      	ldr	r1, [pc, #124]	; (8006cb8 <ai_platform_context_acquire+0xf8>)
 8006c3a:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <ai_platform_context_acquire+0xfc>)
 8006c3c:	6019      	str	r1, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d0ed      	beq.n	8006c20 <ai_platform_context_acquire+0x60>
 8006c44:	e7fe      	b.n	8006c44 <ai_platform_context_acquire+0x84>
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <ai_platform_context_acquire+0x100>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	680b      	ldr	r3, [r1, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1fc      	bne.n	8006c4e <ai_platform_context_acquire+0x8e>
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <ai_platform_context_acquire+0x104>)
 8006c56:	4918      	ldr	r1, [pc, #96]	; (8006cb8 <ai_platform_context_acquire+0xf8>)
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <ai_platform_context_acquire+0xfc>)
 8006c5a:	6019      	str	r1, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d0de      	beq.n	8006c20 <ai_platform_context_acquire+0x60>
 8006c62:	e7fe      	b.n	8006c62 <ai_platform_context_acquire+0xa2>
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <ai_platform_context_acquire+0xf0>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	680b      	ldr	r3, [r1, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1fc      	bne.n	8006c6c <ai_platform_context_acquire+0xac>
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <ai_platform_context_acquire+0xf4>)
 8006c74:	4910      	ldr	r1, [pc, #64]	; (8006cb8 <ai_platform_context_acquire+0xf8>)
 8006c76:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <ai_platform_context_acquire+0xfc>)
 8006c78:	6019      	str	r1, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d0cf      	beq.n	8006c20 <ai_platform_context_acquire+0x60>
 8006c80:	e7fe      	b.n	8006c80 <ai_platform_context_acquire+0xc0>
 8006c82:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <ai_platform_context_acquire+0x100>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	4619      	mov	r1, r3
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	680b      	ldr	r3, [r1, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1fc      	bne.n	8006c8a <ai_platform_context_acquire+0xca>
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <ai_platform_context_acquire+0x104>)
 8006c92:	4909      	ldr	r1, [pc, #36]	; (8006cb8 <ai_platform_context_acquire+0xf8>)
 8006c94:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <ai_platform_context_acquire+0xfc>)
 8006c96:	6019      	str	r1, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d0c0      	beq.n	8006c20 <ai_platform_context_acquire+0x60>
 8006c9e:	e7fe      	b.n	8006c9e <ai_platform_context_acquire+0xde>
 8006ca0:	a1c00100 	.word	0xa1c00100
 8006ca4:	e0002000 	.word	0xe0002000
 8006ca8:	e0042000 	.word	0xe0042000
 8006cac:	5c001000 	.word	0x5c001000
 8006cb0:	40023008 	.word	0x40023008
 8006cb4:	40023000 	.word	0x40023000
 8006cb8:	f407a5c2 	.word	0xf407a5c2
 8006cbc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cc0:	58024c08 	.word	0x58024c08
 8006cc4:	58024c00 	.word	0x58024c00

08006cc8 <ai_platform_network_get_error>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	b120      	cbz	r0, 8006cd6 <ai_platform_network_get_error+0xe>
 8006ccc:	4b6e      	ldr	r3, [pc, #440]	; (8006e88 <ai_platform_network_get_error+0x1c0>)
 8006cce:	4604      	mov	r4, r0
 8006cd0:	6802      	ldr	r2, [r0, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d03d      	beq.n	8006d52 <ai_platform_network_get_error+0x8a>
 8006cd6:	4a6d      	ldr	r2, [pc, #436]	; (8006e8c <ai_platform_network_get_error+0x1c4>)
 8006cd8:	6813      	ldr	r3, [r2, #0]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	f7ff fc70 	bl	80065c4 <_ai_platform_acquire_crc>
 8006ce4:	4b6a      	ldr	r3, [pc, #424]	; (8006e90 <ai_platform_network_get_error+0x1c8>)
 8006ce6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf0:	185a      	adds	r2, r3, r1
 8006cf2:	2a01      	cmp	r2, #1
 8006cf4:	d91e      	bls.n	8006d34 <ai_platform_network_get_error+0x6c>
 8006cf6:	f240 4249 	movw	r2, #1097	; 0x449
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01a      	beq.n	8006d34 <ai_platform_network_get_error+0x6c>
 8006cfe:	4b65      	ldr	r3, [pc, #404]	; (8006e94 <ai_platform_network_get_error+0x1cc>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d06:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006d0a:	f000 80ad 	beq.w	8006e68 <ai_platform_network_get_error+0x1a0>
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	f240 4183 	movw	r1, #1155	; 0x483
 8006d14:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	f000 8095 	beq.w	8006e48 <ai_platform_network_get_error+0x180>
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d24:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006d28:	d043      	beq.n	8006db2 <ai_platform_network_get_error+0xea>
 8006d2a:	f7ff fc4d 	bl	80065c8 <_ai_platform_release_crc>
 8006d2e:	f241 0010 	movw	r0, #4112	; 0x1010
 8006d32:	bd10      	pop	{r4, pc}
 8006d34:	4b58      	ldr	r3, [pc, #352]	; (8006e98 <ai_platform_network_get_error+0x1d0>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	4619      	mov	r1, r3
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	680b      	ldr	r3, [r1, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1fc      	bne.n	8006d3c <ai_platform_network_get_error+0x74>
 8006d42:	4b56      	ldr	r3, [pc, #344]	; (8006e9c <ai_platform_network_get_error+0x1d4>)
 8006d44:	4956      	ldr	r1, [pc, #344]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006d46:	4a57      	ldr	r2, [pc, #348]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d0ec      	beq.n	8006d2a <ai_platform_network_get_error+0x62>
 8006d50:	e7fe      	b.n	8006d50 <ai_platform_network_get_error+0x88>
 8006d52:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <ai_platform_network_get_error+0x1c4>)
 8006d54:	6813      	ldr	r3, [r2, #0]
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	f7ff fc32 	bl	80065c4 <_ai_platform_acquire_crc>
 8006d60:	4b4b      	ldr	r3, [pc, #300]	; (8006e90 <ai_platform_network_get_error+0x1c8>)
 8006d62:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d6c:	189a      	adds	r2, r3, r2
 8006d6e:	2a01      	cmp	r2, #1
 8006d70:	d95b      	bls.n	8006e2a <ai_platform_network_get_error+0x162>
 8006d72:	f240 4249 	movw	r2, #1097	; 0x449
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d057      	beq.n	8006e2a <ai_platform_network_get_error+0x162>
 8006d7a:	4b46      	ldr	r3, [pc, #280]	; (8006e94 <ai_platform_network_get_error+0x1cc>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d82:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006d86:	d041      	beq.n	8006e0c <ai_platform_network_get_error+0x144>
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	f240 4183 	movw	r1, #1155	; 0x483
 8006d8e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d92:	428a      	cmp	r2, r1
 8006d94:	d02b      	beq.n	8006dee <ai_platform_network_get_error+0x126>
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d9c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006da0:	d016      	beq.n	8006dd0 <ai_platform_network_get_error+0x108>
 8006da2:	f7ff fc11 	bl	80065c8 <_ai_platform_release_crc>
 8006da6:	f104 0010 	add.w	r0, r4, #16
 8006daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dae:	f002 ba0d 	b.w	80091cc <core_get_error>
 8006db2:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <ai_platform_network_get_error+0x1d0>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	4619      	mov	r1, r3
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	680b      	ldr	r3, [r1, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1fc      	bne.n	8006dba <ai_platform_network_get_error+0xf2>
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <ai_platform_network_get_error+0x1d4>)
 8006dc2:	4937      	ldr	r1, [pc, #220]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006dc4:	4a37      	ldr	r2, [pc, #220]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006dc6:	6019      	str	r1, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d0ad      	beq.n	8006d2a <ai_platform_network_get_error+0x62>
 8006dce:	e7fe      	b.n	8006dce <ai_platform_network_get_error+0x106>
 8006dd0:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <ai_platform_network_get_error+0x1d0>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	680b      	ldr	r3, [r1, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1fc      	bne.n	8006dd8 <ai_platform_network_get_error+0x110>
 8006dde:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <ai_platform_network_get_error+0x1d4>)
 8006de0:	492f      	ldr	r1, [pc, #188]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006de2:	4a30      	ldr	r2, [pc, #192]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006de4:	6019      	str	r1, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d0da      	beq.n	8006da2 <ai_platform_network_get_error+0xda>
 8006dec:	e7fe      	b.n	8006dec <ai_platform_network_get_error+0x124>
 8006dee:	4b2e      	ldr	r3, [pc, #184]	; (8006ea8 <ai_platform_network_get_error+0x1e0>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	4619      	mov	r1, r3
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	680b      	ldr	r3, [r1, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1fc      	bne.n	8006df6 <ai_platform_network_get_error+0x12e>
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <ai_platform_network_get_error+0x1e4>)
 8006dfe:	4928      	ldr	r1, [pc, #160]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006e00:	4a28      	ldr	r2, [pc, #160]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006e02:	6019      	str	r1, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d0cb      	beq.n	8006da2 <ai_platform_network_get_error+0xda>
 8006e0a:	e7fe      	b.n	8006e0a <ai_platform_network_get_error+0x142>
 8006e0c:	4b26      	ldr	r3, [pc, #152]	; (8006ea8 <ai_platform_network_get_error+0x1e0>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4619      	mov	r1, r3
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	680b      	ldr	r3, [r1, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1fc      	bne.n	8006e14 <ai_platform_network_get_error+0x14c>
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <ai_platform_network_get_error+0x1e4>)
 8006e1c:	4920      	ldr	r1, [pc, #128]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006e1e:	4a21      	ldr	r2, [pc, #132]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006e20:	6019      	str	r1, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d0bc      	beq.n	8006da2 <ai_platform_network_get_error+0xda>
 8006e28:	e7fe      	b.n	8006e28 <ai_platform_network_get_error+0x160>
 8006e2a:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <ai_platform_network_get_error+0x1d0>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	4619      	mov	r1, r3
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	680b      	ldr	r3, [r1, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1fc      	bne.n	8006e32 <ai_platform_network_get_error+0x16a>
 8006e38:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <ai_platform_network_get_error+0x1d4>)
 8006e3a:	4919      	ldr	r1, [pc, #100]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006e3c:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d0ad      	beq.n	8006da2 <ai_platform_network_get_error+0xda>
 8006e46:	e7fe      	b.n	8006e46 <ai_platform_network_get_error+0x17e>
 8006e48:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <ai_platform_network_get_error+0x1e0>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	680b      	ldr	r3, [r1, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1fc      	bne.n	8006e50 <ai_platform_network_get_error+0x188>
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <ai_platform_network_get_error+0x1e4>)
 8006e58:	4911      	ldr	r1, [pc, #68]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006e5a:	4a12      	ldr	r2, [pc, #72]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	f43f af62 	beq.w	8006d2a <ai_platform_network_get_error+0x62>
 8006e66:	e7fe      	b.n	8006e66 <ai_platform_network_get_error+0x19e>
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <ai_platform_network_get_error+0x1e0>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	680b      	ldr	r3, [r1, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1fc      	bne.n	8006e70 <ai_platform_network_get_error+0x1a8>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <ai_platform_network_get_error+0x1e4>)
 8006e78:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <ai_platform_network_get_error+0x1d8>)
 8006e7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ea4 <ai_platform_network_get_error+0x1dc>)
 8006e7c:	6019      	str	r1, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	f43f af52 	beq.w	8006d2a <ai_platform_network_get_error+0x62>
 8006e86:	e7fe      	b.n	8006e86 <ai_platform_network_get_error+0x1be>
 8006e88:	a1c00100 	.word	0xa1c00100
 8006e8c:	e0002000 	.word	0xe0002000
 8006e90:	e0042000 	.word	0xe0042000
 8006e94:	5c001000 	.word	0x5c001000
 8006e98:	40023008 	.word	0x40023008
 8006e9c:	40023000 	.word	0x40023000
 8006ea0:	f407a5c2 	.word	0xf407a5c2
 8006ea4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ea8:	58024c08 	.word	0x58024c08
 8006eac:	58024c00 	.word	0x58024c00

08006eb0 <ai_platform_network_set_error>:
 8006eb0:	b110      	cbz	r0, 8006eb8 <ai_platform_network_set_error+0x8>
 8006eb2:	3010      	adds	r0, #16
 8006eb4:	f002 b990 	b.w	80091d8 <core_set_error>
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop

08006ebc <ai_platform_api_get_network_report>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	b120      	cbz	r0, 8006ed2 <ai_platform_api_get_network_report+0x16>
 8006ec8:	4bae      	ldr	r3, [pc, #696]	; (8007184 <ai_platform_api_get_network_report+0x2c8>)
 8006eca:	6802      	ldr	r2, [r0, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf18      	it	ne
 8006ed0:	2500      	movne	r5, #0
 8006ed2:	4aad      	ldr	r2, [pc, #692]	; (8007188 <ai_platform_api_get_network_report+0x2cc>)
 8006ed4:	6813      	ldr	r3, [r2, #0]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	f7ff fb72 	bl	80065c4 <_ai_platform_acquire_crc>
 8006ee0:	4baa      	ldr	r3, [pc, #680]	; (800718c <ai_platform_api_get_network_report+0x2d0>)
 8006ee2:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eec:	eb03 020e 	add.w	r2, r3, lr
 8006ef0:	2a01      	cmp	r2, #1
 8006ef2:	f240 80a6 	bls.w	8007042 <ai_platform_api_get_network_report+0x186>
 8006ef6:	f240 4249 	movw	r2, #1097	; 0x449
 8006efa:	4293      	cmp	r3, r2
 8006efc:	f000 80a1 	beq.w	8007042 <ai_platform_api_get_network_report+0x186>
 8006f00:	4ba3      	ldr	r3, [pc, #652]	; (8007190 <ai_platform_api_get_network_report+0x2d4>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f08:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006f0c:	f000 80a9 	beq.w	8007062 <ai_platform_api_get_network_report+0x1a6>
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	f240 4183 	movw	r1, #1155	; 0x483
 8006f16:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f1a:	428a      	cmp	r2, r1
 8006f1c:	f000 83e0 	beq.w	80076e0 <ai_platform_api_get_network_report+0x824>
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f26:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006f2a:	f000 83c9 	beq.w	80076c0 <ai_platform_api_get_network_report+0x804>
 8006f2e:	f7ff fb4b 	bl	80065c8 <_ai_platform_release_crc>
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	f000 83c2 	beq.w	80076bc <ai_platform_api_get_network_report+0x800>
 8006f38:	fab4 f384 	clz	r3, r4
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 83bc 	bne.w	80076bc <ai_platform_api_get_network_report+0x800>
 8006f44:	6763      	str	r3, [r4, #116]	; 0x74
 8006f46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	f000 83af 	beq.w	80076ac <ai_platform_api_get_network_report+0x7f0>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	6763      	str	r3, [r4, #116]	; 0x74
 8006f52:	6913      	ldr	r3, [r2, #16]
 8006f54:	b183      	cbz	r3, 8006f78 <ai_platform_api_get_network_report+0xbc>
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00e      	beq.n	8006f78 <ai_platform_api_get_network_report+0xbc>
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	e003      	b.n	8006f66 <ai_platform_api_get_network_report+0xaa>
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	d006      	beq.n	8006f70 <ai_platform_api_get_network_report+0xb4>
 8006f62:	460b      	mov	r3, r1
 8006f64:	b121      	cbz	r1, 8006f70 <ai_platform_api_get_network_report+0xb4>
 8006f66:	6762      	str	r2, [r4, #116]	; 0x74
 8006f68:	3201      	adds	r2, #1
 8006f6a:	6919      	ldr	r1, [r3, #16]
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d1f6      	bne.n	8006f5e <ai_platform_api_get_network_report+0xa2>
 8006f70:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 839a 	beq.w	80076ac <ai_platform_api_get_network_report+0x7f0>
 8006f78:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8081 	beq.w	8007082 <ai_platform_api_get_network_report+0x1c6>
 8006f80:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8006f84:	f1b8 0f00 	cmp.w	r8, #0
 8006f88:	d07b      	beq.n	8007082 <ai_platform_api_get_network_report+0x1c6>
 8006f8a:	f8b8 3000 	ldrh.w	r3, [r8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d077      	beq.n	8007082 <ai_platform_api_get_network_report+0x1c6>
 8006f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d073      	beq.n	8007082 <ai_platform_api_get_network_report+0x1c6>
 8006f9a:	681f      	ldr	r7, [r3, #0]
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	d070      	beq.n	8007082 <ai_platform_api_get_network_report+0x1c6>
 8006fa0:	f04f 0b00 	mov.w	fp, #0
 8006fa4:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8006fa8:	46d9      	mov	r9, fp
 8006faa:	e029      	b.n	8007000 <ai_platform_api_get_network_report+0x144>
 8006fac:	885b      	ldrh	r3, [r3, #2]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d044      	beq.n	800703c <ai_platform_api_get_network_report+0x180>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f84a 3005 	str.w	r3, [sl, r5]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	685d      	ldr	r5, [r3, #4]
 8006fbc:	f04f 0301 	mov.w	r3, #1
 8006fc0:	9900      	ldr	r1, [sp, #0]
 8006fc2:	f109 0701 	add.w	r7, r9, #1
 8006fc6:	7533      	strb	r3, [r6, #20]
 8006fc8:	6973      	ldr	r3, [r6, #20]
 8006fca:	46b9      	mov	r9, r7
 8006fcc:	6135      	str	r5, [r6, #16]
 8006fce:	f361 231f 	bfi	r3, r1, #8, #24
 8006fd2:	60b4      	str	r4, [r6, #8]
 8006fd4:	e9c6 0200 	strd	r0, r2, [r6]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	b2b8      	uxth	r0, r7
 8006fdc:	60f2      	str	r2, [r6, #12]
 8006fde:	9a01      	ldr	r2, [sp, #4]
 8006fe0:	e9c6 3205 	strd	r3, r2, [r6, #20]
 8006fe4:	f8b8 3000 	ldrh.w	r3, [r8]
 8006fe8:	429f      	cmp	r7, r3
 8006fea:	d256      	bcs.n	800709a <ai_platform_api_get_network_report+0x1de>
 8006fec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d052      	beq.n	800709a <ai_platform_api_get_network_report+0x1de>
 8006ff4:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8006ff8:	f10b 0b1c 	add.w	fp, fp, #28
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	d04c      	beq.n	800709a <ai_platform_api_get_network_report+0x1de>
 8007000:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007004:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 8007008:	69b8      	ldr	r0, [r7, #24]
 800700a:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6800      	ldr	r0, [r0, #0]
 8007012:	eb0a 0405 	add.w	r4, sl, r5
 8007016:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800701a:	445e      	add	r6, fp
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	f009 fe79 	bl	8010d18 <ai_array_to_buffer_fmt>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	2c00      	cmp	r4, #0
 800702c:	d0c5      	beq.n	8006fba <ai_platform_api_get_network_report+0xfe>
 800702e:	2300      	movs	r3, #0
 8007030:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1b7      	bne.n	8006fac <ai_platform_api_get_network_report+0xf0>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2400      	movs	r4, #0
 8007040:	e7bb      	b.n	8006fba <ai_platform_api_get_network_report+0xfe>
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <ai_platform_api_get_network_report+0x2d8>)
 8007044:	2201      	movs	r2, #1
 8007046:	4619      	mov	r1, r3
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	680b      	ldr	r3, [r1, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1fc      	bne.n	800704a <ai_platform_api_get_network_report+0x18e>
 8007050:	4b51      	ldr	r3, [pc, #324]	; (8007198 <ai_platform_api_get_network_report+0x2dc>)
 8007052:	4952      	ldr	r1, [pc, #328]	; (800719c <ai_platform_api_get_network_report+0x2e0>)
 8007054:	4a52      	ldr	r2, [pc, #328]	; (80071a0 <ai_platform_api_get_network_report+0x2e4>)
 8007056:	6019      	str	r1, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4293      	cmp	r3, r2
 800705c:	f43f af67 	beq.w	8006f2e <ai_platform_api_get_network_report+0x72>
 8007060:	e7fe      	b.n	8007060 <ai_platform_api_get_network_report+0x1a4>
 8007062:	4b50      	ldr	r3, [pc, #320]	; (80071a4 <ai_platform_api_get_network_report+0x2e8>)
 8007064:	2201      	movs	r2, #1
 8007066:	4619      	mov	r1, r3
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	680b      	ldr	r3, [r1, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1fc      	bne.n	800706a <ai_platform_api_get_network_report+0x1ae>
 8007070:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <ai_platform_api_get_network_report+0x2ec>)
 8007072:	494a      	ldr	r1, [pc, #296]	; (800719c <ai_platform_api_get_network_report+0x2e0>)
 8007074:	4a4a      	ldr	r2, [pc, #296]	; (80071a0 <ai_platform_api_get_network_report+0x2e4>)
 8007076:	6019      	str	r1, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4293      	cmp	r3, r2
 800707c:	f43f af57 	beq.w	8006f2e <ai_platform_api_get_network_report+0x72>
 8007080:	e7fe      	b.n	8007080 <ai_platform_api_get_network_report+0x1c4>
 8007082:	2600      	movs	r6, #0
 8007084:	f105 0010 	add.w	r0, r5, #16
 8007088:	2218      	movs	r2, #24
 800708a:	2112      	movs	r1, #18
 800708c:	8626      	strh	r6, [r4, #48]	; 0x30
 800708e:	f002 f8a3 	bl	80091d8 <core_set_error>
 8007092:	4630      	mov	r0, r6
 8007094:	b009      	add	sp, #36	; 0x24
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0ef      	beq.n	8007082 <ai_platform_api_get_network_report+0x1c6>
 80070a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	8620      	strh	r0, [r4, #48]	; 0x30
 80070aa:	6363      	str	r3, [r4, #52]	; 0x34
 80070ac:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d95e      	bls.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80070b2:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80070b6:	f118 0f0c 	cmn.w	r8, #12
 80070ba:	d059      	beq.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80070bc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d055      	beq.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80070c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d051      	beq.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80070cc:	681f      	ldr	r7, [r3, #0]
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d04e      	beq.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80070d2:	f04f 0b00 	mov.w	fp, #0
 80070d6:	46d9      	mov	r9, fp
 80070d8:	e027      	b.n	800712a <ai_platform_api_get_network_report+0x26e>
 80070da:	2301      	movs	r3, #1
 80070dc:	f84a 3005 	str.w	r3, [sl, r5]
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	685d      	ldr	r5, [r3, #4]
 80070e4:	f04f 0301 	mov.w	r3, #1
 80070e8:	9900      	ldr	r1, [sp, #0]
 80070ea:	f109 0701 	add.w	r7, r9, #1
 80070ee:	7533      	strb	r3, [r6, #20]
 80070f0:	6973      	ldr	r3, [r6, #20]
 80070f2:	46b9      	mov	r9, r7
 80070f4:	6135      	str	r5, [r6, #16]
 80070f6:	fa1f fc87 	uxth.w	ip, r7
 80070fa:	f361 231f 	bfi	r3, r1, #8, #24
 80070fe:	60b4      	str	r4, [r6, #8]
 8007100:	e9c6 0200 	strd	r0, r2, [r6]
 8007104:	2200      	movs	r2, #0
 8007106:	60f2      	str	r2, [r6, #12]
 8007108:	9a01      	ldr	r2, [sp, #4]
 800710a:	e9c6 3205 	strd	r3, r2, [r6, #20]
 800710e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007112:	429f      	cmp	r7, r3
 8007114:	d24a      	bcs.n	80071ac <ai_platform_api_get_network_report+0x2f0>
 8007116:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d046      	beq.n	80071ac <ai_platform_api_get_network_report+0x2f0>
 800711e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8007122:	f10b 0b1c 	add.w	fp, fp, #28
 8007126:	2f00      	cmp	r7, #0
 8007128:	d040      	beq.n	80071ac <ai_platform_api_get_network_report+0x2f0>
 800712a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800712e:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 8007132:	69b8      	ldr	r0, [r7, #24]
 8007134:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6800      	ldr	r0, [r0, #0]
 800713c:	eb0a 0405 	add.w	r4, sl, r5
 8007140:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007144:	445e      	add	r6, fp
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	f009 fde4 	bl	8010d18 <ai_array_to_buffer_fmt>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	2c00      	cmp	r4, #0
 8007156:	d0c4      	beq.n	80070e2 <ai_platform_api_get_network_report+0x226>
 8007158:	2300      	movs	r3, #0
 800715a:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	b113      	cbz	r3, 800716a <ai_platform_api_get_network_report+0x2ae>
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1b7      	bne.n	80070da <ai_platform_api_get_network_report+0x21e>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2400      	movs	r4, #0
 800716e:	e7b8      	b.n	80070e2 <ai_platform_api_get_network_report+0x226>
 8007170:	2600      	movs	r6, #0
 8007172:	f105 0010 	add.w	r0, r5, #16
 8007176:	2218      	movs	r2, #24
 8007178:	2113      	movs	r1, #19
 800717a:	8666      	strh	r6, [r4, #50]	; 0x32
 800717c:	f002 f82c 	bl	80091d8 <core_set_error>
 8007180:	e787      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 8007182:	bf00      	nop
 8007184:	a1c00100 	.word	0xa1c00100
 8007188:	e0002000 	.word	0xe0002000
 800718c:	e0042000 	.word	0xe0042000
 8007190:	5c001000 	.word	0x5c001000
 8007194:	40023008 	.word	0x40023008
 8007198:	40023000 	.word	0x40023000
 800719c:	f407a5c2 	.word	0xf407a5c2
 80071a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80071a4:	58024c08 	.word	0x58024c08
 80071a8:	58024c00 	.word	0x58024c00
 80071ac:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80071b0:	f1bc 0f00 	cmp.w	ip, #0
 80071b4:	d0dc      	beq.n	8007170 <ai_platform_api_get_network_report+0x2b4>
 80071b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80071ba:	f105 0724 	add.w	r7, r5, #36	; 0x24
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4638      	mov	r0, r7
 80071c2:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 80071c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80071c8:	f7ff f956 	bl	8006478 <ai_buffer_array_sane>
 80071cc:	4606      	mov	r6, r0
 80071ce:	b938      	cbnz	r0, 80071e0 <ai_platform_api_get_network_report+0x324>
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff f951 	bl	8006478 <ai_buffer_array_sane>
 80071d6:	b118      	cbz	r0, 80071e0 <ai_platform_api_get_network_report+0x324>
 80071d8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 8109 	bne.w	80073f2 <ai_platform_api_get_network_report+0x536>
 80071e0:	f105 081c 	add.w	r8, r5, #28
 80071e4:	4640      	mov	r0, r8
 80071e6:	f7ff f947 	bl	8006478 <ai_buffer_array_sane>
 80071ea:	4606      	mov	r6, r0
 80071ec:	b938      	cbnz	r0, 80071fe <ai_platform_api_get_network_report+0x342>
 80071ee:	4640      	mov	r0, r8
 80071f0:	f7ff f942 	bl	8006478 <ai_buffer_array_sane>
 80071f4:	b118      	cbz	r0, 80071fe <ai_platform_api_get_network_report+0x342>
 80071f6:	8beb      	ldrh	r3, [r5, #30]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 8101 	bne.w	8007400 <ai_platform_api_get_network_report+0x544>
 80071fe:	686b      	ldr	r3, [r5, #4]
 8007200:	4abd      	ldr	r2, [pc, #756]	; (80074f8 <ai_platform_api_get_network_report+0x63c>)
 8007202:	67a3      	str	r3, [r4, #120]	; 0x78
 8007204:	6813      	ldr	r3, [r2, #0]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	f7ff f9da 	bl	80065c4 <_ai_platform_acquire_crc>
 8007210:	4bba      	ldr	r3, [pc, #744]	; (80074fc <ai_platform_api_get_network_report+0x640>)
 8007212:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800721c:	eb03 020c 	add.w	r2, r3, ip
 8007220:	2a01      	cmp	r2, #1
 8007222:	f240 8233 	bls.w	800768c <ai_platform_api_get_network_report+0x7d0>
 8007226:	f240 4249 	movw	r2, #1097	; 0x449
 800722a:	4293      	cmp	r3, r2
 800722c:	f000 822e 	beq.w	800768c <ai_platform_api_get_network_report+0x7d0>
 8007230:	4bb3      	ldr	r3, [pc, #716]	; (8007500 <ai_platform_api_get_network_report+0x644>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007238:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800723c:	f000 8216 	beq.w	800766c <ai_platform_api_get_network_report+0x7b0>
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f240 4183 	movw	r1, #1155	; 0x483
 8007246:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800724a:	428a      	cmp	r2, r1
 800724c:	f000 81fe 	beq.w	800764c <ai_platform_api_get_network_report+0x790>
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007256:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800725a:	f000 81e7 	beq.w	800762c <ai_platform_api_get_network_report+0x770>
 800725e:	f7ff f9b3 	bl	80065c8 <_ai_platform_release_crc>
 8007262:	4aa5      	ldr	r2, [pc, #660]	; (80074f8 <ai_platform_api_get_network_report+0x63c>)
 8007264:	4ba7      	ldr	r3, [pc, #668]	; (8007504 <ai_platform_api_get_network_report+0x648>)
 8007266:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	f7ff f9a6 	bl	80065c4 <_ai_platform_acquire_crc>
 8007278:	4ba0      	ldr	r3, [pc, #640]	; (80074fc <ai_platform_api_get_network_report+0x640>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007280:	199a      	adds	r2, r3, r6
 8007282:	2a01      	cmp	r2, #1
 8007284:	f240 81c2 	bls.w	800760c <ai_platform_api_get_network_report+0x750>
 8007288:	f240 4249 	movw	r2, #1097	; 0x449
 800728c:	4293      	cmp	r3, r2
 800728e:	f000 81bd 	beq.w	800760c <ai_platform_api_get_network_report+0x750>
 8007292:	4b9b      	ldr	r3, [pc, #620]	; (8007500 <ai_platform_api_get_network_report+0x644>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800729a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800729e:	f000 81a5 	beq.w	80075ec <ai_platform_api_get_network_report+0x730>
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	f240 4183 	movw	r1, #1155	; 0x483
 80072a8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80072ac:	428a      	cmp	r2, r1
 80072ae:	f000 818d 	beq.w	80075cc <ai_platform_api_get_network_report+0x710>
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072b8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80072bc:	f000 8176 	beq.w	80075ac <ai_platform_api_get_network_report+0x6f0>
 80072c0:	f7ff f982 	bl	80065c8 <_ai_platform_release_crc>
 80072c4:	4a8c      	ldr	r2, [pc, #560]	; (80074f8 <ai_platform_api_get_network_report+0x63c>)
 80072c6:	f240 1307 	movw	r3, #263	; 0x107
 80072ca:	6163      	str	r3, [r4, #20]
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	f7ff f976 	bl	80065c4 <_ai_platform_acquire_crc>
 80072d8:	4b88      	ldr	r3, [pc, #544]	; (80074fc <ai_platform_api_get_network_report+0x640>)
 80072da:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072e4:	185a      	adds	r2, r3, r1
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	f240 8150 	bls.w	800758c <ai_platform_api_get_network_report+0x6d0>
 80072ec:	f240 4249 	movw	r2, #1097	; 0x449
 80072f0:	4293      	cmp	r3, r2
 80072f2:	f000 814b 	beq.w	800758c <ai_platform_api_get_network_report+0x6d0>
 80072f6:	4b82      	ldr	r3, [pc, #520]	; (8007500 <ai_platform_api_get_network_report+0x644>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80072fe:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007302:	f000 8133 	beq.w	800756c <ai_platform_api_get_network_report+0x6b0>
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	f240 4183 	movw	r1, #1155	; 0x483
 800730c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007310:	428a      	cmp	r2, r1
 8007312:	f000 811b 	beq.w	800754c <ai_platform_api_get_network_report+0x690>
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800731c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007320:	f000 8104 	beq.w	800752c <ai_platform_api_get_network_report+0x670>
 8007324:	f7ff f950 	bl	80065c8 <_ai_platform_release_crc>
 8007328:	4a73      	ldr	r2, [pc, #460]	; (80074f8 <ai_platform_api_get_network_report+0x63c>)
 800732a:	f240 2301 	movw	r3, #513	; 0x201
 800732e:	6263      	str	r3, [r4, #36]	; 0x24
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	f7ff f944 	bl	80065c4 <_ai_platform_acquire_crc>
 800733c:	4b6f      	ldr	r3, [pc, #444]	; (80074fc <ai_platform_api_get_network_report+0x640>)
 800733e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007348:	189a      	adds	r2, r3, r2
 800734a:	2a01      	cmp	r2, #1
 800734c:	f240 80c3 	bls.w	80074d6 <ai_platform_api_get_network_report+0x61a>
 8007350:	f240 4249 	movw	r2, #1097	; 0x449
 8007354:	4293      	cmp	r3, r2
 8007356:	f000 80be 	beq.w	80074d6 <ai_platform_api_get_network_report+0x61a>
 800735a:	4b69      	ldr	r3, [pc, #420]	; (8007500 <ai_platform_api_get_network_report+0x644>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007362:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007366:	f000 80a6 	beq.w	80074b6 <ai_platform_api_get_network_report+0x5fa>
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	f240 4183 	movw	r1, #1155	; 0x483
 8007370:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007374:	428a      	cmp	r2, r1
 8007376:	f000 808e 	beq.w	8007496 <ai_platform_api_get_network_report+0x5da>
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007380:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007384:	d077      	beq.n	8007476 <ai_platform_api_get_network_report+0x5ba>
 8007386:	f7ff f91f 	bl	80065c8 <_ai_platform_release_crc>
 800738a:	f240 5301 	movw	r3, #1281	; 0x501
 800738e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007390:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8007392:	f009 fc97 	bl	8010cc4 <ai_platform_version_get>
 8007396:	4b5c      	ldr	r3, [pc, #368]	; (8007508 <ai_platform_api_get_network_report+0x64c>)
 8007398:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800739a:	6220      	str	r0, [r4, #32]
 800739c:	429a      	cmp	r2, r3
 800739e:	d051      	beq.n	8007444 <ai_platform_api_get_network_report+0x588>
 80073a0:	495a      	ldr	r1, [pc, #360]	; (800750c <ai_platform_api_get_network_report+0x650>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80073a8:	4b59      	ldr	r3, [pc, #356]	; (8007510 <ai_platform_api_get_network_report+0x654>)
 80073aa:	63e1      	str	r1, [r4, #60]	; 0x3c
 80073ac:	f240 4101 	movw	r1, #1025	; 0x401
 80073b0:	f10d 0e10 	add.w	lr, sp, #16
 80073b4:	46b4      	mov	ip, r6
 80073b6:	6521      	str	r1, [r4, #80]	; 0x50
 80073b8:	f104 0958 	add.w	r9, r4, #88	; 0x58
 80073bc:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 80073c0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 80073c4:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 80073c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073ca:	464c      	mov	r4, r9
 80073cc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80073d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80073d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80073da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff f84a 	bl	8006478 <ai_buffer_array_sane>
 80073e4:	bb08      	cbnz	r0, 800742a <ai_platform_api_get_network_report+0x56e>
 80073e6:	4640      	mov	r0, r8
 80073e8:	f7ff f846 	bl	8006478 <ai_buffer_array_sane>
 80073ec:	b978      	cbnz	r0, 800740e <ai_platform_api_get_network_report+0x552>
 80073ee:	2601      	movs	r6, #1
 80073f0:	e64f      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 80073f2:	f105 0010 	add.w	r0, r5, #16
 80073f6:	2213      	movs	r2, #19
 80073f8:	2111      	movs	r1, #17
 80073fa:	f001 feed 	bl	80091d8 <core_set_error>
 80073fe:	e648      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 8007400:	f105 0010 	add.w	r0, r5, #16
 8007404:	2212      	movs	r2, #18
 8007406:	2111      	movs	r1, #17
 8007408:	f001 fee6 	bl	80091d8 <core_set_error>
 800740c:	e641      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 800740e:	4640      	mov	r0, r8
 8007410:	f7ff f832 	bl	8006478 <ai_buffer_array_sane>
 8007414:	b318      	cbz	r0, 800745e <ai_platform_api_get_network_report+0x5a2>
 8007416:	6a2f      	ldr	r7, [r5, #32]
 8007418:	4634      	mov	r4, r6
 800741a:	2601      	movs	r6, #1
 800741c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800741e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007420:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007428:	e633      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 800742a:	4638      	mov	r0, r7
 800742c:	f7ff f824 	bl	8006478 <ai_buffer_array_sane>
 8007430:	b1f0      	cbz	r0, 8007470 <ai_platform_api_get_network_report+0x5b4>
 8007432:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8007434:	464c      	mov	r4, r9
 8007436:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800743e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007442:	e7d0      	b.n	80073e6 <ai_platform_api_get_network_report+0x52a>
 8007444:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007448:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800744c:	3440      	adds	r4, #64	; 0x40
 800744e:	2601      	movs	r6, #1
 8007450:	e883 0003 	stmia.w	r3, {r0, r1}
 8007454:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007458:	e884 0003 	stmia.w	r4, {r0, r1}
 800745c:	e619      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 800745e:	4605      	mov	r5, r0
 8007460:	4634      	mov	r4, r6
 8007462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007466:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800746a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800746e:	deff      	udf	#255	; 0xff
 8007470:	4605      	mov	r5, r0
 8007472:	464c      	mov	r4, r9
 8007474:	e7f5      	b.n	8007462 <ai_platform_api_get_network_report+0x5a6>
 8007476:	4b27      	ldr	r3, [pc, #156]	; (8007514 <ai_platform_api_get_network_report+0x658>)
 8007478:	2201      	movs	r2, #1
 800747a:	4619      	mov	r1, r3
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	680b      	ldr	r3, [r1, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1fc      	bne.n	800747e <ai_platform_api_get_network_report+0x5c2>
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <ai_platform_api_get_network_report+0x65c>)
 8007486:	4925      	ldr	r1, [pc, #148]	; (800751c <ai_platform_api_get_network_report+0x660>)
 8007488:	4a25      	ldr	r2, [pc, #148]	; (8007520 <ai_platform_api_get_network_report+0x664>)
 800748a:	6019      	str	r1, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4293      	cmp	r3, r2
 8007490:	f43f af79 	beq.w	8007386 <ai_platform_api_get_network_report+0x4ca>
 8007494:	e7fe      	b.n	8007494 <ai_platform_api_get_network_report+0x5d8>
 8007496:	4b23      	ldr	r3, [pc, #140]	; (8007524 <ai_platform_api_get_network_report+0x668>)
 8007498:	2201      	movs	r2, #1
 800749a:	4619      	mov	r1, r3
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	680b      	ldr	r3, [r1, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1fc      	bne.n	800749e <ai_platform_api_get_network_report+0x5e2>
 80074a4:	4b20      	ldr	r3, [pc, #128]	; (8007528 <ai_platform_api_get_network_report+0x66c>)
 80074a6:	491d      	ldr	r1, [pc, #116]	; (800751c <ai_platform_api_get_network_report+0x660>)
 80074a8:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <ai_platform_api_get_network_report+0x664>)
 80074aa:	6019      	str	r1, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	f43f af69 	beq.w	8007386 <ai_platform_api_get_network_report+0x4ca>
 80074b4:	e7fe      	b.n	80074b4 <ai_platform_api_get_network_report+0x5f8>
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <ai_platform_api_get_network_report+0x668>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	4619      	mov	r1, r3
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	680b      	ldr	r3, [r1, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1fc      	bne.n	80074be <ai_platform_api_get_network_report+0x602>
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <ai_platform_api_get_network_report+0x66c>)
 80074c6:	4915      	ldr	r1, [pc, #84]	; (800751c <ai_platform_api_get_network_report+0x660>)
 80074c8:	4a15      	ldr	r2, [pc, #84]	; (8007520 <ai_platform_api_get_network_report+0x664>)
 80074ca:	6019      	str	r1, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4293      	cmp	r3, r2
 80074d0:	f43f af59 	beq.w	8007386 <ai_platform_api_get_network_report+0x4ca>
 80074d4:	e7fe      	b.n	80074d4 <ai_platform_api_get_network_report+0x618>
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <ai_platform_api_get_network_report+0x658>)
 80074d8:	2201      	movs	r2, #1
 80074da:	4619      	mov	r1, r3
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	680b      	ldr	r3, [r1, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1fc      	bne.n	80074de <ai_platform_api_get_network_report+0x622>
 80074e4:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <ai_platform_api_get_network_report+0x65c>)
 80074e6:	490d      	ldr	r1, [pc, #52]	; (800751c <ai_platform_api_get_network_report+0x660>)
 80074e8:	4a0d      	ldr	r2, [pc, #52]	; (8007520 <ai_platform_api_get_network_report+0x664>)
 80074ea:	6019      	str	r1, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f43f af49 	beq.w	8007386 <ai_platform_api_get_network_report+0x4ca>
 80074f4:	e7fe      	b.n	80074f4 <ai_platform_api_get_network_report+0x638>
 80074f6:	bf00      	nop
 80074f8:	e0002000 	.word	0xe0002000
 80074fc:	e0042000 	.word	0xe0042000
 8007500:	5c001000 	.word	0x5c001000
 8007504:	0804e1dc 	.word	0x0804e1dc
 8007508:	a1facade 	.word	0xa1facade
 800750c:	00040440 	.word	0x00040440
 8007510:	08014790 	.word	0x08014790
 8007514:	40023008 	.word	0x40023008
 8007518:	40023000 	.word	0x40023000
 800751c:	f407a5c2 	.word	0xf407a5c2
 8007520:	b5e8b5cd 	.word	0xb5e8b5cd
 8007524:	58024c08 	.word	0x58024c08
 8007528:	58024c00 	.word	0x58024c00
 800752c:	4b74      	ldr	r3, [pc, #464]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 800752e:	2201      	movs	r2, #1
 8007530:	4619      	mov	r1, r3
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	680b      	ldr	r3, [r1, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1fc      	bne.n	8007534 <ai_platform_api_get_network_report+0x678>
 800753a:	4b72      	ldr	r3, [pc, #456]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 800753c:	4972      	ldr	r1, [pc, #456]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800753e:	4a73      	ldr	r2, [pc, #460]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007540:	6019      	str	r1, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4293      	cmp	r3, r2
 8007546:	f43f aeed 	beq.w	8007324 <ai_platform_api_get_network_report+0x468>
 800754a:	e7fe      	b.n	800754a <ai_platform_api_get_network_report+0x68e>
 800754c:	4b70      	ldr	r3, [pc, #448]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 800754e:	2201      	movs	r2, #1
 8007550:	4619      	mov	r1, r3
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	680b      	ldr	r3, [r1, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1fc      	bne.n	8007554 <ai_platform_api_get_network_report+0x698>
 800755a:	4b6e      	ldr	r3, [pc, #440]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 800755c:	496a      	ldr	r1, [pc, #424]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800755e:	4a6b      	ldr	r2, [pc, #428]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007560:	6019      	str	r1, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4293      	cmp	r3, r2
 8007566:	f43f aedd 	beq.w	8007324 <ai_platform_api_get_network_report+0x468>
 800756a:	e7fe      	b.n	800756a <ai_platform_api_get_network_report+0x6ae>
 800756c:	4b68      	ldr	r3, [pc, #416]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 800756e:	2201      	movs	r2, #1
 8007570:	4619      	mov	r1, r3
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1fc      	bne.n	8007574 <ai_platform_api_get_network_report+0x6b8>
 800757a:	4b66      	ldr	r3, [pc, #408]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 800757c:	4962      	ldr	r1, [pc, #392]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800757e:	4a63      	ldr	r2, [pc, #396]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4293      	cmp	r3, r2
 8007586:	f43f aecd 	beq.w	8007324 <ai_platform_api_get_network_report+0x468>
 800758a:	e7fe      	b.n	800758a <ai_platform_api_get_network_report+0x6ce>
 800758c:	4b5c      	ldr	r3, [pc, #368]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 800758e:	2201      	movs	r2, #1
 8007590:	4619      	mov	r1, r3
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	680b      	ldr	r3, [r1, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1fc      	bne.n	8007594 <ai_platform_api_get_network_report+0x6d8>
 800759a:	4b5a      	ldr	r3, [pc, #360]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 800759c:	495a      	ldr	r1, [pc, #360]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800759e:	4a5b      	ldr	r2, [pc, #364]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80075a0:	6019      	str	r1, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	f43f aebd 	beq.w	8007324 <ai_platform_api_get_network_report+0x468>
 80075aa:	e7fe      	b.n	80075aa <ai_platform_api_get_network_report+0x6ee>
 80075ac:	4b54      	ldr	r3, [pc, #336]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	4619      	mov	r1, r3
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1fc      	bne.n	80075b4 <ai_platform_api_get_network_report+0x6f8>
 80075ba:	4b52      	ldr	r3, [pc, #328]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 80075bc:	4952      	ldr	r1, [pc, #328]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 80075be:	4a53      	ldr	r2, [pc, #332]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80075c0:	6019      	str	r1, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4293      	cmp	r3, r2
 80075c6:	f43f ae7b 	beq.w	80072c0 <ai_platform_api_get_network_report+0x404>
 80075ca:	e7fe      	b.n	80075ca <ai_platform_api_get_network_report+0x70e>
 80075cc:	4b50      	ldr	r3, [pc, #320]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	4619      	mov	r1, r3
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	680b      	ldr	r3, [r1, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1fc      	bne.n	80075d4 <ai_platform_api_get_network_report+0x718>
 80075da:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 80075dc:	494a      	ldr	r1, [pc, #296]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 80075de:	4a4b      	ldr	r2, [pc, #300]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80075e0:	6019      	str	r1, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	f43f ae6b 	beq.w	80072c0 <ai_platform_api_get_network_report+0x404>
 80075ea:	e7fe      	b.n	80075ea <ai_platform_api_get_network_report+0x72e>
 80075ec:	4b48      	ldr	r3, [pc, #288]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	680b      	ldr	r3, [r1, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1fc      	bne.n	80075f4 <ai_platform_api_get_network_report+0x738>
 80075fa:	4b46      	ldr	r3, [pc, #280]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 80075fc:	4942      	ldr	r1, [pc, #264]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 80075fe:	4a43      	ldr	r2, [pc, #268]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007600:	6019      	str	r1, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4293      	cmp	r3, r2
 8007606:	f43f ae5b 	beq.w	80072c0 <ai_platform_api_get_network_report+0x404>
 800760a:	e7fe      	b.n	800760a <ai_platform_api_get_network_report+0x74e>
 800760c:	4b3c      	ldr	r3, [pc, #240]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 800760e:	2201      	movs	r2, #1
 8007610:	4619      	mov	r1, r3
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	680b      	ldr	r3, [r1, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1fc      	bne.n	8007614 <ai_platform_api_get_network_report+0x758>
 800761a:	4b3a      	ldr	r3, [pc, #232]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 800761c:	493a      	ldr	r1, [pc, #232]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800761e:	4a3b      	ldr	r2, [pc, #236]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4293      	cmp	r3, r2
 8007626:	f43f ae4b 	beq.w	80072c0 <ai_platform_api_get_network_report+0x404>
 800762a:	e7fe      	b.n	800762a <ai_platform_api_get_network_report+0x76e>
 800762c:	4b34      	ldr	r3, [pc, #208]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 800762e:	2201      	movs	r2, #1
 8007630:	4619      	mov	r1, r3
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	680b      	ldr	r3, [r1, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1fc      	bne.n	8007634 <ai_platform_api_get_network_report+0x778>
 800763a:	4b32      	ldr	r3, [pc, #200]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 800763c:	4932      	ldr	r1, [pc, #200]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800763e:	4a33      	ldr	r2, [pc, #204]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007640:	6019      	str	r1, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4293      	cmp	r3, r2
 8007646:	f43f ae0a 	beq.w	800725e <ai_platform_api_get_network_report+0x3a2>
 800764a:	e7fe      	b.n	800764a <ai_platform_api_get_network_report+0x78e>
 800764c:	4b30      	ldr	r3, [pc, #192]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 800764e:	2201      	movs	r2, #1
 8007650:	4619      	mov	r1, r3
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	680b      	ldr	r3, [r1, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1fc      	bne.n	8007654 <ai_platform_api_get_network_report+0x798>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 800765c:	492a      	ldr	r1, [pc, #168]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800765e:	4a2b      	ldr	r2, [pc, #172]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4293      	cmp	r3, r2
 8007666:	f43f adfa 	beq.w	800725e <ai_platform_api_get_network_report+0x3a2>
 800766a:	e7fe      	b.n	800766a <ai_platform_api_get_network_report+0x7ae>
 800766c:	4b28      	ldr	r3, [pc, #160]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 800766e:	2201      	movs	r2, #1
 8007670:	4619      	mov	r1, r3
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1fc      	bne.n	8007674 <ai_platform_api_get_network_report+0x7b8>
 800767a:	4b26      	ldr	r3, [pc, #152]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 800767c:	4922      	ldr	r1, [pc, #136]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800767e:	4a23      	ldr	r2, [pc, #140]	; (800770c <ai_platform_api_get_network_report+0x850>)
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4293      	cmp	r3, r2
 8007686:	f43f adea 	beq.w	800725e <ai_platform_api_get_network_report+0x3a2>
 800768a:	e7fe      	b.n	800768a <ai_platform_api_get_network_report+0x7ce>
 800768c:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 800768e:	2201      	movs	r2, #1
 8007690:	4619      	mov	r1, r3
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	680b      	ldr	r3, [r1, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1fc      	bne.n	8007694 <ai_platform_api_get_network_report+0x7d8>
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 800769c:	491a      	ldr	r1, [pc, #104]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 800769e:	4a1b      	ldr	r2, [pc, #108]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80076a0:	6019      	str	r1, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	f43f adda 	beq.w	800725e <ai_platform_api_get_network_report+0x3a2>
 80076aa:	e7fe      	b.n	80076aa <ai_platform_api_get_network_report+0x7ee>
 80076ac:	f105 0010 	add.w	r0, r5, #16
 80076b0:	2218      	movs	r2, #24
 80076b2:	2111      	movs	r1, #17
 80076b4:	2600      	movs	r6, #0
 80076b6:	f001 fd8f 	bl	80091d8 <core_set_error>
 80076ba:	e4ea      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 80076bc:	2600      	movs	r6, #0
 80076be:	e4e8      	b.n	8007092 <ai_platform_api_get_network_report+0x1d6>
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <ai_platform_api_get_network_report+0x844>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	680b      	ldr	r3, [r1, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1fc      	bne.n	80076c8 <ai_platform_api_get_network_report+0x80c>
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <ai_platform_api_get_network_report+0x848>)
 80076d0:	490d      	ldr	r1, [pc, #52]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 80076d2:	4a0e      	ldr	r2, [pc, #56]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80076d4:	6019      	str	r1, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4293      	cmp	r3, r2
 80076da:	f43f ac28 	beq.w	8006f2e <ai_platform_api_get_network_report+0x72>
 80076de:	e7fe      	b.n	80076de <ai_platform_api_get_network_report+0x822>
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <ai_platform_api_get_network_report+0x854>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	680b      	ldr	r3, [r1, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1fc      	bne.n	80076e8 <ai_platform_api_get_network_report+0x82c>
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <ai_platform_api_get_network_report+0x858>)
 80076f0:	4905      	ldr	r1, [pc, #20]	; (8007708 <ai_platform_api_get_network_report+0x84c>)
 80076f2:	4a06      	ldr	r2, [pc, #24]	; (800770c <ai_platform_api_get_network_report+0x850>)
 80076f4:	6019      	str	r1, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	f43f ac18 	beq.w	8006f2e <ai_platform_api_get_network_report+0x72>
 80076fe:	e7fe      	b.n	80076fe <ai_platform_api_get_network_report+0x842>
 8007700:	40023008 	.word	0x40023008
 8007704:	40023000 	.word	0x40023000
 8007708:	f407a5c2 	.word	0xf407a5c2
 800770c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007710:	58024c08 	.word	0x58024c08
 8007714:	58024c00 	.word	0x58024c00

08007718 <ai_platform_network_create>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	4606      	mov	r6, r0
 8007720:	4615      	mov	r5, r2
 8007722:	461f      	mov	r7, r3
 8007724:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007728:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800772c:	f7fe ff4a 	bl	80065c4 <_ai_platform_acquire_crc>
 8007730:	b328      	cbz	r0, 800777e <ai_platform_network_create+0x66>
 8007732:	4baa      	ldr	r3, [pc, #680]	; (80079dc <ai_platform_network_create+0x2c4>)
 8007734:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8007738:	4602      	mov	r2, r0
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007740:	1919      	adds	r1, r3, r4
 8007742:	2901      	cmp	r1, #1
 8007744:	d921      	bls.n	800778a <ai_platform_network_create+0x72>
 8007746:	f240 4149 	movw	r1, #1097	; 0x449
 800774a:	428b      	cmp	r3, r1
 800774c:	d01d      	beq.n	800778a <ai_platform_network_create+0x72>
 800774e:	4ba4      	ldr	r3, [pc, #656]	; (80079e0 <ai_platform_network_create+0x2c8>)
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007756:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800775a:	d01e      	beq.n	800779a <ai_platform_network_create+0x82>
 800775c:	6819      	ldr	r1, [r3, #0]
 800775e:	f240 4483 	movw	r4, #1155	; 0x483
 8007762:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007766:	42a1      	cmp	r1, r4
 8007768:	f000 8085 	beq.w	8007876 <ai_platform_network_create+0x15e>
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007772:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007776:	f000 8157 	beq.w	8007a28 <ai_platform_network_create+0x310>
 800777a:	f7fe ff25 	bl	80065c8 <_ai_platform_release_crc>
 800777e:	f244 1333 	movw	r3, #16691	; 0x4133
 8007782:	4618      	mov	r0, r3
 8007784:	b002      	add	sp, #8
 8007786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778a:	4b96      	ldr	r3, [pc, #600]	; (80079e4 <ai_platform_network_create+0x2cc>)
 800778c:	2118      	movs	r1, #24
 800778e:	6019      	str	r1, [r3, #0]
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	2918      	cmp	r1, #24
 8007794:	d059      	beq.n	800784a <ai_platform_network_create+0x132>
 8007796:	4610      	mov	r0, r2
 8007798:	e7ef      	b.n	800777a <ai_platform_network_create+0x62>
 800779a:	4b93      	ldr	r3, [pc, #588]	; (80079e8 <ai_platform_network_create+0x2d0>)
 800779c:	2118      	movs	r1, #24
 800779e:	6019      	str	r1, [r3, #0]
 80077a0:	6819      	ldr	r1, [r3, #0]
 80077a2:	2918      	cmp	r1, #24
 80077a4:	d1e9      	bne.n	800777a <ai_platform_network_create+0x62>
 80077a6:	2101      	movs	r1, #1
 80077a8:	4618      	mov	r0, r3
 80077aa:	6019      	str	r1, [r3, #0]
 80077ac:	6803      	ldr	r3, [r0, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1fc      	bne.n	80077ac <ai_platform_network_create+0x94>
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fe ff08 	bl	80065c8 <_ai_platform_release_crc>
 80077b8:	4a8c      	ldr	r2, [pc, #560]	; (80079ec <ai_platform_network_create+0x2d4>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	f7fe feff 	bl	80065c4 <_ai_platform_acquire_crc>
 80077c6:	4b85      	ldr	r3, [pc, #532]	; (80079dc <ai_platform_network_create+0x2c4>)
 80077c8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077d2:	185a      	adds	r2, r3, r1
 80077d4:	2a01      	cmp	r2, #1
 80077d6:	d93f      	bls.n	8007858 <ai_platform_network_create+0x140>
 80077d8:	f240 4249 	movw	r2, #1097	; 0x449
 80077dc:	4293      	cmp	r3, r2
 80077de:	d03b      	beq.n	8007858 <ai_platform_network_create+0x140>
 80077e0:	4b7f      	ldr	r3, [pc, #508]	; (80079e0 <ai_platform_network_create+0x2c8>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80077e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80077ec:	f000 810c 	beq.w	8007a08 <ai_platform_network_create+0x2f0>
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f240 4183 	movw	r1, #1155	; 0x483
 80077f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80077fa:	428a      	cmp	r2, r1
 80077fc:	f000 80de 	beq.w	80079bc <ai_platform_network_create+0x2a4>
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007806:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800780a:	d07e      	beq.n	800790a <ai_platform_network_create+0x1f2>
 800780c:	f7fe fedc 	bl	80065c8 <_ai_platform_release_crc>
 8007810:	2e00      	cmp	r6, #0
 8007812:	d077      	beq.n	8007904 <ai_platform_network_create+0x1ec>
 8007814:	4b76      	ldr	r3, [pc, #472]	; (80079f0 <ai_platform_network_create+0x2d8>)
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	6035      	str	r5, [r6, #0]
 800781a:	f001 fcd5 	bl	80091c8 <core_init>
 800781e:	2800      	cmp	r0, #0
 8007820:	d137      	bne.n	8007892 <ai_platform_network_create+0x17a>
 8007822:	2430      	movs	r4, #48	; 0x30
 8007824:	2300      	movs	r3, #0
 8007826:	f04f 0a10 	mov.w	sl, #16
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	464a      	mov	r2, r9
 800782e:	4641      	mov	r1, r8
 8007830:	4638      	mov	r0, r7
 8007832:	f009 fa41 	bl	8010cb8 <ai_version_get>
 8007836:	2300      	movs	r3, #0
 8007838:	6468      	str	r0, [r5, #68]	; 0x44
 800783a:	f364 0307 	bfi	r3, r4, #0, #8
 800783e:	f36a 231f 	bfi	r3, sl, #8, #24
 8007842:	4618      	mov	r0, r3
 8007844:	b002      	add	sp, #8
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	2101      	movs	r1, #1
 800784c:	4618      	mov	r0, r3
 800784e:	6019      	str	r1, [r3, #0]
 8007850:	6803      	ldr	r3, [r0, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1fc      	bne.n	8007850 <ai_platform_network_create+0x138>
 8007856:	e7ac      	b.n	80077b2 <ai_platform_network_create+0x9a>
 8007858:	4b62      	ldr	r3, [pc, #392]	; (80079e4 <ai_platform_network_create+0x2cc>)
 800785a:	2201      	movs	r2, #1
 800785c:	4619      	mov	r1, r3
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	680b      	ldr	r3, [r1, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1fc      	bne.n	8007860 <ai_platform_network_create+0x148>
 8007866:	4b63      	ldr	r3, [pc, #396]	; (80079f4 <ai_platform_network_create+0x2dc>)
 8007868:	4963      	ldr	r1, [pc, #396]	; (80079f8 <ai_platform_network_create+0x2e0>)
 800786a:	4a64      	ldr	r2, [pc, #400]	; (80079fc <ai_platform_network_create+0x2e4>)
 800786c:	6019      	str	r1, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4293      	cmp	r3, r2
 8007872:	d0cb      	beq.n	800780c <ai_platform_network_create+0xf4>
 8007874:	e7fe      	b.n	8007874 <ai_platform_network_create+0x15c>
 8007876:	4b5c      	ldr	r3, [pc, #368]	; (80079e8 <ai_platform_network_create+0x2d0>)
 8007878:	2118      	movs	r1, #24
 800787a:	6019      	str	r1, [r3, #0]
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	2918      	cmp	r1, #24
 8007880:	f47f af7b 	bne.w	800777a <ai_platform_network_create+0x62>
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	6019      	str	r1, [r3, #0]
 800788a:	6803      	ldr	r3, [r0, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1fc      	bne.n	800788a <ai_platform_network_create+0x172>
 8007890:	e78f      	b.n	80077b2 <ai_platform_network_create+0x9a>
 8007892:	4a56      	ldr	r2, [pc, #344]	; (80079ec <ai_platform_network_create+0x2d4>)
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f7fe fe92 	bl	80065c4 <_ai_platform_acquire_crc>
 80078a0:	4b4e      	ldr	r3, [pc, #312]	; (80079dc <ai_platform_network_create+0x2c4>)
 80078a2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ac:	189a      	adds	r2, r3, r2
 80078ae:	2a01      	cmp	r2, #1
 80078b0:	d975      	bls.n	800799e <ai_platform_network_create+0x286>
 80078b2:	f240 4249 	movw	r2, #1097	; 0x449
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d071      	beq.n	800799e <ai_platform_network_create+0x286>
 80078ba:	4b49      	ldr	r3, [pc, #292]	; (80079e0 <ai_platform_network_create+0x2c8>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80078c2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80078c6:	d05b      	beq.n	8007980 <ai_platform_network_create+0x268>
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	f240 4183 	movw	r1, #1155	; 0x483
 80078ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80078d2:	428a      	cmp	r2, r1
 80078d4:	d045      	beq.n	8007962 <ai_platform_network_create+0x24a>
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078dc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80078e0:	d030      	beq.n	8007944 <ai_platform_network_create+0x22c>
 80078e2:	f7fe fe71 	bl	80065c8 <_ai_platform_release_crc>
 80078e6:	2200      	movs	r2, #0
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	f009 f9e4 	bl	8010cb8 <ai_version_get>
 80078f0:	4604      	mov	r4, r0
 80078f2:	2200      	movs	r2, #0
 80078f4:	2105      	movs	r1, #5
 80078f6:	2001      	movs	r0, #1
 80078f8:	f009 f9de 	bl	8010cb8 <ai_version_get>
 80078fc:	4284      	cmp	r4, r0
 80078fe:	d014      	beq.n	800792a <ai_platform_network_create+0x212>
 8007900:	2401      	movs	r4, #1
 8007902:	e78f      	b.n	8007824 <ai_platform_network_create+0x10c>
 8007904:	f241 0310 	movw	r3, #4112	; 0x1010
 8007908:	e73b      	b.n	8007782 <ai_platform_network_create+0x6a>
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <ai_platform_network_create+0x2cc>)
 800790c:	2201      	movs	r2, #1
 800790e:	4619      	mov	r1, r3
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1fc      	bne.n	8007912 <ai_platform_network_create+0x1fa>
 8007918:	4b36      	ldr	r3, [pc, #216]	; (80079f4 <ai_platform_network_create+0x2dc>)
 800791a:	4937      	ldr	r1, [pc, #220]	; (80079f8 <ai_platform_network_create+0x2e0>)
 800791c:	4a37      	ldr	r2, [pc, #220]	; (80079fc <ai_platform_network_create+0x2e4>)
 800791e:	6019      	str	r1, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4293      	cmp	r3, r2
 8007924:	f43f af72 	beq.w	800780c <ai_platform_network_create+0xf4>
 8007928:	e7fe      	b.n	8007928 <ai_platform_network_create+0x210>
 800792a:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <ai_platform_network_create+0x2e8>)
 800792c:	a802      	add	r0, sp, #8
 800792e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007932:	f003 fe8f 	bl	800b654 <ai_check_custom_types>
 8007936:	b118      	cbz	r0, 8007940 <ai_platform_network_create+0x228>
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	4654      	mov	r4, sl
 800793e:	e775      	b.n	800782c <ai_platform_network_create+0x114>
 8007940:	2402      	movs	r4, #2
 8007942:	e76f      	b.n	8007824 <ai_platform_network_create+0x10c>
 8007944:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <ai_platform_network_create+0x2cc>)
 8007946:	2201      	movs	r2, #1
 8007948:	4619      	mov	r1, r3
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	680b      	ldr	r3, [r1, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1fc      	bne.n	800794c <ai_platform_network_create+0x234>
 8007952:	4b28      	ldr	r3, [pc, #160]	; (80079f4 <ai_platform_network_create+0x2dc>)
 8007954:	4928      	ldr	r1, [pc, #160]	; (80079f8 <ai_platform_network_create+0x2e0>)
 8007956:	4a29      	ldr	r2, [pc, #164]	; (80079fc <ai_platform_network_create+0x2e4>)
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4293      	cmp	r3, r2
 800795e:	d0c0      	beq.n	80078e2 <ai_platform_network_create+0x1ca>
 8007960:	e7fe      	b.n	8007960 <ai_platform_network_create+0x248>
 8007962:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <ai_platform_network_create+0x2d0>)
 8007964:	2201      	movs	r2, #1
 8007966:	4619      	mov	r1, r3
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	680b      	ldr	r3, [r1, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1fc      	bne.n	800796a <ai_platform_network_create+0x252>
 8007970:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <ai_platform_network_create+0x2ec>)
 8007972:	4921      	ldr	r1, [pc, #132]	; (80079f8 <ai_platform_network_create+0x2e0>)
 8007974:	4a21      	ldr	r2, [pc, #132]	; (80079fc <ai_platform_network_create+0x2e4>)
 8007976:	6019      	str	r1, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4293      	cmp	r3, r2
 800797c:	d0b1      	beq.n	80078e2 <ai_platform_network_create+0x1ca>
 800797e:	e7fe      	b.n	800797e <ai_platform_network_create+0x266>
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <ai_platform_network_create+0x2d0>)
 8007982:	2201      	movs	r2, #1
 8007984:	4619      	mov	r1, r3
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	680b      	ldr	r3, [r1, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1fc      	bne.n	8007988 <ai_platform_network_create+0x270>
 800798e:	4b1d      	ldr	r3, [pc, #116]	; (8007a04 <ai_platform_network_create+0x2ec>)
 8007990:	4919      	ldr	r1, [pc, #100]	; (80079f8 <ai_platform_network_create+0x2e0>)
 8007992:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <ai_platform_network_create+0x2e4>)
 8007994:	6019      	str	r1, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4293      	cmp	r3, r2
 800799a:	d0a2      	beq.n	80078e2 <ai_platform_network_create+0x1ca>
 800799c:	e7fe      	b.n	800799c <ai_platform_network_create+0x284>
 800799e:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <ai_platform_network_create+0x2cc>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	680b      	ldr	r3, [r1, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1fc      	bne.n	80079a6 <ai_platform_network_create+0x28e>
 80079ac:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <ai_platform_network_create+0x2dc>)
 80079ae:	4912      	ldr	r1, [pc, #72]	; (80079f8 <ai_platform_network_create+0x2e0>)
 80079b0:	4a12      	ldr	r2, [pc, #72]	; (80079fc <ai_platform_network_create+0x2e4>)
 80079b2:	6019      	str	r1, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d093      	beq.n	80078e2 <ai_platform_network_create+0x1ca>
 80079ba:	e7fe      	b.n	80079ba <ai_platform_network_create+0x2a2>
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <ai_platform_network_create+0x2d0>)
 80079be:	2201      	movs	r2, #1
 80079c0:	4619      	mov	r1, r3
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	680b      	ldr	r3, [r1, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1fc      	bne.n	80079c4 <ai_platform_network_create+0x2ac>
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <ai_platform_network_create+0x2ec>)
 80079cc:	490a      	ldr	r1, [pc, #40]	; (80079f8 <ai_platform_network_create+0x2e0>)
 80079ce:	4a0b      	ldr	r2, [pc, #44]	; (80079fc <ai_platform_network_create+0x2e4>)
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4293      	cmp	r3, r2
 80079d6:	f43f af19 	beq.w	800780c <ai_platform_network_create+0xf4>
 80079da:	e7fe      	b.n	80079da <ai_platform_network_create+0x2c2>
 80079dc:	e0042000 	.word	0xe0042000
 80079e0:	5c001000 	.word	0x5c001000
 80079e4:	40023008 	.word	0x40023008
 80079e8:	58024c08 	.word	0x58024c08
 80079ec:	e0002000 	.word	0xe0002000
 80079f0:	a1c00100 	.word	0xa1c00100
 80079f4:	40023000 	.word	0x40023000
 80079f8:	f407a5c2 	.word	0xf407a5c2
 80079fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a00:	84048403 	.word	0x84048403
 8007a04:	58024c00 	.word	0x58024c00
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <ai_platform_network_create+0x32c>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1fc      	bne.n	8007a10 <ai_platform_network_create+0x2f8>
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <ai_platform_network_create+0x330>)
 8007a18:	490c      	ldr	r1, [pc, #48]	; (8007a4c <ai_platform_network_create+0x334>)
 8007a1a:	4a0d      	ldr	r2, [pc, #52]	; (8007a50 <ai_platform_network_create+0x338>)
 8007a1c:	6019      	str	r1, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	f43f aef3 	beq.w	800780c <ai_platform_network_create+0xf4>
 8007a26:	e7fe      	b.n	8007a26 <ai_platform_network_create+0x30e>
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <ai_platform_network_create+0x33c>)
 8007a2a:	2118      	movs	r1, #24
 8007a2c:	6019      	str	r1, [r3, #0]
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	2918      	cmp	r1, #24
 8007a32:	f47f aea2 	bne.w	800777a <ai_platform_network_create+0x62>
 8007a36:	2101      	movs	r1, #1
 8007a38:	4618      	mov	r0, r3
 8007a3a:	6019      	str	r1, [r3, #0]
 8007a3c:	6803      	ldr	r3, [r0, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1fc      	bne.n	8007a3c <ai_platform_network_create+0x324>
 8007a42:	e6b6      	b.n	80077b2 <ai_platform_network_create+0x9a>
 8007a44:	58024c08 	.word	0x58024c08
 8007a48:	58024c00 	.word	0x58024c00
 8007a4c:	f407a5c2 	.word	0xf407a5c2
 8007a50:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a54:	40023008 	.word	0x40023008

08007a58 <ai_platform_network_destroy>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	b118      	cbz	r0, 8007a66 <ai_platform_network_destroy+0xe>
 8007a5e:	4b6d      	ldr	r3, [pc, #436]	; (8007c14 <ai_platform_network_destroy+0x1bc>)
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d03c      	beq.n	8007ae0 <ai_platform_network_destroy+0x88>
 8007a66:	4a6c      	ldr	r2, [pc, #432]	; (8007c18 <ai_platform_network_destroy+0x1c0>)
 8007a68:	6813      	ldr	r3, [r2, #0]
 8007a6a:	f023 0301 	bic.w	r3, r3, #1
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	f7fe fda8 	bl	80065c4 <_ai_platform_acquire_crc>
 8007a74:	4b69      	ldr	r3, [pc, #420]	; (8007c1c <ai_platform_network_destroy+0x1c4>)
 8007a76:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a80:	185a      	adds	r2, r3, r1
 8007a82:	2a01      	cmp	r2, #1
 8007a84:	d91d      	bls.n	8007ac2 <ai_platform_network_destroy+0x6a>
 8007a86:	f240 4249 	movw	r2, #1097	; 0x449
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d019      	beq.n	8007ac2 <ai_platform_network_destroy+0x6a>
 8007a8e:	4b64      	ldr	r3, [pc, #400]	; (8007c20 <ai_platform_network_destroy+0x1c8>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007a96:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007a9a:	f000 80ab 	beq.w	8007bf4 <ai_platform_network_destroy+0x19c>
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	f240 4183 	movw	r1, #1155	; 0x483
 8007aa4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007aa8:	428a      	cmp	r2, r1
 8007aaa:	f000 8093 	beq.w	8007bd4 <ai_platform_network_destroy+0x17c>
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ab4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007ab8:	d041      	beq.n	8007b3e <ai_platform_network_destroy+0xe6>
 8007aba:	f7fe fd85 	bl	80065c8 <_ai_platform_release_crc>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	4b58      	ldr	r3, [pc, #352]	; (8007c24 <ai_platform_network_destroy+0x1cc>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	680b      	ldr	r3, [r1, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1fc      	bne.n	8007aca <ai_platform_network_destroy+0x72>
 8007ad0:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <ai_platform_network_destroy+0x1d0>)
 8007ad2:	4956      	ldr	r1, [pc, #344]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007ad4:	4a56      	ldr	r2, [pc, #344]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007ad6:	6019      	str	r1, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d0ed      	beq.n	8007aba <ai_platform_network_destroy+0x62>
 8007ade:	e7fe      	b.n	8007ade <ai_platform_network_destroy+0x86>
 8007ae0:	4a4d      	ldr	r2, [pc, #308]	; (8007c18 <ai_platform_network_destroy+0x1c0>)
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	f7fe fd6b 	bl	80065c4 <_ai_platform_acquire_crc>
 8007aee:	4b4b      	ldr	r3, [pc, #300]	; (8007c1c <ai_platform_network_destroy+0x1c4>)
 8007af0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007afa:	189a      	adds	r2, r3, r2
 8007afc:	2a01      	cmp	r2, #1
 8007afe:	d95a      	bls.n	8007bb6 <ai_platform_network_destroy+0x15e>
 8007b00:	f240 4249 	movw	r2, #1097	; 0x449
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d056      	beq.n	8007bb6 <ai_platform_network_destroy+0x15e>
 8007b08:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <ai_platform_network_destroy+0x1c8>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007b10:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007b14:	d040      	beq.n	8007b98 <ai_platform_network_destroy+0x140>
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	f240 4183 	movw	r1, #1155	; 0x483
 8007b1c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007b20:	428a      	cmp	r2, r1
 8007b22:	d02a      	beq.n	8007b7a <ai_platform_network_destroy+0x122>
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b2a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007b2e:	d015      	beq.n	8007b5c <ai_platform_network_destroy+0x104>
 8007b30:	f7fe fd4a 	bl	80065c8 <_ai_platform_release_crc>
 8007b34:	4620      	mov	r0, r4
 8007b36:	2400      	movs	r4, #0
 8007b38:	f004 f826 	bl	800bb88 <ai_layers_destroy_all>
 8007b3c:	e7bf      	b.n	8007abe <ai_platform_network_destroy+0x66>
 8007b3e:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <ai_platform_network_destroy+0x1cc>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	4619      	mov	r1, r3
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	680b      	ldr	r3, [r1, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1fc      	bne.n	8007b46 <ai_platform_network_destroy+0xee>
 8007b4c:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <ai_platform_network_destroy+0x1d0>)
 8007b4e:	4937      	ldr	r1, [pc, #220]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007b50:	4a37      	ldr	r2, [pc, #220]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007b52:	6019      	str	r1, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d0af      	beq.n	8007aba <ai_platform_network_destroy+0x62>
 8007b5a:	e7fe      	b.n	8007b5a <ai_platform_network_destroy+0x102>
 8007b5c:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <ai_platform_network_destroy+0x1cc>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4619      	mov	r1, r3
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	680b      	ldr	r3, [r1, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1fc      	bne.n	8007b64 <ai_platform_network_destroy+0x10c>
 8007b6a:	4b2f      	ldr	r3, [pc, #188]	; (8007c28 <ai_platform_network_destroy+0x1d0>)
 8007b6c:	492f      	ldr	r1, [pc, #188]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007b6e:	4a30      	ldr	r2, [pc, #192]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007b70:	6019      	str	r1, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d0db      	beq.n	8007b30 <ai_platform_network_destroy+0xd8>
 8007b78:	e7fe      	b.n	8007b78 <ai_platform_network_destroy+0x120>
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <ai_platform_network_destroy+0x1dc>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4619      	mov	r1, r3
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	680b      	ldr	r3, [r1, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1fc      	bne.n	8007b82 <ai_platform_network_destroy+0x12a>
 8007b88:	4b2b      	ldr	r3, [pc, #172]	; (8007c38 <ai_platform_network_destroy+0x1e0>)
 8007b8a:	4928      	ldr	r1, [pc, #160]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007b8c:	4a28      	ldr	r2, [pc, #160]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007b8e:	6019      	str	r1, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d0cc      	beq.n	8007b30 <ai_platform_network_destroy+0xd8>
 8007b96:	e7fe      	b.n	8007b96 <ai_platform_network_destroy+0x13e>
 8007b98:	4b26      	ldr	r3, [pc, #152]	; (8007c34 <ai_platform_network_destroy+0x1dc>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	680b      	ldr	r3, [r1, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1fc      	bne.n	8007ba0 <ai_platform_network_destroy+0x148>
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <ai_platform_network_destroy+0x1e0>)
 8007ba8:	4920      	ldr	r1, [pc, #128]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007baa:	4a21      	ldr	r2, [pc, #132]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007bac:	6019      	str	r1, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d0bd      	beq.n	8007b30 <ai_platform_network_destroy+0xd8>
 8007bb4:	e7fe      	b.n	8007bb4 <ai_platform_network_destroy+0x15c>
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <ai_platform_network_destroy+0x1cc>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4619      	mov	r1, r3
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	680b      	ldr	r3, [r1, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1fc      	bne.n	8007bbe <ai_platform_network_destroy+0x166>
 8007bc4:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <ai_platform_network_destroy+0x1d0>)
 8007bc6:	4919      	ldr	r1, [pc, #100]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007bca:	6019      	str	r1, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d0ae      	beq.n	8007b30 <ai_platform_network_destroy+0xd8>
 8007bd2:	e7fe      	b.n	8007bd2 <ai_platform_network_destroy+0x17a>
 8007bd4:	4b17      	ldr	r3, [pc, #92]	; (8007c34 <ai_platform_network_destroy+0x1dc>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4619      	mov	r1, r3
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	680b      	ldr	r3, [r1, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1fc      	bne.n	8007bdc <ai_platform_network_destroy+0x184>
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <ai_platform_network_destroy+0x1e0>)
 8007be4:	4911      	ldr	r1, [pc, #68]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007be6:	4a12      	ldr	r2, [pc, #72]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007be8:	6019      	str	r1, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	f43f af64 	beq.w	8007aba <ai_platform_network_destroy+0x62>
 8007bf2:	e7fe      	b.n	8007bf2 <ai_platform_network_destroy+0x19a>
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <ai_platform_network_destroy+0x1dc>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1fc      	bne.n	8007bfc <ai_platform_network_destroy+0x1a4>
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <ai_platform_network_destroy+0x1e0>)
 8007c04:	4909      	ldr	r1, [pc, #36]	; (8007c2c <ai_platform_network_destroy+0x1d4>)
 8007c06:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <ai_platform_network_destroy+0x1d8>)
 8007c08:	6019      	str	r1, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	f43f af54 	beq.w	8007aba <ai_platform_network_destroy+0x62>
 8007c12:	e7fe      	b.n	8007c12 <ai_platform_network_destroy+0x1ba>
 8007c14:	a1c00100 	.word	0xa1c00100
 8007c18:	e0002000 	.word	0xe0002000
 8007c1c:	e0042000 	.word	0xe0042000
 8007c20:	5c001000 	.word	0x5c001000
 8007c24:	40023008 	.word	0x40023008
 8007c28:	40023000 	.word	0x40023000
 8007c2c:	f407a5c2 	.word	0xf407a5c2
 8007c30:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c34:	58024c08 	.word	0x58024c08
 8007c38:	58024c00 	.word	0x58024c00

08007c3c <ai_platform_network_init>:
 8007c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d05a      	beq.n	8007cfa <ai_platform_network_init+0xbe>
 8007c44:	4ba7      	ldr	r3, [pc, #668]	; (8007ee4 <ai_platform_network_init+0x2a8>)
 8007c46:	4604      	mov	r4, r0
 8007c48:	6802      	ldr	r2, [r0, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d155      	bne.n	8007cfa <ai_platform_network_init+0xbe>
 8007c4e:	4aa6      	ldr	r2, [pc, #664]	; (8007ee8 <ai_platform_network_init+0x2ac>)
 8007c50:	460d      	mov	r5, r1
 8007c52:	6813      	ldr	r3, [r2, #0]
 8007c54:	f023 0301 	bic.w	r3, r3, #1
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	f7fe fcb3 	bl	80065c4 <_ai_platform_acquire_crc>
 8007c5e:	4ba3      	ldr	r3, [pc, #652]	; (8007eec <ai_platform_network_init+0x2b0>)
 8007c60:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c6a:	189a      	adds	r2, r3, r2
 8007c6c:	2a01      	cmp	r2, #1
 8007c6e:	d935      	bls.n	8007cdc <ai_platform_network_init+0xa0>
 8007c70:	f240 4249 	movw	r2, #1097	; 0x449
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d031      	beq.n	8007cdc <ai_platform_network_init+0xa0>
 8007c78:	4b9d      	ldr	r3, [pc, #628]	; (8007ef0 <ai_platform_network_init+0x2b4>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007c80:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007c84:	f000 8154 	beq.w	8007f30 <ai_platform_network_init+0x2f4>
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f240 4183 	movw	r1, #1155	; 0x483
 8007c8e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007c92:	428a      	cmp	r2, r1
 8007c94:	f000 813c 	beq.w	8007f10 <ai_platform_network_init+0x2d4>
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c9e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007ca2:	f000 8107 	beq.w	8007eb4 <ai_platform_network_init+0x278>
 8007ca6:	f7fe fc8f 	bl	80065c8 <_ai_platform_release_crc>
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	f000 8112 	beq.w	8007ed4 <ai_platform_network_init+0x298>
 8007cb0:	4b90      	ldr	r3, [pc, #576]	; (8007ef4 <ai_platform_network_init+0x2b8>)
 8007cb2:	682a      	ldr	r2, [r5, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d14e      	bne.n	8007d56 <ai_platform_network_init+0x11a>
 8007cb8:	6928      	ldr	r0, [r5, #16]
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	89ee      	ldrh	r6, [r5, #14]
 8007cbe:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 8007cc2:	62a0      	str	r0, [r4, #40]	; 0x28
 8007cc4:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	84e6      	strh	r6, [r4, #38]	; 0x26
 8007ccc:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007cce:	4620      	mov	r0, r4
 8007cd0:	60e2      	str	r2, [r4, #12]
 8007cd2:	f003 fee3 	bl	800ba9c <ai_layers_init_all>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cdc:	4b86      	ldr	r3, [pc, #536]	; (8007ef8 <ai_platform_network_init+0x2bc>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	680b      	ldr	r3, [r1, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1fc      	bne.n	8007ce4 <ai_platform_network_init+0xa8>
 8007cea:	4b84      	ldr	r3, [pc, #528]	; (8007efc <ai_platform_network_init+0x2c0>)
 8007cec:	4984      	ldr	r1, [pc, #528]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007cee:	4a85      	ldr	r2, [pc, #532]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007cf0:	6019      	str	r1, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d0d6      	beq.n	8007ca6 <ai_platform_network_init+0x6a>
 8007cf8:	e7fe      	b.n	8007cf8 <ai_platform_network_init+0xbc>
 8007cfa:	4a7b      	ldr	r2, [pc, #492]	; (8007ee8 <ai_platform_network_init+0x2ac>)
 8007cfc:	6813      	ldr	r3, [r2, #0]
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	f7fe fc5e 	bl	80065c4 <_ai_platform_acquire_crc>
 8007d08:	4b78      	ldr	r3, [pc, #480]	; (8007eec <ai_platform_network_init+0x2b0>)
 8007d0a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d14:	185a      	adds	r2, r3, r1
 8007d16:	2a01      	cmp	r2, #1
 8007d18:	d93f      	bls.n	8007d9a <ai_platform_network_init+0x15e>
 8007d1a:	f240 4249 	movw	r2, #1097	; 0x449
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d03b      	beq.n	8007d9a <ai_platform_network_init+0x15e>
 8007d22:	4b73      	ldr	r3, [pc, #460]	; (8007ef0 <ai_platform_network_init+0x2b4>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007d2a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007d2e:	f000 80a5 	beq.w	8007e7c <ai_platform_network_init+0x240>
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	f240 4183 	movw	r1, #1155	; 0x483
 8007d38:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007d3c:	428a      	cmp	r2, r1
 8007d3e:	f000 808d 	beq.w	8007e5c <ai_platform_network_init+0x220>
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d48:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007d4c:	d076      	beq.n	8007e3c <ai_platform_network_init+0x200>
 8007d4e:	f7fe fc3b 	bl	80065c8 <_ai_platform_release_crc>
 8007d52:	2000      	movs	r0, #0
 8007d54:	e7c0      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007d56:	2101      	movs	r1, #1
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f105 081c 	add.w	r8, r5, #28
 8007d5e:	686f      	ldr	r7, [r5, #4]
 8007d60:	f7fe fb52 	bl	8006408 <ai_buffer_get_size>
 8007d64:	4681      	mov	r9, r0
 8007d66:	2101      	movs	r1, #1
 8007d68:	4640      	mov	r0, r8
 8007d6a:	6a2e      	ldr	r6, [r5, #32]
 8007d6c:	f7fe fb4c 	bl	8006408 <ai_buffer_get_size>
 8007d70:	f1b9 0f00 	cmp.w	r9, #0
 8007d74:	d020      	beq.n	8007db8 <ai_platform_network_init+0x17c>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f040 8090 	bne.w	8007e9c <ai_platform_network_init+0x260>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4606      	mov	r6, r0
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	f000 808f 	beq.w	8007ea4 <ai_platform_network_init+0x268>
 8007d86:	8be7      	ldrh	r7, [r4, #30]
 8007d88:	bb7f      	cbnz	r7, 8007dea <ai_platform_network_init+0x1ae>
 8007d8a:	f104 0010 	add.w	r0, r4, #16
 8007d8e:	2212      	movs	r2, #18
 8007d90:	2116      	movs	r1, #22
 8007d92:	f001 fa21 	bl	80091d8 <core_set_error>
 8007d96:	4638      	mov	r0, r7
 8007d98:	e79e      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007d9a:	4b57      	ldr	r3, [pc, #348]	; (8007ef8 <ai_platform_network_init+0x2bc>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	4619      	mov	r1, r3
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	680b      	ldr	r3, [r1, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1fc      	bne.n	8007da2 <ai_platform_network_init+0x166>
 8007da8:	4b54      	ldr	r3, [pc, #336]	; (8007efc <ai_platform_network_init+0x2c0>)
 8007daa:	4955      	ldr	r1, [pc, #340]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007dac:	4a55      	ldr	r2, [pc, #340]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007dae:	6019      	str	r1, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d0cb      	beq.n	8007d4e <ai_platform_network_init+0x112>
 8007db6:	e7fe      	b.n	8007db6 <ai_platform_network_init+0x17a>
 8007db8:	b970      	cbnz	r0, 8007dd8 <ai_platform_network_init+0x19c>
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	61e2      	str	r2, [r4, #28]
 8007dc6:	d21e      	bcs.n	8007e06 <ai_platform_network_init+0x1ca>
 8007dc8:	f104 0010 	add.w	r0, r4, #16
 8007dcc:	2213      	movs	r2, #19
 8007dce:	2116      	movs	r1, #22
 8007dd0:	f001 fa02 	bl	80091d8 <core_set_error>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e77f      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007dd8:	bb66      	cbnz	r6, 8007e34 <ai_platform_network_init+0x1f8>
 8007dda:	f104 0010 	add.w	r0, r4, #16
 8007dde:	2213      	movs	r2, #19
 8007de0:	2110      	movs	r1, #16
 8007de2:	f001 f9f9 	bl	80091d8 <core_set_error>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e776      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dec:	6a27      	ldr	r7, [r4, #32]
 8007dee:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8007df2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007df8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8007dfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007dfe:	f8c4 c01c 	str.w	ip, [r4, #28]
 8007e02:	42b3      	cmp	r3, r6
 8007e04:	d3e0      	bcc.n	8007dc8 <ai_platform_network_init+0x18c>
 8007e06:	b1be      	cbz	r6, 8007e38 <ai_platform_network_init+0x1fc>
 8007e08:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8007e0c:	f04f 0e00 	mov.w	lr, #0
 8007e10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007e14:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007e16:	eb08 070e 	add.w	r7, r8, lr
 8007e1a:	4475      	add	r5, lr
 8007e1c:	f10e 0e1c 	add.w	lr, lr, #28
 8007e20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007e22:	45f4      	cmp	ip, lr
 8007e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e26:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007e2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007e2e:	d1f1      	bne.n	8007e14 <ai_platform_network_init+0x1d8>
 8007e30:	2300      	movs	r3, #0
 8007e32:	e749      	b.n	8007cc8 <ai_platform_network_init+0x8c>
 8007e34:	2601      	movs	r6, #1
 8007e36:	e7c2      	b.n	8007dbe <ai_platform_network_init+0x182>
 8007e38:	4633      	mov	r3, r6
 8007e3a:	e745      	b.n	8007cc8 <ai_platform_network_init+0x8c>
 8007e3c:	4b2e      	ldr	r3, [pc, #184]	; (8007ef8 <ai_platform_network_init+0x2bc>)
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4619      	mov	r1, r3
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	680b      	ldr	r3, [r1, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1fc      	bne.n	8007e44 <ai_platform_network_init+0x208>
 8007e4a:	4b2c      	ldr	r3, [pc, #176]	; (8007efc <ai_platform_network_init+0x2c0>)
 8007e4c:	492c      	ldr	r1, [pc, #176]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007e4e:	4a2d      	ldr	r2, [pc, #180]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	f43f af7a 	beq.w	8007d4e <ai_platform_network_init+0x112>
 8007e5a:	e7fe      	b.n	8007e5a <ai_platform_network_init+0x21e>
 8007e5c:	4b2a      	ldr	r3, [pc, #168]	; (8007f08 <ai_platform_network_init+0x2cc>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	680b      	ldr	r3, [r1, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1fc      	bne.n	8007e64 <ai_platform_network_init+0x228>
 8007e6a:	4b28      	ldr	r3, [pc, #160]	; (8007f0c <ai_platform_network_init+0x2d0>)
 8007e6c:	4924      	ldr	r1, [pc, #144]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007e6e:	4a25      	ldr	r2, [pc, #148]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007e70:	6019      	str	r1, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	f43f af6a 	beq.w	8007d4e <ai_platform_network_init+0x112>
 8007e7a:	e7fe      	b.n	8007e7a <ai_platform_network_init+0x23e>
 8007e7c:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <ai_platform_network_init+0x2cc>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4619      	mov	r1, r3
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	680b      	ldr	r3, [r1, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1fc      	bne.n	8007e84 <ai_platform_network_init+0x248>
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <ai_platform_network_init+0x2d0>)
 8007e8c:	491c      	ldr	r1, [pc, #112]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007e8e:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007e90:	6019      	str	r1, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	f43f af5a 	beq.w	8007d4e <ai_platform_network_init+0x112>
 8007e9a:	e7fe      	b.n	8007e9a <ai_platform_network_init+0x25e>
 8007e9c:	2e00      	cmp	r6, #0
 8007e9e:	d09c      	beq.n	8007dda <ai_platform_network_init+0x19e>
 8007ea0:	2601      	movs	r6, #1
 8007ea2:	e76d      	b.n	8007d80 <ai_platform_network_init+0x144>
 8007ea4:	f104 0010 	add.w	r0, r4, #16
 8007ea8:	2212      	movs	r2, #18
 8007eaa:	2110      	movs	r1, #16
 8007eac:	f001 f994 	bl	80091d8 <core_set_error>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	e711      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007eb4:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <ai_platform_network_init+0x2bc>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4619      	mov	r1, r3
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	680b      	ldr	r3, [r1, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1fc      	bne.n	8007ebc <ai_platform_network_init+0x280>
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <ai_platform_network_init+0x2c0>)
 8007ec4:	490e      	ldr	r1, [pc, #56]	; (8007f00 <ai_platform_network_init+0x2c4>)
 8007ec6:	4a0f      	ldr	r2, [pc, #60]	; (8007f04 <ai_platform_network_init+0x2c8>)
 8007ec8:	6019      	str	r1, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	f43f aeea 	beq.w	8007ca6 <ai_platform_network_init+0x6a>
 8007ed2:	e7fe      	b.n	8007ed2 <ai_platform_network_init+0x296>
 8007ed4:	f104 0010 	add.w	r0, r4, #16
 8007ed8:	2211      	movs	r2, #17
 8007eda:	2110      	movs	r1, #16
 8007edc:	f001 f97c 	bl	80091d8 <core_set_error>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	e6f9      	b.n	8007cd8 <ai_platform_network_init+0x9c>
 8007ee4:	a1c00100 	.word	0xa1c00100
 8007ee8:	e0002000 	.word	0xe0002000
 8007eec:	e0042000 	.word	0xe0042000
 8007ef0:	5c001000 	.word	0x5c001000
 8007ef4:	a1facade 	.word	0xa1facade
 8007ef8:	40023008 	.word	0x40023008
 8007efc:	40023000 	.word	0x40023000
 8007f00:	f407a5c2 	.word	0xf407a5c2
 8007f04:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f08:	58024c08 	.word	0x58024c08
 8007f0c:	58024c00 	.word	0x58024c00
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <ai_platform_network_init+0x314>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	4619      	mov	r1, r3
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	680b      	ldr	r3, [r1, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1fc      	bne.n	8007f18 <ai_platform_network_init+0x2dc>
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <ai_platform_network_init+0x318>)
 8007f20:	490d      	ldr	r1, [pc, #52]	; (8007f58 <ai_platform_network_init+0x31c>)
 8007f22:	4a0e      	ldr	r2, [pc, #56]	; (8007f5c <ai_platform_network_init+0x320>)
 8007f24:	6019      	str	r1, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f43f aebc 	beq.w	8007ca6 <ai_platform_network_init+0x6a>
 8007f2e:	e7fe      	b.n	8007f2e <ai_platform_network_init+0x2f2>
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <ai_platform_network_init+0x314>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	4619      	mov	r1, r3
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	680b      	ldr	r3, [r1, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1fc      	bne.n	8007f38 <ai_platform_network_init+0x2fc>
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <ai_platform_network_init+0x318>)
 8007f40:	4905      	ldr	r1, [pc, #20]	; (8007f58 <ai_platform_network_init+0x31c>)
 8007f42:	4a06      	ldr	r2, [pc, #24]	; (8007f5c <ai_platform_network_init+0x320>)
 8007f44:	6019      	str	r1, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	f43f aeac 	beq.w	8007ca6 <ai_platform_network_init+0x6a>
 8007f4e:	e7fe      	b.n	8007f4e <ai_platform_network_init+0x312>
 8007f50:	58024c08 	.word	0x58024c08
 8007f54:	58024c00 	.word	0x58024c00
 8007f58:	f407a5c2 	.word	0xf407a5c2
 8007f5c:	b5e8b5cd 	.word	0xb5e8b5cd

08007f60 <ai_platform_network_post_init>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	b120      	cbz	r0, 8007f6e <ai_platform_network_post_init+0xe>
 8007f64:	4b7f      	ldr	r3, [pc, #508]	; (8008164 <ai_platform_network_post_init+0x204>)
 8007f66:	4604      	mov	r4, r0
 8007f68:	6802      	ldr	r2, [r0, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d03c      	beq.n	8007fe8 <ai_platform_network_post_init+0x88>
 8007f6e:	4a7e      	ldr	r2, [pc, #504]	; (8008168 <ai_platform_network_post_init+0x208>)
 8007f70:	6813      	ldr	r3, [r2, #0]
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	f7fe fb24 	bl	80065c4 <_ai_platform_acquire_crc>
 8007f7c:	4b7b      	ldr	r3, [pc, #492]	; (800816c <ai_platform_network_post_init+0x20c>)
 8007f7e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f88:	185a      	adds	r2, r3, r1
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	d91d      	bls.n	8007fca <ai_platform_network_post_init+0x6a>
 8007f8e:	f240 4249 	movw	r2, #1097	; 0x449
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d019      	beq.n	8007fca <ai_platform_network_post_init+0x6a>
 8007f96:	4b76      	ldr	r3, [pc, #472]	; (8008170 <ai_platform_network_post_init+0x210>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007f9e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007fa2:	f000 80a7 	beq.w	80080f4 <ai_platform_network_post_init+0x194>
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	f240 4183 	movw	r1, #1155	; 0x483
 8007fac:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007fb0:	428a      	cmp	r2, r1
 8007fb2:	f000 808f 	beq.w	80080d4 <ai_platform_network_post_init+0x174>
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007fc0:	d05b      	beq.n	800807a <ai_platform_network_post_init+0x11a>
 8007fc2:	f7fe fb01 	bl	80065c8 <_ai_platform_release_crc>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	4b6a      	ldr	r3, [pc, #424]	; (8008174 <ai_platform_network_post_init+0x214>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4619      	mov	r1, r3
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	680b      	ldr	r3, [r1, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1fc      	bne.n	8007fd2 <ai_platform_network_post_init+0x72>
 8007fd8:	4b67      	ldr	r3, [pc, #412]	; (8008178 <ai_platform_network_post_init+0x218>)
 8007fda:	4968      	ldr	r1, [pc, #416]	; (800817c <ai_platform_network_post_init+0x21c>)
 8007fdc:	4a68      	ldr	r2, [pc, #416]	; (8008180 <ai_platform_network_post_init+0x220>)
 8007fde:	6019      	str	r1, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d0ed      	beq.n	8007fc2 <ai_platform_network_post_init+0x62>
 8007fe6:	e7fe      	b.n	8007fe6 <ai_platform_network_post_init+0x86>
 8007fe8:	4a5f      	ldr	r2, [pc, #380]	; (8008168 <ai_platform_network_post_init+0x208>)
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	f7fe fae7 	bl	80065c4 <_ai_platform_acquire_crc>
 8007ff6:	4b5d      	ldr	r3, [pc, #372]	; (800816c <ai_platform_network_post_init+0x20c>)
 8007ff8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008002:	189a      	adds	r2, r3, r2
 8008004:	2a01      	cmp	r2, #1
 8008006:	d956      	bls.n	80080b6 <ai_platform_network_post_init+0x156>
 8008008:	f240 4249 	movw	r2, #1097	; 0x449
 800800c:	4293      	cmp	r3, r2
 800800e:	d052      	beq.n	80080b6 <ai_platform_network_post_init+0x156>
 8008010:	4b57      	ldr	r3, [pc, #348]	; (8008170 <ai_platform_network_post_init+0x210>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008018:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800801c:	d03c      	beq.n	8008098 <ai_platform_network_post_init+0x138>
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	f240 4183 	movw	r1, #1155	; 0x483
 8008024:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008028:	428a      	cmp	r2, r1
 800802a:	f000 8082 	beq.w	8008132 <ai_platform_network_post_init+0x1d2>
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008034:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008038:	d06c      	beq.n	8008114 <ai_platform_network_post_init+0x1b4>
 800803a:	f7fe fac5 	bl	80065c8 <_ai_platform_release_crc>
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	f013 0502 	ands.w	r5, r3, #2
 8008044:	f000 8085 	beq.w	8008152 <ai_platform_network_post_init+0x1f2>
 8008048:	4620      	mov	r0, r4
 800804a:	f003 fd3b 	bl	800bac4 <ai_layers_post_init_all>
 800804e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008050:	b18b      	cbz	r3, 8008076 <ai_platform_network_post_init+0x116>
 8008052:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008054:	b90d      	cbnz	r5, 800805a <ai_platform_network_post_init+0xfa>
 8008056:	e00e      	b.n	8008076 <ai_platform_network_post_init+0x116>
 8008058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800805a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800805c:	4629      	mov	r1, r5
 800805e:	2000      	movs	r0, #0
 8008060:	4798      	blx	r3
 8008062:	692a      	ldr	r2, [r5, #16]
 8008064:	1b53      	subs	r3, r2, r5
 8008066:	4615      	mov	r5, r2
 8008068:	bf18      	it	ne
 800806a:	2301      	movne	r3, #1
 800806c:	2a00      	cmp	r2, #0
 800806e:	bf08      	it	eq
 8008070:	2300      	moveq	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f0      	bne.n	8008058 <ai_platform_network_post_init+0xf8>
 8008076:	2001      	movs	r0, #1
 8008078:	bd38      	pop	{r3, r4, r5, pc}
 800807a:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <ai_platform_network_post_init+0x214>)
 800807c:	2201      	movs	r2, #1
 800807e:	4619      	mov	r1, r3
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	680b      	ldr	r3, [r1, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1fc      	bne.n	8008082 <ai_platform_network_post_init+0x122>
 8008088:	4b3b      	ldr	r3, [pc, #236]	; (8008178 <ai_platform_network_post_init+0x218>)
 800808a:	493c      	ldr	r1, [pc, #240]	; (800817c <ai_platform_network_post_init+0x21c>)
 800808c:	4a3c      	ldr	r2, [pc, #240]	; (8008180 <ai_platform_network_post_init+0x220>)
 800808e:	6019      	str	r1, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4293      	cmp	r3, r2
 8008094:	d095      	beq.n	8007fc2 <ai_platform_network_post_init+0x62>
 8008096:	e7fe      	b.n	8008096 <ai_platform_network_post_init+0x136>
 8008098:	4b3a      	ldr	r3, [pc, #232]	; (8008184 <ai_platform_network_post_init+0x224>)
 800809a:	2201      	movs	r2, #1
 800809c:	4619      	mov	r1, r3
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	680b      	ldr	r3, [r1, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1fc      	bne.n	80080a0 <ai_platform_network_post_init+0x140>
 80080a6:	4b38      	ldr	r3, [pc, #224]	; (8008188 <ai_platform_network_post_init+0x228>)
 80080a8:	4934      	ldr	r1, [pc, #208]	; (800817c <ai_platform_network_post_init+0x21c>)
 80080aa:	4a35      	ldr	r2, [pc, #212]	; (8008180 <ai_platform_network_post_init+0x220>)
 80080ac:	6019      	str	r1, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d0c2      	beq.n	800803a <ai_platform_network_post_init+0xda>
 80080b4:	e7fe      	b.n	80080b4 <ai_platform_network_post_init+0x154>
 80080b6:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <ai_platform_network_post_init+0x214>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	4619      	mov	r1, r3
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	680b      	ldr	r3, [r1, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1fc      	bne.n	80080be <ai_platform_network_post_init+0x15e>
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <ai_platform_network_post_init+0x218>)
 80080c6:	492d      	ldr	r1, [pc, #180]	; (800817c <ai_platform_network_post_init+0x21c>)
 80080c8:	4a2d      	ldr	r2, [pc, #180]	; (8008180 <ai_platform_network_post_init+0x220>)
 80080ca:	6019      	str	r1, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d0b3      	beq.n	800803a <ai_platform_network_post_init+0xda>
 80080d2:	e7fe      	b.n	80080d2 <ai_platform_network_post_init+0x172>
 80080d4:	4b2b      	ldr	r3, [pc, #172]	; (8008184 <ai_platform_network_post_init+0x224>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	4619      	mov	r1, r3
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	680b      	ldr	r3, [r1, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1fc      	bne.n	80080dc <ai_platform_network_post_init+0x17c>
 80080e2:	4b29      	ldr	r3, [pc, #164]	; (8008188 <ai_platform_network_post_init+0x228>)
 80080e4:	4925      	ldr	r1, [pc, #148]	; (800817c <ai_platform_network_post_init+0x21c>)
 80080e6:	4a26      	ldr	r2, [pc, #152]	; (8008180 <ai_platform_network_post_init+0x220>)
 80080e8:	6019      	str	r1, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f43f af68 	beq.w	8007fc2 <ai_platform_network_post_init+0x62>
 80080f2:	e7fe      	b.n	80080f2 <ai_platform_network_post_init+0x192>
 80080f4:	4b23      	ldr	r3, [pc, #140]	; (8008184 <ai_platform_network_post_init+0x224>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	4619      	mov	r1, r3
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	680b      	ldr	r3, [r1, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1fc      	bne.n	80080fc <ai_platform_network_post_init+0x19c>
 8008102:	4b21      	ldr	r3, [pc, #132]	; (8008188 <ai_platform_network_post_init+0x228>)
 8008104:	491d      	ldr	r1, [pc, #116]	; (800817c <ai_platform_network_post_init+0x21c>)
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <ai_platform_network_post_init+0x220>)
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4293      	cmp	r3, r2
 800810e:	f43f af58 	beq.w	8007fc2 <ai_platform_network_post_init+0x62>
 8008112:	e7fe      	b.n	8008112 <ai_platform_network_post_init+0x1b2>
 8008114:	4b17      	ldr	r3, [pc, #92]	; (8008174 <ai_platform_network_post_init+0x214>)
 8008116:	2201      	movs	r2, #1
 8008118:	4619      	mov	r1, r3
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	680b      	ldr	r3, [r1, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1fc      	bne.n	800811c <ai_platform_network_post_init+0x1bc>
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <ai_platform_network_post_init+0x218>)
 8008124:	4915      	ldr	r1, [pc, #84]	; (800817c <ai_platform_network_post_init+0x21c>)
 8008126:	4a16      	ldr	r2, [pc, #88]	; (8008180 <ai_platform_network_post_init+0x220>)
 8008128:	6019      	str	r1, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4293      	cmp	r3, r2
 800812e:	d084      	beq.n	800803a <ai_platform_network_post_init+0xda>
 8008130:	e7fe      	b.n	8008130 <ai_platform_network_post_init+0x1d0>
 8008132:	4b14      	ldr	r3, [pc, #80]	; (8008184 <ai_platform_network_post_init+0x224>)
 8008134:	2201      	movs	r2, #1
 8008136:	4619      	mov	r1, r3
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	680b      	ldr	r3, [r1, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1fc      	bne.n	800813a <ai_platform_network_post_init+0x1da>
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <ai_platform_network_post_init+0x228>)
 8008142:	490e      	ldr	r1, [pc, #56]	; (800817c <ai_platform_network_post_init+0x21c>)
 8008144:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <ai_platform_network_post_init+0x220>)
 8008146:	6019      	str	r1, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4293      	cmp	r3, r2
 800814c:	f43f af75 	beq.w	800803a <ai_platform_network_post_init+0xda>
 8008150:	e7fe      	b.n	8008150 <ai_platform_network_post_init+0x1f0>
 8008152:	f104 0010 	add.w	r0, r4, #16
 8008156:	2210      	movs	r2, #16
 8008158:	2111      	movs	r1, #17
 800815a:	f001 f83d 	bl	80091d8 <core_set_error>
 800815e:	4628      	mov	r0, r5
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	a1c00100 	.word	0xa1c00100
 8008168:	e0002000 	.word	0xe0002000
 800816c:	e0042000 	.word	0xe0042000
 8008170:	5c001000 	.word	0x5c001000
 8008174:	40023008 	.word	0x40023008
 8008178:	40023000 	.word	0x40023000
 800817c:	f407a5c2 	.word	0xf407a5c2
 8008180:	b5e8b5cd 	.word	0xb5e8b5cd
 8008184:	58024c08 	.word	0x58024c08
 8008188:	58024c00 	.word	0x58024c00

0800818c <ai_platform_network_process>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	460f      	mov	r7, r1
 8008192:	b083      	sub	sp, #12
 8008194:	4615      	mov	r5, r2
 8008196:	4604      	mov	r4, r0
 8008198:	b120      	cbz	r0, 80081a4 <ai_platform_network_process+0x18>
 800819a:	4ba8      	ldr	r3, [pc, #672]	; (800843c <ai_platform_network_process+0x2b0>)
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf18      	it	ne
 80081a2:	2400      	movne	r4, #0
 80081a4:	4aa6      	ldr	r2, [pc, #664]	; (8008440 <ai_platform_network_process+0x2b4>)
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	f7fe fa09 	bl	80065c4 <_ai_platform_acquire_crc>
 80081b2:	4ba4      	ldr	r3, [pc, #656]	; (8008444 <ai_platform_network_process+0x2b8>)
 80081b4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081be:	185a      	adds	r2, r3, r1
 80081c0:	2a01      	cmp	r2, #1
 80081c2:	f240 80d3 	bls.w	800836c <ai_platform_network_process+0x1e0>
 80081c6:	f240 4249 	movw	r2, #1097	; 0x449
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f000 80ce 	beq.w	800836c <ai_platform_network_process+0x1e0>
 80081d0:	4b9d      	ldr	r3, [pc, #628]	; (8008448 <ai_platform_network_process+0x2bc>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80081d8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80081dc:	f000 80e4 	beq.w	80083a8 <ai_platform_network_process+0x21c>
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f240 4183 	movw	r1, #1155	; 0x483
 80081e6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80081ea:	428a      	cmp	r2, r1
 80081ec:	f000 8104 	beq.w	80083f8 <ai_platform_network_process+0x26c>
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081f6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80081fa:	f000 80ed 	beq.w	80083d8 <ai_platform_network_process+0x24c>
 80081fe:	f7fe f9e3 	bl	80065c8 <_ai_platform_release_crc>
 8008202:	2c00      	cmp	r4, #0
 8008204:	f000 80cb 	beq.w	800839e <ai_platform_network_process+0x212>
 8008208:	68e2      	ldr	r2, [r4, #12]
 800820a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800820c:	f002 0203 	and.w	r2, r2, #3
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80bb 	beq.w	800838c <ai_platform_network_process+0x200>
 8008216:	2100      	movs	r1, #0
 8008218:	2a03      	cmp	r2, #3
 800821a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800821e:	6161      	str	r1, [r4, #20]
 8008220:	f040 80b7 	bne.w	8008392 <ai_platform_network_process+0x206>
 8008224:	2f00      	cmp	r7, #0
 8008226:	f000 80cf 	beq.w	80083c8 <ai_platform_network_process+0x23c>
 800822a:	faba f28a 	clz	r2, sl
 800822e:	0952      	lsrs	r2, r2, #5
 8008230:	2a00      	cmp	r2, #0
 8008232:	f040 80c9 	bne.w	80083c8 <ai_platform_network_process+0x23c>
 8008236:	f8ba 1000 	ldrh.w	r1, [sl]
 800823a:	2900      	cmp	r1, #0
 800823c:	f000 80c4 	beq.w	80083c8 <ai_platform_network_process+0x23c>
 8008240:	69b8      	ldr	r0, [r7, #24]
 8008242:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008246:	6806      	ldr	r6, [r0, #0]
 8008248:	2900      	cmp	r1, #0
 800824a:	f000 810c 	beq.w	8008466 <ai_platform_network_process+0x2da>
 800824e:	f8d1 9000 	ldr.w	r9, [r1]
 8008252:	f1b9 0f00 	cmp.w	r9, #0
 8008256:	f000 8106 	beq.w	8008466 <ai_platform_network_process+0x2da>
 800825a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800825e:	4690      	mov	r8, r2
 8008260:	f8d3 b000 	ldr.w	fp, [r3]
 8008264:	f1bb 0f00 	cmp.w	fp, #0
 8008268:	d16d      	bne.n	8008346 <ai_platform_network_process+0x1ba>
 800826a:	e0ad      	b.n	80083c8 <ai_platform_network_process+0x23c>
 800826c:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	68c2      	ldr	r2, [r0, #12]
 8008274:	68cb      	ldr	r3, [r1, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d170      	bne.n	800835c <ai_platform_network_process+0x1d0>
 800827a:	6882      	ldr	r2, [r0, #8]
 800827c:	688b      	ldr	r3, [r1, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d16c      	bne.n	800835c <ai_platform_network_process+0x1d0>
 8008282:	6842      	ldr	r2, [r0, #4]
 8008284:	684b      	ldr	r3, [r1, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d168      	bne.n	800835c <ai_platform_network_process+0x1d0>
 800828a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800828e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008292:	f008 fd97 	bl	8010dc4 <ai_array_get_data_byte_size>
 8008296:	9000      	str	r0, [sp, #0]
 8008298:	4648      	mov	r0, r9
 800829a:	f008 fd25 	bl	8010ce8 <get_tensor_byte_size>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	4283      	cmp	r3, r0
 80082a2:	d35b      	bcc.n	800835c <ai_platform_network_process+0x1d0>
 80082a4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f008 fd35 	bl	8010d18 <ai_array_to_buffer_fmt>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	4043      	eors	r3, r0
 80082b2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80082b6:	f040 823c 	bne.w	8008732 <ai_platform_network_process+0x5a6>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80b4 	beq.w	800842a <ai_platform_network_process+0x29e>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80a6 	beq.w	8008418 <ai_platform_network_process+0x28c>
 80082cc:	429e      	cmp	r6, r3
 80082ce:	4648      	mov	r0, r9
 80082d0:	bf38      	it	cc
 80082d2:	461e      	movcc	r6, r3
 80082d4:	f008 fd08 	bl	8010ce8 <get_tensor_byte_size>
 80082d8:	f8cb 0008 	str.w	r0, [fp, #8]
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	fb02 f200 	mul.w	r2, r2, r0
 80082e4:	f8cb 200c 	str.w	r2, [fp, #12]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f8cb 0004 	str.w	r0, [fp, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	f8cb 3000 	str.w	r3, [fp]
 80082f6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80082fa:	680b      	ldr	r3, [r1, #0]
 80082fc:	009a      	lsls	r2, r3, #2
 80082fe:	d409      	bmi.n	8008314 <ai_platform_network_process+0x188>
 8008300:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	4418      	add	r0, r3
 8008308:	6088      	str	r0, [r1, #8]
 800830a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800830e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	f108 0801 	add.w	r8, r8, #1
 8008318:	f8ba 3000 	ldrh.w	r3, [sl]
 800831c:	4598      	cmp	r8, r3
 800831e:	f080 80a1 	bcs.w	8008464 <ai_platform_network_process+0x2d8>
 8008322:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 809c 	beq.w	8008464 <ai_platform_network_process+0x2d8>
 800832c:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 8008330:	f1b9 0f00 	cmp.w	r9, #0
 8008334:	f000 8096 	beq.w	8008464 <ai_platform_network_process+0x2d8>
 8008338:	f8da 3008 	ldr.w	r3, [sl, #8]
 800833c:	371c      	adds	r7, #28
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 8008344:	d040      	beq.n	80083c8 <ai_platform_network_process+0x23c>
 8008346:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800834a:	2101      	movs	r1, #1
 800834c:	4638      	mov	r0, r7
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	f7fe f859 	bl	8006408 <ai_buffer_get_size>
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	4283      	cmp	r3, r0
 800835a:	d287      	bcs.n	800826c <ai_platform_network_process+0xe0>
 800835c:	f104 0010 	add.w	r0, r4, #16
 8008360:	2218      	movs	r2, #24
 8008362:	2112      	movs	r1, #18
 8008364:	f000 ff38 	bl	80091d8 <core_set_error>
 8008368:	2300      	movs	r3, #0
 800836a:	e019      	b.n	80083a0 <ai_platform_network_process+0x214>
 800836c:	4b37      	ldr	r3, [pc, #220]	; (800844c <ai_platform_network_process+0x2c0>)
 800836e:	2201      	movs	r2, #1
 8008370:	4619      	mov	r1, r3
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	680b      	ldr	r3, [r1, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1fc      	bne.n	8008374 <ai_platform_network_process+0x1e8>
 800837a:	4b35      	ldr	r3, [pc, #212]	; (8008450 <ai_platform_network_process+0x2c4>)
 800837c:	4935      	ldr	r1, [pc, #212]	; (8008454 <ai_platform_network_process+0x2c8>)
 800837e:	4a36      	ldr	r2, [pc, #216]	; (8008458 <ai_platform_network_process+0x2cc>)
 8008380:	6019      	str	r1, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4293      	cmp	r3, r2
 8008386:	f43f af3a 	beq.w	80081fe <ai_platform_network_process+0x72>
 800838a:	e7fe      	b.n	800838a <ai_platform_network_process+0x1fe>
 800838c:	2a03      	cmp	r2, #3
 800838e:	6163      	str	r3, [r4, #20]
 8008390:	d01a      	beq.n	80083c8 <ai_platform_network_process+0x23c>
 8008392:	f104 0010 	add.w	r0, r4, #16
 8008396:	2230      	movs	r2, #48	; 0x30
 8008398:	2111      	movs	r1, #17
 800839a:	f000 ff1d 	bl	80091d8 <core_set_error>
 800839e:	2300      	movs	r3, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	b003      	add	sp, #12
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	4b2c      	ldr	r3, [pc, #176]	; (800845c <ai_platform_network_process+0x2d0>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	4619      	mov	r1, r3
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	680b      	ldr	r3, [r1, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1fc      	bne.n	80083b0 <ai_platform_network_process+0x224>
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <ai_platform_network_process+0x2d4>)
 80083b8:	4926      	ldr	r1, [pc, #152]	; (8008454 <ai_platform_network_process+0x2c8>)
 80083ba:	4a27      	ldr	r2, [pc, #156]	; (8008458 <ai_platform_network_process+0x2cc>)
 80083bc:	6019      	str	r1, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	f43f af1c 	beq.w	80081fe <ai_platform_network_process+0x72>
 80083c6:	e7fe      	b.n	80083c6 <ai_platform_network_process+0x23a>
 80083c8:	f104 0010 	add.w	r0, r4, #16
 80083cc:	2217      	movs	r2, #23
 80083ce:	2112      	movs	r1, #18
 80083d0:	f000 ff02 	bl	80091d8 <core_set_error>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e7e3      	b.n	80083a0 <ai_platform_network_process+0x214>
 80083d8:	4b1c      	ldr	r3, [pc, #112]	; (800844c <ai_platform_network_process+0x2c0>)
 80083da:	2201      	movs	r2, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	680b      	ldr	r3, [r1, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1fc      	bne.n	80083e0 <ai_platform_network_process+0x254>
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <ai_platform_network_process+0x2c4>)
 80083e8:	491a      	ldr	r1, [pc, #104]	; (8008454 <ai_platform_network_process+0x2c8>)
 80083ea:	4a1b      	ldr	r2, [pc, #108]	; (8008458 <ai_platform_network_process+0x2cc>)
 80083ec:	6019      	str	r1, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f43f af04 	beq.w	80081fe <ai_platform_network_process+0x72>
 80083f6:	e7fe      	b.n	80083f6 <ai_platform_network_process+0x26a>
 80083f8:	4b18      	ldr	r3, [pc, #96]	; (800845c <ai_platform_network_process+0x2d0>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	4619      	mov	r1, r3
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	680b      	ldr	r3, [r1, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1fc      	bne.n	8008400 <ai_platform_network_process+0x274>
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <ai_platform_network_process+0x2d4>)
 8008408:	4912      	ldr	r1, [pc, #72]	; (8008454 <ai_platform_network_process+0x2c8>)
 800840a:	4a13      	ldr	r2, [pc, #76]	; (8008458 <ai_platform_network_process+0x2cc>)
 800840c:	6019      	str	r1, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4293      	cmp	r3, r2
 8008412:	f43f aef4 	beq.w	80081fe <ai_platform_network_process+0x72>
 8008416:	e7fe      	b.n	8008416 <ai_platform_network_process+0x28a>
 8008418:	f104 0010 	add.w	r0, r4, #16
 800841c:	2221      	movs	r2, #33	; 0x21
 800841e:	2112      	movs	r1, #18
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	f000 fed9 	bl	80091d8 <core_set_error>
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	e7ba      	b.n	80083a0 <ai_platform_network_process+0x214>
 800842a:	f104 0010 	add.w	r0, r4, #16
 800842e:	2217      	movs	r2, #23
 8008430:	2112      	movs	r1, #18
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	f000 fed0 	bl	80091d8 <core_set_error>
 8008438:	9b00      	ldr	r3, [sp, #0]
 800843a:	e7b1      	b.n	80083a0 <ai_platform_network_process+0x214>
 800843c:	a1c00100 	.word	0xa1c00100
 8008440:	e0002000 	.word	0xe0002000
 8008444:	e0042000 	.word	0xe0042000
 8008448:	5c001000 	.word	0x5c001000
 800844c:	40023008 	.word	0x40023008
 8008450:	40023000 	.word	0x40023000
 8008454:	f407a5c2 	.word	0xf407a5c2
 8008458:	b5e8b5cd 	.word	0xb5e8b5cd
 800845c:	58024c08 	.word	0x58024c08
 8008460:	58024c00 	.word	0x58024c00
 8008464:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008466:	2d00      	cmp	r5, #0
 8008468:	f000 80ad 	beq.w	80085c6 <ai_platform_network_process+0x43a>
 800846c:	2b01      	cmp	r3, #1
 800846e:	f240 8158 	bls.w	8008722 <ai_platform_network_process+0x596>
 8008472:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8008476:	f119 0f0c 	cmn.w	r9, #12
 800847a:	f000 8152 	beq.w	8008722 <ai_platform_network_process+0x596>
 800847e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 814d 	beq.w	8008722 <ai_platform_network_process+0x596>
 8008488:	f04f 0800 	mov.w	r8, #0
 800848c:	4598      	cmp	r8, r3
 800848e:	f080 8099 	bcs.w	80085c4 <ai_platform_network_process+0x438>
 8008492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8094 	beq.w	80085c4 <ai_platform_network_process+0x438>
 800849c:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 80084a0:	f1bb 0f00 	cmp.w	fp, #0
 80084a4:	f000 808e 	beq.w	80085c4 <ai_platform_network_process+0x438>
 80084a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80084ac:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	eb13 070a 	adds.w	r7, r3, sl
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	d07c      	beq.n	80085b4 <ai_platform_network_process+0x428>
 80084ba:	f8db 3018 	ldr.w	r3, [fp, #24]
 80084be:	2101      	movs	r1, #1
 80084c0:	4628      	mov	r0, r5
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f7fd ff9f 	bl	8006408 <ai_buffer_get_size>
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	4283      	cmp	r3, r0
 80084ce:	f0c0 8128 	bcc.w	8008722 <ai_platform_network_process+0x596>
 80084d2:	f8db 000c 	ldr.w	r0, [fp, #12]
 80084d6:	69a9      	ldr	r1, [r5, #24]
 80084d8:	68c2      	ldr	r2, [r0, #12]
 80084da:	68cb      	ldr	r3, [r1, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f040 8120 	bne.w	8008722 <ai_platform_network_process+0x596>
 80084e2:	6882      	ldr	r2, [r0, #8]
 80084e4:	688b      	ldr	r3, [r1, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	f040 811b 	bne.w	8008722 <ai_platform_network_process+0x596>
 80084ec:	6842      	ldr	r2, [r0, #4]
 80084ee:	684b      	ldr	r3, [r1, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	f040 8116 	bne.w	8008722 <ai_platform_network_process+0x596>
 80084f6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80084fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084fe:	f008 fc61 	bl	8010dc4 <ai_array_get_data_byte_size>
 8008502:	9001      	str	r0, [sp, #4]
 8008504:	4658      	mov	r0, fp
 8008506:	f008 fbef 	bl	8010ce8 <get_tensor_byte_size>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	4283      	cmp	r3, r0
 800850e:	f0c0 8108 	bcc.w	8008722 <ai_platform_network_process+0x596>
 8008512:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	f008 fbfe 	bl	8010d18 <ai_array_to_buffer_fmt>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	4043      	eors	r3, r0
 8008520:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008524:	d13e      	bne.n	80085a4 <ai_platform_network_process+0x418>
 8008526:	686b      	ldr	r3, [r5, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d032      	beq.n	8008592 <ai_platform_network_process+0x406>
 800852c:	69ab      	ldr	r3, [r5, #24]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	b333      	cbz	r3, 8008580 <ai_platform_network_process+0x3f4>
 8008532:	429e      	cmp	r6, r3
 8008534:	4658      	mov	r0, fp
 8008536:	bf38      	it	cc
 8008538:	461e      	movcc	r6, r3
 800853a:	f008 fbd5 	bl	8010ce8 <get_tensor_byte_size>
 800853e:	60b8      	str	r0, [r7, #8]
 8008540:	69ab      	ldr	r3, [r5, #24]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	fb02 f200 	mul.w	r2, r2, r0
 8008548:	60fa      	str	r2, [r7, #12]
 800854a:	6868      	ldr	r0, [r5, #4]
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	686b      	ldr	r3, [r5, #4]
 8008550:	4413      	add	r3, r2
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	f842 300a 	str.w	r3, [r2, sl]
 8008558:	f8db 1018 	ldr.w	r1, [fp, #24]
 800855c:	680b      	ldr	r3, [r1, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	d408      	bmi.n	8008574 <ai_platform_network_process+0x3e8>
 8008562:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	4418      	add	r0, r3
 800856a:	6088      	str	r0, [r1, #8]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	f108 0801 	add.w	r8, r8, #1
 8008578:	351c      	adds	r5, #28
 800857a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800857e:	e785      	b.n	800848c <ai_platform_network_process+0x300>
 8008580:	f104 0010 	add.w	r0, r4, #16
 8008584:	2221      	movs	r2, #33	; 0x21
 8008586:	2113      	movs	r1, #19
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	f000 fe25 	bl	80091d8 <core_set_error>
 800858e:	9b00      	ldr	r3, [sp, #0]
 8008590:	e706      	b.n	80083a0 <ai_platform_network_process+0x214>
 8008592:	f104 0010 	add.w	r0, r4, #16
 8008596:	2217      	movs	r2, #23
 8008598:	2113      	movs	r1, #19
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	f000 fe1c 	bl	80091d8 <core_set_error>
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	e6fd      	b.n	80083a0 <ai_platform_network_process+0x214>
 80085a4:	f104 0010 	add.w	r0, r4, #16
 80085a8:	2219      	movs	r2, #25
 80085aa:	2113      	movs	r1, #19
 80085ac:	f000 fe14 	bl	80091d8 <core_set_error>
 80085b0:	2300      	movs	r3, #0
 80085b2:	e6f5      	b.n	80083a0 <ai_platform_network_process+0x214>
 80085b4:	f104 0010 	add.w	r0, r4, #16
 80085b8:	2217      	movs	r2, #23
 80085ba:	2113      	movs	r1, #19
 80085bc:	f000 fe0c 	bl	80091d8 <core_set_error>
 80085c0:	463b      	mov	r3, r7
 80085c2:	e6ed      	b.n	80083a0 <ai_platform_network_process+0x214>
 80085c4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80085c6:	82a6      	strh	r6, [r4, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80a5 	beq.w	8008718 <ai_platform_network_process+0x58c>
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80085d2:	f240 80a4 	bls.w	800871e <ai_platform_network_process+0x592>
 80085d6:	f105 070c 	add.w	r7, r5, #12
 80085da:	8ae3      	ldrh	r3, [r4, #22]
 80085dc:	8aa2      	ldrh	r2, [r4, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	f67f aede 	bls.w	80083a0 <ai_platform_network_process+0x214>
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d03a      	beq.n	800865e <ai_platform_network_process+0x4d2>
 80085e8:	882b      	ldrh	r3, [r5, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d037      	beq.n	800865e <ai_platform_network_process+0x4d2>
 80085ee:	686b      	ldr	r3, [r5, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d034      	beq.n	800865e <ai_platform_network_process+0x4d2>
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	d031      	beq.n	800865e <ai_platform_network_process+0x4d2>
 80085fa:	f04f 0800 	mov.w	r8, #0
 80085fe:	e01b      	b.n	8008638 <ai_platform_network_process+0x4ac>
 8008600:	68d9      	ldr	r1, [r3, #12]
 8008602:	1a40      	subs	r0, r0, r1
 8008604:	eb0c 0100 	add.w	r1, ip, r0
 8008608:	6099      	str	r1, [r3, #8]
 800860a:	6993      	ldr	r3, [r2, #24]
 800860c:	6872      	ldr	r2, [r6, #4]
 800860e:	60da      	str	r2, [r3, #12]
 8008610:	6873      	ldr	r3, [r6, #4]
 8008612:	f108 0801 	add.w	r8, r8, #1
 8008616:	68b1      	ldr	r1, [r6, #8]
 8008618:	f85a 2009 	ldr.w	r2, [sl, r9]
 800861c:	440b      	add	r3, r1
 800861e:	4293      	cmp	r3, r2
 8008620:	d301      	bcc.n	8008626 <ai_platform_network_process+0x49a>
 8008622:	68f3      	ldr	r3, [r6, #12]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	6073      	str	r3, [r6, #4]
 8008628:	882b      	ldrh	r3, [r5, #0]
 800862a:	4598      	cmp	r8, r3
 800862c:	d217      	bcs.n	800865e <ai_platform_network_process+0x4d2>
 800862e:	686b      	ldr	r3, [r5, #4]
 8008630:	b1ab      	cbz	r3, 800865e <ai_platform_network_process+0x4d2>
 8008632:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8008636:	b192      	cbz	r2, 800865e <ai_platform_network_process+0x4d2>
 8008638:	68a9      	ldr	r1, [r5, #8]
 800863a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800863e:	6993      	ldr	r3, [r2, #24]
 8008640:	f8d1 a000 	ldr.w	sl, [r1]
 8008644:	6819      	ldr	r1, [r3, #0]
 8008646:	eb0a 0609 	add.w	r6, sl, r9
 800864a:	6898      	ldr	r0, [r3, #8]
 800864c:	0089      	lsls	r1, r1, #2
 800864e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8008652:	d5d5      	bpl.n	8008600 <ai_platform_network_process+0x474>
 8008654:	4661      	mov	r1, ip
 8008656:	68b2      	ldr	r2, [r6, #8]
 8008658:	f008 feda 	bl	8011410 <memcpy>
 800865c:	e7d8      	b.n	8008610 <ai_platform_network_process+0x484>
 800865e:	4620      	mov	r0, r4
 8008660:	f003 fa46 	bl	800baf0 <ai_layers_forward_all>
 8008664:	2f00      	cmp	r7, #0
 8008666:	d04b      	beq.n	8008700 <ai_platform_network_process+0x574>
 8008668:	883b      	ldrh	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d048      	beq.n	8008700 <ai_platform_network_process+0x574>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d045      	beq.n	8008700 <ai_platform_network_process+0x574>
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	2800      	cmp	r0, #0
 8008678:	d042      	beq.n	8008700 <ai_platform_network_process+0x574>
 800867a:	f04f 0800 	mov.w	r8, #0
 800867e:	e01c      	b.n	80086ba <ai_platform_network_process+0x52e>
 8008680:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008684:	4596      	cmp	lr, r2
 8008686:	d302      	bcc.n	800868e <ai_platform_network_process+0x502>
 8008688:	68f3      	ldr	r3, [r6, #12]
 800868a:	eba2 0e03 	sub.w	lr, r2, r3
 800868e:	f8c6 e004 	str.w	lr, [r6, #4]
 8008692:	f108 0801 	add.w	r8, r8, #1
 8008696:	6981      	ldr	r1, [r0, #24]
 8008698:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800869c:	1ad2      	subs	r2, r2, r3
 800869e:	eb0e 0302 	add.w	r3, lr, r2
 80086a2:	608b      	str	r3, [r1, #8]
 80086a4:	6983      	ldr	r3, [r0, #24]
 80086a6:	6872      	ldr	r2, [r6, #4]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	883b      	ldrh	r3, [r7, #0]
 80086ac:	4598      	cmp	r8, r3
 80086ae:	d227      	bcs.n	8008700 <ai_platform_network_process+0x574>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	b32b      	cbz	r3, 8008700 <ai_platform_network_process+0x574>
 80086b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80086b8:	b310      	cbz	r0, 8008700 <ai_platform_network_process+0x574>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80086c0:	6981      	ldr	r1, [r0, #24]
 80086c2:	f8d3 a000 	ldr.w	sl, [r3]
 80086c6:	680b      	ldr	r3, [r1, #0]
 80086c8:	eb0a 0609 	add.w	r6, sl, r9
 80086cc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80086d0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80086d4:	eb0c 0e02 	add.w	lr, ip, r2
 80086d8:	d0d2      	beq.n	8008680 <ai_platform_network_process+0x4f4>
 80086da:	6889      	ldr	r1, [r1, #8]
 80086dc:	4660      	mov	r0, ip
 80086de:	f008 fe97 	bl	8011410 <memcpy>
 80086e2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80086e6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80086ea:	440b      	add	r3, r1
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d301      	bcc.n	80086f4 <ai_platform_network_process+0x568>
 80086f0:	68f3      	ldr	r3, [r6, #12]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	6073      	str	r3, [r6, #4]
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	883b      	ldrh	r3, [r7, #0]
 80086fc:	4598      	cmp	r8, r3
 80086fe:	d3d7      	bcc.n	80086b0 <ai_platform_network_process+0x524>
 8008700:	8ae3      	ldrh	r3, [r4, #22]
 8008702:	8aa2      	ldrh	r2, [r4, #20]
 8008704:	3301      	adds	r3, #1
 8008706:	b29b      	uxth	r3, r3
 8008708:	429a      	cmp	r2, r3
 800870a:	82e3      	strh	r3, [r4, #22]
 800870c:	f63f af6a 	bhi.w	80085e4 <ai_platform_network_process+0x458>
 8008710:	4618      	mov	r0, r3
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	461d      	mov	r5, r3
 800871a:	461f      	mov	r7, r3
 800871c:	e75d      	b.n	80085da <ai_platform_network_process+0x44e>
 800871e:	2700      	movs	r7, #0
 8008720:	e75b      	b.n	80085da <ai_platform_network_process+0x44e>
 8008722:	f104 0010 	add.w	r0, r4, #16
 8008726:	2218      	movs	r2, #24
 8008728:	2113      	movs	r1, #19
 800872a:	f000 fd55 	bl	80091d8 <core_set_error>
 800872e:	2300      	movs	r3, #0
 8008730:	e636      	b.n	80083a0 <ai_platform_network_process+0x214>
 8008732:	f104 0010 	add.w	r0, r4, #16
 8008736:	2219      	movs	r2, #25
 8008738:	2112      	movs	r1, #18
 800873a:	f000 fd4d 	bl	80091d8 <core_set_error>
 800873e:	2300      	movs	r3, #0
 8008740:	e62e      	b.n	80083a0 <ai_platform_network_process+0x214>
 8008742:	bf00      	nop

08008744 <ai_platform_observer_node_info>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	460d      	mov	r5, r1
 8008748:	4604      	mov	r4, r0
 800874a:	b120      	cbz	r0, 8008756 <ai_platform_observer_node_info+0x12>
 800874c:	4b60      	ldr	r3, [pc, #384]	; (80088d0 <ai_platform_observer_node_info+0x18c>)
 800874e:	6802      	ldr	r2, [r0, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	bf18      	it	ne
 8008754:	2400      	movne	r4, #0
 8008756:	4a5f      	ldr	r2, [pc, #380]	; (80088d4 <ai_platform_observer_node_info+0x190>)
 8008758:	6813      	ldr	r3, [r2, #0]
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f7fd ff30 	bl	80065c4 <_ai_platform_acquire_crc>
 8008764:	4b5c      	ldr	r3, [pc, #368]	; (80088d8 <ai_platform_observer_node_info+0x194>)
 8008766:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008770:	189a      	adds	r2, r3, r2
 8008772:	2a01      	cmp	r2, #1
 8008774:	d941      	bls.n	80087fa <ai_platform_observer_node_info+0xb6>
 8008776:	f240 4249 	movw	r2, #1097	; 0x449
 800877a:	4293      	cmp	r3, r2
 800877c:	d03d      	beq.n	80087fa <ai_platform_observer_node_info+0xb6>
 800877e:	4b57      	ldr	r3, [pc, #348]	; (80088dc <ai_platform_observer_node_info+0x198>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008786:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800878a:	d04d      	beq.n	8008828 <ai_platform_observer_node_info+0xe4>
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	f240 4183 	movw	r1, #1155	; 0x483
 8008792:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008796:	428a      	cmp	r2, r1
 8008798:	d07d      	beq.n	8008896 <ai_platform_observer_node_info+0x152>
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087a0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80087a4:	d068      	beq.n	8008878 <ai_platform_observer_node_info+0x134>
 80087a6:	f7fd ff0f 	bl	80065c8 <_ai_platform_release_crc>
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	d034      	beq.n	8008818 <ai_platform_observer_node_info+0xd4>
 80087ae:	fab5 f285 	clz	r2, r5
 80087b2:	0952      	lsrs	r2, r2, #5
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d12f      	bne.n	8008818 <ai_platform_observer_node_info+0xd4>
 80087b8:	68e3      	ldr	r3, [r4, #12]
 80087ba:	f013 0602 	ands.w	r6, r3, #2
 80087be:	d044      	beq.n	800884a <ai_platform_observer_node_info+0x106>
 80087c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087c2:	b193      	cbz	r3, 80087ea <ai_platform_observer_node_info+0xa6>
 80087c4:	8829      	ldrh	r1, [r5, #0]
 80087c6:	2900      	cmp	r1, #0
 80087c8:	d047      	beq.n	800885a <ai_platform_observer_node_info+0x116>
 80087ca:	6918      	ldr	r0, [r3, #16]
 80087cc:	b168      	cbz	r0, 80087ea <ai_platform_observer_node_info+0xa6>
 80087ce:	4283      	cmp	r3, r0
 80087d0:	d00b      	beq.n	80087ea <ai_platform_observer_node_info+0xa6>
 80087d2:	3901      	subs	r1, #1
 80087d4:	4603      	mov	r3, r0
 80087d6:	b289      	uxth	r1, r1
 80087d8:	4291      	cmp	r1, r2
 80087da:	f102 0201 	add.w	r2, r2, #1
 80087de:	d03c      	beq.n	800885a <ai_platform_observer_node_info+0x116>
 80087e0:	6918      	ldr	r0, [r3, #16]
 80087e2:	b110      	cbz	r0, 80087ea <ai_platform_observer_node_info+0xa6>
 80087e4:	4298      	cmp	r0, r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	d1f6      	bne.n	80087d8 <ai_platform_observer_node_info+0x94>
 80087ea:	2214      	movs	r2, #20
 80087ec:	f104 0010 	add.w	r0, r4, #16
 80087f0:	4611      	mov	r1, r2
 80087f2:	f000 fcf1 	bl	80091d8 <core_set_error>
 80087f6:	2000      	movs	r0, #0
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	4b39      	ldr	r3, [pc, #228]	; (80088e0 <ai_platform_observer_node_info+0x19c>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	4619      	mov	r1, r3
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	680b      	ldr	r3, [r1, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1fc      	bne.n	8008802 <ai_platform_observer_node_info+0xbe>
 8008808:	4b36      	ldr	r3, [pc, #216]	; (80088e4 <ai_platform_observer_node_info+0x1a0>)
 800880a:	4937      	ldr	r1, [pc, #220]	; (80088e8 <ai_platform_observer_node_info+0x1a4>)
 800880c:	4a37      	ldr	r2, [pc, #220]	; (80088ec <ai_platform_observer_node_info+0x1a8>)
 800880e:	6019      	str	r1, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4293      	cmp	r3, r2
 8008814:	d0c7      	beq.n	80087a6 <ai_platform_observer_node_info+0x62>
 8008816:	e7fe      	b.n	8008816 <ai_platform_observer_node_info+0xd2>
 8008818:	b1ac      	cbz	r4, 8008846 <ai_platform_observer_node_info+0x102>
 800881a:	2210      	movs	r2, #16
 800881c:	18a0      	adds	r0, r4, r2
 800881e:	4611      	mov	r1, r2
 8008820:	f000 fcda 	bl	80091d8 <core_set_error>
 8008824:	2000      	movs	r0, #0
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <ai_platform_observer_node_info+0x1ac>)
 800882a:	2201      	movs	r2, #1
 800882c:	4619      	mov	r1, r3
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1fc      	bne.n	8008830 <ai_platform_observer_node_info+0xec>
 8008836:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <ai_platform_observer_node_info+0x1b0>)
 8008838:	492b      	ldr	r1, [pc, #172]	; (80088e8 <ai_platform_observer_node_info+0x1a4>)
 800883a:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <ai_platform_observer_node_info+0x1a8>)
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4293      	cmp	r3, r2
 8008842:	d0b0      	beq.n	80087a6 <ai_platform_observer_node_info+0x62>
 8008844:	e7fe      	b.n	8008844 <ai_platform_observer_node_info+0x100>
 8008846:	4620      	mov	r0, r4
 8008848:	bd70      	pop	{r4, r5, r6, pc}
 800884a:	f104 0010 	add.w	r0, r4, #16
 800884e:	2210      	movs	r2, #16
 8008850:	2111      	movs	r1, #17
 8008852:	f000 fcc1 	bl	80091d8 <core_set_error>
 8008856:	4630      	mov	r0, r6
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	6999      	ldr	r1, [r3, #24]
 800885c:	f240 120f 	movw	r2, #271	; 0x10f
 8008860:	60e9      	str	r1, [r5, #12]
 8008862:	8819      	ldrh	r1, [r3, #0]
 8008864:	4291      	cmp	r1, r2
 8008866:	d026      	beq.n	80088b6 <ai_platform_observer_node_info+0x172>
 8008868:	8859      	ldrh	r1, [r3, #2]
 800886a:	2200      	movs	r2, #0
 800886c:	2001      	movs	r0, #1
 800886e:	80a9      	strh	r1, [r5, #4]
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	60aa      	str	r2, [r5, #8]
 8008874:	806b      	strh	r3, [r5, #2]
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <ai_platform_observer_node_info+0x19c>)
 800887a:	2201      	movs	r2, #1
 800887c:	4619      	mov	r1, r3
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1fc      	bne.n	8008880 <ai_platform_observer_node_info+0x13c>
 8008886:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <ai_platform_observer_node_info+0x1a0>)
 8008888:	4917      	ldr	r1, [pc, #92]	; (80088e8 <ai_platform_observer_node_info+0x1a4>)
 800888a:	4a18      	ldr	r2, [pc, #96]	; (80088ec <ai_platform_observer_node_info+0x1a8>)
 800888c:	6019      	str	r1, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4293      	cmp	r3, r2
 8008892:	d088      	beq.n	80087a6 <ai_platform_observer_node_info+0x62>
 8008894:	e7fe      	b.n	8008894 <ai_platform_observer_node_info+0x150>
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <ai_platform_observer_node_info+0x1ac>)
 8008898:	2201      	movs	r2, #1
 800889a:	4619      	mov	r1, r3
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	680b      	ldr	r3, [r1, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1fc      	bne.n	800889e <ai_platform_observer_node_info+0x15a>
 80088a4:	4b13      	ldr	r3, [pc, #76]	; (80088f4 <ai_platform_observer_node_info+0x1b0>)
 80088a6:	4910      	ldr	r1, [pc, #64]	; (80088e8 <ai_platform_observer_node_info+0x1a4>)
 80088a8:	4a10      	ldr	r2, [pc, #64]	; (80088ec <ai_platform_observer_node_info+0x1a8>)
 80088aa:	6019      	str	r1, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4293      	cmp	r3, r2
 80088b0:	f43f af79 	beq.w	80087a6 <ai_platform_observer_node_info+0x62>
 80088b4:	e7fe      	b.n	80088b4 <ai_platform_observer_node_info+0x170>
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	2001      	movs	r0, #1
 80088ba:	8853      	ldrh	r3, [r2, #2]
 80088bc:	80ab      	strh	r3, [r5, #4]
 80088be:	8813      	ldrh	r3, [r2, #0]
 80088c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c8:	806b      	strh	r3, [r5, #2]
 80088ca:	6993      	ldr	r3, [r2, #24]
 80088cc:	60ab      	str	r3, [r5, #8]
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	a1c00100 	.word	0xa1c00100
 80088d4:	e0002000 	.word	0xe0002000
 80088d8:	e0042000 	.word	0xe0042000
 80088dc:	5c001000 	.word	0x5c001000
 80088e0:	40023008 	.word	0x40023008
 80088e4:	40023000 	.word	0x40023000
 80088e8:	f407a5c2 	.word	0xf407a5c2
 80088ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80088f0:	58024c08 	.word	0x58024c08
 80088f4:	58024c00 	.word	0x58024c00

080088f8 <ai_platform_observer_register>:
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	b130      	cbz	r0, 800890c <ai_platform_observer_register+0x14>
 80088fe:	4617      	mov	r7, r2
 8008900:	461e      	mov	r6, r3
 8008902:	6802      	ldr	r2, [r0, #0]
 8008904:	4605      	mov	r5, r0
 8008906:	4b8d      	ldr	r3, [pc, #564]	; (8008b3c <ai_platform_observer_register+0x244>)
 8008908:	429a      	cmp	r2, r3
 800890a:	d03d      	beq.n	8008988 <ai_platform_observer_register+0x90>
 800890c:	4a8c      	ldr	r2, [pc, #560]	; (8008b40 <ai_platform_observer_register+0x248>)
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	f7fd fe55 	bl	80065c4 <_ai_platform_acquire_crc>
 800891a:	4b8a      	ldr	r3, [pc, #552]	; (8008b44 <ai_platform_observer_register+0x24c>)
 800891c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008926:	185a      	adds	r2, r3, r1
 8008928:	2a01      	cmp	r2, #1
 800892a:	d91e      	bls.n	800896a <ai_platform_observer_register+0x72>
 800892c:	f240 4249 	movw	r2, #1097	; 0x449
 8008930:	4293      	cmp	r3, r2
 8008932:	d01a      	beq.n	800896a <ai_platform_observer_register+0x72>
 8008934:	4b84      	ldr	r3, [pc, #528]	; (8008b48 <ai_platform_observer_register+0x250>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800893c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008940:	f000 80eb 	beq.w	8008b1a <ai_platform_observer_register+0x222>
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	f240 4183 	movw	r1, #1155	; 0x483
 800894a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800894e:	428a      	cmp	r2, r1
 8008950:	f000 80d3 	beq.w	8008afa <ai_platform_observer_register+0x202>
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800895a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800895e:	d04d      	beq.n	80089fc <ai_platform_observer_register+0x104>
 8008960:	f7fd fe32 	bl	80065c8 <_ai_platform_release_crc>
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896a:	4b78      	ldr	r3, [pc, #480]	; (8008b4c <ai_platform_observer_register+0x254>)
 800896c:	2201      	movs	r2, #1
 800896e:	4619      	mov	r1, r3
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	680b      	ldr	r3, [r1, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1fc      	bne.n	8008972 <ai_platform_observer_register+0x7a>
 8008978:	4b75      	ldr	r3, [pc, #468]	; (8008b50 <ai_platform_observer_register+0x258>)
 800897a:	4976      	ldr	r1, [pc, #472]	; (8008b54 <ai_platform_observer_register+0x25c>)
 800897c:	4a76      	ldr	r2, [pc, #472]	; (8008b58 <ai_platform_observer_register+0x260>)
 800897e:	6019      	str	r1, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4293      	cmp	r3, r2
 8008984:	d0ec      	beq.n	8008960 <ai_platform_observer_register+0x68>
 8008986:	e7fe      	b.n	8008986 <ai_platform_observer_register+0x8e>
 8008988:	4a6d      	ldr	r2, [pc, #436]	; (8008b40 <ai_platform_observer_register+0x248>)
 800898a:	4688      	mov	r8, r1
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	f023 0301 	bic.w	r3, r3, #1
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	f7fd fe16 	bl	80065c4 <_ai_platform_acquire_crc>
 8008998:	4b6a      	ldr	r3, [pc, #424]	; (8008b44 <ai_platform_observer_register+0x24c>)
 800899a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089a4:	189a      	adds	r2, r3, r2
 80089a6:	2a01      	cmp	r2, #1
 80089a8:	f240 8097 	bls.w	8008ada <ai_platform_observer_register+0x1e2>
 80089ac:	f240 4249 	movw	r2, #1097	; 0x449
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f000 8092 	beq.w	8008ada <ai_platform_observer_register+0x1e2>
 80089b6:	4b64      	ldr	r3, [pc, #400]	; (8008b48 <ai_platform_observer_register+0x250>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80089be:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80089c2:	d07b      	beq.n	8008abc <ai_platform_observer_register+0x1c4>
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	f240 4183 	movw	r1, #1155	; 0x483
 80089ca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80089ce:	428a      	cmp	r2, r1
 80089d0:	d065      	beq.n	8008a9e <ai_platform_observer_register+0x1a6>
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089d8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80089dc:	d050      	beq.n	8008a80 <ai_platform_observer_register+0x188>
 80089de:	f7fd fdf3 	bl	80065c8 <_ai_platform_release_crc>
 80089e2:	f8d5 9040 	ldr.w	r9, [r5, #64]	; 0x40
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	d016      	beq.n	8008a1a <ai_platform_observer_register+0x122>
 80089ec:	f105 0010 	add.w	r0, r5, #16
 80089f0:	2240      	movs	r2, #64	; 0x40
 80089f2:	2111      	movs	r1, #17
 80089f4:	f000 fbf0 	bl	80091d8 <core_set_error>
 80089f8:	2000      	movs	r0, #0
 80089fa:	e7b4      	b.n	8008966 <ai_platform_observer_register+0x6e>
 80089fc:	4b53      	ldr	r3, [pc, #332]	; (8008b4c <ai_platform_observer_register+0x254>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	4619      	mov	r1, r3
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	680b      	ldr	r3, [r1, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1fc      	bne.n	8008a04 <ai_platform_observer_register+0x10c>
 8008a0a:	4b51      	ldr	r3, [pc, #324]	; (8008b50 <ai_platform_observer_register+0x258>)
 8008a0c:	4951      	ldr	r1, [pc, #324]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008a0e:	4a52      	ldr	r2, [pc, #328]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d0a3      	beq.n	8008960 <ai_platform_observer_register+0x68>
 8008a18:	e7fe      	b.n	8008a18 <ai_platform_observer_register+0x120>
 8008a1a:	2014      	movs	r0, #20
 8008a1c:	f000 f99c 	bl	8008d58 <core_mem_alloc>
 8008a20:	4604      	mov	r4, r0
 8008a22:	b328      	cbz	r0, 8008a70 <ai_platform_observer_register+0x178>
 8008a24:	f8a0 900e 	strh.w	r9, [r0, #14]
 8008a28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008a2a:	b19b      	cbz	r3, 8008a54 <ai_platform_observer_register+0x15c>
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	81c2      	strh	r2, [r0, #14]
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	b17a      	cbz	r2, 8008a54 <ai_platform_observer_register+0x15c>
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00d      	beq.n	8008a54 <ai_platform_observer_register+0x15c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	81e3      	strh	r3, [r4, #14]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	6910      	ldr	r0, [r2, #16]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	1a81      	subs	r1, r0, r2
 8008a44:	4602      	mov	r2, r0
 8008a46:	bf18      	it	ne
 8008a48:	2101      	movne	r1, #1
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	bf08      	it	eq
 8008a4e:	2100      	moveq	r1, #0
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d1f2      	bne.n	8008a3a <ai_platform_observer_register+0x142>
 8008a54:	b2f3      	uxtb	r3, r6
 8008a56:	2100      	movs	r1, #0
 8008a58:	4a40      	ldr	r2, [pc, #256]	; (8008b5c <ai_platform_observer_register+0x264>)
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a60:	f8c4 8000 	str.w	r8, [r4]
 8008a64:	6067      	str	r7, [r4, #4]
 8008a66:	60a3      	str	r3, [r4, #8]
 8008a68:	81a1      	strh	r1, [r4, #12]
 8008a6a:	e9c5 240f 	strd	r2, r4, [r5, #60]	; 0x3c
 8008a6e:	e77a      	b.n	8008966 <ai_platform_observer_register+0x6e>
 8008a70:	f105 0010 	add.w	r0, r5, #16
 8008a74:	2210      	movs	r2, #16
 8008a76:	2131      	movs	r1, #49	; 0x31
 8008a78:	f000 fbae 	bl	80091d8 <core_set_error>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	e772      	b.n	8008966 <ai_platform_observer_register+0x6e>
 8008a80:	4b32      	ldr	r3, [pc, #200]	; (8008b4c <ai_platform_observer_register+0x254>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	4619      	mov	r1, r3
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1fc      	bne.n	8008a88 <ai_platform_observer_register+0x190>
 8008a8e:	4b30      	ldr	r3, [pc, #192]	; (8008b50 <ai_platform_observer_register+0x258>)
 8008a90:	4930      	ldr	r1, [pc, #192]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008a92:	4a31      	ldr	r2, [pc, #196]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008a94:	6019      	str	r1, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d0a0      	beq.n	80089de <ai_platform_observer_register+0xe6>
 8008a9c:	e7fe      	b.n	8008a9c <ai_platform_observer_register+0x1a4>
 8008a9e:	4b30      	ldr	r3, [pc, #192]	; (8008b60 <ai_platform_observer_register+0x268>)
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	680b      	ldr	r3, [r1, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1fc      	bne.n	8008aa6 <ai_platform_observer_register+0x1ae>
 8008aac:	4b2d      	ldr	r3, [pc, #180]	; (8008b64 <ai_platform_observer_register+0x26c>)
 8008aae:	4929      	ldr	r1, [pc, #164]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008ab0:	4a29      	ldr	r2, [pc, #164]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008ab2:	6019      	str	r1, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d091      	beq.n	80089de <ai_platform_observer_register+0xe6>
 8008aba:	e7fe      	b.n	8008aba <ai_platform_observer_register+0x1c2>
 8008abc:	4b28      	ldr	r3, [pc, #160]	; (8008b60 <ai_platform_observer_register+0x268>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	680b      	ldr	r3, [r1, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1fc      	bne.n	8008ac4 <ai_platform_observer_register+0x1cc>
 8008aca:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <ai_platform_observer_register+0x26c>)
 8008acc:	4921      	ldr	r1, [pc, #132]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008ace:	4a22      	ldr	r2, [pc, #136]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008ad0:	6019      	str	r1, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d082      	beq.n	80089de <ai_platform_observer_register+0xe6>
 8008ad8:	e7fe      	b.n	8008ad8 <ai_platform_observer_register+0x1e0>
 8008ada:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <ai_platform_observer_register+0x254>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	4619      	mov	r1, r3
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	680b      	ldr	r3, [r1, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1fc      	bne.n	8008ae2 <ai_platform_observer_register+0x1ea>
 8008ae8:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <ai_platform_observer_register+0x258>)
 8008aea:	491a      	ldr	r1, [pc, #104]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008aec:	4a1a      	ldr	r2, [pc, #104]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008aee:	6019      	str	r1, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4293      	cmp	r3, r2
 8008af4:	f43f af73 	beq.w	80089de <ai_platform_observer_register+0xe6>
 8008af8:	e7fe      	b.n	8008af8 <ai_platform_observer_register+0x200>
 8008afa:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <ai_platform_observer_register+0x268>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	4619      	mov	r1, r3
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	680b      	ldr	r3, [r1, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1fc      	bne.n	8008b02 <ai_platform_observer_register+0x20a>
 8008b08:	4b16      	ldr	r3, [pc, #88]	; (8008b64 <ai_platform_observer_register+0x26c>)
 8008b0a:	4912      	ldr	r1, [pc, #72]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008b0c:	4a12      	ldr	r2, [pc, #72]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008b0e:	6019      	str	r1, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	f43f af24 	beq.w	8008960 <ai_platform_observer_register+0x68>
 8008b18:	e7fe      	b.n	8008b18 <ai_platform_observer_register+0x220>
 8008b1a:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <ai_platform_observer_register+0x268>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	4619      	mov	r1, r3
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	680b      	ldr	r3, [r1, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1fc      	bne.n	8008b22 <ai_platform_observer_register+0x22a>
 8008b28:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <ai_platform_observer_register+0x26c>)
 8008b2a:	490a      	ldr	r1, [pc, #40]	; (8008b54 <ai_platform_observer_register+0x25c>)
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <ai_platform_observer_register+0x260>)
 8008b2e:	6019      	str	r1, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4293      	cmp	r3, r2
 8008b34:	f43f af14 	beq.w	8008960 <ai_platform_observer_register+0x68>
 8008b38:	e7fe      	b.n	8008b38 <ai_platform_observer_register+0x240>
 8008b3a:	bf00      	nop
 8008b3c:	a1c00100 	.word	0xa1c00100
 8008b40:	e0002000 	.word	0xe0002000
 8008b44:	e0042000 	.word	0xe0042000
 8008b48:	5c001000 	.word	0x5c001000
 8008b4c:	40023008 	.word	0x40023008
 8008b50:	40023000 	.word	0x40023000
 8008b54:	f407a5c2 	.word	0xf407a5c2
 8008b58:	b5e8b5cd 	.word	0xb5e8b5cd
 8008b5c:	080064b1 	.word	0x080064b1
 8008b60:	58024c08 	.word	0x58024c08
 8008b64:	58024c00 	.word	0x58024c00

08008b68 <ai_platform_observer_unregister>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	b120      	cbz	r0, 8008b76 <ai_platform_observer_unregister+0xe>
 8008b6c:	4b70      	ldr	r3, [pc, #448]	; (8008d30 <ai_platform_observer_unregister+0x1c8>)
 8008b6e:	4604      	mov	r4, r0
 8008b70:	6802      	ldr	r2, [r0, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d03d      	beq.n	8008bf2 <ai_platform_observer_unregister+0x8a>
 8008b76:	4a6f      	ldr	r2, [pc, #444]	; (8008d34 <ai_platform_observer_unregister+0x1cc>)
 8008b78:	6813      	ldr	r3, [r2, #0]
 8008b7a:	f023 0301 	bic.w	r3, r3, #1
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	f7fd fd20 	bl	80065c4 <_ai_platform_acquire_crc>
 8008b84:	4b6c      	ldr	r3, [pc, #432]	; (8008d38 <ai_platform_observer_unregister+0x1d0>)
 8008b86:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b90:	185a      	adds	r2, r3, r1
 8008b92:	2a01      	cmp	r2, #1
 8008b94:	d91e      	bls.n	8008bd4 <ai_platform_observer_unregister+0x6c>
 8008b96:	f240 4249 	movw	r2, #1097	; 0x449
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d01a      	beq.n	8008bd4 <ai_platform_observer_unregister+0x6c>
 8008b9e:	4b67      	ldr	r3, [pc, #412]	; (8008d3c <ai_platform_observer_unregister+0x1d4>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008ba6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008baa:	f000 80b1 	beq.w	8008d10 <ai_platform_observer_unregister+0x1a8>
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	f240 4183 	movw	r1, #1155	; 0x483
 8008bb4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008bb8:	428a      	cmp	r2, r1
 8008bba:	f000 8099 	beq.w	8008cf0 <ai_platform_observer_unregister+0x188>
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bc4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008bc8:	f000 8082 	beq.w	8008cd0 <ai_platform_observer_unregister+0x168>
 8008bcc:	f7fd fcfc 	bl	80065c8 <_ai_platform_release_crc>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	bd10      	pop	{r4, pc}
 8008bd4:	4b5a      	ldr	r3, [pc, #360]	; (8008d40 <ai_platform_observer_unregister+0x1d8>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	4619      	mov	r1, r3
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	680b      	ldr	r3, [r1, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1fc      	bne.n	8008bdc <ai_platform_observer_unregister+0x74>
 8008be2:	4b58      	ldr	r3, [pc, #352]	; (8008d44 <ai_platform_observer_unregister+0x1dc>)
 8008be4:	4958      	ldr	r1, [pc, #352]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008be6:	4a59      	ldr	r2, [pc, #356]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008be8:	6019      	str	r1, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d0ed      	beq.n	8008bcc <ai_platform_observer_unregister+0x64>
 8008bf0:	e7fe      	b.n	8008bf0 <ai_platform_observer_unregister+0x88>
 8008bf2:	4a50      	ldr	r2, [pc, #320]	; (8008d34 <ai_platform_observer_unregister+0x1cc>)
 8008bf4:	6813      	ldr	r3, [r2, #0]
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	f7fd fce2 	bl	80065c4 <_ai_platform_acquire_crc>
 8008c00:	4b4d      	ldr	r3, [pc, #308]	; (8008d38 <ai_platform_observer_unregister+0x1d0>)
 8008c02:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c0c:	189a      	adds	r2, r3, r2
 8008c0e:	2a01      	cmp	r2, #1
 8008c10:	d94f      	bls.n	8008cb2 <ai_platform_observer_unregister+0x14a>
 8008c12:	f240 4249 	movw	r2, #1097	; 0x449
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d04b      	beq.n	8008cb2 <ai_platform_observer_unregister+0x14a>
 8008c1a:	4b48      	ldr	r3, [pc, #288]	; (8008d3c <ai_platform_observer_unregister+0x1d4>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008c22:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008c26:	d035      	beq.n	8008c94 <ai_platform_observer_unregister+0x12c>
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f240 4183 	movw	r1, #1155	; 0x483
 8008c2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008c32:	428a      	cmp	r2, r1
 8008c34:	d01f      	beq.n	8008c76 <ai_platform_observer_unregister+0x10e>
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c3c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008c40:	d00a      	beq.n	8008c58 <ai_platform_observer_unregister+0xf0>
 8008c42:	f7fd fcc1 	bl	80065c8 <_ai_platform_release_crc>
 8008c46:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c48:	b108      	cbz	r0, 8008c4e <ai_platform_observer_unregister+0xe6>
 8008c4a:	f000 f893 	bl	8008d74 <core_mem_free>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2001      	movs	r0, #1
 8008c52:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8008c56:	bd10      	pop	{r4, pc}
 8008c58:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <ai_platform_observer_unregister+0x1d8>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	680b      	ldr	r3, [r1, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1fc      	bne.n	8008c60 <ai_platform_observer_unregister+0xf8>
 8008c66:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <ai_platform_observer_unregister+0x1dc>)
 8008c68:	4937      	ldr	r1, [pc, #220]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008c6a:	4a38      	ldr	r2, [pc, #224]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008c6c:	6019      	str	r1, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d0e6      	beq.n	8008c42 <ai_platform_observer_unregister+0xda>
 8008c74:	e7fe      	b.n	8008c74 <ai_platform_observer_unregister+0x10c>
 8008c76:	4b36      	ldr	r3, [pc, #216]	; (8008d50 <ai_platform_observer_unregister+0x1e8>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	680b      	ldr	r3, [r1, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1fc      	bne.n	8008c7e <ai_platform_observer_unregister+0x116>
 8008c84:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <ai_platform_observer_unregister+0x1ec>)
 8008c86:	4930      	ldr	r1, [pc, #192]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008c8a:	6019      	str	r1, [r3, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d0d7      	beq.n	8008c42 <ai_platform_observer_unregister+0xda>
 8008c92:	e7fe      	b.n	8008c92 <ai_platform_observer_unregister+0x12a>
 8008c94:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <ai_platform_observer_unregister+0x1e8>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	4619      	mov	r1, r3
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	680b      	ldr	r3, [r1, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1fc      	bne.n	8008c9c <ai_platform_observer_unregister+0x134>
 8008ca2:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <ai_platform_observer_unregister+0x1ec>)
 8008ca4:	4928      	ldr	r1, [pc, #160]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008ca6:	4a29      	ldr	r2, [pc, #164]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008ca8:	6019      	str	r1, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d0c8      	beq.n	8008c42 <ai_platform_observer_unregister+0xda>
 8008cb0:	e7fe      	b.n	8008cb0 <ai_platform_observer_unregister+0x148>
 8008cb2:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <ai_platform_observer_unregister+0x1d8>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	680b      	ldr	r3, [r1, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1fc      	bne.n	8008cba <ai_platform_observer_unregister+0x152>
 8008cc0:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <ai_platform_observer_unregister+0x1dc>)
 8008cc2:	4921      	ldr	r1, [pc, #132]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008cc4:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008cc6:	6019      	str	r1, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d0b9      	beq.n	8008c42 <ai_platform_observer_unregister+0xda>
 8008cce:	e7fe      	b.n	8008cce <ai_platform_observer_unregister+0x166>
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <ai_platform_observer_unregister+0x1d8>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	680b      	ldr	r3, [r1, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1fc      	bne.n	8008cd8 <ai_platform_observer_unregister+0x170>
 8008cde:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <ai_platform_observer_unregister+0x1dc>)
 8008ce0:	4919      	ldr	r1, [pc, #100]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008ce2:	4a1a      	ldr	r2, [pc, #104]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008ce4:	6019      	str	r1, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	f43f af6f 	beq.w	8008bcc <ai_platform_observer_unregister+0x64>
 8008cee:	e7fe      	b.n	8008cee <ai_platform_observer_unregister+0x186>
 8008cf0:	4b17      	ldr	r3, [pc, #92]	; (8008d50 <ai_platform_observer_unregister+0x1e8>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	680b      	ldr	r3, [r1, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1fc      	bne.n	8008cf8 <ai_platform_observer_unregister+0x190>
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <ai_platform_observer_unregister+0x1ec>)
 8008d00:	4911      	ldr	r1, [pc, #68]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008d02:	4a12      	ldr	r2, [pc, #72]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008d04:	6019      	str	r1, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f43f af5f 	beq.w	8008bcc <ai_platform_observer_unregister+0x64>
 8008d0e:	e7fe      	b.n	8008d0e <ai_platform_observer_unregister+0x1a6>
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <ai_platform_observer_unregister+0x1e8>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	4619      	mov	r1, r3
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	680b      	ldr	r3, [r1, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1fc      	bne.n	8008d18 <ai_platform_observer_unregister+0x1b0>
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <ai_platform_observer_unregister+0x1ec>)
 8008d20:	4909      	ldr	r1, [pc, #36]	; (8008d48 <ai_platform_observer_unregister+0x1e0>)
 8008d22:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <ai_platform_observer_unregister+0x1e4>)
 8008d24:	6019      	str	r1, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	f43f af4f 	beq.w	8008bcc <ai_platform_observer_unregister+0x64>
 8008d2e:	e7fe      	b.n	8008d2e <ai_platform_observer_unregister+0x1c6>
 8008d30:	a1c00100 	.word	0xa1c00100
 8008d34:	e0002000 	.word	0xe0002000
 8008d38:	e0042000 	.word	0xe0042000
 8008d3c:	5c001000 	.word	0x5c001000
 8008d40:	40023008 	.word	0x40023008
 8008d44:	40023000 	.word	0x40023000
 8008d48:	f407a5c2 	.word	0xf407a5c2
 8008d4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d50:	58024c08 	.word	0x58024c08
 8008d54:	58024c00 	.word	0x58024c00

08008d58 <core_mem_alloc>:
 8008d58:	b150      	cbz	r0, 8008d70 <core_mem_alloc+0x18>
 8008d5a:	3004      	adds	r0, #4
 8008d5c:	b508      	push	{r3, lr}
 8008d5e:	f7fc f8e3 	bl	8004f28 <__wrap_malloc>
 8008d62:	4603      	mov	r3, r0
 8008d64:	b110      	cbz	r0, 8008d6c <core_mem_alloc+0x14>
 8008d66:	3004      	adds	r0, #4
 8008d68:	601b      	str	r3, [r3, #0]
 8008d6a:	bd08      	pop	{r3, pc}
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bd08      	pop	{r3, pc}
 8008d70:	2000      	movs	r0, #0
 8008d72:	4770      	bx	lr

08008d74 <core_mem_free>:
 8008d74:	b138      	cbz	r0, 8008d86 <core_mem_free+0x12>
 8008d76:	b508      	push	{r3, lr}
 8008d78:	1f03      	subs	r3, r0, #4
 8008d7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d100      	bne.n	8008d84 <core_mem_free+0x10>
 8008d82:	b90b      	cbnz	r3, 8008d88 <core_mem_free+0x14>
 8008d84:	bd08      	pop	{r3, pc}
 8008d86:	4770      	bx	lr
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fc f8f5 	bl	8004f78 <__wrap_free>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	bd08      	pop	{r3, pc}
 8008d92:	bf00      	nop

08008d94 <node_convert_integer>:
 8008d94:	6982      	ldr	r2, [r0, #24]
 8008d96:	8813      	ldrh	r3, [r2, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8084 	beq.w	8008ea6 <node_convert_integer+0x112>
 8008d9e:	b4f0      	push	{r4, r5, r6, r7}
 8008da0:	6852      	ldr	r2, [r2, #4]
 8008da2:	6855      	ldr	r5, [r2, #4]
 8008da4:	b105      	cbz	r5, 8008da8 <node_convert_integer+0x14>
 8008da6:	682d      	ldr	r5, [r5, #0]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d979      	bls.n	8008ea0 <node_convert_integer+0x10c>
 8008dac:	6916      	ldr	r6, [r2, #16]
 8008dae:	b106      	cbz	r6, 8008db2 <node_convert_integer+0x1e>
 8008db0:	6836      	ldr	r6, [r6, #0]
 8008db2:	68ab      	ldr	r3, [r5, #8]
 8008db4:	0a1b      	lsrs	r3, r3, #8
 8008db6:	f000 817c 	beq.w	80090b2 <node_convert_integer+0x31e>
 8008dba:	68e8      	ldr	r0, [r5, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008dc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	fb01 f202 	mul.w	r2, r1, r2
 8008dcc:	d1f9      	bne.n	8008dc2 <node_convert_integer+0x2e>
 8008dce:	0893      	lsrs	r3, r2, #2
 8008dd0:	682c      	ldr	r4, [r5, #0]
 8008dd2:	f8d6 c000 	ldr.w	ip, [r6]
 8008dd6:	b19c      	cbz	r4, 8008e00 <node_convert_integer+0x6c>
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	b189      	cbz	r1, 8008e00 <node_convert_integer+0x6c>
 8008ddc:	8860      	ldrh	r0, [r4, #2]
 8008dde:	b178      	cbz	r0, 8008e00 <node_convert_integer+0x6c>
 8008de0:	6809      	ldr	r1, [r1, #0]
 8008de2:	edd1 6a00 	vldr	s13, [r1]
 8008de6:	f1bc 0f00 	cmp.w	ip, #0
 8008dea:	d00e      	beq.n	8008e0a <node_convert_integer+0x76>
 8008dec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008df0:	b159      	cbz	r1, 8008e0a <node_convert_integer+0x76>
 8008df2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8008df6:	b140      	cbz	r0, 8008e0a <node_convert_integer+0x76>
 8008df8:	6809      	ldr	r1, [r1, #0]
 8008dfa:	ed91 7a00 	vldr	s14, [r1]
 8008dfe:	e006      	b.n	8008e0e <node_convert_integer+0x7a>
 8008e00:	eddf 6abf 	vldr	s13, [pc, #764]	; 8009100 <node_convert_integer+0x36c>
 8008e04:	f1bc 0f00 	cmp.w	ip, #0
 8008e08:	d1f0      	bne.n	8008dec <node_convert_integer+0x58>
 8008e0a:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8009100 <node_convert_integer+0x36c>
 8008e0e:	69a8      	ldr	r0, [r5, #24]
 8008e10:	69b7      	ldr	r7, [r6, #24]
 8008e12:	6805      	ldr	r5, [r0, #0]
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	022d      	lsls	r5, r5, #8
 8008e18:	6880      	ldr	r0, [r0, #8]
 8008e1a:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	d443      	bmi.n	8008eaa <node_convert_integer+0x116>
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	f040 80d6 	bne.w	8008fd4 <node_convert_integer+0x240>
 8008e28:	b13c      	cbz	r4, 8008e3a <node_convert_integer+0xa6>
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 815f 	beq.w	80090f0 <node_convert_integer+0x35c>
 8008e32:	8864      	ldrh	r4, [r4, #2]
 8008e34:	b10c      	cbz	r4, 8008e3a <node_convert_integer+0xa6>
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	781c      	ldrb	r4, [r3, #0]
 8008e3a:	f1bc 0f00 	cmp.w	ip, #0
 8008e3e:	f000 8130 	beq.w	80090a2 <node_convert_integer+0x30e>
 8008e42:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 812b 	beq.w	80090a2 <node_convert_integer+0x30e>
 8008e4c:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	f000 8126 	beq.w	80090a2 <node_convert_integer+0x30e>
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	ee06 3a10 	vmov	s12, r3
 8008e62:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008e66:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008e6a:	eec6 5a87 	vdiv.f32	s11, s13, s14
 8008e6e:	b1aa      	cbz	r2, 8008e9c <node_convert_integer+0x108>
 8008e70:	440a      	add	r2, r1
 8008e72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e76:	1b1b      	subs	r3, r3, r4
 8008e78:	eeb0 7a46 	vmov.f32	s14, s12
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e84:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008e88:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008e8c:	ee17 3a90 	vmov	r3, s15
 8008e90:	f383 0308 	usat	r3, #8, r3
 8008e94:	f801 3b01 	strb.w	r3, [r1], #1
 8008e98:	4291      	cmp	r1, r2
 8008e9a:	d1ea      	bne.n	8008e72 <node_convert_integer+0xde>
 8008e9c:	bcf0      	pop	{r4, r5, r6, r7}
 8008e9e:	4770      	bx	lr
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	deff      	udf	#255	; 0xff
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	deff      	udf	#255	; 0xff
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	d049      	beq.n	8008f42 <node_convert_integer+0x1ae>
 8008eae:	b144      	cbz	r4, 8008ec2 <node_convert_integer+0x12e>
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8114 	beq.w	80090e0 <node_convert_integer+0x34c>
 8008eb8:	8864      	ldrh	r4, [r4, #2]
 8008eba:	b114      	cbz	r4, 8008ec2 <node_convert_integer+0x12e>
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f993 4000 	ldrsb.w	r4, [r3]
 8008ec2:	f1bc 0f00 	cmp.w	ip, #0
 8008ec6:	f000 80ef 	beq.w	80090a8 <node_convert_integer+0x314>
 8008eca:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	f000 80fd 	beq.w	80090ce <node_convert_integer+0x33a>
 8008ed4:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80f3 	beq.w	80090c4 <node_convert_integer+0x330>
 8008ede:	686b      	ldr	r3, [r5, #4]
 8008ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	d0d5      	beq.n	8008e9c <node_convert_integer+0x108>
 8008ef0:	440a      	add	r2, r1
 8008ef2:	eddf 5a84 	vldr	s11, [pc, #528]	; 8009104 <node_convert_integer+0x370>
 8008ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008efa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008efe:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008f02:	eeb0 5a47 	vmov.f32	s10, s14
 8008f06:	1b1b      	subs	r3, r3, r4
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f10:	eea7 5a86 	vfma.f32	s10, s15, s12
 8008f14:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8008f18:	eef0 7a45 	vmov.f32	s15, s10
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	bfd4      	ite	le
 8008f22:	ee75 7a65 	vsuble.f32	s15, s10, s11
 8008f26:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 8008f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f2e:	ee17 3a90 	vmov	r3, s15
 8008f32:	f303 0307 	ssat	r3, #8, r3
 8008f36:	f801 3b01 	strb.w	r3, [r1], #1
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	d1df      	bne.n	8008efe <node_convert_integer+0x16a>
 8008f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8008f40:	4770      	bx	lr
 8008f42:	b144      	cbz	r4, 8008f56 <node_convert_integer+0x1c2>
 8008f44:	6865      	ldr	r5, [r4, #4]
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	f000 80c4 	beq.w	80090d4 <node_convert_integer+0x340>
 8008f4c:	8864      	ldrh	r4, [r4, #2]
 8008f4e:	b114      	cbz	r4, 8008f56 <node_convert_integer+0x1c2>
 8008f50:	686c      	ldr	r4, [r5, #4]
 8008f52:	f994 4000 	ldrsb.w	r4, [r4]
 8008f56:	f1bc 0f00 	cmp.w	ip, #0
 8008f5a:	d00c      	beq.n	8008f76 <node_convert_integer+0x1e2>
 8008f5c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	f000 80b2 	beq.w	80090ca <node_convert_integer+0x336>
 8008f66:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	f000 80a8 	beq.w	80090c0 <node_convert_integer+0x32c>
 8008f70:	6875      	ldr	r5, [r6, #4]
 8008f72:	f895 c000 	ldrb.w	ip, [r5]
 8008f76:	eef4 6a47 	vcmp.f32	s13, s14
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	d104      	bne.n	8008f8a <node_convert_integer+0x1f6>
 8008f80:	f104 0680 	add.w	r6, r4, #128	; 0x80
 8008f84:	4566      	cmp	r6, ip
 8008f86:	f000 80fb 	beq.w	8009180 <node_convert_integer+0x3ec>
 8008f8a:	ee07 ca90 	vmov	s15, ip
 8008f8e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008f92:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8008f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f9a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	f43f af7c 	beq.w	8008e9c <node_convert_integer+0x108>
 8008fa4:	4402      	add	r2, r0
 8008fa6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008faa:	eef0 6a67 	vmov.f32	s13, s15
 8008fae:	1b1b      	subs	r3, r3, r4
 8008fb0:	ee07 3a10 	vmov	s14, r3
 8008fb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008fb8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008fbc:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8008fc0:	ee17 3a10 	vmov	r3, s14
 8008fc4:	f383 0308 	usat	r3, #8, r3
 8008fc8:	4290      	cmp	r0, r2
 8008fca:	f801 3b01 	strb.w	r3, [r1], #1
 8008fce:	d1ea      	bne.n	8008fa6 <node_convert_integer+0x212>
 8008fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8008fd2:	4770      	bx	lr
 8008fd4:	2c00      	cmp	r4, #0
 8008fd6:	d06a      	beq.n	80090ae <node_convert_integer+0x31a>
 8008fd8:	6866      	ldr	r6, [r4, #4]
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	f000 808e 	beq.w	80090fc <node_convert_integer+0x368>
 8008fe0:	8865      	ldrh	r5, [r4, #2]
 8008fe2:	b10d      	cbz	r5, 8008fe8 <node_convert_integer+0x254>
 8008fe4:	6875      	ldr	r5, [r6, #4]
 8008fe6:	782d      	ldrb	r5, [r5, #0]
 8008fe8:	f1bc 0f00 	cmp.w	ip, #0
 8008fec:	d063      	beq.n	80090b6 <node_convert_integer+0x322>
 8008fee:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d07a      	beq.n	80090ec <node_convert_integer+0x358>
 8008ff6:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8008ffa:	b116      	cbz	r6, 8009002 <node_convert_integer+0x26e>
 8008ffc:	687e      	ldr	r6, [r7, #4]
 8008ffe:	f996 6000 	ldrsb.w	r6, [r6]
 8009002:	eef4 6a47 	vcmp.f32	s13, s14
 8009006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900a:	d102      	bne.n	8009012 <node_convert_integer+0x27e>
 800900c:	3d80      	subs	r5, #128	; 0x80
 800900e:	42b5      	cmp	r5, r6
 8009010:	d07d      	beq.n	800910e <node_convert_integer+0x37a>
 8009012:	b13c      	cbz	r4, 8009024 <node_convert_integer+0x290>
 8009014:	6863      	ldr	r3, [r4, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 80d1 	beq.w	80091be <node_convert_integer+0x42a>
 800901c:	8864      	ldrh	r4, [r4, #2]
 800901e:	b10c      	cbz	r4, 8009024 <node_convert_integer+0x290>
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	781c      	ldrb	r4, [r3, #0]
 8009024:	f1bc 0f00 	cmp.w	ip, #0
 8009028:	d047      	beq.n	80090ba <node_convert_integer+0x326>
 800902a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800902e:	2d00      	cmp	r5, #0
 8009030:	f000 80c2 	beq.w	80091b8 <node_convert_integer+0x424>
 8009034:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d065      	beq.n	8009108 <node_convert_integer+0x374>
 800903c:	686b      	ldr	r3, [r5, #4]
 800903e:	f993 3000 	ldrsb.w	r3, [r3]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	ee86 6a87 	vdiv.f32	s12, s13, s14
 800904a:	2a00      	cmp	r2, #0
 800904c:	f43f af26 	beq.w	8008e9c <node_convert_integer+0x108>
 8009050:	440a      	add	r2, r1
 8009052:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8009104 <node_convert_integer+0x370>
 8009056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800905a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800905e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009062:	eeb0 5a47 	vmov.f32	s10, s14
 8009066:	1b1b      	subs	r3, r3, r4
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009070:	eea7 5a86 	vfma.f32	s10, s15, s12
 8009074:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8009078:	eef0 7a45 	vmov.f32	s15, s10
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	bfd4      	ite	le
 8009082:	ee75 7a65 	vsuble.f32	s15, s10, s11
 8009086:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 800908a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800908e:	ee17 3a90 	vmov	r3, s15
 8009092:	f303 0307 	ssat	r3, #8, r3
 8009096:	f801 3b01 	strb.w	r3, [r1], #1
 800909a:	4291      	cmp	r1, r2
 800909c:	d1df      	bne.n	800905e <node_convert_integer+0x2ca>
 800909e:	bcf0      	pop	{r4, r5, r6, r7}
 80090a0:	4770      	bx	lr
 80090a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80090a6:	e6e0      	b.n	8008e6a <node_convert_integer+0xd6>
 80090a8:	ee07 ca90 	vmov	s15, ip
 80090ac:	e71c      	b.n	8008ee8 <node_convert_integer+0x154>
 80090ae:	4625      	mov	r5, r4
 80090b0:	e79a      	b.n	8008fe8 <node_convert_integer+0x254>
 80090b2:	2201      	movs	r2, #1
 80090b4:	e68c      	b.n	8008dd0 <node_convert_integer+0x3c>
 80090b6:	4666      	mov	r6, ip
 80090b8:	e7a3      	b.n	8009002 <node_convert_integer+0x26e>
 80090ba:	ee07 ca90 	vmov	s15, ip
 80090be:	e7c2      	b.n	8009046 <node_convert_integer+0x2b2>
 80090c0:	46ac      	mov	ip, r5
 80090c2:	e758      	b.n	8008f76 <node_convert_integer+0x1e2>
 80090c4:	ee07 3a90 	vmov	s15, r3
 80090c8:	e70e      	b.n	8008ee8 <node_convert_integer+0x154>
 80090ca:	46b4      	mov	ip, r6
 80090cc:	e753      	b.n	8008f76 <node_convert_integer+0x1e2>
 80090ce:	ee07 5a90 	vmov	s15, r5
 80090d2:	e709      	b.n	8008ee8 <node_convert_integer+0x154>
 80090d4:	462c      	mov	r4, r5
 80090d6:	f1bc 0f00 	cmp.w	ip, #0
 80090da:	f47f af3f 	bne.w	8008f5c <node_convert_integer+0x1c8>
 80090de:	e74a      	b.n	8008f76 <node_convert_integer+0x1e2>
 80090e0:	461c      	mov	r4, r3
 80090e2:	f1bc 0f00 	cmp.w	ip, #0
 80090e6:	f47f aef0 	bne.w	8008eca <node_convert_integer+0x136>
 80090ea:	e7dd      	b.n	80090a8 <node_convert_integer+0x314>
 80090ec:	463e      	mov	r6, r7
 80090ee:	e788      	b.n	8009002 <node_convert_integer+0x26e>
 80090f0:	461c      	mov	r4, r3
 80090f2:	f1bc 0f00 	cmp.w	ip, #0
 80090f6:	f47f aea4 	bne.w	8008e42 <node_convert_integer+0xae>
 80090fa:	e7d2      	b.n	80090a2 <node_convert_integer+0x30e>
 80090fc:	4635      	mov	r5, r6
 80090fe:	e773      	b.n	8008fe8 <node_convert_integer+0x254>
 8009100:	00000000 	.word	0x00000000
 8009104:	3efffffc 	.word	0x3efffffc
 8009108:	ee07 3a90 	vmov	s15, r3
 800910c:	e79b      	b.n	8009046 <node_convert_integer+0x2b2>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d057      	beq.n	80091c2 <node_convert_integer+0x42e>
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	460f      	mov	r7, r1
 8009116:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 800911a:	eb00 0c03 	add.w	ip, r0, r3
 800911e:	f850 4b04 	ldr.w	r4, [r0], #4
 8009122:	ea4f 2534 	mov.w	r5, r4, ror #8
 8009126:	fa3f f585 	uxtb16	r5, r5
 800912a:	fad5 f506 	ssub16	r5, r5, r6
 800912e:	fa3f f484 	uxtb16	r4, r4
 8009132:	fad4 f406 	ssub16	r4, r4, r6
 8009136:	022d      	lsls	r5, r5, #8
 8009138:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800913c:	4560      	cmp	r0, ip
 800913e:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8009142:	ea44 0405 	orr.w	r4, r4, r5
 8009146:	f847 4b04 	str.w	r4, [r7], #4
 800914a:	d1e8      	bne.n	800911e <node_convert_integer+0x38a>
 800914c:	4419      	add	r1, r3
 800914e:	f012 0203 	ands.w	r2, r2, #3
 8009152:	f43f aea3 	beq.w	8008e9c <node_convert_integer+0x108>
 8009156:	f89c 3000 	ldrb.w	r3, [ip]
 800915a:	2a01      	cmp	r2, #1
 800915c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8009160:	700b      	strb	r3, [r1, #0]
 8009162:	f43f ae9b 	beq.w	8008e9c <node_convert_integer+0x108>
 8009166:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800916a:	2a03      	cmp	r2, #3
 800916c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8009170:	704b      	strb	r3, [r1, #1]
 8009172:	f47f ae93 	bne.w	8008e9c <node_convert_integer+0x108>
 8009176:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800917a:	3b80      	subs	r3, #128	; 0x80
 800917c:	708b      	strb	r3, [r1, #2]
 800917e:	e68d      	b.n	8008e9c <node_convert_integer+0x108>
 8009180:	b1fb      	cbz	r3, 80091c2 <node_convert_integer+0x42e>
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	460f      	mov	r7, r1
 8009186:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 800918a:	eb00 0c03 	add.w	ip, r0, r3
 800918e:	f850 4b04 	ldr.w	r4, [r0], #4
 8009192:	ea4f 2534 	mov.w	r5, r4, ror #8
 8009196:	fa2f f585 	sxtb16	r5, r5
 800919a:	fa95 f506 	sadd16	r5, r5, r6
 800919e:	fa2f f484 	sxtb16	r4, r4
 80091a2:	fa94 f406 	sadd16	r4, r4, r6
 80091a6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80091aa:	4560      	cmp	r0, ip
 80091ac:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80091b0:	f847 4b04 	str.w	r4, [r7], #4
 80091b4:	d1eb      	bne.n	800918e <node_convert_integer+0x3fa>
 80091b6:	e7c9      	b.n	800914c <node_convert_integer+0x3b8>
 80091b8:	ee07 5a90 	vmov	s15, r5
 80091bc:	e743      	b.n	8009046 <node_convert_integer+0x2b2>
 80091be:	461c      	mov	r4, r3
 80091c0:	e730      	b.n	8009024 <node_convert_integer+0x290>
 80091c2:	4684      	mov	ip, r0
 80091c4:	e7c3      	b.n	800914e <node_convert_integer+0x3ba>
 80091c6:	bf00      	nop

080091c8 <core_init>:
 80091c8:	2001      	movs	r0, #1
 80091ca:	4770      	bx	lr

080091cc <core_get_error>:
 80091cc:	4603      	mov	r3, r0
 80091ce:	2200      	movs	r2, #0
 80091d0:	6800      	ldr	r0, [r0, #0]
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <core_set_error>:
 80091d8:	4603      	mov	r3, r0
 80091da:	7800      	ldrb	r0, [r0, #0]
 80091dc:	b930      	cbnz	r0, 80091ec <core_set_error+0x14>
 80091de:	7019      	strb	r1, [r3, #0]
 80091e0:	2001      	movs	r0, #1
 80091e2:	6819      	ldr	r1, [r3, #0]
 80091e4:	f362 211f 	bfi	r1, r2, #8, #24
 80091e8:	6019      	str	r1, [r3, #0]
 80091ea:	4770      	bx	lr
 80091ec:	2000      	movs	r0, #0
 80091ee:	4770      	bx	lr

080091f0 <ai_mul_buffer_INT8>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	b08f      	sub	sp, #60	; 0x3c
 80091f6:	4688      	mov	r8, r1
 80091f8:	2500      	movs	r5, #0
 80091fa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80091fc:	ac0e      	add	r4, sp, #56	; 0x38
 80091fe:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8009200:	ed96 0a00 	vldr	s0, [r6]
 8009204:	edd7 7a00 	vldr	s15, [r7]
 8009208:	9002      	str	r0, [sp, #8]
 800920a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800920c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009210:	9205      	str	r2, [sp, #20]
 8009212:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009214:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009216:	ed90 0a00 	vldr	s0, [r0]
 800921a:	9309      	str	r3, [sp, #36]	; 0x24
 800921c:	f991 1000 	ldrsb.w	r1, [r1]
 8009220:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009226:	f992 2000 	ldrsb.w	r2, [r2]
 800922a:	f824 5d02 	strh.w	r5, [r4, #-2]!
 800922e:	4620      	mov	r0, r4
 8009230:	f993 5000 	ldrsb.w	r5, [r3]
 8009234:	9108      	str	r1, [sp, #32]
 8009236:	9206      	str	r2, [sp, #24]
 8009238:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800923a:	f002 fd6b 	bl	800bd14 <align_factor>
 800923e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8009242:	1e73      	subs	r3, r6, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b14      	cmp	r3, #20
 800924a:	d804      	bhi.n	8009256 <ai_mul_buffer_INT8+0x66>
 800924c:	2301      	movs	r3, #1
 800924e:	40b5      	lsls	r5, r6
 8009250:	40b3      	lsls	r3, r6
 8009252:	eb05 0553 	add.w	r5, r5, r3, lsr #1
 8009256:	9f06      	ldr	r7, [sp, #24]
 8009258:	9a08      	ldr	r2, [sp, #32]
 800925a:	b2bb      	uxth	r3, r7
 800925c:	b291      	uxth	r1, r2
 800925e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009262:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	089a      	lsrs	r2, r3, #2
 800926c:	2c00      	cmp	r4, #0
 800926e:	f040 80e7 	bne.w	8009440 <ai_mul_buffer_INT8+0x250>
 8009272:	2a00      	cmp	r2, #0
 8009274:	f000 836c 	beq.w	8009950 <ai_mul_buffer_INT8+0x760>
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	f04f 0a01 	mov.w	sl, #1
 800927e:	1eb3      	subs	r3, r6, #2
 8009280:	f8dd b014 	ldr.w	fp, [sp, #20]
 8009284:	920b      	str	r2, [sp, #44]	; 0x2c
 8009286:	4442      	add	r2, r8
 8009288:	ebaa 0406 	sub.w	r4, sl, r6
 800928c:	9107      	str	r1, [sp, #28]
 800928e:	9203      	str	r2, [sp, #12]
 8009290:	fa0a fa03 	lsl.w	sl, sl, r3
 8009294:	9a02      	ldr	r2, [sp, #8]
 8009296:	940a      	str	r4, [sp, #40]	; 0x28
 8009298:	f102 0c04 	add.w	ip, r2, #4
 800929c:	e025      	b.n	80092ea <ai_mul_buffer_INT8+0xfa>
 800929e:	9904      	ldr	r1, [sp, #16]
 80092a0:	fb57 a700 	smmla	r7, r7, r0, sl
 80092a4:	410f      	asrs	r7, r1
 80092a6:	fb52 a200 	smmla	r2, r2, r0, sl
 80092aa:	442f      	add	r7, r5
 80092ac:	fb54 a400 	smmla	r4, r4, r0, sl
 80092b0:	fb53 a300 	smmla	r3, r3, r0, sl
 80092b4:	f307 0707 	ssat	r7, #8, r7
 80092b8:	410c      	asrs	r4, r1
 80092ba:	f80c 7c04 	strb.w	r7, [ip, #-4]
 80092be:	442c      	add	r4, r5
 80092c0:	f304 0407 	ssat	r4, #8, r4
 80092c4:	410a      	asrs	r2, r1
 80092c6:	f80c 4c03 	strb.w	r4, [ip, #-3]
 80092ca:	442a      	add	r2, r5
 80092cc:	f302 0207 	ssat	r2, #8, r2
 80092d0:	410b      	asrs	r3, r1
 80092d2:	f80c 2c02 	strb.w	r2, [ip, #-2]
 80092d6:	442b      	add	r3, r5
 80092d8:	f303 0307 	ssat	r3, #8, r3
 80092dc:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	f10c 0c04 	add.w	ip, ip, #4
 80092e6:	4598      	cmp	r8, r3
 80092e8:	d04f      	beq.n	800938a <ai_mul_buffer_INT8+0x19a>
 80092ea:	f858 4b04 	ldr.w	r4, [r8], #4
 80092ee:	f85b 2b04 	ldr.w	r2, [fp], #4
 80092f2:	ea4f 2e34 	mov.w	lr, r4, ror #8
 80092f6:	9907      	ldr	r1, [sp, #28]
 80092f8:	ea4f 2332 	mov.w	r3, r2, ror #8
 80092fc:	fa2f f484 	sxtb16	r4, r4
 8009300:	fa2f fe8e 	sxtb16	lr, lr
 8009304:	fa2f f282 	sxtb16	r2, r2
 8009308:	fa2f f383 	sxtb16	r3, r3
 800930c:	fade fe01 	ssub16	lr, lr, r1
 8009310:	fad4 f401 	ssub16	r4, r4, r1
 8009314:	9f01      	ldr	r7, [sp, #4]
 8009316:	fad3 f307 	ssub16	r3, r3, r7
 800931a:	fad2 f207 	ssub16	r2, r2, r7
 800931e:	fb14 f702 	smulbb	r7, r4, r2
 8009322:	2e15      	cmp	r6, #21
 8009324:	fb12 f234 	smultt	r2, r2, r4
 8009328:	fb1e f403 	smulbb	r4, lr, r3
 800932c:	fb13 f33e 	smultt	r3, r3, lr
 8009330:	dcb5      	bgt.n	800929e <ai_mul_buffer_INT8+0xae>
 8009332:	2e00      	cmp	r6, #0
 8009334:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8009338:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800933c:	f340 8161 	ble.w	8009602 <ai_mul_buffer_INT8+0x412>
 8009340:	fb59 5900 	smmla	r9, r9, r0, r5
 8009344:	fb5e 5e00 	smmla	lr, lr, r0, r5
 8009348:	fa49 f906 	asr.w	r9, r9, r6
 800934c:	0064      	lsls	r4, r4, #1
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	fb54 5400 	smmla	r4, r4, r0, r5
 8009354:	fb53 5300 	smmla	r3, r3, r0, r5
 8009358:	f309 0907 	ssat	r9, #8, r9
 800935c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8009360:	4134      	asrs	r4, r6
 8009362:	f304 0407 	ssat	r4, #8, r4
 8009366:	f80c 4c03 	strb.w	r4, [ip, #-3]
 800936a:	fa4e fe06 	asr.w	lr, lr, r6
 800936e:	f30e 0e07 	ssat	lr, #8, lr
 8009372:	f80c ec02 	strb.w	lr, [ip, #-2]
 8009376:	4133      	asrs	r3, r6
 8009378:	f303 0307 	ssat	r3, #8, r3
 800937c:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8009380:	f10c 0c04 	add.w	ip, ip, #4
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	4598      	cmp	r8, r3
 8009388:	d1af      	bne.n	80092ea <ai_mul_buffer_INT8+0xfa>
 800938a:	9a05      	ldr	r2, [sp, #20]
 800938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938e:	4611      	mov	r1, r2
 8009390:	9a02      	ldr	r2, [sp, #8]
 8009392:	4419      	add	r1, r3
 8009394:	441a      	add	r2, r3
 8009396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	9202      	str	r2, [sp, #8]
 800939c:	f013 0c03 	ands.w	ip, r3, #3
 80093a0:	d04b      	beq.n	800943a <ai_mul_buffer_INT8+0x24a>
 80093a2:	2101      	movs	r1, #1
 80093a4:	1eb2      	subs	r2, r6, #2
 80093a6:	2e15      	cmp	r6, #21
 80093a8:	f106 34ff 	add.w	r4, r6, #4294967295	; 0xffffffff
 80093ac:	eba1 0806 	sub.w	r8, r1, r6
 80093b0:	fa01 fe02 	lsl.w	lr, r1, r2
 80093b4:	f300 8179 	bgt.w	80096aa <ai_mul_buffer_INT8+0x4ba>
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	f340 82f6 	ble.w	80099aa <ai_mul_buffer_INT8+0x7ba>
 80093be:	9c03      	ldr	r4, [sp, #12]
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	f994 1000 	ldrsb.w	r1, [r4]
 80093c6:	9f05      	ldr	r7, [sp, #20]
 80093c8:	1ac9      	subs	r1, r1, r3
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	f997 2000 	ldrsb.w	r2, [r7]
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	fb02 f201 	mul.w	r2, r2, r1
 80093d6:	0052      	lsls	r2, r2, #1
 80093d8:	fb52 5200 	smmla	r2, r2, r0, r5
 80093dc:	4132      	asrs	r2, r6
 80093de:	f302 0207 	ssat	r2, #8, r2
 80093e2:	9902      	ldr	r1, [sp, #8]
 80093e4:	f1bc 0f01 	cmp.w	ip, #1
 80093e8:	700a      	strb	r2, [r1, #0]
 80093ea:	d026      	beq.n	800943a <ai_mul_buffer_INT8+0x24a>
 80093ec:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80093f0:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80093f4:	1ac9      	subs	r1, r1, r3
 80093f6:	9b08      	ldr	r3, [sp, #32]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	fb02 f201 	mul.w	r2, r2, r1
 80093fe:	0052      	lsls	r2, r2, #1
 8009400:	fb52 5200 	smmla	r2, r2, r0, r5
 8009404:	4132      	asrs	r2, r6
 8009406:	f302 0207 	ssat	r2, #8, r2
 800940a:	9902      	ldr	r1, [sp, #8]
 800940c:	f1bc 0f02 	cmp.w	ip, #2
 8009410:	704a      	strb	r2, [r1, #1]
 8009412:	d012      	beq.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009414:	4619      	mov	r1, r3
 8009416:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800941a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800941e:	9c06      	ldr	r4, [sp, #24]
 8009420:	1a5b      	subs	r3, r3, r1
 8009422:	1b12      	subs	r2, r2, r4
 8009424:	fb03 f302 	mul.w	r3, r3, r2
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	fb53 5000 	smmla	r0, r3, r0, r5
 800942e:	fa40 f606 	asr.w	r6, r0, r6
 8009432:	f306 0607 	ssat	r6, #8, r6
 8009436:	9902      	ldr	r1, [sp, #8]
 8009438:	708e      	strb	r6, [r1, #2]
 800943a:	b00f      	add	sp, #60	; 0x3c
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	2c01      	cmp	r4, #1
 8009442:	f000 8176 	beq.w	8009732 <ai_mul_buffer_INT8+0x542>
 8009446:	9b05      	ldr	r3, [sp, #20]
 8009448:	9c01      	ldr	r4, [sp, #4]
 800944a:	f993 3000 	ldrsb.w	r3, [r3]
 800944e:	fa1f fb83 	uxth.w	fp, r3
 8009452:	ea4b 4b03 	orr.w	fp, fp, r3, lsl #16
 8009456:	fa2f fb8b 	sxtb16	fp, fp
 800945a:	fadb fb04 	ssub16	fp, fp, r4
 800945e:	2a00      	cmp	r2, #0
 8009460:	f000 8351 	beq.w	8009b06 <ai_mul_buffer_INT8+0x916>
 8009464:	1eb3      	subs	r3, r6, #2
 8009466:	f04f 0a01 	mov.w	sl, #1
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	9107      	str	r1, [sp, #28]
 800946e:	fa0a fa03 	lsl.w	sl, sl, r3
 8009472:	f1c6 0301 	rsb	r3, r6, #1
 8009476:	ea4f 442b 	mov.w	r4, fp, asr #16
 800947a:	920b      	str	r2, [sp, #44]	; 0x2c
 800947c:	930a      	str	r3, [sp, #40]	; 0x28
 800947e:	4442      	add	r2, r8
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	fa0f fb8b 	sxth.w	fp, fp
 8009486:	9403      	str	r4, [sp, #12]
 8009488:	9201      	str	r2, [sp, #4]
 800948a:	f103 0c04 	add.w	ip, r3, #4
 800948e:	e025      	b.n	80094dc <ai_mul_buffer_INT8+0x2ec>
 8009490:	9904      	ldr	r1, [sp, #16]
 8009492:	fb52 a200 	smmla	r2, r2, r0, sl
 8009496:	410a      	asrs	r2, r1
 8009498:	fb57 a700 	smmla	r7, r7, r0, sl
 800949c:	442a      	add	r2, r5
 800949e:	fb53 a300 	smmla	r3, r3, r0, sl
 80094a2:	fb54 a400 	smmla	r4, r4, r0, sl
 80094a6:	f302 0207 	ssat	r2, #8, r2
 80094aa:	410b      	asrs	r3, r1
 80094ac:	f80c 2c04 	strb.w	r2, [ip, #-4]
 80094b0:	442b      	add	r3, r5
 80094b2:	f303 0307 	ssat	r3, #8, r3
 80094b6:	410f      	asrs	r7, r1
 80094b8:	f80c 3c03 	strb.w	r3, [ip, #-3]
 80094bc:	442f      	add	r7, r5
 80094be:	f307 0707 	ssat	r7, #8, r7
 80094c2:	410c      	asrs	r4, r1
 80094c4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80094c8:	442c      	add	r4, r5
 80094ca:	f304 0407 	ssat	r4, #8, r4
 80094ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	f10c 0c04 	add.w	ip, ip, #4
 80094d8:	4598      	cmp	r8, r3
 80094da:	d045      	beq.n	8009568 <ai_mul_buffer_INT8+0x378>
 80094dc:	f858 3b04 	ldr.w	r3, [r8], #4
 80094e0:	9907      	ldr	r1, [sp, #28]
 80094e2:	fa2f f283 	sxtb16	r2, r3
 80094e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80094ea:	fa2f f383 	sxtb16	r3, r3
 80094ee:	fad3 f301 	ssub16	r3, r3, r1
 80094f2:	fad2 f201 	ssub16	r2, r2, r1
 80094f6:	1417      	asrs	r7, r2, #16
 80094f8:	9903      	ldr	r1, [sp, #12]
 80094fa:	141c      	asrs	r4, r3, #16
 80094fc:	2e15      	cmp	r6, #21
 80094fe:	fb12 f20b 	smulbb	r2, r2, fp
 8009502:	fb01 f707 	mul.w	r7, r1, r7
 8009506:	fb13 f30b 	smulbb	r3, r3, fp
 800950a:	fb01 f404 	mul.w	r4, r1, r4
 800950e:	dcbf      	bgt.n	8009490 <ai_mul_buffer_INT8+0x2a0>
 8009510:	2e00      	cmp	r6, #0
 8009512:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8009516:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800951a:	f340 809c 	ble.w	8009656 <ai_mul_buffer_INT8+0x466>
 800951e:	fb59 5900 	smmla	r9, r9, r0, r5
 8009522:	fb5e 5e00 	smmla	lr, lr, r0, r5
 8009526:	fa49 f906 	asr.w	r9, r9, r6
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	0064      	lsls	r4, r4, #1
 800952e:	fb53 5300 	smmla	r3, r3, r0, r5
 8009532:	fb54 5400 	smmla	r4, r4, r0, r5
 8009536:	f309 0907 	ssat	r9, #8, r9
 800953a:	f80c 9c04 	strb.w	r9, [ip, #-4]
 800953e:	4133      	asrs	r3, r6
 8009540:	f303 0307 	ssat	r3, #8, r3
 8009544:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8009548:	fa4e fe06 	asr.w	lr, lr, r6
 800954c:	f30e 0e07 	ssat	lr, #8, lr
 8009550:	f80c ec02 	strb.w	lr, [ip, #-2]
 8009554:	4134      	asrs	r4, r6
 8009556:	f304 0407 	ssat	r4, #8, r4
 800955a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800955e:	f10c 0c04 	add.w	ip, ip, #4
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	4598      	cmp	r8, r3
 8009566:	d1b9      	bne.n	80094dc <ai_mul_buffer_INT8+0x2ec>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800956c:	4413      	add	r3, r2
 800956e:	9a06      	ldr	r2, [sp, #24]
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	f993 3000 	ldrsb.w	r3, [r3]
 8009578:	eba3 0e02 	sub.w	lr, r3, r2
 800957c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800957e:	f012 0403 	ands.w	r4, r2, #3
 8009582:	f43f af5a 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009586:	2101      	movs	r1, #1
 8009588:	1eb2      	subs	r2, r6, #2
 800958a:	2e15      	cmp	r6, #21
 800958c:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8009590:	eba1 0c06 	sub.w	ip, r1, r6
 8009594:	fa01 f802 	lsl.w	r8, r1, r2
 8009598:	f300 81a8 	bgt.w	80098ec <ai_mul_buffer_INT8+0x6fc>
 800959c:	2e00      	cmp	r6, #0
 800959e:	f340 82b6 	ble.w	8009b0e <ai_mul_buffer_INT8+0x91e>
 80095a2:	9901      	ldr	r1, [sp, #4]
 80095a4:	9f08      	ldr	r7, [sp, #32]
 80095a6:	f991 2000 	ldrsb.w	r2, [r1]
 80095aa:	1bd2      	subs	r2, r2, r7
 80095ac:	fb0e f202 	mul.w	r2, lr, r2
 80095b0:	0052      	lsls	r2, r2, #1
 80095b2:	fb52 5200 	smmla	r2, r2, r0, r5
 80095b6:	4132      	asrs	r2, r6
 80095b8:	f302 0c07 	ssat	ip, #8, r2
 80095bc:	9b02      	ldr	r3, [sp, #8]
 80095be:	2c01      	cmp	r4, #1
 80095c0:	f883 c000 	strb.w	ip, [r3]
 80095c4:	f43f af39 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80095c8:	f991 2001 	ldrsb.w	r2, [r1, #1]
 80095cc:	1bd2      	subs	r2, r2, r7
 80095ce:	fb0e f202 	mul.w	r2, lr, r2
 80095d2:	0052      	lsls	r2, r2, #1
 80095d4:	fb52 5200 	smmla	r2, r2, r0, r5
 80095d8:	4132      	asrs	r2, r6
 80095da:	f302 0207 	ssat	r2, #8, r2
 80095de:	2c02      	cmp	r4, #2
 80095e0:	705a      	strb	r2, [r3, #1]
 80095e2:	f43f af2a 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80095e6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80095ea:	1bd2      	subs	r2, r2, r7
 80095ec:	fb0e f302 	mul.w	r3, lr, r2
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	fb53 5300 	smmla	r3, r3, r0, r5
 80095f6:	4133      	asrs	r3, r6
 80095f8:	f303 0307 	ssat	r3, #8, r3
 80095fc:	9a02      	ldr	r2, [sp, #8]
 80095fe:	7093      	strb	r3, [r2, #2]
 8009600:	e71b      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009602:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009604:	408f      	lsls	r7, r1
 8009606:	f307 071f 	ssat	r7, #32, r7
 800960a:	fb57 f710 	smmulr	r7, r7, r0
 800960e:	408a      	lsls	r2, r1
 8009610:	f302 021f 	ssat	r2, #32, r2
 8009614:	fb52 f210 	smmulr	r2, r2, r0
 8009618:	408c      	lsls	r4, r1
 800961a:	f304 041f 	ssat	r4, #32, r4
 800961e:	fb54 f410 	smmulr	r4, r4, r0
 8009622:	408b      	lsls	r3, r1
 8009624:	f303 031f 	ssat	r3, #32, r3
 8009628:	fb53 f310 	smmulr	r3, r3, r0
 800962c:	442f      	add	r7, r5
 800962e:	f307 0707 	ssat	r7, #8, r7
 8009632:	f80c 7c04 	strb.w	r7, [ip, #-4]
 8009636:	442c      	add	r4, r5
 8009638:	f304 0407 	ssat	r4, #8, r4
 800963c:	f80c 4c03 	strb.w	r4, [ip, #-3]
 8009640:	442a      	add	r2, r5
 8009642:	f302 0207 	ssat	r2, #8, r2
 8009646:	f80c 2c02 	strb.w	r2, [ip, #-2]
 800964a:	442b      	add	r3, r5
 800964c:	f303 0307 	ssat	r3, #8, r3
 8009650:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8009654:	e644      	b.n	80092e0 <ai_mul_buffer_INT8+0xf0>
 8009656:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009658:	408a      	lsls	r2, r1
 800965a:	f302 021f 	ssat	r2, #32, r2
 800965e:	fb52 f210 	smmulr	r2, r2, r0
 8009662:	408f      	lsls	r7, r1
 8009664:	f307 071f 	ssat	r7, #32, r7
 8009668:	fb57 f710 	smmulr	r7, r7, r0
 800966c:	408b      	lsls	r3, r1
 800966e:	f303 031f 	ssat	r3, #32, r3
 8009672:	fb53 f310 	smmulr	r3, r3, r0
 8009676:	408c      	lsls	r4, r1
 8009678:	f304 041f 	ssat	r4, #32, r4
 800967c:	fb54 f410 	smmulr	r4, r4, r0
 8009680:	442a      	add	r2, r5
 8009682:	f302 0207 	ssat	r2, #8, r2
 8009686:	f80c 2c04 	strb.w	r2, [ip, #-4]
 800968a:	442b      	add	r3, r5
 800968c:	f303 0307 	ssat	r3, #8, r3
 8009690:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8009694:	442f      	add	r7, r5
 8009696:	f307 0707 	ssat	r7, #8, r7
 800969a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 800969e:	442c      	add	r4, r5
 80096a0:	f304 0407 	ssat	r4, #8, r4
 80096a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80096a8:	e713      	b.n	80094d2 <ai_mul_buffer_INT8+0x2e2>
 80096aa:	9f05      	ldr	r7, [sp, #20]
 80096ac:	9906      	ldr	r1, [sp, #24]
 80096ae:	f997 6000 	ldrsb.w	r6, [r7]
 80096b2:	9a03      	ldr	r2, [sp, #12]
 80096b4:	1a76      	subs	r6, r6, r1
 80096b6:	9908      	ldr	r1, [sp, #32]
 80096b8:	f992 2000 	ldrsb.w	r2, [r2]
 80096bc:	1a52      	subs	r2, r2, r1
 80096be:	fb02 f206 	mul.w	r2, r2, r6
 80096c2:	fb52 e200 	smmla	r2, r2, r0, lr
 80096c6:	4122      	asrs	r2, r4
 80096c8:	442a      	add	r2, r5
 80096ca:	f302 0207 	ssat	r2, #8, r2
 80096ce:	9b02      	ldr	r3, [sp, #8]
 80096d0:	f1bc 0f01 	cmp.w	ip, #1
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	f43f aeb0 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80096da:	9906      	ldr	r1, [sp, #24]
 80096dc:	f997 6001 	ldrsb.w	r6, [r7, #1]
 80096e0:	9a03      	ldr	r2, [sp, #12]
 80096e2:	1a76      	subs	r6, r6, r1
 80096e4:	9908      	ldr	r1, [sp, #32]
 80096e6:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80096ea:	1a52      	subs	r2, r2, r1
 80096ec:	fb02 f206 	mul.w	r2, r2, r6
 80096f0:	fb52 e200 	smmla	r2, r2, r0, lr
 80096f4:	4122      	asrs	r2, r4
 80096f6:	442a      	add	r2, r5
 80096f8:	f302 0207 	ssat	r2, #8, r2
 80096fc:	f1bc 0f02 	cmp.w	ip, #2
 8009700:	705a      	strb	r2, [r3, #1]
 8009702:	f43f ae9a 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009706:	9a03      	ldr	r2, [sp, #12]
 8009708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800970c:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8009710:	1a52      	subs	r2, r2, r1
 8009712:	9906      	ldr	r1, [sp, #24]
 8009714:	1a5b      	subs	r3, r3, r1
 8009716:	fb03 f302 	mul.w	r3, r3, r2
 800971a:	fb53 e000 	smmla	r0, r3, r0, lr
 800971e:	fa40 f404 	asr.w	r4, r0, r4
 8009722:	4425      	add	r5, r4
 8009724:	f305 0507 	ssat	r5, #8, r5
 8009728:	9e02      	ldr	r6, [sp, #8]
 800972a:	70b5      	strb	r5, [r6, #2]
 800972c:	b00f      	add	sp, #60	; 0x3c
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009732:	f998 3000 	ldrsb.w	r3, [r8]
 8009736:	b29f      	uxth	r7, r3
 8009738:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800973c:	fa2f f787 	sxtb16	r7, r7
 8009740:	fad7 f101 	ssub16	r1, r7, r1
 8009744:	2a00      	cmp	r2, #0
 8009746:	f000 820f 	beq.w	8009b68 <ai_mul_buffer_INT8+0x978>
 800974a:	0093      	lsls	r3, r2, #2
 800974c:	f1c6 0201 	rsb	r2, r6, #1
 8009750:	f1a6 0a02 	sub.w	sl, r6, #2
 8009754:	ea4f 4b21 	mov.w	fp, r1, asr #16
 8009758:	9207      	str	r2, [sp, #28]
 800975a:	b209      	sxth	r1, r1
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	fa04 fa0a 	lsl.w	sl, r4, sl
 8009762:	930a      	str	r3, [sp, #40]	; 0x28
 8009764:	18d3      	adds	r3, r2, r3
 8009766:	9105      	str	r1, [sp, #20]
 8009768:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800976c:	4696      	mov	lr, r2
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	f103 0c04 	add.w	ip, r3, #4
 8009776:	e025      	b.n	80097c4 <ai_mul_buffer_INT8+0x5d4>
 8009778:	9904      	ldr	r1, [sp, #16]
 800977a:	fb52 a200 	smmla	r2, r2, r0, sl
 800977e:	410a      	asrs	r2, r1
 8009780:	fb57 a700 	smmla	r7, r7, r0, sl
 8009784:	442a      	add	r2, r5
 8009786:	fb53 a300 	smmla	r3, r3, r0, sl
 800978a:	fb54 a400 	smmla	r4, r4, r0, sl
 800978e:	f302 0207 	ssat	r2, #8, r2
 8009792:	410b      	asrs	r3, r1
 8009794:	f80c 2c04 	strb.w	r2, [ip, #-4]
 8009798:	442b      	add	r3, r5
 800979a:	f303 0307 	ssat	r3, #8, r3
 800979e:	410f      	asrs	r7, r1
 80097a0:	f80c 3c03 	strb.w	r3, [ip, #-3]
 80097a4:	442f      	add	r7, r5
 80097a6:	f307 0707 	ssat	r7, #8, r7
 80097aa:	410c      	asrs	r4, r1
 80097ac:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80097b0:	442c      	add	r4, r5
 80097b2:	f304 0407 	ssat	r4, #8, r4
 80097b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	f10c 0c04 	add.w	ip, ip, #4
 80097c0:	459e      	cmp	lr, r3
 80097c2:	d046      	beq.n	8009852 <ai_mul_buffer_INT8+0x662>
 80097c4:	f85e 3b04 	ldr.w	r3, [lr], #4
 80097c8:	9c01      	ldr	r4, [sp, #4]
 80097ca:	fa2f f283 	sxtb16	r2, r3
 80097ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 80097d2:	fa2f f383 	sxtb16	r3, r3
 80097d6:	fad3 f304 	ssub16	r3, r3, r4
 80097da:	fad2 f204 	ssub16	r2, r2, r4
 80097de:	1417      	asrs	r7, r2, #16
 80097e0:	9905      	ldr	r1, [sp, #20]
 80097e2:	ea4f 4823 	mov.w	r8, r3, asr #16
 80097e6:	2e15      	cmp	r6, #21
 80097e8:	fb12 f201 	smulbb	r2, r2, r1
 80097ec:	fb0b f707 	mul.w	r7, fp, r7
 80097f0:	fb13 f301 	smulbb	r3, r3, r1
 80097f4:	fb0b f408 	mul.w	r4, fp, r8
 80097f8:	dcbe      	bgt.n	8009778 <ai_mul_buffer_INT8+0x588>
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8009800:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8009804:	f340 80a7 	ble.w	8009956 <ai_mul_buffer_INT8+0x766>
 8009808:	fb59 5900 	smmla	r9, r9, r0, r5
 800980c:	fb58 5800 	smmla	r8, r8, r0, r5
 8009810:	fa49 f906 	asr.w	r9, r9, r6
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	0064      	lsls	r4, r4, #1
 8009818:	fb53 5300 	smmla	r3, r3, r0, r5
 800981c:	fb54 5400 	smmla	r4, r4, r0, r5
 8009820:	f309 0907 	ssat	r9, #8, r9
 8009824:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8009828:	4133      	asrs	r3, r6
 800982a:	f303 0307 	ssat	r3, #8, r3
 800982e:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8009832:	fa48 f806 	asr.w	r8, r8, r6
 8009836:	f308 0807 	ssat	r8, #8, r8
 800983a:	f80c 8c02 	strb.w	r8, [ip, #-2]
 800983e:	4134      	asrs	r4, r6
 8009840:	f304 0407 	ssat	r4, #8, r4
 8009844:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009848:	f10c 0c04 	add.w	ip, ip, #4
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	459e      	cmp	lr, r3
 8009850:	d1b8      	bne.n	80097c4 <ai_mul_buffer_INT8+0x5d4>
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009856:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800985a:	4413      	add	r3, r2
 800985c:	9302      	str	r3, [sp, #8]
 800985e:	f998 3000 	ldrsb.w	r3, [r8]
 8009862:	9a08      	ldr	r2, [sp, #32]
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009868:	f012 0e03 	ands.w	lr, r2, #3
 800986c:	f43f ade5 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009870:	2101      	movs	r1, #1
 8009872:	1eb2      	subs	r2, r6, #2
 8009874:	2e15      	cmp	r6, #21
 8009876:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 800987a:	eba1 0c06 	sub.w	ip, r1, r6
 800987e:	fa01 f802 	lsl.w	r8, r1, r2
 8009882:	f300 80d8 	bgt.w	8009a36 <ai_mul_buffer_INT8+0x846>
 8009886:	9903      	ldr	r1, [sp, #12]
 8009888:	2e00      	cmp	r6, #0
 800988a:	f991 2000 	ldrsb.w	r2, [r1]
 800988e:	f340 8104 	ble.w	8009a9a <ai_mul_buffer_INT8+0x8aa>
 8009892:	9f06      	ldr	r7, [sp, #24]
 8009894:	1bd2      	subs	r2, r2, r7
 8009896:	fb03 f202 	mul.w	r2, r3, r2
 800989a:	0052      	lsls	r2, r2, #1
 800989c:	fb52 5200 	smmla	r2, r2, r0, r5
 80098a0:	4132      	asrs	r2, r6
 80098a2:	f302 0207 	ssat	r2, #8, r2
 80098a6:	9c02      	ldr	r4, [sp, #8]
 80098a8:	f1be 0f01 	cmp.w	lr, #1
 80098ac:	7022      	strb	r2, [r4, #0]
 80098ae:	f43f adc4 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80098b2:	f991 2001 	ldrsb.w	r2, [r1, #1]
 80098b6:	1bd2      	subs	r2, r2, r7
 80098b8:	fb03 f202 	mul.w	r2, r3, r2
 80098bc:	0052      	lsls	r2, r2, #1
 80098be:	fb52 5200 	smmla	r2, r2, r0, r5
 80098c2:	4132      	asrs	r2, r6
 80098c4:	f302 0207 	ssat	r2, #8, r2
 80098c8:	f1be 0f02 	cmp.w	lr, #2
 80098cc:	7062      	strb	r2, [r4, #1]
 80098ce:	f43f adb4 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80098d2:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80098d6:	1bd2      	subs	r2, r2, r7
 80098d8:	fb03 f302 	mul.w	r3, r3, r2
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	fb53 5300 	smmla	r3, r3, r0, r5
 80098e2:	4133      	asrs	r3, r6
 80098e4:	f303 0307 	ssat	r3, #8, r3
 80098e8:	70a3      	strb	r3, [r4, #2]
 80098ea:	e5a6      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 80098ec:	9e01      	ldr	r6, [sp, #4]
 80098ee:	9908      	ldr	r1, [sp, #32]
 80098f0:	f996 2000 	ldrsb.w	r2, [r6]
 80098f4:	1a52      	subs	r2, r2, r1
 80098f6:	fb0e f202 	mul.w	r2, lr, r2
 80098fa:	fb52 8200 	smmla	r2, r2, r0, r8
 80098fe:	413a      	asrs	r2, r7
 8009900:	442a      	add	r2, r5
 8009902:	f302 0207 	ssat	r2, #8, r2
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	2c01      	cmp	r4, #1
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	f43f ad95 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009910:	f996 2001 	ldrsb.w	r2, [r6, #1]
 8009914:	9908      	ldr	r1, [sp, #32]
 8009916:	1a52      	subs	r2, r2, r1
 8009918:	fb0e f202 	mul.w	r2, lr, r2
 800991c:	fb52 8200 	smmla	r2, r2, r0, r8
 8009920:	413a      	asrs	r2, r7
 8009922:	442a      	add	r2, r5
 8009924:	f302 0207 	ssat	r2, #8, r2
 8009928:	2c02      	cmp	r4, #2
 800992a:	705a      	strb	r2, [r3, #1]
 800992c:	f43f ad85 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009930:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009934:	9908      	ldr	r1, [sp, #32]
 8009936:	1a52      	subs	r2, r2, r1
 8009938:	fb0e f302 	mul.w	r3, lr, r2
 800993c:	fb53 8000 	smmla	r0, r3, r0, r8
 8009940:	fa40 f707 	asr.w	r7, r0, r7
 8009944:	443d      	add	r5, r7
 8009946:	f305 0507 	ssat	r5, #8, r5
 800994a:	9902      	ldr	r1, [sp, #8]
 800994c:	708d      	strb	r5, [r1, #2]
 800994e:	e574      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009950:	f8cd 800c 	str.w	r8, [sp, #12]
 8009954:	e522      	b.n	800939c <ai_mul_buffer_INT8+0x1ac>
 8009956:	9907      	ldr	r1, [sp, #28]
 8009958:	408a      	lsls	r2, r1
 800995a:	f302 021f 	ssat	r2, #32, r2
 800995e:	fb52 f210 	smmulr	r2, r2, r0
 8009962:	408f      	lsls	r7, r1
 8009964:	f307 071f 	ssat	r7, #32, r7
 8009968:	fb57 f710 	smmulr	r7, r7, r0
 800996c:	408b      	lsls	r3, r1
 800996e:	f303 031f 	ssat	r3, #32, r3
 8009972:	fb53 f310 	smmulr	r3, r3, r0
 8009976:	408c      	lsls	r4, r1
 8009978:	f304 041f 	ssat	r4, #32, r4
 800997c:	fb54 f410 	smmulr	r4, r4, r0
 8009980:	442a      	add	r2, r5
 8009982:	f302 0207 	ssat	r2, #8, r2
 8009986:	f80c 2c04 	strb.w	r2, [ip, #-4]
 800998a:	442b      	add	r3, r5
 800998c:	f303 0307 	ssat	r3, #8, r3
 8009990:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8009994:	442f      	add	r7, r5
 8009996:	f307 0707 	ssat	r7, #8, r7
 800999a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 800999e:	442c      	add	r4, r5
 80099a0:	f304 0407 	ssat	r4, #8, r4
 80099a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80099a8:	e707      	b.n	80097ba <ai_mul_buffer_INT8+0x5ca>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	9c05      	ldr	r4, [sp, #20]
 80099ae:	f993 1000 	ldrsb.w	r1, [r3]
 80099b2:	f994 2000 	ldrsb.w	r2, [r4]
 80099b6:	9e08      	ldr	r6, [sp, #32]
 80099b8:	9f06      	ldr	r7, [sp, #24]
 80099ba:	1b89      	subs	r1, r1, r6
 80099bc:	1bd2      	subs	r2, r2, r7
 80099be:	fb02 f201 	mul.w	r2, r2, r1
 80099c2:	fa02 f208 	lsl.w	r2, r2, r8
 80099c6:	f302 021f 	ssat	r2, #32, r2
 80099ca:	fb52 f210 	smmulr	r2, r2, r0
 80099ce:	442a      	add	r2, r5
 80099d0:	f302 0207 	ssat	r2, #8, r2
 80099d4:	9902      	ldr	r1, [sp, #8]
 80099d6:	f1bc 0f01 	cmp.w	ip, #1
 80099da:	700a      	strb	r2, [r1, #0]
 80099dc:	f43f ad2d 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 80099e0:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80099e4:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80099e8:	1b89      	subs	r1, r1, r6
 80099ea:	1bd2      	subs	r2, r2, r7
 80099ec:	fb02 f201 	mul.w	r2, r2, r1
 80099f0:	fa02 f208 	lsl.w	r2, r2, r8
 80099f4:	f302 021f 	ssat	r2, #32, r2
 80099f8:	fb52 f210 	smmulr	r2, r2, r0
 80099fc:	442a      	add	r2, r5
 80099fe:	f302 0207 	ssat	r2, #8, r2
 8009a02:	9902      	ldr	r1, [sp, #8]
 8009a04:	f1bc 0f02 	cmp.w	ip, #2
 8009a08:	704a      	strb	r2, [r1, #1]
 8009a0a:	f43f ad16 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009a0e:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8009a12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009a16:	9f06      	ldr	r7, [sp, #24]
 8009a18:	1b9b      	subs	r3, r3, r6
 8009a1a:	1bd2      	subs	r2, r2, r7
 8009a1c:	fb03 f302 	mul.w	r3, r3, r2
 8009a20:	fa03 f308 	lsl.w	r3, r3, r8
 8009a24:	f303 031f 	ssat	r3, #32, r3
 8009a28:	fb53 f310 	smmulr	r3, r3, r0
 8009a2c:	442b      	add	r3, r5
 8009a2e:	f303 0307 	ssat	r3, #8, r3
 8009a32:	708b      	strb	r3, [r1, #2]
 8009a34:	e501      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009a36:	9e03      	ldr	r6, [sp, #12]
 8009a38:	9906      	ldr	r1, [sp, #24]
 8009a3a:	f996 2000 	ldrsb.w	r2, [r6]
 8009a3e:	1a52      	subs	r2, r2, r1
 8009a40:	fb03 f202 	mul.w	r2, r3, r2
 8009a44:	fb52 8200 	smmla	r2, r2, r0, r8
 8009a48:	413a      	asrs	r2, r7
 8009a4a:	442a      	add	r2, r5
 8009a4c:	f302 0207 	ssat	r2, #8, r2
 8009a50:	9c02      	ldr	r4, [sp, #8]
 8009a52:	f1be 0f01 	cmp.w	lr, #1
 8009a56:	7022      	strb	r2, [r4, #0]
 8009a58:	f43f acef 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009a5c:	f996 2001 	ldrsb.w	r2, [r6, #1]
 8009a60:	9906      	ldr	r1, [sp, #24]
 8009a62:	1a52      	subs	r2, r2, r1
 8009a64:	fb03 f202 	mul.w	r2, r3, r2
 8009a68:	fb52 8200 	smmla	r2, r2, r0, r8
 8009a6c:	413a      	asrs	r2, r7
 8009a6e:	442a      	add	r2, r5
 8009a70:	f302 0207 	ssat	r2, #8, r2
 8009a74:	f1be 0f02 	cmp.w	lr, #2
 8009a78:	7062      	strb	r2, [r4, #1]
 8009a7a:	f43f acde 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009a7e:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009a82:	9906      	ldr	r1, [sp, #24]
 8009a84:	1a52      	subs	r2, r2, r1
 8009a86:	fb03 f302 	mul.w	r3, r3, r2
 8009a8a:	fb53 8300 	smmla	r3, r3, r0, r8
 8009a8e:	413b      	asrs	r3, r7
 8009a90:	442b      	add	r3, r5
 8009a92:	f303 0307 	ssat	r3, #8, r3
 8009a96:	70a3      	strb	r3, [r4, #2]
 8009a98:	e4cf      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009a9a:	9c06      	ldr	r4, [sp, #24]
 8009a9c:	1b12      	subs	r2, r2, r4
 8009a9e:	fb03 f202 	mul.w	r2, r3, r2
 8009aa2:	fa02 f20c 	lsl.w	r2, r2, ip
 8009aa6:	f302 021f 	ssat	r2, #32, r2
 8009aaa:	fb52 f210 	smmulr	r2, r2, r0
 8009aae:	442a      	add	r2, r5
 8009ab0:	f302 0207 	ssat	r2, #8, r2
 8009ab4:	9e02      	ldr	r6, [sp, #8]
 8009ab6:	f1be 0f01 	cmp.w	lr, #1
 8009aba:	7032      	strb	r2, [r6, #0]
 8009abc:	f43f acbd 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009ac0:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8009ac4:	1b12      	subs	r2, r2, r4
 8009ac6:	fb03 f202 	mul.w	r2, r3, r2
 8009aca:	fa02 f20c 	lsl.w	r2, r2, ip
 8009ace:	f302 021f 	ssat	r2, #32, r2
 8009ad2:	fb52 f210 	smmulr	r2, r2, r0
 8009ad6:	442a      	add	r2, r5
 8009ad8:	f302 0207 	ssat	r2, #8, r2
 8009adc:	f1be 0f02 	cmp.w	lr, #2
 8009ae0:	7072      	strb	r2, [r6, #1]
 8009ae2:	f43f acaa 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009ae6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8009aea:	1b12      	subs	r2, r2, r4
 8009aec:	fb03 f302 	mul.w	r3, r3, r2
 8009af0:	fa03 f30c 	lsl.w	r3, r3, ip
 8009af4:	f303 031f 	ssat	r3, #32, r3
 8009af8:	fb53 f310 	smmulr	r3, r3, r0
 8009afc:	442b      	add	r3, r5
 8009afe:	f303 0307 	ssat	r3, #8, r3
 8009b02:	70b3      	strb	r3, [r6, #2]
 8009b04:	e499      	b.n	800943a <ai_mul_buffer_INT8+0x24a>
 8009b06:	f8cd 8004 	str.w	r8, [sp, #4]
 8009b0a:	463a      	mov	r2, r7
 8009b0c:	e534      	b.n	8009578 <ai_mul_buffer_INT8+0x388>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	9908      	ldr	r1, [sp, #32]
 8009b12:	f993 2000 	ldrsb.w	r2, [r3]
 8009b16:	1a52      	subs	r2, r2, r1
 8009b18:	fb0e f202 	mul.w	r2, lr, r2
 8009b1c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009b20:	f302 021f 	ssat	r2, #32, r2
 8009b24:	fb52 f210 	smmulr	r2, r2, r0
 8009b28:	442a      	add	r2, r5
 8009b2a:	f302 0207 	ssat	r2, #8, r2
 8009b2e:	9e02      	ldr	r6, [sp, #8]
 8009b30:	2c01      	cmp	r4, #1
 8009b32:	7032      	strb	r2, [r6, #0]
 8009b34:	f43f ac81 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009b38:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8009b3c:	1a52      	subs	r2, r2, r1
 8009b3e:	fb0e f202 	mul.w	r2, lr, r2
 8009b42:	fa02 f20c 	lsl.w	r2, r2, ip
 8009b46:	f302 021f 	ssat	r2, #32, r2
 8009b4a:	fb52 f210 	smmulr	r2, r2, r0
 8009b4e:	442a      	add	r2, r5
 8009b50:	f302 0207 	ssat	r2, #8, r2
 8009b54:	2c02      	cmp	r4, #2
 8009b56:	7072      	strb	r2, [r6, #1]
 8009b58:	f43f ac6f 	beq.w	800943a <ai_mul_buffer_INT8+0x24a>
 8009b5c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8009b60:	1a52      	subs	r2, r2, r1
 8009b62:	fb0e f302 	mul.w	r3, lr, r2
 8009b66:	e7c3      	b.n	8009af0 <ai_mul_buffer_INT8+0x900>
 8009b68:	9a05      	ldr	r2, [sp, #20]
 8009b6a:	9203      	str	r2, [sp, #12]
 8009b6c:	e679      	b.n	8009862 <ai_mul_buffer_INT8+0x672>
 8009b6e:	bf00      	nop

08009b70 <ai_sub_buffer_INT8>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	b085      	sub	sp, #20
 8009b76:	461f      	mov	r7, r3
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	08bf      	lsrs	r7, r7, #2
 8009b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009b80:	f993 a000 	ldrsb.w	sl, [r3]
 8009b84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009b86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b88:	fa1f fe8a 	uxth.w	lr, sl
 8009b8c:	f994 8000 	ldrsb.w	r8, [r4]
 8009b90:	edd5 7a00 	vldr	s15, [r5]
 8009b94:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
 8009b98:	f993 5000 	ldrsb.w	r5, [r3]
 8009b9c:	fa1f fc88 	uxth.w	ip, r8
 8009ba0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009ba2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009ba4:	ee06 5a10 	vmov	s12, r5
 8009ba8:	ed94 7a00 	vldr	s14, [r4]
 8009bac:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
 8009bb0:	ed96 5a00 	vldr	s10, [r6]
 8009bb4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009bbe:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8009bc2:	bb23      	cbnz	r3, 8009c0e <ai_sub_buffer_INT8+0x9e>
 8009bc4:	eeb4 7a67 	vcmp.f32	s14, s15
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	f040 8128 	bne.w	8009e20 <ai_sub_buffer_INT8+0x2b0>
 8009bd0:	45a8      	cmp	r8, r5
 8009bd2:	f040 8125 	bne.w	8009e20 <ai_sub_buffer_INT8+0x2b0>
 8009bd6:	eeb4 5a67 	vcmp.f32	s10, s15
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	f040 811f 	bne.w	8009e20 <ai_sub_buffer_INT8+0x2b0>
 8009be2:	45aa      	cmp	sl, r5
 8009be4:	f040 811c 	bne.w	8009e20 <ai_sub_buffer_INT8+0x2b0>
 8009be8:	9b00      	ldr	r3, [sp, #0]
 8009bea:	b16b      	cbz	r3, 8009c08 <ai_sub_buffer_INT8+0x98>
 8009bec:	440b      	add	r3, r1
 8009bee:	461e      	mov	r6, r3
 8009bf0:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8009bf4:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8009bf8:	1b1b      	subs	r3, r3, r4
 8009bfa:	442b      	add	r3, r5
 8009bfc:	f303 0307 	ssat	r3, #8, r3
 8009c00:	42b1      	cmp	r1, r6
 8009c02:	f800 3b01 	strb.w	r3, [r0], #1
 8009c06:	d1f3      	bne.n	8009bf0 <ai_sub_buffer_INT8+0x80>
 8009c08:	b005      	add	sp, #20
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	f000 8250 	beq.w	800a0b4 <ai_sub_buffer_INT8+0x544>
 8009c14:	f992 3000 	ldrsb.w	r3, [r2]
 8009c18:	eba3 0a0a 	sub.w	sl, r3, sl
 8009c1c:	ee07 aa90 	vmov	s15, sl
 8009c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c24:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8009c28:	2f00      	cmp	r7, #0
 8009c2a:	f000 8341 	beq.w	800a2b0 <ai_sub_buffer_INT8+0x740>
 8009c2e:	00bf      	lsls	r7, r7, #2
 8009c30:	eef1 5a46 	vneg.f32	s11, s12
 8009c34:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8009c38:	4606      	mov	r6, r0
 8009c3a:	eb01 0e07 	add.w	lr, r1, r7
 8009c3e:	ed9f 5a77 	vldr	s10, [pc, #476]	; 8009e1c <ai_sub_buffer_INT8+0x2ac>
 8009c42:	f851 3b04 	ldr.w	r3, [r1], #4
 8009c46:	fa2f f283 	sxtb16	r2, r3
 8009c4a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009c4e:	fa2f f383 	sxtb16	r3, r3
 8009c52:	fad3 f40c 	ssub16	r4, r3, ip
 8009c56:	fad2 f20c 	ssub16	r2, r2, ip
 8009c5a:	b213      	sxth	r3, r2
 8009c5c:	eeb0 7a65 	vmov.f32	s14, s11
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c68:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009c6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009c70:	eef0 7a47 	vmov.f32	s15, s14
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c78:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c84:	ee17 9a90 	vmov	r9, s15
 8009c88:	f309 0907 	ssat	r9, #8, r9
 8009c8c:	1412      	asrs	r2, r2, #16
 8009c8e:	eeb0 7a65 	vmov.f32	s14, s11
 8009c92:	fa4f f989 	sxtb.w	r9, r9
 8009c96:	ee07 2a90 	vmov	s15, r2
 8009c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c9e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009ca2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009ca6:	eef0 7a47 	vmov.f32	s15, s14
 8009caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cae:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cba:	ee17 3a90 	vmov	r3, s15
 8009cbe:	f303 0307 	ssat	r3, #8, r3
 8009cc2:	b222      	sxth	r2, r4
 8009cc4:	eeb0 7a65 	vmov.f32	s14, s11
 8009cc8:	ee07 2a90 	vmov	s15, r2
 8009ccc:	b25a      	sxtb	r2, r3
 8009cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009cd6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009cda:	eef0 7a47 	vmov.f32	s15, s14
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cee:	ee17 5a90 	vmov	r5, s15
 8009cf2:	f305 0507 	ssat	r5, #8, r5
 8009cf6:	1423      	asrs	r3, r4, #16
 8009cf8:	eeb0 7a65 	vmov.f32	s14, s11
 8009cfc:	b26d      	sxtb	r5, r5
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d06:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009d0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009d0e:	eef0 7a47 	vmov.f32	s15, s14
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d22:	ee17 3a90 	vmov	r3, s15
 8009d26:	f303 0407 	ssat	r4, #8, r3
 8009d2a:	0413      	lsls	r3, r2, #16
 8009d2c:	4571      	cmp	r1, lr
 8009d2e:	fa5f f989 	uxtb.w	r9, r9
 8009d32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d36:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8009d3a:	ea43 0309 	orr.w	r3, r3, r9
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	ea43 0302 	orr.w	r3, r3, r2
 8009d44:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8009d48:	f846 3b04 	str.w	r3, [r6], #4
 8009d4c:	f47f af79 	bne.w	8009c42 <ai_sub_buffer_INT8+0xd2>
 8009d50:	4438      	add	r0, r7
 8009d52:	9b00      	ldr	r3, [sp, #0]
 8009d54:	f013 0303 	ands.w	r3, r3, #3
 8009d58:	f43f af56 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 8009d5c:	f99e 2000 	ldrsb.w	r2, [lr]
 8009d60:	eef1 5a46 	vneg.f32	s11, s12
 8009d64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009d68:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8009e1c <ai_sub_buffer_INT8+0x2ac>
 8009d6c:	eba2 0208 	sub.w	r2, r2, r8
 8009d70:	eeb0 5a65 	vmov.f32	s10, s11
 8009d74:	ee07 2a90 	vmov	s15, r2
 8009d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d7c:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8009d80:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8009d8c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d94:	ee17 2a90 	vmov	r2, s15
 8009d98:	f302 0207 	ssat	r2, #8, r2
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	7002      	strb	r2, [r0, #0]
 8009da0:	f43f af32 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 8009da4:	f99e 2001 	ldrsb.w	r2, [lr, #1]
 8009da8:	eeb0 5a65 	vmov.f32	s10, s11
 8009dac:	eba2 0208 	sub.w	r2, r2, r8
 8009db0:	ee07 2a90 	vmov	s15, r2
 8009db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009db8:	eea6 5aa7 	vfma.f32	s10, s13, s15
 8009dbc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8009dc0:	eef0 7a45 	vmov.f32	s15, s10
 8009dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc8:	fe37 5a06 	vselgt.f32	s10, s14, s12
 8009dcc:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dd4:	ee17 2a90 	vmov	r2, s15
 8009dd8:	f302 0207 	ssat	r2, #8, r2
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	7042      	strb	r2, [r0, #1]
 8009de0:	f43f af12 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 8009de4:	f99e 3002 	ldrsb.w	r3, [lr, #2]
 8009de8:	eba3 0808 	sub.w	r8, r3, r8
 8009dec:	ee07 8a90 	vmov	s15, r8
 8009df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009df4:	eee7 5aa6 	vfma.f32	s11, s15, s13
 8009df8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8009dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e00:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8009e04:	ee77 5a25 	vadd.f32	s11, s14, s11
 8009e08:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8009e0c:	ee15 3a90 	vmov	r3, s11
 8009e10:	f303 0307 	ssat	r3, #8, r3
 8009e14:	7083      	strb	r3, [r0, #2]
 8009e16:	b005      	add	sp, #20
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	befffffc 	.word	0xbefffffc
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	f000 8243 	beq.w	800a2ac <ai_sub_buffer_INT8+0x73c>
 8009e26:	00bb      	lsls	r3, r7, #2
 8009e28:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8009e2c:	4691      	mov	r9, r2
 8009e2e:	9203      	str	r2, [sp, #12]
 8009e30:	9302      	str	r3, [sp, #8]
 8009e32:	18cb      	adds	r3, r1, r3
 8009e34:	4683      	mov	fp, r0
 8009e36:	ed1f 5a07 	vldr	s10, [pc, #-28]	; 8009e1c <ai_sub_buffer_INT8+0x2ac>
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e42:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e46:	ea4f 2734 	mov.w	r7, r4, ror #8
 8009e4a:	ea4f 2633 	mov.w	r6, r3, ror #8
 8009e4e:	fa2f f484 	sxtb16	r4, r4
 8009e52:	fa2f f787 	sxtb16	r7, r7
 8009e56:	fa2f f383 	sxtb16	r3, r3
 8009e5a:	fa2f f686 	sxtb16	r6, r6
 8009e5e:	fad7 f70c 	ssub16	r7, r7, ip
 8009e62:	fad4 f40c 	ssub16	r4, r4, ip
 8009e66:	fad6 f60e 	ssub16	r6, r6, lr
 8009e6a:	fad3 f30e 	ssub16	r3, r3, lr
 8009e6e:	b225      	sxth	r5, r4
 8009e70:	eeb0 4a46 	vmov.f32	s8, s12
 8009e74:	ee07 5a90 	vmov	s15, r5
 8009e78:	b21d      	sxth	r5, r3
 8009e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e7e:	ee07 5a10 	vmov	s14, r5
 8009e82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e86:	eea7 4aa6 	vfma.f32	s8, s15, s13
 8009e8a:	eef0 7a44 	vmov.f32	s15, s8
 8009e8e:	eee7 7a65 	vfms.f32	s15, s14, s11
 8009e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ea6:	ee17 5a90 	vmov	r5, s15
 8009eaa:	f305 0507 	ssat	r5, #8, r5
 8009eae:	1424      	asrs	r4, r4, #16
 8009eb0:	eeb0 4a46 	vmov.f32	s8, s12
 8009eb4:	141b      	asrs	r3, r3, #16
 8009eb6:	ee07 4a90 	vmov	s15, r4
 8009eba:	b26d      	sxtb	r5, r5
 8009ebc:	ee07 3a10 	vmov	s14, r3
 8009ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ec8:	eea7 4aa6 	vfma.f32	s8, s15, s13
 8009ecc:	eef0 7a44 	vmov.f32	s15, s8
 8009ed0:	eee7 7a65 	vfms.f32	s15, s14, s11
 8009ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009edc:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ee8:	ee17 3a90 	vmov	r3, s15
 8009eec:	f303 0307 	ssat	r3, #8, r3
 8009ef0:	b23c      	sxth	r4, r7
 8009ef2:	eeb0 4a46 	vmov.f32	s8, s12
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	ee07 4a90 	vmov	s15, r4
 8009efc:	b234      	sxth	r4, r6
 8009efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f02:	ee07 4a10 	vmov	s14, r4
 8009f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f0a:	eea7 4aa6 	vfma.f32	s8, s15, s13
 8009f0e:	eef0 7a44 	vmov.f32	s15, s8
 8009f12:	eee7 7a65 	vfms.f32	s15, s14, s11
 8009f16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1e:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f2a:	ee17 4a90 	vmov	r4, s15
 8009f2e:	f304 0407 	ssat	r4, #8, r4
 8009f32:	143f      	asrs	r7, r7, #16
 8009f34:	eeb0 4a46 	vmov.f32	s8, s12
 8009f38:	1436      	asrs	r6, r6, #16
 8009f3a:	ee07 7a90 	vmov	s15, r7
 8009f3e:	b264      	sxtb	r4, r4
 8009f40:	ee07 6a10 	vmov	s14, r6
 8009f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f4c:	eea7 4aa6 	vfma.f32	s8, s15, s13
 8009f50:	eef0 7a44 	vmov.f32	s15, s8
 8009f54:	eee7 7a65 	vfms.f32	s15, s14, s11
 8009f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f60:	fe34 7a85 	vselgt.f32	s14, s9, s10
 8009f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f6c:	ee17 6a90 	vmov	r6, s15
 8009f70:	f306 0607 	ssat	r6, #8, r6
 8009f74:	041b      	lsls	r3, r3, #16
 8009f76:	4291      	cmp	r1, r2
 8009f78:	b2ed      	uxtb	r5, r5
 8009f7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f7e:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8009f82:	ea45 0503 	orr.w	r5, r5, r3
 8009f86:	b2a4      	uxth	r4, r4
 8009f88:	ea45 0504 	orr.w	r5, r5, r4
 8009f8c:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8009f90:	f84b 5b04 	str.w	r5, [fp], #4
 8009f94:	f47f af53 	bne.w	8009e3e <ai_sub_buffer_INT8+0x2ce>
 8009f98:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f9c:	441a      	add	r2, r3
 8009f9e:	4418      	add	r0, r3
 8009fa0:	9b00      	ldr	r3, [sp, #0]
 8009fa2:	f013 0303 	ands.w	r3, r3, #3
 8009fa6:	f43f ae2f 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 8009faa:	9d01      	ldr	r5, [sp, #4]
 8009fac:	eef0 3a46 	vmov.f32	s7, s12
 8009fb0:	eeb1 4a65 	vneg.f32	s8, s11
 8009fb4:	ed5f 4a67 	vldr	s9, [pc, #-412]	; 8009e1c <ai_sub_buffer_INT8+0x2ac>
 8009fb8:	f995 1000 	ldrsb.w	r1, [r5]
 8009fbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009fc0:	eba1 0108 	sub.w	r1, r1, r8
 8009fc4:	ee07 1a90 	vmov	s15, r1
 8009fc8:	f992 1000 	ldrsb.w	r1, [r2]
 8009fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fd0:	eba1 010a 	sub.w	r1, r1, sl
 8009fd4:	ee05 1a10 	vmov	s10, r1
 8009fd8:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8009fdc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8009fe0:	eef0 7a63 	vmov.f32	s15, s7
 8009fe4:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fec:	eeb0 5a67 	vmov.f32	s10, s15
 8009ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff4:	fe77 7a24 	vselgt.f32	s15, s14, s9
 8009ff8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a000:	ee17 1a90 	vmov	r1, s15
 800a004:	f301 0107 	ssat	r1, #8, r1
 800a008:	2b01      	cmp	r3, #1
 800a00a:	7001      	strb	r1, [r0, #0]
 800a00c:	f43f adfc 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 800a010:	f995 4001 	ldrsb.w	r4, [r5, #1]
 800a014:	eef0 3a46 	vmov.f32	s7, s12
 800a018:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800a01c:	eba4 0408 	sub.w	r4, r4, r8
 800a020:	eba1 010a 	sub.w	r1, r1, sl
 800a024:	ee07 4a90 	vmov	s15, r4
 800a028:	ee05 1a10 	vmov	s10, r1
 800a02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a030:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800a034:	eee6 3aa7 	vfma.f32	s7, s13, s15
 800a038:	eef0 7a63 	vmov.f32	s15, s7
 800a03c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a044:	eeb0 5a67 	vmov.f32	s10, s15
 800a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04c:	fe77 7a24 	vselgt.f32	s15, s14, s9
 800a050:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a058:	ee17 1a90 	vmov	r1, s15
 800a05c:	f301 0107 	ssat	r1, #8, r1
 800a060:	2b02      	cmp	r3, #2
 800a062:	7041      	strb	r1, [r0, #1]
 800a064:	f43f add0 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 800a068:	f995 1002 	ldrsb.w	r1, [r5, #2]
 800a06c:	f992 3002 	ldrsb.w	r3, [r2, #2]
 800a070:	eba1 0808 	sub.w	r8, r1, r8
 800a074:	eba3 0a0a 	sub.w	sl, r3, sl
 800a078:	ee07 8a90 	vmov	s15, r8
 800a07c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800a080:	ee07 aa90 	vmov	s15, sl
 800a084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a088:	eea5 6a26 	vfma.f32	s12, s10, s13
 800a08c:	eea7 6ae5 	vfms.f32	s12, s15, s11
 800a090:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a098:	fe37 7a24 	vselgt.f32	s14, s14, s9
 800a09c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a0a4:	ee17 3a10 	vmov	r3, s14
 800a0a8:	f303 0307 	ssat	r3, #8, r3
 800a0ac:	7083      	strb	r3, [r0, #2]
 800a0ae:	b005      	add	sp, #20
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	f991 3000 	ldrsb.w	r3, [r1]
 800a0b8:	eba3 0808 	sub.w	r8, r3, r8
 800a0bc:	ee07 8a90 	vmov	s15, r8
 800a0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0c4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800a0c8:	2f00      	cmp	r7, #0
 800a0ca:	f000 80f3 	beq.w	800a2b4 <ai_sub_buffer_INT8+0x744>
 800a0ce:	00bf      	lsls	r7, r7, #2
 800a0d0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	ed5f 6aaf 	vldr	s13, [pc, #-700]	; 8009e1c <ai_sub_buffer_INT8+0x2ac>
 800a0da:	eb02 0c07 	add.w	ip, r2, r7
 800a0de:	f852 3b04 	ldr.w	r3, [r2], #4
 800a0e2:	fa2f f183 	sxtb16	r1, r3
 800a0e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800a0ea:	fa2f f383 	sxtb16	r3, r3
 800a0ee:	fad3 f40e 	ssub16	r4, r3, lr
 800a0f2:	fad1 f10e 	ssub16	r1, r1, lr
 800a0f6:	b20b      	sxth	r3, r1
 800a0f8:	eeb0 7a46 	vmov.f32	s14, s12
 800a0fc:	ee07 3a90 	vmov	s15, r3
 800a100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a104:	eea7 7ae5 	vfms.f32	s14, s15, s11
 800a108:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a10c:	eef0 7a47 	vmov.f32	s15, s14
 800a110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a114:	fe35 7a26 	vselgt.f32	s14, s10, s13
 800a118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a11c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a120:	ee17 8a90 	vmov	r8, s15
 800a124:	f308 0807 	ssat	r8, #8, r8
 800a128:	1409      	asrs	r1, r1, #16
 800a12a:	eeb0 7a46 	vmov.f32	s14, s12
 800a12e:	fa4f f888 	sxtb.w	r8, r8
 800a132:	ee07 1a90 	vmov	s15, r1
 800a136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a13a:	eea7 7ae5 	vfms.f32	s14, s15, s11
 800a13e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a142:	eef0 7a47 	vmov.f32	s15, s14
 800a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14a:	fe35 7a26 	vselgt.f32	s14, s10, s13
 800a14e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a156:	ee17 3a90 	vmov	r3, s15
 800a15a:	f303 0307 	ssat	r3, #8, r3
 800a15e:	b221      	sxth	r1, r4
 800a160:	eeb0 7a46 	vmov.f32	s14, s12
 800a164:	ee07 1a90 	vmov	s15, r1
 800a168:	b259      	sxtb	r1, r3
 800a16a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a16e:	eea7 7ae5 	vfms.f32	s14, s15, s11
 800a172:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a176:	eef0 7a47 	vmov.f32	s15, s14
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	fe35 7a26 	vselgt.f32	s14, s10, s13
 800a182:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a18a:	ee17 5a90 	vmov	r5, s15
 800a18e:	f305 0507 	ssat	r5, #8, r5
 800a192:	1423      	asrs	r3, r4, #16
 800a194:	eeb0 7a46 	vmov.f32	s14, s12
 800a198:	b26d      	sxtb	r5, r5
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1a2:	eea7 7ae5 	vfms.f32	s14, s15, s11
 800a1a6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a1aa:	eef0 7a47 	vmov.f32	s15, s14
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	fe35 7a26 	vselgt.f32	s14, s10, s13
 800a1b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1be:	ee17 3a90 	vmov	r3, s15
 800a1c2:	f303 0407 	ssat	r4, #8, r3
 800a1c6:	040b      	lsls	r3, r1, #16
 800a1c8:	4562      	cmp	r2, ip
 800a1ca:	fa5f f888 	uxtb.w	r8, r8
 800a1ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1d2:	ea4f 2105 	mov.w	r1, r5, lsl #8
 800a1d6:	ea43 0308 	orr.w	r3, r3, r8
 800a1da:	b289      	uxth	r1, r1
 800a1dc:	ea43 0301 	orr.w	r3, r3, r1
 800a1e0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800a1e4:	f846 3b04 	str.w	r3, [r6], #4
 800a1e8:	f47f af79 	bne.w	800a0de <ai_sub_buffer_INT8+0x56e>
 800a1ec:	4438      	add	r0, r7
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	f013 0303 	ands.w	r3, r3, #3
 800a1f4:	f43f ad08 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 800a1f8:	f99c 2000 	ldrsb.w	r2, [ip]
 800a1fc:	eeb0 5a46 	vmov.f32	s10, s12
 800a200:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a204:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800a2b8 <ai_sub_buffer_INT8+0x748>
 800a208:	eba2 020a 	sub.w	r2, r2, sl
 800a20c:	ee07 2a90 	vmov	s15, r2
 800a210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a214:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800a218:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	fe77 7a26 	vselgt.f32	s15, s14, s13
 800a224:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a22c:	ee17 2a90 	vmov	r2, s15
 800a230:	f302 0207 	ssat	r2, #8, r2
 800a234:	2b01      	cmp	r3, #1
 800a236:	7002      	strb	r2, [r0, #0]
 800a238:	f43f ace6 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 800a23c:	f99c 2001 	ldrsb.w	r2, [ip, #1]
 800a240:	eeb0 5a46 	vmov.f32	s10, s12
 800a244:	eba2 020a 	sub.w	r2, r2, sl
 800a248:	ee07 2a90 	vmov	s15, r2
 800a24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a250:	eea7 5ae5 	vfms.f32	s10, s15, s11
 800a254:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25c:	fe77 7a26 	vselgt.f32	s15, s14, s13
 800a260:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a268:	ee17 2a90 	vmov	r2, s15
 800a26c:	f302 0207 	ssat	r2, #8, r2
 800a270:	2b02      	cmp	r3, #2
 800a272:	7042      	strb	r2, [r0, #1]
 800a274:	f43f acc8 	beq.w	8009c08 <ai_sub_buffer_INT8+0x98>
 800a278:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800a27c:	eba3 0a0a 	sub.w	sl, r3, sl
 800a280:	ee07 aa90 	vmov	s15, sl
 800a284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a288:	eea7 6ae5 	vfms.f32	s12, s15, s11
 800a28c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800a290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a294:	fe37 7a26 	vselgt.f32	s14, s14, s13
 800a298:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a29c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800a2a0:	ee16 3a10 	vmov	r3, s12
 800a2a4:	f303 0307 	ssat	r3, #8, r3
 800a2a8:	7083      	strb	r3, [r0, #2]
 800a2aa:	e4ad      	b.n	8009c08 <ai_sub_buffer_INT8+0x98>
 800a2ac:	9101      	str	r1, [sp, #4]
 800a2ae:	e677      	b.n	8009fa0 <ai_sub_buffer_INT8+0x430>
 800a2b0:	468e      	mov	lr, r1
 800a2b2:	e54e      	b.n	8009d52 <ai_sub_buffer_INT8+0x1e2>
 800a2b4:	4694      	mov	ip, r2
 800a2b6:	e79a      	b.n	800a1ee <ai_sub_buffer_INT8+0x67e>
 800a2b8:	befffffc 	.word	0xbefffffc

0800a2bc <ai_sub_f32>:
 800a2bc:	edd1 7a00 	vldr	s15, [r1]
 800a2c0:	ed92 7a00 	vldr	s14, [r2]
 800a2c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2c8:	edc0 7a00 	vstr	s15, [r0]
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop

0800a2d0 <ai_mul_f32>:
 800a2d0:	edd1 7a00 	vldr	s15, [r1]
 800a2d4:	ed92 7a00 	vldr	s14, [r2]
 800a2d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2dc:	edc0 7a00 	vstr	s15, [r0]
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop

0800a2e4 <func_dummy>:
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop

0800a2e8 <forward_conv2d_integer_SSSA_ch>:
 800a2e8:	6983      	ldr	r3, [r0, #24]
 800a2ea:	8819      	ldrh	r1, [r3, #0]
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	f000 8163 	beq.w	800a5b8 <forward_conv2d_integer_SSSA_ch+0x2d0>
 800a2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	b0ad      	sub	sp, #180	; 0xb4
 800a2fa:	6853      	ldr	r3, [r2, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 8296 	beq.w	800a82e <forward_conv2d_integer_SSSA_ch+0x546>
 800a302:	f8d3 e000 	ldr.w	lr, [r3]
 800a306:	2901      	cmp	r1, #1
 800a308:	f240 8144 	bls.w	800a594 <forward_conv2d_integer_SSSA_ch+0x2ac>
 800a30c:	6913      	ldr	r3, [r2, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 8163 	beq.w	800a5da <forward_conv2d_integer_SSSA_ch+0x2f2>
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9327      	str	r3, [sp, #156]	; 0x9c
 800a318:	2902      	cmp	r1, #2
 800a31a:	f000 814f 	beq.w	800a5bc <forward_conv2d_integer_SSSA_ch+0x2d4>
 800a31e:	69d3      	ldr	r3, [r2, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f040 813d 	bne.w	800a5a0 <forward_conv2d_integer_SSSA_ch+0x2b8>
 800a326:	469c      	mov	ip, r3
 800a328:	f112 0418 	adds.w	r4, r2, #24
 800a32c:	d007      	beq.n	800a33e <forward_conv2d_integer_SSSA_ch+0x56>
 800a32e:	8b14      	ldrh	r4, [r2, #24]
 800a330:	2c01      	cmp	r4, #1
 800a332:	f240 816b 	bls.w	800a60c <forward_conv2d_integer_SSSA_ch+0x324>
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8292 	beq.w	800a860 <forward_conv2d_integer_SSSA_ch+0x578>
 800a33c:	685c      	ldr	r4, [r3, #4]
 800a33e:	2903      	cmp	r1, #3
 800a340:	f000 812b 	beq.w	800a59a <forward_conv2d_integer_SSSA_ch+0x2b2>
 800a344:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a346:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a348:	9124      	str	r1, [sp, #144]	; 0x90
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	f000 8147 	beq.w	800a5de <forward_conv2d_integer_SSSA_ch+0x2f6>
 800a350:	6816      	ldr	r6, [r2, #0]
 800a352:	2900      	cmp	r1, #0
 800a354:	f000 826f 	beq.w	800a836 <forward_conv2d_integer_SSSA_ch+0x54e>
 800a358:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800a35c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800a360:	f8de 200c 	ldr.w	r2, [lr, #12]
 800a364:	69a5      	ldr	r5, [r4, #24]
 800a366:	69b4      	ldr	r4, [r6, #24]
 800a368:	684e      	ldr	r6, [r1, #4]
 800a36a:	6857      	ldr	r7, [r2, #4]
 800a36c:	961d      	str	r6, [sp, #116]	; 0x74
 800a36e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800a370:	fa1f f987 	uxth.w	r9, r7
 800a374:	f8dc a00c 	ldr.w	sl, [ip, #12]
 800a378:	68ad      	ldr	r5, [r5, #8]
 800a37a:	9723      	str	r7, [sp, #140]	; 0x8c
 800a37c:	9522      	str	r5, [sp, #136]	; 0x88
 800a37e:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 800a382:	68a5      	ldr	r5, [r4, #8]
 800a384:	68cc      	ldr	r4, [r1, #12]
 800a386:	6889      	ldr	r1, [r1, #8]
 800a388:	9713      	str	r7, [sp, #76]	; 0x4c
 800a38a:	9418      	str	r4, [sp, #96]	; 0x60
 800a38c:	911e      	str	r1, [sp, #120]	; 0x78
 800a38e:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 800a392:	921f      	str	r2, [sp, #124]	; 0x7c
 800a394:	8832      	ldrh	r2, [r6, #0]
 800a396:	9221      	str	r2, [sp, #132]	; 0x84
 800a398:	88b2      	ldrh	r2, [r6, #4]
 800a39a:	921a      	str	r2, [sp, #104]	; 0x68
 800a39c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a3a0:	f8da a004 	ldr.w	sl, [sl, #4]
 800a3a4:	921c      	str	r2, [sp, #112]	; 0x70
 800a3a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800a3a8:	9219      	str	r2, [sp, #100]	; 0x64
 800a3aa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800a3ac:	9220      	str	r2, [sp, #128]	; 0x80
 800a3ae:	69c2      	ldr	r2, [r0, #28]
 800a3b0:	9225      	str	r2, [sp, #148]	; 0x94
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80f7 	beq.w	800a5a6 <forward_conv2d_integer_SSSA_ch+0x2be>
 800a3b8:	689e      	ldr	r6, [r3, #8]
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	f000 80f3 	beq.w	800a5a6 <forward_conv2d_integer_SSSA_ch+0x2be>
 800a3c0:	69b3      	ldr	r3, [r6, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	bf08      	it	eq
 800a3c6:	2600      	moveq	r6, #0
 800a3c8:	f8dc 1000 	ldr.w	r1, [ip]
 800a3cc:	f8de 2000 	ldr.w	r2, [lr]
 800a3d0:	f8db 3000 	ldr.w	r3, [fp]
 800a3d4:	9128      	str	r1, [sp, #160]	; 0xa0
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	f000 80be 	beq.w	800a558 <forward_conv2d_integer_SSSA_ch+0x270>
 800a3dc:	6851      	ldr	r1, [r2, #4]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	f000 80ba 	beq.w	800a558 <forward_conv2d_integer_SSSA_ch+0x270>
 800a3e4:	8850      	ldrh	r0, [r2, #2]
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f000 80b6 	beq.w	800a558 <forward_conv2d_integer_SSSA_ch+0x270>
 800a3ec:	6809      	ldr	r1, [r1, #0]
 800a3ee:	ed91 0a00 	vldr	s0, [r1]
 800a3f2:	b12b      	cbz	r3, 800a400 <forward_conv2d_integer_SSSA_ch+0x118>
 800a3f4:	6859      	ldr	r1, [r3, #4]
 800a3f6:	b119      	cbz	r1, 800a400 <forward_conv2d_integer_SSSA_ch+0x118>
 800a3f8:	8858      	ldrh	r0, [r3, #2]
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f040 8213 	bne.w	800a826 <forward_conv2d_integer_SSSA_ch+0x53e>
 800a400:	eddf 0a83 	vldr	s1, [pc, #524]	; 800a610 <forward_conv2d_integer_SSSA_ch+0x328>
 800a404:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a406:	4551      	cmp	r1, sl
 800a408:	f040 80a9 	bne.w	800a55e <forward_conv2d_integer_SSSA_ch+0x276>
 800a40c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a40e:	9820      	ldr	r0, [sp, #128]	; 0x80
 800a410:	4281      	cmp	r1, r0
 800a412:	f040 80a4 	bne.w	800a55e <forward_conv2d_integer_SSSA_ch+0x276>
 800a416:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a418:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a41a:	4281      	cmp	r1, r0
 800a41c:	f040 809f 	bne.w	800a55e <forward_conv2d_integer_SSSA_ch+0x276>
 800a420:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a422:	4588      	cmp	r8, r1
 800a424:	f040 809b 	bne.w	800a55e <forward_conv2d_integer_SSSA_ch+0x276>
 800a428:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a42a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a42c:	4281      	cmp	r1, r0
 800a42e:	bf08      	it	eq
 800a430:	f1b9 0f03 	cmpeq.w	r9, #3
 800a434:	bf0c      	ite	eq
 800a436:	2401      	moveq	r4, #1
 800a438:	2400      	movne	r4, #0
 800a43a:	f1ba 0f01 	cmp.w	sl, #1
 800a43e:	9414      	str	r4, [sp, #80]	; 0x50
 800a440:	f000 8093 	beq.w	800a56a <forward_conv2d_integer_SSSA_ch+0x282>
 800a444:	2100      	movs	r1, #0
 800a446:	9114      	str	r1, [sp, #80]	; 0x50
 800a448:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800a44c:	f8de e018 	ldr.w	lr, [lr, #24]
 800a450:	6880      	ldr	r0, [r0, #8]
 800a452:	f8de 7008 	ldr.w	r7, [lr, #8]
 800a456:	9014      	str	r0, [sp, #80]	; 0x50
 800a458:	f8db 0018 	ldr.w	r0, [fp, #24]
 800a45c:	971b      	str	r7, [sp, #108]	; 0x6c
 800a45e:	6880      	ldr	r0, [r0, #8]
 800a460:	9017      	str	r0, [sp, #92]	; 0x5c
 800a462:	2a00      	cmp	r2, #0
 800a464:	f000 8094 	beq.w	800a590 <forward_conv2d_integer_SSSA_ch+0x2a8>
 800a468:	6850      	ldr	r0, [r2, #4]
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f000 81e1 	beq.w	800a832 <forward_conv2d_integer_SSSA_ch+0x54a>
 800a470:	8852      	ldrh	r2, [r2, #2]
 800a472:	2a00      	cmp	r2, #0
 800a474:	f000 808c 	beq.w	800a590 <forward_conv2d_integer_SSSA_ch+0x2a8>
 800a478:	6842      	ldr	r2, [r0, #4]
 800a47a:	f992 2000 	ldrsb.w	r2, [r2]
 800a47e:	9215      	str	r2, [sp, #84]	; 0x54
 800a480:	b13b      	cbz	r3, 800a492 <forward_conv2d_integer_SSSA_ch+0x1aa>
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	2a00      	cmp	r2, #0
 800a486:	f000 81db 	beq.w	800a840 <forward_conv2d_integer_SSSA_ch+0x558>
 800a48a:	885b      	ldrh	r3, [r3, #2]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 81c5 	bne.w	800a81c <forward_conv2d_integer_SSSA_ch+0x534>
 800a492:	9316      	str	r3, [sp, #88]	; 0x58
 800a494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 8093 	beq.w	800a5c2 <forward_conv2d_integer_SSSA_ch+0x2da>
 800a49c:	6858      	ldr	r0, [r3, #4]
 800a49e:	b100      	cbz	r0, 800a4a2 <forward_conv2d_integer_SSSA_ch+0x1ba>
 800a4a0:	6800      	ldr	r0, [r0, #0]
 800a4a2:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800a4a6:	9323      	str	r3, [sp, #140]	; 0x8c
 800a4a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	f000 8091 	beq.w	800a5d2 <forward_conv2d_integer_SSSA_ch+0x2ea>
 800a4b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bf0c      	ite	eq
 800a4b6:	2317      	moveq	r3, #23
 800a4b8:	2300      	movne	r3, #0
 800a4ba:	9329      	str	r3, [sp, #164]	; 0xa4
 800a4bc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a4be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4c0:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 800a4c4:	fb03 f307 	mul.w	r3, r3, r7
 800a4c8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a4ca:	921d      	str	r2, [sp, #116]	; 0x74
 800a4cc:	fb02 7303 	mla	r3, r2, r3, r7
 800a4d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a4d2:	429f      	cmp	r7, r3
 800a4d4:	d26d      	bcs.n	800a5b2 <forward_conv2d_integer_SSSA_ch+0x2ca>
 800a4d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a4da:	fb03 f308 	mul.w	r3, r3, r8
 800a4de:	fb02 7303 	mla	r3, r2, r3, r7
 800a4e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	bf2c      	ite	cs
 800a4e8:	2300      	movcs	r3, #0
 800a4ea:	2301      	movcc	r3, #1
 800a4ec:	9326      	str	r3, [sp, #152]	; 0x98
 800a4ee:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800a4f2:	fa1f fa8a 	uxth.w	sl, sl
 800a4f6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a4f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a4fa:	921c      	str	r2, [sp, #112]	; 0x70
 800a4fc:	2f01      	cmp	r7, #1
 800a4fe:	fb1a f202 	smulbb	r2, sl, r2
 800a502:	885b      	ldrh	r3, [r3, #2]
 800a504:	b292      	uxth	r2, r2
 800a506:	d003      	beq.n	800a510 <forward_conv2d_integer_SSSA_ch+0x228>
 800a508:	46bc      	mov	ip, r7
 800a50a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800a50c:	45bc      	cmp	ip, r7
 800a50e:	d06f      	beq.n	800a5f0 <forward_conv2d_integer_SSSA_ch+0x308>
 800a510:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800a512:	fb02 f207 	mul.w	r2, r2, r7
 800a516:	2c00      	cmp	r4, #0
 800a518:	f040 8194 	bne.w	800a844 <forward_conv2d_integer_SSSA_ch+0x55c>
 800a51c:	2900      	cmp	r1, #0
 800a51e:	f000 8191 	beq.w	800a844 <forward_conv2d_integer_SSSA_ch+0x55c>
 800a522:	0094      	lsls	r4, r2, #2
 800a524:	2b01      	cmp	r3, #1
 800a526:	d960      	bls.n	800a5ea <forward_conv2d_integer_SSSA_ch+0x302>
 800a528:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a52a:	0093      	lsls	r3, r2, #2
 800a52c:	189a      	adds	r2, r3, r2
 800a52e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800a532:	18eb      	adds	r3, r5, r3
 800a534:	462a      	mov	r2, r5
 800a536:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a538:	9325      	str	r3, [sp, #148]	; 0x94
 800a53a:	f001 fc4f 	bl	800bddc <align_factor_ch>
 800a53e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a540:	3b15      	subs	r3, #21
 800a542:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 800a546:	2b03      	cmp	r3, #3
 800a548:	f200 818c 	bhi.w	800a864 <forward_conv2d_integer_SSSA_ch+0x57c>
 800a54c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a550:	00e4013d 	.word	0x00e4013d
 800a554:	006200ae 	.word	0x006200ae
 800a558:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800a610 <forward_conv2d_integer_SSSA_ch+0x328>
 800a55c:	e749      	b.n	800a3f2 <forward_conv2d_integer_SSSA_ch+0x10a>
 800a55e:	2400      	movs	r4, #0
 800a560:	f1ba 0f01 	cmp.w	sl, #1
 800a564:	9414      	str	r4, [sp, #80]	; 0x50
 800a566:	f47f af6d 	bne.w	800a444 <forward_conv2d_integer_SSSA_ch+0x15c>
 800a56a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a56c:	2901      	cmp	r1, #1
 800a56e:	f47f af69 	bne.w	800a444 <forward_conv2d_integer_SSSA_ch+0x15c>
 800a572:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a574:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a576:	4301      	orrs	r1, r0
 800a578:	f47f af64 	bne.w	800a444 <forward_conv2d_integer_SSSA_ch+0x15c>
 800a57c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a57e:	9820      	ldr	r0, [sp, #128]	; 0x80
 800a580:	2901      	cmp	r1, #1
 800a582:	bf08      	it	eq
 800a584:	2801      	cmpeq	r0, #1
 800a586:	bf0c      	ite	eq
 800a588:	2101      	moveq	r1, #1
 800a58a:	2100      	movne	r1, #0
 800a58c:	9114      	str	r1, [sp, #80]	; 0x50
 800a58e:	e75b      	b.n	800a448 <forward_conv2d_integer_SSSA_ch+0x160>
 800a590:	9215      	str	r2, [sp, #84]	; 0x54
 800a592:	e775      	b.n	800a480 <forward_conv2d_integer_SSSA_ch+0x198>
 800a594:	2300      	movs	r3, #0
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	deff      	udf	#255	; 0xff
 800a59a:	2300      	movs	r3, #0
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	deff      	udf	#255	; 0xff
 800a5a0:	f8d3 c000 	ldr.w	ip, [r3]
 800a5a4:	e6c0      	b.n	800a328 <forward_conv2d_integer_SSSA_ch+0x40>
 800a5a6:	6a06      	ldr	r6, [r0, #32]
 800a5a8:	2e00      	cmp	r6, #0
 800a5aa:	f43f af0d 	beq.w	800a3c8 <forward_conv2d_integer_SSSA_ch+0xe0>
 800a5ae:	68b6      	ldr	r6, [r6, #8]
 800a5b0:	e70a      	b.n	800a3c8 <forward_conv2d_integer_SSSA_ch+0xe0>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9326      	str	r3, [sp, #152]	; 0x98
 800a5b6:	e79a      	b.n	800a4ee <forward_conv2d_integer_SSSA_ch+0x206>
 800a5b8:	684b      	ldr	r3, [r1, #4]
 800a5ba:	deff      	udf	#255	; 0xff
 800a5bc:	2300      	movs	r3, #0
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	deff      	udf	#255	; 0xff
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800a5c8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a5ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	f47f af6f 	bne.w	800a4b0 <forward_conv2d_integer_SSSA_ch+0x1c8>
 800a5d2:	b1a4      	cbz	r4, 800a5fe <forward_conv2d_integer_SSSA_ch+0x316>
 800a5d4:	2315      	movs	r3, #21
 800a5d6:	9329      	str	r3, [sp, #164]	; 0xa4
 800a5d8:	e770      	b.n	800a4bc <forward_conv2d_integer_SSSA_ch+0x1d4>
 800a5da:	9327      	str	r3, [sp, #156]	; 0x9c
 800a5dc:	e69c      	b.n	800a318 <forward_conv2d_integer_SSSA_ch+0x30>
 800a5de:	460b      	mov	r3, r1
 800a5e0:	b909      	cbnz	r1, 800a5e6 <forward_conv2d_integer_SSSA_ch+0x2fe>
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	deff      	udf	#255	; 0xff
 800a5e6:	68d3      	ldr	r3, [r2, #12]
 800a5e8:	deff      	udf	#255	; 0xff
 800a5ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	e7a0      	b.n	800a532 <forward_conv2d_integer_SSSA_ch+0x24a>
 800a5f0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a5f2:	fb01 f202 	mul.w	r2, r1, r2
 800a5f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a5fa:	1c54      	adds	r4, r2, #1
 800a5fc:	e792      	b.n	800a524 <forward_conv2d_integer_SSSA_ch+0x23c>
 800a5fe:	2900      	cmp	r1, #0
 800a600:	460b      	mov	r3, r1
 800a602:	bf0c      	ite	eq
 800a604:	2318      	moveq	r3, #24
 800a606:	2316      	movne	r3, #22
 800a608:	9329      	str	r3, [sp, #164]	; 0xa4
 800a60a:	e757      	b.n	800a4bc <forward_conv2d_integer_SSSA_ch+0x1d4>
 800a60c:	2400      	movs	r4, #0
 800a60e:	e696      	b.n	800a33e <forward_conv2d_integer_SSSA_ch+0x56>
 800a610:	00000000 	.word	0x00000000
 800a614:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a616:	4653      	mov	r3, sl
 800a618:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a61a:	4648      	mov	r0, r9
 800a61c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a61e:	9702      	str	r7, [sp, #8]
 800a620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a622:	9101      	str	r1, [sp, #4]
 800a624:	9400      	str	r4, [sp, #0]
 800a626:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a628:	9503      	str	r5, [sp, #12]
 800a62a:	f002 fa73 	bl	800cb14 <st_sssa8_ch_convolve_rank1upd>
 800a62e:	970b      	str	r7, [sp, #44]	; 0x2c
 800a630:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a634:	9707      	str	r7, [sp, #28]
 800a636:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a638:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a63a:	9706      	str	r7, [sp, #24]
 800a63c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a63e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a640:	9705      	str	r7, [sp, #20]
 800a642:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a644:	930d      	str	r3, [sp, #52]	; 0x34
 800a646:	9704      	str	r7, [sp, #16]
 800a648:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a64a:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800a64e:	920c      	str	r2, [sp, #48]	; 0x30
 800a650:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a652:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 800a656:	930e      	str	r3, [sp, #56]	; 0x38
 800a658:	464b      	mov	r3, r9
 800a65a:	920a      	str	r2, [sp, #40]	; 0x28
 800a65c:	fa1f f288 	uxth.w	r2, r8
 800a660:	9008      	str	r0, [sp, #32]
 800a662:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800a666:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a668:	9509      	str	r5, [sp, #36]	; 0x24
 800a66a:	e9cd a702 	strd	sl, r7, [sp, #8]
 800a66e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a670:	9701      	str	r7, [sp, #4]
 800a672:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a674:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 800a678:	9700      	str	r7, [sp, #0]
 800a67a:	f002 fad3 	bl	800cc24 <st_sssa8_ch_convolve>
 800a67e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a682:	0a1b      	lsrs	r3, r3, #8
 800a684:	d046      	beq.n	800a714 <forward_conv2d_integer_SSSA_ch+0x42c>
 800a686:	f8db 100c 	ldr.w	r1, [fp, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a690:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800a694:	4299      	cmp	r1, r3
 800a696:	fb00 f202 	mul.w	r2, r0, r2
 800a69a:	d1f9      	bne.n	800a690 <forward_conv2d_integer_SSSA_ch+0x3a8>
 800a69c:	4633      	mov	r3, r6
 800a69e:	4659      	mov	r1, fp
 800a6a0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a6a2:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800a6a4:	47a0      	blx	r4
 800a6a6:	b02d      	add	sp, #180	; 0xb4
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800a6b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a6b2:	4652      	mov	r2, sl
 800a6b4:	9500      	str	r5, [sp, #0]
 800a6b6:	f001 fc07 	bl	800bec8 <st_sssa8_ch_conv_dw_Wadapt>
 800a6ba:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a6bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6be:	9707      	str	r7, [sp, #28]
 800a6c0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a6c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6c4:	9706      	str	r7, [sp, #24]
 800a6c6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a6c8:	920c      	str	r2, [sp, #48]	; 0x30
 800a6ca:	9705      	str	r7, [sp, #20]
 800a6cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a6ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6d0:	9704      	str	r7, [sp, #16]
 800a6d2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a6d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6d8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6da:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800a6de:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a6e0:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 800a6e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	920a      	str	r2, [sp, #40]	; 0x28
 800a6ea:	fa1f f288 	uxth.w	r2, r8
 800a6ee:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800a6f2:	9008      	str	r0, [sp, #32]
 800a6f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a6f6:	9509      	str	r5, [sp, #36]	; 0x24
 800a6f8:	e9cd a702 	strd	sl, r7, [sp, #8]
 800a6fc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a6fe:	9701      	str	r7, [sp, #4]
 800a700:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a702:	9700      	str	r7, [sp, #0]
 800a704:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 800a708:	f001 fc9c 	bl	800c044 <st_sssa8_ch_convolve_dw>
 800a70c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	d1b8      	bne.n	800a686 <forward_conv2d_integer_SSSA_ch+0x39e>
 800a714:	2201      	movs	r2, #1
 800a716:	e7c1      	b.n	800a69c <forward_conv2d_integer_SSSA_ch+0x3b4>
 800a718:	ab2a      	add	r3, sp, #168	; 0xa8
 800a71a:	464a      	mov	r2, r9
 800a71c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800a720:	f003 fbf2 	bl	800df08 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 800a724:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 809d 	bne.w	800a866 <forward_conv2d_integer_SSSA_ch+0x57e>
 800a72c:	fa1f f388 	uxth.w	r3, r8
 800a730:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 800a734:	f04f 0801 	mov.w	r8, #1
 800a738:	9326      	str	r3, [sp, #152]	; 0x98
 800a73a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a73c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a73e:	9513      	str	r5, [sp, #76]	; 0x4c
 800a740:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 800a744:	fb02 f303 	mul.w	r3, r2, r3
 800a748:	931d      	str	r3, [sp, #116]	; 0x74
 800a74a:	b28b      	uxth	r3, r1
 800a74c:	9328      	str	r3, [sp, #160]	; 0xa0
 800a74e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a750:	9423      	str	r4, [sp, #140]	; 0x8c
 800a752:	fb03 f301 	mul.w	r3, r3, r1
 800a756:	931e      	str	r3, [sp, #120]	; 0x78
 800a758:	b293      	uxth	r3, r2
 800a75a:	931f      	str	r3, [sp, #124]	; 0x7c
 800a75c:	2300      	movs	r3, #0
 800a75e:	9318      	str	r3, [sp, #96]	; 0x60
 800a760:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a762:	3301      	adds	r3, #1
 800a764:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a766:	9509      	str	r5, [sp, #36]	; 0x24
 800a768:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a76a:	940d      	str	r4, [sp, #52]	; 0x34
 800a76c:	442c      	add	r4, r5
 800a76e:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800a772:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800a774:	9417      	str	r4, [sp, #92]	; 0x5c
 800a776:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800a778:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a77a:	9408      	str	r4, [sp, #32]
 800a77c:	4664      	mov	r4, ip
 800a77e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a780:	442c      	add	r4, r5
 800a782:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a784:	910c      	str	r1, [sp, #48]	; 0x30
 800a786:	941b      	str	r4, [sp, #108]	; 0x6c
 800a788:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800a78a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a78c:	9407      	str	r4, [sp, #28]
 800a78e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a790:	9318      	str	r3, [sp, #96]	; 0x60
 800a792:	464b      	mov	r3, r9
 800a794:	9406      	str	r4, [sp, #24]
 800a796:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800a798:	920e      	str	r2, [sp, #56]	; 0x38
 800a79a:	9405      	str	r4, [sp, #20]
 800a79c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a79e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a7a0:	9404      	str	r4, [sp, #16]
 800a7a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a7a4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a7a6:	900a      	str	r0, [sp, #40]	; 0x28
 800a7a8:	4660      	mov	r0, ip
 800a7aa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800a7ac:	e9cd a402 	strd	sl, r4, [sp, #8]
 800a7b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a7b2:	9701      	str	r7, [sp, #4]
 800a7b4:	9400      	str	r4, [sp, #0]
 800a7b6:	ac2a      	add	r4, sp, #168	; 0xa8
 800a7b8:	9410      	str	r4, [sp, #64]	; 0x40
 800a7ba:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800a7bc:	940f      	str	r4, [sp, #60]	; 0x3c
 800a7be:	f003 fbb7 	bl	800df30 <st_sssa8_ch_convolve_1x1>
 800a7c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a7c4:	4543      	cmp	r3, r8
 800a7c6:	d3cb      	bcc.n	800a760 <forward_conv2d_integer_SSSA_ch+0x478>
 800a7c8:	e759      	b.n	800a67e <forward_conv2d_integer_SSSA_ch+0x396>
 800a7ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a7cc:	4653      	mov	r3, sl
 800a7ce:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800a7d0:	4648      	mov	r0, r9
 800a7d2:	9402      	str	r4, [sp, #8]
 800a7d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a7d8:	9503      	str	r5, [sp, #12]
 800a7da:	9701      	str	r7, [sp, #4]
 800a7dc:	f8cd a000 	str.w	sl, [sp]
 800a7e0:	f002 f998 	bl	800cb14 <st_sssa8_ch_convolve_rank1upd>
 800a7e4:	9407      	str	r4, [sp, #28]
 800a7e6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a7e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a7ea:	9403      	str	r4, [sp, #12]
 800a7ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a7ee:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800a7f2:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a7f4:	9109      	str	r1, [sp, #36]	; 0x24
 800a7f6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a7fa:	464a      	mov	r2, r9
 800a7fc:	9108      	str	r1, [sp, #32]
 800a7fe:	fa1f f188 	uxth.w	r1, r8
 800a802:	9006      	str	r0, [sp, #24]
 800a804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a806:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a808:	950b      	str	r5, [sp, #44]	; 0x2c
 800a80a:	e9cd a401 	strd	sl, r4, [sp, #4]
 800a80e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a810:	e9cd 7504 	strd	r7, r5, [sp, #16]
 800a814:	9400      	str	r4, [sp, #0]
 800a816:	f002 ff67 	bl	800d6e8 <st_sssa8_ch_convolve_rgb>
 800a81a:	e730      	b.n	800a67e <forward_conv2d_integer_SSSA_ch+0x396>
 800a81c:	6853      	ldr	r3, [r2, #4]
 800a81e:	f993 3000 	ldrsb.w	r3, [r3]
 800a822:	9316      	str	r3, [sp, #88]	; 0x58
 800a824:	e636      	b.n	800a494 <forward_conv2d_integer_SSSA_ch+0x1ac>
 800a826:	6809      	ldr	r1, [r1, #0]
 800a828:	edd1 0a00 	vldr	s1, [r1]
 800a82c:	e5ea      	b.n	800a404 <forward_conv2d_integer_SSSA_ch+0x11c>
 800a82e:	469e      	mov	lr, r3
 800a830:	e569      	b.n	800a306 <forward_conv2d_integer_SSSA_ch+0x1e>
 800a832:	9015      	str	r0, [sp, #84]	; 0x54
 800a834:	e624      	b.n	800a480 <forward_conv2d_integer_SSSA_ch+0x198>
 800a836:	4a0f      	ldr	r2, [pc, #60]	; (800a874 <forward_conv2d_integer_SSSA_ch+0x58c>)
 800a838:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800a83c:	9224      	str	r2, [sp, #144]	; 0x90
 800a83e:	e58d      	b.n	800a35c <forward_conv2d_integer_SSSA_ch+0x74>
 800a840:	9216      	str	r2, [sp, #88]	; 0x58
 800a842:	e627      	b.n	800a494 <forward_conv2d_integer_SSSA_ch+0x1ac>
 800a844:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800a846:	4621      	mov	r1, r4
 800a848:	4414      	add	r4, r2
 800a84a:	fb02 f101 	mul.w	r1, r2, r1
 800a84e:	00a4      	lsls	r4, r4, #2
 800a850:	004a      	lsls	r2, r1, #1
 800a852:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800a856:	bfd4      	ite	le
 800a858:	18a4      	addle	r4, r4, r2
 800a85a:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 800a85e:	e661      	b.n	800a524 <forward_conv2d_integer_SSSA_ch+0x23c>
 800a860:	461c      	mov	r4, r3
 800a862:	e56c      	b.n	800a33e <forward_conv2d_integer_SSSA_ch+0x56>
 800a864:	e7fe      	b.n	800a864 <forward_conv2d_integer_SSSA_ch+0x57c>
 800a866:	f1b8 0f00 	cmp.w	r8, #0
 800a86a:	f43f af08 	beq.w	800a67e <forward_conv2d_integer_SSSA_ch+0x396>
 800a86e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a870:	e763      	b.n	800a73a <forward_conv2d_integer_SSSA_ch+0x452>
 800a872:	bf00      	nop
 800a874:	0800a2e5 	.word	0x0800a2e5

0800a878 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	6983      	ldr	r3, [r0, #24]
 800a87e:	b0d5      	sub	sp, #340	; 0x154
 800a880:	881e      	ldrh	r6, [r3, #0]
 800a882:	2e00      	cmp	r6, #0
 800a884:	f000 81b9 	beq.w	800abfa <forward_conv2d_nl_pool_integer_SSSA_ch+0x382>
 800a888:	6859      	ldr	r1, [r3, #4]
 800a88a:	684d      	ldr	r5, [r1, #4]
 800a88c:	2d00      	cmp	r5, #0
 800a88e:	f000 8360 	beq.w	800af52 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 800a892:	682b      	ldr	r3, [r5, #0]
 800a894:	9313      	str	r3, [sp, #76]	; 0x4c
 800a896:	2e01      	cmp	r6, #1
 800a898:	f240 81ac 	bls.w	800abf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800a89c:	690b      	ldr	r3, [r1, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 82b2 	beq.w	800ae08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8a8:	2e02      	cmp	r6, #2
 800a8aa:	f000 81a3 	beq.w	800abf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800a8ae:	69cc      	ldr	r4, [r1, #28]
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	f040 82a7 	bne.w	800ae04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x58c>
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	f111 0218 	adds.w	r2, r1, #24
 800a8bc:	d007      	beq.n	800a8ce <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 800a8be:	8b0a      	ldrh	r2, [r1, #24]
 800a8c0:	2a01      	cmp	r2, #1
 800a8c2:	f240 8375 	bls.w	800afb0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	f000 8370 	beq.w	800afac <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 800a8cc:	6862      	ldr	r2, [r4, #4]
 800a8ce:	2e03      	cmp	r6, #3
 800a8d0:	f000 8190 	beq.w	800abf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800a8d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	f000 8191 	beq.w	800abfe <forward_conv2d_nl_pool_integer_SSSA_ch+0x386>
 800a8dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8de:	680d      	ldr	r5, [r1, #0]
 800a8e0:	9630      	str	r6, [sp, #192]	; 0xc0
 800a8e2:	9516      	str	r5, [sp, #88]	; 0x58
 800a8e4:	f8d1 b004 	ldr.w	fp, [r1, #4]
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	f000 835a 	beq.w	800afa2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x72a>
 800a8ee:	6889      	ldr	r1, [r1, #8]
 800a8f0:	911e      	str	r1, [sp, #120]	; 0x78
 800a8f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a8f4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800a8f8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800a8fc:	f8db 100c 	ldr.w	r1, [fp, #12]
 800a900:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a904:	6849      	ldr	r1, [r1, #4]
 800a906:	b2bd      	uxth	r5, r7
 800a908:	f8de 6000 	ldr.w	r6, [lr]
 800a90c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a90e:	951d      	str	r5, [sp, #116]	; 0x74
 800a910:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a912:	9725      	str	r7, [sp, #148]	; 0x94
 800a914:	68e9      	ldr	r1, [r5, #12]
 800a916:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800a91a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800a91c:	9515      	str	r5, [sp, #84]	; 0x54
 800a91e:	b2b5      	uxth	r5, r6
 800a920:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a924:	9514      	str	r5, [sp, #80]	; 0x50
 800a926:	b2bd      	uxth	r5, r7
 800a928:	9521      	str	r5, [sp, #132]	; 0x84
 800a92a:	e9dc 5902 	ldrd	r5, r9, [ip, #8]
 800a92e:	f8de c008 	ldr.w	ip, [lr, #8]
 800a932:	952d      	str	r5, [sp, #180]	; 0xb4
 800a934:	f8be 5004 	ldrh.w	r5, [lr, #4]
 800a938:	9522      	str	r5, [sp, #136]	; 0x88
 800a93a:	68cd      	ldr	r5, [r1, #12]
 800a93c:	6889      	ldr	r1, [r1, #8]
 800a93e:	9532      	str	r5, [sp, #200]	; 0xc8
 800a940:	9138      	str	r1, [sp, #224]	; 0xe0
 800a942:	e9da 1801 	ldrd	r1, r8, [sl, #4]
 800a946:	911a      	str	r1, [sp, #104]	; 0x68
 800a948:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800a94a:	6809      	ldr	r1, [r1, #0]
 800a94c:	9123      	str	r1, [sp, #140]	; 0x8c
 800a94e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800a950:	6849      	ldr	r1, [r1, #4]
 800a952:	913b      	str	r1, [sp, #236]	; 0xec
 800a954:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a956:	9120      	str	r1, [sp, #128]	; 0x80
 800a958:	69c1      	ldr	r1, [r0, #28]
 800a95a:	9126      	str	r1, [sp, #152]	; 0x98
 800a95c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a95e:	9139      	str	r1, [sp, #228]	; 0xe4
 800a960:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a962:	913a      	str	r1, [sp, #232]	; 0xe8
 800a964:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a966:	9129      	str	r1, [sp, #164]	; 0xa4
 800a968:	2c00      	cmp	r4, #0
 800a96a:	f000 8242 	beq.w	800adf2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800a96e:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800a972:	f1ba 0f00 	cmp.w	sl, #0
 800a976:	f000 823c 	beq.w	800adf2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800a97a:	f8da 1018 	ldr.w	r1, [sl, #24]
 800a97e:	2900      	cmp	r1, #0
 800a980:	bf08      	it	eq
 800a982:	f04f 0a00 	moveq.w	sl, #0
 800a986:	fa1f fe86 	uxth.w	lr, r6
 800a98a:	902e      	str	r0, [sp, #184]	; 0xb8
 800a98c:	9219      	str	r2, [sp, #100]	; 0x64
 800a98e:	a941      	add	r1, sp, #260	; 0x104
 800a990:	fa1e f08c 	uxtah	r0, lr, ip
 800a994:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a996:	9150      	str	r1, [sp, #320]	; 0x140
 800a998:	2400      	movs	r4, #0
 800a99a:	6996      	ldr	r6, [r2, #24]
 800a99c:	4448      	add	r0, r9
 800a99e:	4611      	mov	r1, r2
 800a9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9a4:	eba0 0508 	sub.w	r5, r0, r8
 800a9a8:	931c      	str	r3, [sp, #112]	; 0x70
 800a9aa:	924e      	str	r2, [sp, #312]	; 0x138
 800a9ac:	f240 4201 	movw	r2, #1025	; 0x401
 800a9b0:	9518      	str	r5, [sp, #96]	; 0x60
 800a9b2:	b2bb      	uxth	r3, r7
 800a9b4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9b6:	eb0e 0709 	add.w	r7, lr, r9
 800a9ba:	924f      	str	r2, [sp, #316]	; 0x13c
 800a9bc:	f240 4202 	movw	r2, #1026	; 0x402
 800a9c0:	69ad      	ldr	r5, [r5, #24]
 800a9c2:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 800a9c6:	9251      	str	r2, [sp, #324]	; 0x144
 800a9c8:	f50d 7992 	add.w	r9, sp, #292	; 0x124
 800a9cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a9ce:	a84d      	add	r0, sp, #308	; 0x134
 800a9d0:	9533      	str	r5, [sp, #204]	; 0xcc
 800a9d2:	6c55      	ldr	r5, [r2, #68]	; 0x44
 800a9d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a9d6:	931f      	str	r3, [sp, #124]	; 0x7c
 800a9d8:	944d      	str	r4, [sp, #308]	; 0x134
 800a9da:	9727      	str	r7, [sp, #156]	; 0x9c
 800a9dc:	9441      	str	r4, [sp, #260]	; 0x104
 800a9de:	f8db 7018 	ldr.w	r7, [fp, #24]
 800a9e2:	9445      	str	r4, [sp, #276]	; 0x114
 800a9e4:	9442      	str	r4, [sp, #264]	; 0x108
 800a9e6:	9443      	str	r4, [sp, #268]	; 0x10c
 800a9e8:	9446      	str	r4, [sp, #280]	; 0x118
 800a9ea:	9444      	str	r4, [sp, #272]	; 0x110
 800a9ec:	9453      	str	r4, [sp, #332]	; 0x14c
 800a9ee:	9447      	str	r4, [sp, #284]	; 0x11c
 800a9f0:	9448      	str	r4, [sp, #288]	; 0x120
 800a9f2:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 800a9f6:	952a      	str	r5, [sp, #168]	; 0xa8
 800a9f8:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
 800a9fc:	923c      	str	r2, [sp, #240]	; 0xf0
 800a9fe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800aa00:	fbb5 fcf3 	udiv	ip, r5, r3
 800aa04:	f10c 0301 	add.w	r3, ip, #1
 800aa08:	9328      	str	r3, [sp, #160]	; 0xa0
 800aa0a:	f006 fabf 	bl	8010f8c <core_tensor_clone>
 800aa0e:	4648      	mov	r0, r9
 800aa10:	4631      	mov	r1, r6
 800aa12:	f006 faed 	bl	8010ff0 <core_array_clone>
 800aa16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa18:	f8cd 914c 	str.w	r9, [sp, #332]	; 0x14c
 800aa1c:	6999      	ldr	r1, [r3, #24]
 800aa1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa20:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f8db 300c 	ldr.w	r3, [fp, #12]
 800aa2a:	f8db 1000 	ldr.w	r1, [fp]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa32:	932f      	str	r3, [sp, #188]	; 0xbc
 800aa34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aa36:	f8d3 e000 	ldr.w	lr, [r3]
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f000 80e1 	beq.w	800ac02 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 800aa40:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aa44:	f1bc 0f00 	cmp.w	ip, #0
 800aa48:	f000 80db 	beq.w	800ac02 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 800aa4c:	8845      	ldrh	r5, [r0, #2]
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	f000 80d7 	beq.w	800ac02 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 800aa54:	f8dc c000 	ldr.w	ip, [ip]
 800aa58:	ed9c 0a00 	vldr	s0, [ip]
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	f000 80d5 	beq.w	800ac0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 800aa62:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800aa66:	f1bc 0f00 	cmp.w	ip, #0
 800aa6a:	f000 80cf 	beq.w	800ac0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 800aa6e:	884d      	ldrh	r5, [r1, #2]
 800aa70:	2d00      	cmp	r5, #0
 800aa72:	f000 80cb 	beq.w	800ac0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 800aa76:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800aa78:	f8dc c000 	ldr.w	ip, [ip]
 800aa7c:	2d01      	cmp	r5, #1
 800aa7e:	eddc 0a00 	vldr	s1, [ip]
 800aa82:	f040 80c9 	bne.w	800ac18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 800aa86:	f1b8 0f01 	cmp.w	r8, #1
 800aa8a:	f040 80c5 	bne.w	800ac18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 800aa8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800aa90:	46ac      	mov	ip, r5
 800aa92:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800aa94:	ea5c 0505 	orrs.w	r5, ip, r5
 800aa98:	f040 80be 	bne.w	800ac18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 800aa9c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800aa9e:	46ac      	mov	ip, r5
 800aaa0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800aaa2:	f1bc 0f01 	cmp.w	ip, #1
 800aaa6:	bf08      	it	eq
 800aaa8:	2d01      	cmpeq	r5, #1
 800aaaa:	bf0c      	ite	eq
 800aaac:	f04f 0c01 	moveq.w	ip, #1
 800aab0:	f04f 0c00 	movne.w	ip, #0
 800aab4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	69ad      	ldr	r5, [r5, #24]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	6992      	ldr	r2, [r2, #24]
 800aabe:	68ad      	ldr	r5, [r5, #8]
 800aac0:	9319      	str	r3, [sp, #100]	; 0x64
 800aac2:	6893      	ldr	r3, [r2, #8]
 800aac4:	9537      	str	r5, [sp, #220]	; 0xdc
 800aac6:	9324      	str	r3, [sp, #144]	; 0x90
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f000 81a1 	beq.w	800ae10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 800aace:	6843      	ldr	r3, [r0, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 8264 	beq.w	800af9e <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 800aad6:	8842      	ldrh	r2, [r0, #2]
 800aad8:	2a00      	cmp	r2, #0
 800aada:	f000 8197 	beq.w	800ae0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x594>
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f993 3000 	ldrsb.w	r3, [r3]
 800aae4:	9316      	str	r3, [sp, #88]	; 0x58
 800aae6:	2900      	cmp	r1, #0
 800aae8:	f000 8181 	beq.w	800adee <forward_conv2d_nl_pool_integer_SSSA_ch+0x576>
 800aaec:	684b      	ldr	r3, [r1, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 8253 	beq.w	800af9a <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 800aaf4:	884a      	ldrh	r2, [r1, #2]
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	f000 8177 	beq.w	800adea <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f993 3000 	ldrsb.w	r3, [r3]
 800ab02:	9318      	str	r3, [sp, #96]	; 0x60
 800ab04:	f1be 0f00 	cmp.w	lr, #0
 800ab08:	f000 816d 	beq.w	800ade6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56e>
 800ab0c:	f8de 0004 	ldr.w	r0, [lr, #4]
 800ab10:	b100      	cbz	r0, 800ab14 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 800ab12:	6800      	ldr	r0, [r0, #0]
 800ab14:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800ab18:	fa1f f188 	uxth.w	r1, r8
 800ab1c:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 800ab20:	931c      	str	r3, [sp, #112]	; 0x70
 800ab22:	fb11 f303 	smulbb	r3, r1, r3
 800ab26:	9525      	str	r5, [sp, #148]	; 0x94
 800ab28:	b29d      	uxth	r5, r3
 800ab2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab2c:	911a      	str	r1, [sp, #104]	; 0x68
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800ab34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab38:	9113      	str	r1, [sp, #76]	; 0x4c
 800ab3a:	f000 8177 	beq.w	800ae2c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b4>
 800ab3e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ab40:	428b      	cmp	r3, r1
 800ab42:	f000 816a 	beq.w	800ae1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a2>
 800ab46:	460b      	mov	r3, r1
 800ab48:	2100      	movs	r1, #0
 800ab4a:	fb05 f303 	mul.w	r3, r5, r3
 800ab4e:	912c      	str	r1, [sp, #176]	; 0xb0
 800ab50:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab52:	fb03 f101 	mul.w	r1, r3, r1
 800ab56:	0049      	lsls	r1, r1, #1
 800ab58:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800ab5c:	bfa8      	it	ge
 800ab5e:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 800ab62:	f1bc 0f00 	cmp.w	ip, #0
 800ab66:	f000 8176 	beq.w	800ae56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5de>
 800ab6a:	009d      	lsls	r5, r3, #2
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	f240 8151 	bls.w	800ae14 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59c>
 800ab72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab74:	0093      	lsls	r3, r2, #2
 800ab76:	189a      	adds	r2, r3, r2
 800ab78:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 800ab7c:	444b      	add	r3, r9
 800ab7e:	464a      	mov	r2, r9
 800ab80:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ab82:	932b      	str	r3, [sp, #172]	; 0xac
 800ab84:	f001 f92a 	bl	800bddc <align_factor_ch>
 800ab88:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ab8a:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 800ab8e:	9540      	str	r5, [sp, #256]	; 0x100
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80f5 	beq.w	800ad80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x508>
 800ab96:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 800ab98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ab9a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ab9c:	fb00 f005 	mul.w	r0, r0, r5
 800aba0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800aba2:	4613      	mov	r3, r2
 800aba4:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 800aba8:	902f      	str	r0, [sp, #188]	; 0xbc
 800abaa:	b2a8      	uxth	r0, r5
 800abac:	fb03 f301 	mul.w	r3, r3, r1
 800abb0:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
 800abb4:	9026      	str	r0, [sp, #152]	; 0x98
 800abb6:	2100      	movs	r1, #0
 800abb8:	9825      	ldr	r0, [sp, #148]	; 0x94
 800abba:	9117      	str	r1, [sp, #92]	; 0x5c
 800abbc:	fb00 f303 	mul.w	r3, r0, r3
 800abc0:	9125      	str	r1, [sp, #148]	; 0x94
 800abc2:	9335      	str	r3, [sp, #212]	; 0xd4
 800abc4:	b293      	uxth	r3, r2
 800abc6:	9431      	str	r4, [sp, #196]	; 0xc4
 800abc8:	932d      	str	r3, [sp, #180]	; 0xb4
 800abca:	fb00 f302 	mul.w	r3, r0, r2
 800abce:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800abd2:	9336      	str	r3, [sp, #216]	; 0xd8
 800abd4:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 800abd8:	9334      	str	r3, [sp, #208]	; 0xd0
 800abda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dd6a      	ble.n	800acb6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 800abe0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800abe2:	2b17      	cmp	r3, #23
 800abe4:	f000 8186 	beq.w	800aef4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x67c>
 800abe8:	2b18      	cmp	r3, #24
 800abea:	f000 813b 	beq.w	800ae64 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 800abee:	2b16      	cmp	r3, #22
 800abf0:	d015      	beq.n	800ac1e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a6>
 800abf2:	e7fe      	b.n	800abf2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 800abf4:	2300      	movs	r3, #0
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	deff      	udf	#255	; 0xff
 800abfa:	6873      	ldr	r3, [r6, #4]
 800abfc:	deff      	udf	#255	; 0xff
 800abfe:	68cb      	ldr	r3, [r1, #12]
 800ac00:	deff      	udf	#255	; 0xff
 800ac02:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800ae60 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 800ac06:	2900      	cmp	r1, #0
 800ac08:	f47f af2b 	bne.w	800aa62 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ea>
 800ac0c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ac0e:	eddf 0a94 	vldr	s1, [pc, #592]	; 800ae60 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 800ac12:	2d01      	cmp	r5, #1
 800ac14:	f43f af37 	beq.w	800aa86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x20e>
 800ac18:	f04f 0c00 	mov.w	ip, #0
 800ac1c:	e74a      	b.n	800aab4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 800ac1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 81b7 	bne.w	800af94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x71c>
 800ac26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac28:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	f000 81aa 	beq.w	800af86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70e>
 800ac32:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ac34:	2201      	movs	r2, #1
 800ac36:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ac38:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac3a:	fa1f f288 	uxth.w	r2, r8
 800ac3e:	910e      	str	r1, [sp, #56]	; 0x38
 800ac40:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800ac44:	68b8      	ldr	r0, [r7, #8]
 800ac46:	950c      	str	r5, [sp, #48]	; 0x30
 800ac48:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ac4a:	900d      	str	r0, [sp, #52]	; 0x34
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	950b      	str	r5, [sp, #44]	; 0x2c
 800ac50:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ac52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac54:	950a      	str	r5, [sp, #40]	; 0x28
 800ac56:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ac58:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ac5a:	9509      	str	r5, [sp, #36]	; 0x24
 800ac5c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ac5e:	9508      	str	r5, [sp, #32]
 800ac60:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ac62:	9507      	str	r5, [sp, #28]
 800ac64:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ac66:	9506      	str	r5, [sp, #24]
 800ac68:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ac6a:	9505      	str	r5, [sp, #20]
 800ac6c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800ac6e:	9504      	str	r5, [sp, #16]
 800ac70:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ac72:	9503      	str	r5, [sp, #12]
 800ac74:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ac76:	9502      	str	r5, [sp, #8]
 800ac78:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac7a:	9501      	str	r5, [sp, #4]
 800ac7c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ac7e:	9500      	str	r5, [sp, #0]
 800ac80:	f003 f956 	bl	800df30 <st_sssa8_ch_convolve_1x1>
 800ac84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ac86:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ac88:	428b      	cmp	r3, r1
 800ac8a:	f000 811e 	beq.w	800aeca <forward_conv2d_nl_pool_integer_SSSA_ch+0x652>
 800ac8e:	1a5b      	subs	r3, r3, r1
 800ac90:	4598      	cmp	r8, r3
 800ac92:	9327      	str	r3, [sp, #156]	; 0x9c
 800ac94:	bf28      	it	cs
 800ac96:	4698      	movcs	r8, r3
 800ac98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f040 811d 	bne.w	800aeda <forward_conv2d_nl_pool_integer_SSSA_ch+0x662>
 800aca0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800aca2:	449a      	add	sl, r3
 800aca4:	3401      	adds	r4, #1
 800aca6:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800aca8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800acaa:	4659      	mov	r1, fp
 800acac:	981e      	ldr	r0, [sp, #120]	; 0x78
 800acae:	b224      	sxth	r4, r4
 800acb0:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 800acb2:	47a8      	blx	r5
 800acb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800acb6:	3b01      	subs	r3, #1
 800acb8:	9328      	str	r3, [sp, #160]	; 0xa0
 800acba:	d46b      	bmi.n	800ad94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x51c>
 800acbc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800acbe:	429c      	cmp	r4, r3
 800acc0:	db36      	blt.n	800ad30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b8>
 800acc2:	2001      	movs	r0, #1
 800acc4:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800acc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800acca:	9007      	str	r0, [sp, #28]
 800accc:	9825      	ldr	r0, [sp, #148]	; 0x94
 800acce:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 800acd2:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 800acd6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800acd8:	1a64      	subs	r4, r4, r1
 800acda:	9208      	str	r2, [sp, #32]
 800acdc:	1a1a      	subs	r2, r3, r0
 800acde:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
 800ace2:	3501      	adds	r5, #1
 800ace4:	f8bd c0e8 	ldrh.w	ip, [sp, #232]	; 0xe8
 800ace8:	b292      	uxth	r2, r2
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	fa1f f389 	uxth.w	r3, r9
 800acf0:	9105      	str	r1, [sp, #20]
 800acf2:	b224      	sxth	r4, r4
 800acf4:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
 800acf8:	9006      	str	r0, [sp, #24]
 800acfa:	f8bd 00e4 	ldrh.w	r0, [sp, #228]	; 0xe4
 800acfe:	9102      	str	r1, [sp, #8]
 800ad00:	9000      	str	r0, [sp, #0]
 800ad02:	a84d      	add	r0, sp, #308	; 0x134
 800ad04:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ad06:	9517      	str	r5, [sp, #92]	; 0x5c
 800ad08:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 800ad0a:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 800ad0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad10:	47a8      	blx	r5
 800ad12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad14:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 800ad18:	464d      	mov	r5, r9
 800ad1a:	6951      	ldr	r1, [r2, #20]
 800ad1c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800ad1e:	1aeb      	subs	r3, r5, r3
 800ad20:	68c9      	ldr	r1, [r1, #12]
 800ad22:	6882      	ldr	r2, [r0, #8]
 800ad24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad28:	440a      	add	r2, r1
 800ad2a:	b21b      	sxth	r3, r3
 800ad2c:	6082      	str	r2, [r0, #8]
 800ad2e:	9331      	str	r3, [sp, #196]	; 0xc4
 800ad30:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	eb02 0903 	add.w	r9, r2, r3
 800ad3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad3e:	f8c7 9008 	str.w	r9, [r7, #8]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	b13b      	cbz	r3, 800ad56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4de>
 800ad46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad48:	695a      	ldr	r2, [r3, #20]
 800ad4a:	68b3      	ldr	r3, [r6, #8]
 800ad4c:	68d2      	ldr	r2, [r2, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60b3      	str	r3, [r6, #8]
 800ad52:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4658      	mov	r0, fp
 800ad5a:	9337      	str	r3, [sp, #220]	; 0xdc
 800ad5c:	f005 ffc4 	bl	8010ce8 <get_tensor_byte_size>
 800ad60:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ad62:	4403      	add	r3, r0
 800ad64:	4599      	cmp	r9, r3
 800ad66:	d306      	bcc.n	800ad76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	60bb      	str	r3, [r7, #8]
 800ad6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	b10b      	cbz	r3, 800ad76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 800ad72:	68f3      	ldr	r3, [r6, #12]
 800ad74:	60b3      	str	r3, [r6, #8]
 800ad76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad78:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	f4ff af2d 	bcc.w	800abda <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800ad84:	60bb      	str	r3, [r7, #8]
 800ad86:	68f3      	ldr	r3, [r6, #12]
 800ad88:	60b3      	str	r3, [r6, #8]
 800ad8a:	68d3      	ldr	r3, [r2, #12]
 800ad8c:	6093      	str	r3, [r2, #8]
 800ad8e:	b055      	add	sp, #340	; 0x154
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 800ad98:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800ad9a:	fb03 2314 	mls	r3, r3, r4, r2
 800ad9e:	4299      	cmp	r1, r3
 800ada0:	d901      	bls.n	800ada6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52e>
 800ada2:	6870      	ldr	r0, [r6, #4]
 800ada4:	4403      	add	r3, r0
 800ada6:	4299      	cmp	r1, r3
 800ada8:	d212      	bcs.n	800add0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 800adaa:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800adac:	4284      	cmp	r4, r0
 800adae:	d00f      	beq.n	800add0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 800adb0:	6870      	ldr	r0, [r6, #4]
 800adb2:	4401      	add	r1, r0
 800adb4:	428b      	cmp	r3, r1
 800adb6:	d20b      	bcs.n	800add0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 800adb8:	3a01      	subs	r2, #1
 800adba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800adbc:	f813 1b01 	ldrb.w	r1, [r3], #1
 800adc0:	f802 1f01 	strb.w	r1, [r2, #1]!
 800adc4:	68f1      	ldr	r1, [r6, #12]
 800adc6:	6870      	ldr	r0, [r6, #4]
 800adc8:	4401      	add	r1, r0
 800adca:	428b      	cmp	r3, r1
 800adcc:	d3f6      	bcc.n	800adbc <forward_conv2d_nl_pool_integer_SSSA_ch+0x544>
 800adce:	9513      	str	r5, [sp, #76]	; 0x4c
 800add0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800add2:	b2a4      	uxth	r4, r4
 800add4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800add6:	4413      	add	r3, r2
 800add8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800adda:	1b1b      	subs	r3, r3, r4
 800addc:	4414      	add	r4, r2
 800adde:	b21b      	sxth	r3, r3
 800ade0:	b224      	sxth	r4, r4
 800ade2:	9325      	str	r3, [sp, #148]	; 0x94
 800ade4:	e76a      	b.n	800acbc <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 800ade6:	4670      	mov	r0, lr
 800ade8:	e694      	b.n	800ab14 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 800adea:	9218      	str	r2, [sp, #96]	; 0x60
 800adec:	e68a      	b.n	800ab04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 800adee:	9118      	str	r1, [sp, #96]	; 0x60
 800adf0:	e688      	b.n	800ab04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 800adf2:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800adf6:	f1ba 0f00 	cmp.w	sl, #0
 800adfa:	f43f adc4 	beq.w	800a986 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 800adfe:	f8da a008 	ldr.w	sl, [sl, #8]
 800ae02:	e5c0      	b.n	800a986 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	e557      	b.n	800a8b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 800ae08:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae0a:	e54d      	b.n	800a8a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 800ae0c:	9216      	str	r2, [sp, #88]	; 0x58
 800ae0e:	e66a      	b.n	800aae6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 800ae10:	9016      	str	r0, [sp, #88]	; 0x58
 800ae12:	e668      	b.n	800aae6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 800ae14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	e6b0      	b.n	800ab7c <forward_conv2d_nl_pool_integer_SSSA_ch+0x304>
 800ae1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae1c:	fb05 f503 	mul.w	r5, r5, r3
 800ae20:	2317      	movs	r3, #23
 800ae22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae26:	932c      	str	r3, [sp, #176]	; 0xb0
 800ae28:	3501      	adds	r5, #1
 800ae2a:	e69f      	b.n	800ab6c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 800ae2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ae2e:	f1bc 0f00 	cmp.w	ip, #0
 800ae32:	fb05 f303 	mul.w	r3, r5, r3
 800ae36:	bf14      	ite	ne
 800ae38:	2516      	movne	r5, #22
 800ae3a:	2518      	moveq	r5, #24
 800ae3c:	fb01 f103 	mul.w	r1, r1, r3
 800ae40:	952c      	str	r5, [sp, #176]	; 0xb0
 800ae42:	0049      	lsls	r1, r1, #1
 800ae44:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800ae48:	bfa8      	it	ge
 800ae4a:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 800ae4e:	f1bc 0f00 	cmp.w	ip, #0
 800ae52:	f47f ae8a 	bne.w	800ab6a <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 800ae56:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ae58:	195d      	adds	r5, r3, r5
 800ae5a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800ae5e:	e685      	b.n	800ab6c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 800ae60:	00000000 	.word	0x00000000
 800ae64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae66:	b913      	cbnz	r3, 800ae6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800ae68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d07c      	beq.n	800af68 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 800ae6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ae70:	2201      	movs	r2, #1
 800ae72:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ae74:	9510      	str	r5, [sp, #64]	; 0x40
 800ae76:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ae78:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae7a:	fa1f f288 	uxth.w	r2, r8
 800ae7e:	910e      	str	r1, [sp, #56]	; 0x38
 800ae80:	68b8      	ldr	r0, [r7, #8]
 800ae82:	950c      	str	r5, [sp, #48]	; 0x30
 800ae84:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ae86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae88:	950b      	str	r5, [sp, #44]	; 0x2c
 800ae8a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ae8c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ae8e:	950a      	str	r5, [sp, #40]	; 0x28
 800ae90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ae92:	900d      	str	r0, [sp, #52]	; 0x34
 800ae94:	4650      	mov	r0, sl
 800ae96:	9509      	str	r5, [sp, #36]	; 0x24
 800ae98:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ae9a:	9508      	str	r5, [sp, #32]
 800ae9c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ae9e:	9507      	str	r5, [sp, #28]
 800aea0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800aea2:	9506      	str	r5, [sp, #24]
 800aea4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800aea6:	9505      	str	r5, [sp, #20]
 800aea8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800aeaa:	9504      	str	r5, [sp, #16]
 800aeac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800aeae:	9503      	str	r5, [sp, #12]
 800aeb0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800aeb2:	9502      	str	r5, [sp, #8]
 800aeb4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800aeb6:	9501      	str	r5, [sp, #4]
 800aeb8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aeba:	9500      	str	r5, [sp, #0]
 800aebc:	f001 feb2 	bl	800cc24 <st_sssa8_ch_convolve>
 800aec0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800aec2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800aec4:	428b      	cmp	r3, r1
 800aec6:	f47f aee2 	bne.w	800ac8e <forward_conv2d_nl_pool_integer_SSSA_ch+0x416>
 800aeca:	f04f 0800 	mov.w	r8, #0
 800aece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aed0:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f43f aee3 	beq.w	800aca0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 800aeda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	d504      	bpl.n	800aeea <forward_conv2d_nl_pool_integer_SSSA_ch+0x672>
 800aee0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800aee2:	1a52      	subs	r2, r2, r1
 800aee4:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800aee6:	fb01 aa02 	mla	sl, r1, r2, sl
 800aeea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	9314      	str	r3, [sp, #80]	; 0x50
 800aef2:	e6d7      	b.n	800aca4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 800aef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aef6:	b913      	cbnz	r3, 800aefe <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 800aef8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d02b      	beq.n	800af56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6de>
 800aefe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800af00:	2201      	movs	r2, #1
 800af02:	9926      	ldr	r1, [sp, #152]	; 0x98
 800af04:	9510      	str	r5, [sp, #64]	; 0x40
 800af06:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800af08:	920f      	str	r2, [sp, #60]	; 0x3c
 800af0a:	fa1f f288 	uxth.w	r2, r8
 800af0e:	910e      	str	r1, [sp, #56]	; 0x38
 800af10:	68b8      	ldr	r0, [r7, #8]
 800af12:	950c      	str	r5, [sp, #48]	; 0x30
 800af14:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800af16:	900d      	str	r0, [sp, #52]	; 0x34
 800af18:	4650      	mov	r0, sl
 800af1a:	950b      	str	r5, [sp, #44]	; 0x2c
 800af1c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800af1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af20:	950a      	str	r5, [sp, #40]	; 0x28
 800af22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800af24:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800af26:	9509      	str	r5, [sp, #36]	; 0x24
 800af28:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800af2a:	9508      	str	r5, [sp, #32]
 800af2c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800af2e:	9507      	str	r5, [sp, #28]
 800af30:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800af32:	9506      	str	r5, [sp, #24]
 800af34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800af36:	9505      	str	r5, [sp, #20]
 800af38:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800af3a:	9504      	str	r5, [sp, #16]
 800af3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800af3e:	9503      	str	r5, [sp, #12]
 800af40:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800af42:	9502      	str	r5, [sp, #8]
 800af44:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af46:	9501      	str	r5, [sp, #4]
 800af48:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800af4a:	9500      	str	r5, [sp, #0]
 800af4c:	f001 f87a 	bl	800c044 <st_sssa8_ch_convolve_dw>
 800af50:	e698      	b.n	800ac84 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40c>
 800af52:	9513      	str	r5, [sp, #76]	; 0x4c
 800af54:	e49f      	b.n	800a896 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 800af56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800af60:	9819      	ldr	r0, [sp, #100]	; 0x64
 800af62:	f000 ffb1 	bl	800bec8 <st_sssa8_ch_conv_dw_Wadapt>
 800af66:	e7ca      	b.n	800aefe <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 800af68:	9924      	ldr	r1, [sp, #144]	; 0x90
 800af6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af6e:	9101      	str	r1, [sp, #4]
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	9202      	str	r2, [sp, #8]
 800af74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800af76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af78:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
 800af7c:	9000      	str	r0, [sp, #0]
 800af7e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800af80:	f001 fdc8 	bl	800cb14 <st_sssa8_ch_convolve_rank1upd>
 800af84:	e773      	b.n	800ae6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800af86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af88:	464b      	mov	r3, r9
 800af8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af8c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800af8e:	f002 ffbb 	bl	800df08 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 800af92:	e64e      	b.n	800ac32 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 800af94:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 800af98:	e64b      	b.n	800ac32 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 800af9a:	9318      	str	r3, [sp, #96]	; 0x60
 800af9c:	e5b2      	b.n	800ab04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 800af9e:	9316      	str	r3, [sp, #88]	; 0x58
 800afa0:	e5a1      	b.n	800aae6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 800afa2:	4904      	ldr	r1, [pc, #16]	; (800afb4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x73c>)
 800afa4:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 800afa8:	9130      	str	r1, [sp, #192]	; 0xc0
 800afaa:	e4a2      	b.n	800a8f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 800afac:	4622      	mov	r2, r4
 800afae:	e48e      	b.n	800a8ce <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 800afb0:	2200      	movs	r2, #0
 800afb2:	e48c      	b.n	800a8ce <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 800afb4:	0800a2e5 	.word	0x0800a2e5

0800afb8 <forward_dense_integer_SSSA>:
 800afb8:	6983      	ldr	r3, [r0, #24]
 800afba:	8818      	ldrh	r0, [r3, #0]
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f000 80b2 	beq.w	800b126 <forward_dense_integer_SSSA+0x16e>
 800afc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc6:	685c      	ldr	r4, [r3, #4]
 800afc8:	b093      	sub	sp, #76	; 0x4c
 800afca:	6863      	ldr	r3, [r4, #4]
 800afcc:	b103      	cbz	r3, 800afd0 <forward_dense_integer_SSSA+0x18>
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2801      	cmp	r0, #1
 800afd2:	f240 809f 	bls.w	800b114 <forward_dense_integer_SSSA+0x15c>
 800afd6:	6922      	ldr	r2, [r4, #16]
 800afd8:	b102      	cbz	r2, 800afdc <forward_dense_integer_SSSA+0x24>
 800afda:	6812      	ldr	r2, [r2, #0]
 800afdc:	2802      	cmp	r0, #2
 800afde:	f000 809f 	beq.w	800b120 <forward_dense_integer_SSSA+0x168>
 800afe2:	69e5      	ldr	r5, [r4, #28]
 800afe4:	2d00      	cmp	r5, #0
 800afe6:	f000 80ed 	beq.w	800b1c4 <forward_dense_integer_SSSA+0x20c>
 800afea:	6829      	ldr	r1, [r5, #0]
 800afec:	f114 0618 	adds.w	r6, r4, #24
 800aff0:	d007      	beq.n	800b002 <forward_dense_integer_SSSA+0x4a>
 800aff2:	8b26      	ldrh	r6, [r4, #24]
 800aff4:	2e01      	cmp	r6, #1
 800aff6:	f240 80d8 	bls.w	800b1aa <forward_dense_integer_SSSA+0x1f2>
 800affa:	2d00      	cmp	r5, #0
 800affc:	f000 80cc 	beq.w	800b198 <forward_dense_integer_SSSA+0x1e0>
 800b000:	686e      	ldr	r6, [r5, #4]
 800b002:	2803      	cmp	r0, #3
 800b004:	f000 8089 	beq.w	800b11a <forward_dense_integer_SSSA+0x162>
 800b008:	68d0      	ldr	r0, [r2, #12]
 800b00a:	68dd      	ldr	r5, [r3, #12]
 800b00c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b010:	9509      	str	r5, [sp, #36]	; 0x24
 800b012:	fa1f f58a 	uxth.w	r5, sl
 800b016:	69b7      	ldr	r7, [r6, #24]
 800b018:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b01a:	950f      	str	r5, [sp, #60]	; 0x3c
 800b01c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b01e:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800b022:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800b026:	fb00 f904 	mul.w	r9, r0, r4
 800b02a:	68bd      	ldr	r5, [r7, #8]
 800b02c:	fa1f f08b 	uxth.w	r0, fp
 800b030:	699c      	ldr	r4, [r3, #24]
 800b032:	950e      	str	r5, [sp, #56]	; 0x38
 800b034:	900d      	str	r0, [sp, #52]	; 0x34
 800b036:	6990      	ldr	r0, [r2, #24]
 800b038:	2e00      	cmp	r6, #0
 800b03a:	f000 80c5 	beq.w	800b1c8 <forward_dense_integer_SSSA+0x210>
 800b03e:	6835      	ldr	r5, [r6, #0]
 800b040:	2d00      	cmp	r5, #0
 800b042:	f000 809d 	beq.w	800b180 <forward_dense_integer_SSSA+0x1c8>
 800b046:	69ad      	ldr	r5, [r5, #24]
 800b048:	68ad      	ldr	r5, [r5, #8]
 800b04a:	9509      	str	r5, [sp, #36]	; 0x24
 800b04c:	681f      	ldr	r7, [r3, #0]
 800b04e:	698b      	ldr	r3, [r1, #24]
 800b050:	6812      	ldr	r2, [r2, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	68a5      	ldr	r5, [r4, #8]
 800b056:	6886      	ldr	r6, [r0, #8]
 800b058:	930a      	str	r3, [sp, #40]	; 0x28
 800b05a:	6809      	ldr	r1, [r1, #0]
 800b05c:	2f00      	cmp	r7, #0
 800b05e:	d071      	beq.n	800b144 <forward_dense_integer_SSSA+0x18c>
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	4604      	mov	r4, r0
 800b064:	2800      	cmp	r0, #0
 800b066:	d060      	beq.n	800b12a <forward_dense_integer_SSSA+0x172>
 800b068:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800b06c:	f1bc 0f00 	cmp.w	ip, #0
 800b070:	f000 8088 	beq.w	800b184 <forward_dense_integer_SSSA+0x1cc>
 800b074:	6803      	ldr	r3, [r0, #0]
 800b076:	edd3 7a00 	vldr	s15, [r3]
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	f000 80ac 	beq.w	800b1d8 <forward_dense_integer_SSSA+0x220>
 800b080:	6853      	ldr	r3, [r2, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 8081 	beq.w	800b18a <forward_dense_integer_SSSA+0x1d2>
 800b088:	8850      	ldrh	r0, [r2, #2]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d063      	beq.n	800b156 <forward_dense_integer_SSSA+0x19e>
 800b08e:	681c      	ldr	r4, [r3, #0]
 800b090:	ed94 0a00 	vldr	s0, [r4]
 800b094:	2f00      	cmp	r7, #0
 800b096:	f040 808a 	bne.w	800b1ae <forward_dense_integer_SSSA+0x1f6>
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f993 3000 	ldrsb.w	r3, [r3]
 800b0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0a2:	2900      	cmp	r1, #0
 800b0a4:	d048      	beq.n	800b138 <forward_dense_integer_SSSA+0x180>
 800b0a6:	684b      	ldr	r3, [r1, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d045      	beq.n	800b138 <forward_dense_integer_SSSA+0x180>
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2400      	movs	r4, #0
 800b0b0:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800b0b4:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800b0b8:	9411      	str	r4, [sp, #68]	; 0x44
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	ed93 7a00 	vldr	s14, [r3]
 800b0c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b0c8:	f000 fe24 	bl	800bd14 <align_factor>
 800b0cc:	9011      	str	r0, [sp, #68]	; 0x44
 800b0ce:	f1b9 0f00 	cmp.w	r9, #0
 800b0d2:	d01c      	beq.n	800b10e <forward_dense_integer_SSSA+0x156>
 800b0d4:	fa1f fb8b 	uxth.w	fp, fp
 800b0d8:	970c      	str	r7, [sp, #48]	; 0x30
 800b0da:	fa1f fa8a 	uxth.w	sl, sl
 800b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e0:	af11      	add	r7, sp, #68	; 0x44
 800b0e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0e4:	3401      	adds	r4, #1
 800b0e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0e8:	9103      	str	r1, [sp, #12]
 800b0ea:	9002      	str	r0, [sp, #8]
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0f0:	445d      	add	r5, fp
 800b0f2:	f8cd 8004 	str.w	r8, [sp, #4]
 800b0f6:	9700      	str	r7, [sp, #0]
 800b0f8:	e9cd 6305 	strd	r6, r3, [sp, #20]
 800b0fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b100:	4456      	add	r6, sl
 800b102:	9204      	str	r2, [sp, #16]
 800b104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b106:	f002 ff9b 	bl	800e040 <st_sssa8_fully_connected>
 800b10a:	454c      	cmp	r4, r9
 800b10c:	d1e7      	bne.n	800b0de <forward_dense_integer_SSSA+0x126>
 800b10e:	b013      	add	sp, #76	; 0x4c
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	2300      	movs	r3, #0
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	deff      	udf	#255	; 0xff
 800b11a:	2300      	movs	r3, #0
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	deff      	udf	#255	; 0xff
 800b120:	2300      	movs	r3, #0
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	deff      	udf	#255	; 0xff
 800b126:	6843      	ldr	r3, [r0, #4]
 800b128:	deff      	udf	#255	; 0xff
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d036      	beq.n	800b19c <forward_dense_integer_SSSA+0x1e4>
 800b12e:	6853      	ldr	r3, [r2, #4]
 800b130:	b963      	cbnz	r3, 800b14c <forward_dense_integer_SSSA+0x194>
 800b132:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b136:	e011      	b.n	800b15c <forward_dense_integer_SSSA+0x1a4>
 800b138:	2300      	movs	r3, #0
 800b13a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800b13e:	9311      	str	r3, [sp, #68]	; 0x44
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	deff      	udf	#255	; 0xff
 800b144:	b352      	cbz	r2, 800b19c <forward_dense_integer_SSSA+0x1e4>
 800b146:	6853      	ldr	r3, [r2, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d03f      	beq.n	800b1cc <forward_dense_integer_SSSA+0x214>
 800b14c:	8850      	ldrh	r0, [r2, #2]
 800b14e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b152:	2800      	cmp	r0, #0
 800b154:	d19b      	bne.n	800b08e <forward_dense_integer_SSSA+0xd6>
 800b156:	2f00      	cmp	r7, #0
 800b158:	d03b      	beq.n	800b1d2 <forward_dense_integer_SSSA+0x21a>
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4604      	mov	r4, r0
 800b15e:	b358      	cbz	r0, 800b1b8 <forward_dense_integer_SSSA+0x200>
 800b160:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b164:	887f      	ldrh	r7, [r7, #2]
 800b166:	b127      	cbz	r7, 800b172 <forward_dense_integer_SSSA+0x1ba>
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	f993 7000 	ldrsb.w	r7, [r3]
 800b16e:	b33a      	cbz	r2, 800b1c0 <forward_dense_integer_SSSA+0x208>
 800b170:	6853      	ldr	r3, [r2, #4]
 800b172:	b11b      	cbz	r3, 800b17c <forward_dense_integer_SSSA+0x1c4>
 800b174:	8850      	ldrh	r0, [r2, #2]
 800b176:	2800      	cmp	r0, #0
 800b178:	d18f      	bne.n	800b09a <forward_dense_integer_SSSA+0xe2>
 800b17a:	2300      	movs	r3, #0
 800b17c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b17e:	e790      	b.n	800b0a2 <forward_dense_integer_SSSA+0xea>
 800b180:	9509      	str	r5, [sp, #36]	; 0x24
 800b182:	e763      	b.n	800b04c <forward_dense_integer_SSSA+0x94>
 800b184:	eddf 7a17 	vldr	s15, [pc, #92]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b188:	e777      	b.n	800b07a <forward_dense_integer_SSSA+0xc2>
 800b18a:	2f00      	cmp	r7, #0
 800b18c:	d1e6      	bne.n	800b15c <forward_dense_integer_SSSA+0x1a4>
 800b18e:	2700      	movs	r7, #0
 800b190:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b194:	970b      	str	r7, [sp, #44]	; 0x2c
 800b196:	e784      	b.n	800b0a2 <forward_dense_integer_SSSA+0xea>
 800b198:	462e      	mov	r6, r5
 800b19a:	e732      	b.n	800b002 <forward_dense_integer_SSSA+0x4a>
 800b19c:	eddf 7a11 	vldr	s15, [pc, #68]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b1a0:	4617      	mov	r7, r2
 800b1a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1a4:	eeb0 0a67 	vmov.f32	s0, s15
 800b1a8:	e77b      	b.n	800b0a2 <forward_dense_integer_SSSA+0xea>
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	e729      	b.n	800b002 <forward_dense_integer_SSSA+0x4a>
 800b1ae:	687c      	ldr	r4, [r7, #4]
 800b1b0:	2c00      	cmp	r4, #0
 800b1b2:	d1d7      	bne.n	800b164 <forward_dense_integer_SSSA+0x1ac>
 800b1b4:	4627      	mov	r7, r4
 800b1b6:	e7de      	b.n	800b176 <forward_dense_integer_SSSA+0x1be>
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b1be:	e7d8      	b.n	800b172 <forward_dense_integer_SSSA+0x1ba>
 800b1c0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1c2:	e76e      	b.n	800b0a2 <forward_dense_integer_SSSA+0xea>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	e711      	b.n	800afec <forward_dense_integer_SSSA+0x34>
 800b1c8:	9609      	str	r6, [sp, #36]	; 0x24
 800b1ca:	e73f      	b.n	800b04c <forward_dense_integer_SSSA+0x94>
 800b1cc:	eddf 7a05 	vldr	s15, [pc, #20]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b1d0:	e7dd      	b.n	800b18e <forward_dense_integer_SSSA+0x1d6>
 800b1d2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b1d6:	e7d0      	b.n	800b17a <forward_dense_integer_SSSA+0x1c2>
 800b1d8:	f1bc 0f00 	cmp.w	ip, #0
 800b1dc:	d0d7      	beq.n	800b18e <forward_dense_integer_SSSA+0x1d6>
 800b1de:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1e4 <forward_dense_integer_SSSA+0x22c>
 800b1e2:	e7c1      	b.n	800b168 <forward_dense_integer_SSSA+0x1b0>
 800b1e4:	00000000 	.word	0x00000000

0800b1e8 <forward_eltwise_integer_INT8>:
 800b1e8:	6982      	ldr	r2, [r0, #24]
 800b1ea:	8813      	ldrh	r3, [r2, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d05a      	beq.n	800b2a6 <forward_eltwise_integer_INT8+0xbe>
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	ed2d 8b02 	vpush	{d8}
 800b1f8:	6851      	ldr	r1, [r2, #4]
 800b1fa:	b0ab      	sub	sp, #172	; 0xac
 800b1fc:	684a      	ldr	r2, [r1, #4]
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	f000 821a 	beq.w	800b638 <forward_eltwise_integer_INT8+0x450>
 800b204:	e9d2 7900 	ldrd	r7, r9, [r2]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d949      	bls.n	800b2a0 <forward_eltwise_integer_INT8+0xb8>
 800b20c:	690b      	ldr	r3, [r1, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 81fb 	beq.w	800b60a <forward_eltwise_integer_INT8+0x422>
 800b214:	f8d3 8000 	ldr.w	r8, [r3]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f107 0208 	add.w	r2, r7, #8
 800b21e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b222:	9209      	str	r2, [sp, #36]	; 0x24
 800b224:	f3c3 2617 	ubfx	r6, r3, #8, #24
 800b228:	ea83 0b05 	eor.w	fp, r3, r5
 800b22c:	f109 0208 	add.w	r2, r9, #8
 800b230:	6a03      	ldr	r3, [r0, #32]
 800b232:	f03b 0bff 	bics.w	fp, fp, #255	; 0xff
 800b236:	920a      	str	r2, [sp, #40]	; 0x28
 800b238:	69c4      	ldr	r4, [r0, #28]
 800b23a:	930c      	str	r3, [sp, #48]	; 0x30
 800b23c:	d135      	bne.n	800b2aa <forward_eltwise_integer_INT8+0xc2>
 800b23e:	2e00      	cmp	r6, #0
 800b240:	f000 81fd 	beq.w	800b63e <forward_eltwise_integer_INT8+0x456>
 800b244:	1e73      	subs	r3, r6, #1
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b24c:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 800b250:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800b254:	458c      	cmp	ip, r1
 800b256:	d131      	bne.n	800b2bc <forward_eltwise_integer_INT8+0xd4>
 800b258:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b25c:	4618      	mov	r0, r3
 800b25e:	469a      	mov	sl, r3
 800b260:	4431      	add	r1, r6
 800b262:	0089      	lsls	r1, r1, #2
 800b264:	eb0e 0601 	add.w	r6, lr, r1
 800b268:	4411      	add	r1, r2
 800b26a:	4696      	mov	lr, r2
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f000 81d2 	beq.w	800b616 <forward_eltwise_integer_INT8+0x42e>
 800b272:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b276:	3801      	subs	r0, #1
 800b278:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d0f5      	beq.n	800b26c <forward_eltwise_integer_INT8+0x84>
 800b280:	f1bc 0f01 	cmp.w	ip, #1
 800b284:	4672      	mov	r2, lr
 800b286:	4653      	mov	r3, sl
 800b288:	f04f 0b00 	mov.w	fp, #0
 800b28c:	d019      	beq.n	800b2c2 <forward_eltwise_integer_INT8+0xda>
 800b28e:	0a2d      	lsrs	r5, r5, #8
 800b290:	f04f 0601 	mov.w	r6, #1
 800b294:	f04f 0a00 	mov.w	sl, #0
 800b298:	d121      	bne.n	800b2de <forward_eltwise_integer_INT8+0xf6>
 800b29a:	2301      	movs	r3, #1
 800b29c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b29e:	e034      	b.n	800b30a <forward_eltwise_integer_INT8+0x122>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	deff      	udf	#255	; 0xff
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	deff      	udf	#255	; 0xff
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	f000 81cb 	beq.w	800b646 <forward_eltwise_integer_INT8+0x45e>
 800b2b0:	1e73      	subs	r3, r6, #1
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	f04f 0b00 	mov.w	fp, #0
 800b2b8:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 800b2bc:	f1bc 0f01 	cmp.w	ip, #1
 800b2c0:	d1e5      	bne.n	800b28e <forward_eltwise_integer_INT8+0xa6>
 800b2c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2c6:	e003      	b.n	800b2d0 <forward_eltwise_integer_INT8+0xe8>
 800b2c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2cc:	2901      	cmp	r1, #1
 800b2ce:	d1de      	bne.n	800b28e <forward_eltwise_integer_INT8+0xa6>
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d1f9      	bne.n	800b2c8 <forward_eltwise_integer_INT8+0xe0>
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	f04f 0a01 	mov.w	sl, #1
 800b2da:	0a2d      	lsrs	r5, r5, #8
 800b2dc:	d0dd      	beq.n	800b29a <forward_eltwise_integer_INT8+0xb2>
 800b2de:	1e6b      	subs	r3, r5, #1
 800b2e0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b2e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b2e8:	2901      	cmp	r1, #1
 800b2ea:	d10b      	bne.n	800b304 <forward_eltwise_integer_INT8+0x11c>
 800b2ec:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b2f0:	4429      	add	r1, r5
 800b2f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0cf      	beq.n	800b29a <forward_eltwise_integer_INT8+0xb2>
 800b2fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2901      	cmp	r1, #1
 800b302:	d0f8      	beq.n	800b2f6 <forward_eltwise_integer_INT8+0x10e>
 800b304:	2300      	movs	r3, #0
 800b306:	4656      	mov	r6, sl
 800b308:	930b      	str	r3, [sp, #44]	; 0x2c
 800b30a:	697d      	ldr	r5, [r7, #20]
 800b30c:	f240 5101 	movw	r1, #1281	; 0x501
 800b310:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800b314:	f04f 0c00 	mov.w	ip, #0
 800b318:	686d      	ldr	r5, [r5, #4]
 800b31a:	ab1b      	add	r3, sp, #108	; 0x6c
 800b31c:	9115      	str	r1, [sp, #84]	; 0x54
 800b31e:	a815      	add	r0, sp, #84	; 0x54
 800b320:	950d      	str	r5, [sp, #52]	; 0x34
 800b322:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b324:	6855      	ldr	r5, [r2, #4]
 800b326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b328:	9316      	str	r3, [sp, #88]	; 0x58
 800b32a:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800b32e:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
 800b332:	e9cd cc1d 	strd	ip, ip, [sp, #116]	; 0x74
 800b336:	f005 fd55 	bl	8010de4 <core_get_broadcasted_shape>
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800b340:	f8d8 3000 	ldr.w	r3, [r8]
 800b344:	f8d9 2000 	ldr.w	r2, [r9]
 800b348:	2900      	cmp	r1, #0
 800b34a:	f000 812d 	beq.w	800b5a8 <forward_eltwise_integer_INT8+0x3c0>
 800b34e:	6848      	ldr	r0, [r1, #4]
 800b350:	2800      	cmp	r0, #0
 800b352:	f000 8129 	beq.w	800b5a8 <forward_eltwise_integer_INT8+0x3c0>
 800b356:	884f      	ldrh	r7, [r1, #2]
 800b358:	2f00      	cmp	r7, #0
 800b35a:	f000 8125 	beq.w	800b5a8 <forward_eltwise_integer_INT8+0x3c0>
 800b35e:	6800      	ldr	r0, [r0, #0]
 800b360:	6800      	ldr	r0, [r0, #0]
 800b362:	900f      	str	r0, [sp, #60]	; 0x3c
 800b364:	2a00      	cmp	r2, #0
 800b366:	f000 811d 	beq.w	800b5a4 <forward_eltwise_integer_INT8+0x3bc>
 800b36a:	6850      	ldr	r0, [r2, #4]
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f000 8119 	beq.w	800b5a4 <forward_eltwise_integer_INT8+0x3bc>
 800b372:	8857      	ldrh	r7, [r2, #2]
 800b374:	2f00      	cmp	r7, #0
 800b376:	f000 8115 	beq.w	800b5a4 <forward_eltwise_integer_INT8+0x3bc>
 800b37a:	6800      	ldr	r0, [r0, #0]
 800b37c:	6800      	ldr	r0, [r0, #0]
 800b37e:	9010      	str	r0, [sp, #64]	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 810c 	beq.w	800b59e <forward_eltwise_integer_INT8+0x3b6>
 800b386:	6858      	ldr	r0, [r3, #4]
 800b388:	2800      	cmp	r0, #0
 800b38a:	f000 8108 	beq.w	800b59e <forward_eltwise_integer_INT8+0x3b6>
 800b38e:	885f      	ldrh	r7, [r3, #2]
 800b390:	2f00      	cmp	r7, #0
 800b392:	f000 8104 	beq.w	800b59e <forward_eltwise_integer_INT8+0x3b6>
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	f8d0 e000 	ldr.w	lr, [r0]
 800b39c:	f8d9 7018 	ldr.w	r7, [r9, #24]
 800b3a0:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800b3a4:	68bf      	ldr	r7, [r7, #8]
 800b3a6:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800b3aa:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800b3ae:	f8dc 8008 	ldr.w	r8, [ip, #8]
 800b3b2:	b141      	cbz	r1, 800b3c6 <forward_eltwise_integer_INT8+0x1de>
 800b3b4:	6848      	ldr	r0, [r1, #4]
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f000 8138 	beq.w	800b62c <forward_eltwise_integer_INT8+0x444>
 800b3bc:	8849      	ldrh	r1, [r1, #2]
 800b3be:	b111      	cbz	r1, 800b3c6 <forward_eltwise_integer_INT8+0x1de>
 800b3c0:	6841      	ldr	r1, [r0, #4]
 800b3c2:	f991 1000 	ldrsb.w	r1, [r1]
 800b3c6:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 800b3ca:	b142      	cbz	r2, 800b3de <forward_eltwise_integer_INT8+0x1f6>
 800b3cc:	6851      	ldr	r1, [r2, #4]
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	f000 812e 	beq.w	800b630 <forward_eltwise_integer_INT8+0x448>
 800b3d4:	8852      	ldrh	r2, [r2, #2]
 800b3d6:	b112      	cbz	r2, 800b3de <forward_eltwise_integer_INT8+0x1f6>
 800b3d8:	684a      	ldr	r2, [r1, #4]
 800b3da:	f992 2000 	ldrsb.w	r2, [r2]
 800b3de:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800b3e2:	b143      	cbz	r3, 800b3f6 <forward_eltwise_integer_INT8+0x20e>
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	f000 8124 	beq.w	800b634 <forward_eltwise_integer_INT8+0x44c>
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	b113      	cbz	r3, 800b3f6 <forward_eltwise_integer_INT8+0x20e>
 800b3f0:	6853      	ldr	r3, [r2, #4]
 800b3f2:	f993 3000 	ldrsb.w	r3, [r3]
 800b3f6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b3fa:	f1bb 0f00 	cmp.w	fp, #0
 800b3fe:	f040 80d5 	bne.w	800b5ac <forward_eltwise_integer_INT8+0x3c4>
 800b402:	2e00      	cmp	r6, #0
 800b404:	f040 80d2 	bne.w	800b5ac <forward_eltwise_integer_INT8+0x3c4>
 800b408:	f240 5002 	movw	r0, #1282	; 0x502
 800b40c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800b410:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 800b414:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 800b418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b41a:	4653      	mov	r3, sl
 800b41c:	aa15      	add	r2, sp, #84	; 0x54
 800b41e:	9017      	str	r0, [sp, #92]	; 0x5c
 800b420:	9019      	str	r0, [sp, #100]	; 0x64
 800b422:	a817      	add	r0, sp, #92	; 0x5c
 800b424:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800b428:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 800b42c:	9620      	str	r6, [sp, #128]	; 0x80
 800b42e:	9625      	str	r6, [sp, #148]	; 0x94
 800b430:	e9cd 6621 	strd	r6, r6, [sp, #132]	; 0x84
 800b434:	e9cd 6623 	strd	r6, r6, [sp, #140]	; 0x8c
 800b438:	e9cd 6626 	strd	r6, r6, [sp, #152]	; 0x98
 800b43c:	e9cd 6628 	strd	r6, r6, [sp, #160]	; 0xa0
 800b440:	f005 fcfa 	bl	8010e38 <core_compute_offsets_in_bytes>
 800b444:	4653      	mov	r3, sl
 800b446:	aa15      	add	r2, sp, #84	; 0x54
 800b448:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b44a:	a819      	add	r0, sp, #100	; 0x64
 800b44c:	f005 fcf4 	bl	8010e38 <core_compute_offsets_in_bytes>
 800b450:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b452:	68d3      	ldr	r3, [r2, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 809d 	beq.w	800b594 <forward_eltwise_integer_INT8+0x3ac>
 800b45a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b45e:	4619      	mov	r1, r3
 800b460:	eddf 8a7b 	vldr	s17, [pc, #492]	; 800b650 <forward_eltwise_integer_INT8+0x468>
 800b464:	4663      	mov	r3, ip
 800b466:	960a      	str	r6, [sp, #40]	; 0x28
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 80d0 	beq.w	800b60e <forward_eltwise_integer_INT8+0x426>
 800b46e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b470:	f04f 0b00 	mov.w	fp, #0
 800b474:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800b478:	f04f 0a00 	mov.w	sl, #0
 800b47c:	2e04      	cmp	r6, #4
 800b47e:	bf8c      	ite	hi
 800b480:	6911      	ldrhi	r1, [r2, #16]
 800b482:	2101      	movls	r1, #1
 800b484:	458a      	cmp	sl, r1
 800b486:	d269      	bcs.n	800b55c <forward_eltwise_integer_INT8+0x374>
 800b488:	6851      	ldr	r1, [r2, #4]
 800b48a:	2900      	cmp	r1, #0
 800b48c:	d055      	beq.n	800b53a <forward_eltwise_integer_INT8+0x352>
 800b48e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b492:	2600      	movs	r6, #0
 800b494:	f998 0000 	ldrsb.w	r0, [r8]
 800b498:	aa13      	add	r2, sp, #76	; 0x4c
 800b49a:	f99d c039 	ldrsb.w	ip, [sp, #57]	; 0x39
 800b49e:	a912      	add	r1, sp, #72	; 0x48
 800b4a0:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 800b4a4:	eba0 030c 	sub.w	r3, r0, ip
 800b4a8:	f99d e03a 	ldrsb.w	lr, [sp, #58]	; 0x3a
 800b4ac:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 800b4b0:	a814      	add	r0, sp, #80	; 0x50
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4be:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 800b4c2:	f997 c000 	ldrsb.w	ip, [r7]
 800b4c6:	ebac 030e 	sub.w	r3, ip, lr
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4d6:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 800b4da:	47a0      	blx	r4
 800b4dc:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 800b4e0:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 800b4e4:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800b4e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b500:	fe38 7a28 	vselgt.f32	s14, s16, s17
 800b504:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b508:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 800b50c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b510:	ee17 2a90 	vmov	r2, s15
 800b514:	f302 0207 	ssat	r2, #8, r2
 800b518:	f889 2000 	strb.w	r2, [r9]
 800b51c:	3601      	adds	r6, #1
 800b51e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b520:	44a9      	add	r9, r5
 800b522:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b524:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b526:	6843      	ldr	r3, [r0, #4]
 800b528:	6848      	ldr	r0, [r1, #4]
 800b52a:	6851      	ldr	r1, [r2, #4]
 800b52c:	4498      	add	r8, r3
 800b52e:	4407      	add	r7, r0
 800b530:	42b1      	cmp	r1, r6
 800b532:	d8af      	bhi.n	800b494 <forward_eltwise_integer_INT8+0x2ac>
 800b534:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b536:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800b53a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b53c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800b540:	d302      	bcc.n	800b548 <forward_eltwise_integer_INT8+0x360>
 800b542:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b544:	6909      	ldr	r1, [r1, #16]
 800b546:	4488      	add	r8, r1
 800b548:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b54a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800b54e:	d302      	bcc.n	800b556 <forward_eltwise_integer_INT8+0x36e>
 800b550:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b552:	6909      	ldr	r1, [r1, #16]
 800b554:	440f      	add	r7, r1
 800b556:	f10a 0a01 	add.w	sl, sl, #1
 800b55a:	e78f      	b.n	800b47c <forward_eltwise_integer_INT8+0x294>
 800b55c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b55e:	f10b 0b01 	add.w	fp, fp, #1
 800b562:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800b566:	6881      	ldr	r1, [r0, #8]
 800b568:	6893      	ldr	r3, [r2, #8]
 800b56a:	9109      	str	r1, [sp, #36]	; 0x24
 800b56c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b570:	455b      	cmp	r3, fp
 800b572:	4488      	add	r8, r1
 800b574:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b576:	440f      	add	r7, r1
 800b578:	f63f af7e 	bhi.w	800b478 <forward_eltwise_integer_INT8+0x290>
 800b57c:	68d1      	ldr	r1, [r2, #12]
 800b57e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b580:	f8da c00c 	ldr.w	ip, [sl, #12]
 800b584:	3601      	adds	r6, #1
 800b586:	68c0      	ldr	r0, [r0, #12]
 800b588:	44e0      	add	r8, ip
 800b58a:	428e      	cmp	r6, r1
 800b58c:	960a      	str	r6, [sp, #40]	; 0x28
 800b58e:	4407      	add	r7, r0
 800b590:	f4ff af6a 	bcc.w	800b468 <forward_eltwise_integer_INT8+0x280>
 800b594:	b02b      	add	sp, #172	; 0xac
 800b596:	ecbd 8b02 	vpop	{d8}
 800b59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59e:	f04f 0e00 	mov.w	lr, #0
 800b5a2:	e6fb      	b.n	800b39c <forward_eltwise_integer_INT8+0x1b4>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e6ea      	b.n	800b37e <forward_eltwise_integer_INT8+0x196>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e6da      	b.n	800b362 <forward_eltwise_integer_INT8+0x17a>
 800b5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ae:	4553      	cmp	r3, sl
 800b5b0:	d036      	beq.n	800b620 <forward_eltwise_integer_INT8+0x438>
 800b5b2:	f1ba 0f00 	cmp.w	sl, #0
 800b5b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b8:	bf0c      	ite	eq
 800b5ba:	2402      	moveq	r4, #2
 800b5bc:	2401      	movne	r4, #1
 800b5be:	0a1a      	lsrs	r2, r3, #8
 800b5c0:	d032      	beq.n	800b628 <forward_eltwise_integer_INT8+0x440>
 800b5c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b5ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b5ce:	4290      	cmp	r0, r2
 800b5d0:	fb01 f303 	mul.w	r3, r1, r3
 800b5d4:	d1f9      	bne.n	800b5ca <forward_eltwise_integer_INT8+0x3e2>
 800b5d6:	9406      	str	r4, [sp, #24]
 800b5d8:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 800b5dc:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
 800b5e0:	ad11      	add	r5, sp, #68	; 0x44
 800b5e2:	9403      	str	r4, [sp, #12]
 800b5e4:	ac0f      	add	r4, sp, #60	; 0x3c
 800b5e6:	9605      	str	r6, [sp, #20]
 800b5e8:	ae10      	add	r6, sp, #64	; 0x40
 800b5ea:	9504      	str	r5, [sp, #16]
 800b5ec:	f10d 0539 	add.w	r5, sp, #57	; 0x39
 800b5f0:	9400      	str	r4, [sp, #0]
 800b5f2:	463a      	mov	r2, r7
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	4648      	mov	r0, r9
 800b5f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b5fa:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800b5fe:	47a0      	blx	r4
 800b600:	b02b      	add	sp, #172	; 0xac
 800b602:	ecbd 8b02 	vpop	{d8}
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60a:	4698      	mov	r8, r3
 800b60c:	e604      	b.n	800b218 <forward_eltwise_integer_INT8+0x30>
 800b60e:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800b612:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b614:	e7b3      	b.n	800b57e <forward_eltwise_integer_INT8+0x396>
 800b616:	4672      	mov	r2, lr
 800b618:	4653      	mov	r3, sl
 800b61a:	f04f 0b01 	mov.w	fp, #1
 800b61e:	e64d      	b.n	800b2bc <forward_eltwise_integer_INT8+0xd4>
 800b620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b622:	2400      	movs	r4, #0
 800b624:	0a1a      	lsrs	r2, r3, #8
 800b626:	d1cc      	bne.n	800b5c2 <forward_eltwise_integer_INT8+0x3da>
 800b628:	2301      	movs	r3, #1
 800b62a:	e7d4      	b.n	800b5d6 <forward_eltwise_integer_INT8+0x3ee>
 800b62c:	4601      	mov	r1, r0
 800b62e:	e6ca      	b.n	800b3c6 <forward_eltwise_integer_INT8+0x1de>
 800b630:	460a      	mov	r2, r1
 800b632:	e6d4      	b.n	800b3de <forward_eltwise_integer_INT8+0x1f6>
 800b634:	4613      	mov	r3, r2
 800b636:	e6de      	b.n	800b3f6 <forward_eltwise_integer_INT8+0x20e>
 800b638:	4617      	mov	r7, r2
 800b63a:	4691      	mov	r9, r2
 800b63c:	e5e4      	b.n	800b208 <forward_eltwise_integer_INT8+0x20>
 800b63e:	f04f 0b01 	mov.w	fp, #1
 800b642:	46da      	mov	sl, fp
 800b644:	e649      	b.n	800b2da <forward_eltwise_integer_INT8+0xf2>
 800b646:	f04f 0a01 	mov.w	sl, #1
 800b64a:	46b3      	mov	fp, r6
 800b64c:	e645      	b.n	800b2da <forward_eltwise_integer_INT8+0xf2>
 800b64e:	bf00      	nop
 800b650:	befffffc 	.word	0xbefffffc

0800b654 <ai_check_custom_types>:
 800b654:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <ai_check_custom_types+0x50>)
 800b656:	b082      	sub	sp, #8
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	b118      	cbz	r0, 800b666 <ai_check_custom_types+0x12>
 800b65e:	7803      	ldrb	r3, [r0, #0]
 800b660:	2b03      	cmp	r3, #3
 800b662:	d002      	beq.n	800b66a <ai_check_custom_types+0x16>
 800b664:	2000      	movs	r0, #0
 800b666:	b002      	add	sp, #8
 800b668:	4770      	bx	lr
 800b66a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b66e:	4293      	cmp	r3, r2
 800b670:	d004      	beq.n	800b67c <ai_check_custom_types+0x28>
 800b672:	2001      	movs	r0, #1
 800b674:	f080 0001 	eor.w	r0, r0, #1
 800b678:	b002      	add	sp, #8
 800b67a:	4770      	bx	lr
 800b67c:	7842      	ldrb	r2, [r0, #1]
 800b67e:	3001      	adds	r0, #1
 800b680:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b684:	429a      	cmp	r2, r3
 800b686:	d1f4      	bne.n	800b672 <ai_check_custom_types+0x1e>
 800b688:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b68c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b690:	429a      	cmp	r2, r3
 800b692:	d1ee      	bne.n	800b672 <ai_check_custom_types+0x1e>
 800b694:	7842      	ldrb	r2, [r0, #1]
 800b696:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d1e9      	bne.n	800b672 <ai_check_custom_types+0x1e>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e7e8      	b.n	800b674 <ai_check_custom_types+0x20>
 800b6a2:	bf00      	nop
 800b6a4:	080147a0 	.word	0x080147a0

0800b6a8 <ai_layer_type_name>:
 800b6a8:	f5b0 7f9a 	cmp.w	r0, #308	; 0x134
 800b6ac:	d20e      	bcs.n	800b6cc <ai_layer_type_name+0x24>
 800b6ae:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 800b6b2:	d216      	bcs.n	800b6e2 <ai_layer_type_name+0x3a>
 800b6b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b6b8:	d306      	bcc.n	800b6c8 <ai_layer_type_name+0x20>
 800b6ba:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800b6be:	d910      	bls.n	800b6e2 <ai_layer_type_name+0x3a>
 800b6c0:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 800b6c4:	2b26      	cmp	r3, #38	; 0x26
 800b6c6:	d90c      	bls.n	800b6e2 <ai_layer_type_name+0x3a>
 800b6c8:	48c0      	ldr	r0, [pc, #768]	; (800b9cc <ai_layer_type_name+0x324>)
 800b6ca:	4770      	bx	lr
 800b6cc:	f240 133f 	movw	r3, #319	; 0x13f
 800b6d0:	4298      	cmp	r0, r3
 800b6d2:	d006      	beq.n	800b6e2 <ai_layer_type_name+0x3a>
 800b6d4:	f5b0 7f9f 	cmp.w	r0, #318	; 0x13e
 800b6d8:	d9f6      	bls.n	800b6c8 <ai_layer_type_name+0x20>
 800b6da:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d8f2      	bhi.n	800b6c8 <ai_layer_type_name+0x20>
 800b6e2:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800b6e6:	2883      	cmp	r0, #131	; 0x83
 800b6e8:	d8ee      	bhi.n	800b6c8 <ai_layer_type_name+0x20>
 800b6ea:	a301      	add	r3, pc, #4	; (adr r3, 800b6f0 <ai_layer_type_name+0x48>)
 800b6ec:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800b6f0:	0800b9c9 	.word	0x0800b9c9
 800b6f4:	0800b9c5 	.word	0x0800b9c5
 800b6f8:	0800b9c1 	.word	0x0800b9c1
 800b6fc:	0800b9bd 	.word	0x0800b9bd
 800b700:	0800b9b9 	.word	0x0800b9b9
 800b704:	0800b6c9 	.word	0x0800b6c9
 800b708:	0800b9b5 	.word	0x0800b9b5
 800b70c:	0800b9b1 	.word	0x0800b9b1
 800b710:	0800b9ad 	.word	0x0800b9ad
 800b714:	0800b9a9 	.word	0x0800b9a9
 800b718:	0800b9a5 	.word	0x0800b9a5
 800b71c:	0800b9a1 	.word	0x0800b9a1
 800b720:	0800b99d 	.word	0x0800b99d
 800b724:	0800b999 	.word	0x0800b999
 800b728:	0800b995 	.word	0x0800b995
 800b72c:	0800b991 	.word	0x0800b991
 800b730:	0800b98d 	.word	0x0800b98d
 800b734:	0800b989 	.word	0x0800b989
 800b738:	0800b985 	.word	0x0800b985
 800b73c:	0800b981 	.word	0x0800b981
 800b740:	0800b97d 	.word	0x0800b97d
 800b744:	0800b979 	.word	0x0800b979
 800b748:	0800b975 	.word	0x0800b975
 800b74c:	0800b971 	.word	0x0800b971
 800b750:	0800b96d 	.word	0x0800b96d
 800b754:	0800b969 	.word	0x0800b969
 800b758:	0800b965 	.word	0x0800b965
 800b75c:	0800b961 	.word	0x0800b961
 800b760:	0800b95d 	.word	0x0800b95d
 800b764:	0800b959 	.word	0x0800b959
 800b768:	0800b955 	.word	0x0800b955
 800b76c:	0800b951 	.word	0x0800b951
 800b770:	0800b94d 	.word	0x0800b94d
 800b774:	0800b949 	.word	0x0800b949
 800b778:	0800b945 	.word	0x0800b945
 800b77c:	0800b941 	.word	0x0800b941
 800b780:	0800b93d 	.word	0x0800b93d
 800b784:	0800b939 	.word	0x0800b939
 800b788:	0800b935 	.word	0x0800b935
 800b78c:	0800b931 	.word	0x0800b931
 800b790:	0800b92d 	.word	0x0800b92d
 800b794:	0800b929 	.word	0x0800b929
 800b798:	0800b925 	.word	0x0800b925
 800b79c:	0800b921 	.word	0x0800b921
 800b7a0:	0800b91d 	.word	0x0800b91d
 800b7a4:	0800b6c9 	.word	0x0800b6c9
 800b7a8:	0800b6c9 	.word	0x0800b6c9
 800b7ac:	0800b6c9 	.word	0x0800b6c9
 800b7b0:	0800b6c9 	.word	0x0800b6c9
 800b7b4:	0800b6c9 	.word	0x0800b6c9
 800b7b8:	0800b919 	.word	0x0800b919
 800b7bc:	0800b915 	.word	0x0800b915
 800b7c0:	0800b6c9 	.word	0x0800b6c9
 800b7c4:	0800b6c9 	.word	0x0800b6c9
 800b7c8:	0800b6c9 	.word	0x0800b6c9
 800b7cc:	0800b6c9 	.word	0x0800b6c9
 800b7d0:	0800b6c9 	.word	0x0800b6c9
 800b7d4:	0800b6c9 	.word	0x0800b6c9
 800b7d8:	0800b6c9 	.word	0x0800b6c9
 800b7dc:	0800b6c9 	.word	0x0800b6c9
 800b7e0:	0800b6c9 	.word	0x0800b6c9
 800b7e4:	0800b6c9 	.word	0x0800b6c9
 800b7e8:	0800b6c9 	.word	0x0800b6c9
 800b7ec:	0800b911 	.word	0x0800b911
 800b7f0:	0800b6c9 	.word	0x0800b6c9
 800b7f4:	0800b6c9 	.word	0x0800b6c9
 800b7f8:	0800b6c9 	.word	0x0800b6c9
 800b7fc:	0800b6c9 	.word	0x0800b6c9
 800b800:	0800b6c9 	.word	0x0800b6c9
 800b804:	0800b6c9 	.word	0x0800b6c9
 800b808:	0800b6c9 	.word	0x0800b6c9
 800b80c:	0800b6c9 	.word	0x0800b6c9
 800b810:	0800b6c9 	.word	0x0800b6c9
 800b814:	0800b6c9 	.word	0x0800b6c9
 800b818:	0800b6c9 	.word	0x0800b6c9
 800b81c:	0800b6c9 	.word	0x0800b6c9
 800b820:	0800b6c9 	.word	0x0800b6c9
 800b824:	0800b6c9 	.word	0x0800b6c9
 800b828:	0800b6c9 	.word	0x0800b6c9
 800b82c:	0800b6c9 	.word	0x0800b6c9
 800b830:	0800b6c9 	.word	0x0800b6c9
 800b834:	0800b6c9 	.word	0x0800b6c9
 800b838:	0800b6c9 	.word	0x0800b6c9
 800b83c:	0800b6c9 	.word	0x0800b6c9
 800b840:	0800b6c9 	.word	0x0800b6c9
 800b844:	0800b6c9 	.word	0x0800b6c9
 800b848:	0800b6c9 	.word	0x0800b6c9
 800b84c:	0800b6c9 	.word	0x0800b6c9
 800b850:	0800b6c9 	.word	0x0800b6c9
 800b854:	0800b6c9 	.word	0x0800b6c9
 800b858:	0800b6c9 	.word	0x0800b6c9
 800b85c:	0800b6c9 	.word	0x0800b6c9
 800b860:	0800b6c9 	.word	0x0800b6c9
 800b864:	0800b6c9 	.word	0x0800b6c9
 800b868:	0800b6c9 	.word	0x0800b6c9
 800b86c:	0800b6c9 	.word	0x0800b6c9
 800b870:	0800b6c9 	.word	0x0800b6c9
 800b874:	0800b6c9 	.word	0x0800b6c9
 800b878:	0800b6c9 	.word	0x0800b6c9
 800b87c:	0800b6c9 	.word	0x0800b6c9
 800b880:	0800b6c9 	.word	0x0800b6c9
 800b884:	0800b6c9 	.word	0x0800b6c9
 800b888:	0800b6c9 	.word	0x0800b6c9
 800b88c:	0800b6c9 	.word	0x0800b6c9
 800b890:	0800b6c9 	.word	0x0800b6c9
 800b894:	0800b6c9 	.word	0x0800b6c9
 800b898:	0800b6c9 	.word	0x0800b6c9
 800b89c:	0800b6c9 	.word	0x0800b6c9
 800b8a0:	0800b6c9 	.word	0x0800b6c9
 800b8a4:	0800b6c9 	.word	0x0800b6c9
 800b8a8:	0800b6c9 	.word	0x0800b6c9
 800b8ac:	0800b6c9 	.word	0x0800b6c9
 800b8b0:	0800b6c9 	.word	0x0800b6c9
 800b8b4:	0800b6c9 	.word	0x0800b6c9
 800b8b8:	0800b6c9 	.word	0x0800b6c9
 800b8bc:	0800b6c9 	.word	0x0800b6c9
 800b8c0:	0800b6c9 	.word	0x0800b6c9
 800b8c4:	0800b6c9 	.word	0x0800b6c9
 800b8c8:	0800b6c9 	.word	0x0800b6c9
 800b8cc:	0800b6c9 	.word	0x0800b6c9
 800b8d0:	0800b6c9 	.word	0x0800b6c9
 800b8d4:	0800b6c9 	.word	0x0800b6c9
 800b8d8:	0800b6c9 	.word	0x0800b6c9
 800b8dc:	0800b6c9 	.word	0x0800b6c9
 800b8e0:	0800b6c9 	.word	0x0800b6c9
 800b8e4:	0800b6c9 	.word	0x0800b6c9
 800b8e8:	0800b6c9 	.word	0x0800b6c9
 800b8ec:	0800b6c9 	.word	0x0800b6c9
 800b8f0:	0800b90d 	.word	0x0800b90d
 800b8f4:	0800b909 	.word	0x0800b909
 800b8f8:	0800b905 	.word	0x0800b905
 800b8fc:	0800b901 	.word	0x0800b901
 800b900:	4833      	ldr	r0, [pc, #204]	; (800b9d0 <ai_layer_type_name+0x328>)
 800b902:	4770      	bx	lr
 800b904:	4833      	ldr	r0, [pc, #204]	; (800b9d4 <ai_layer_type_name+0x32c>)
 800b906:	4770      	bx	lr
 800b908:	4833      	ldr	r0, [pc, #204]	; (800b9d8 <ai_layer_type_name+0x330>)
 800b90a:	4770      	bx	lr
 800b90c:	4833      	ldr	r0, [pc, #204]	; (800b9dc <ai_layer_type_name+0x334>)
 800b90e:	4770      	bx	lr
 800b910:	4833      	ldr	r0, [pc, #204]	; (800b9e0 <ai_layer_type_name+0x338>)
 800b912:	4770      	bx	lr
 800b914:	4833      	ldr	r0, [pc, #204]	; (800b9e4 <ai_layer_type_name+0x33c>)
 800b916:	4770      	bx	lr
 800b918:	4833      	ldr	r0, [pc, #204]	; (800b9e8 <ai_layer_type_name+0x340>)
 800b91a:	4770      	bx	lr
 800b91c:	4833      	ldr	r0, [pc, #204]	; (800b9ec <ai_layer_type_name+0x344>)
 800b91e:	4770      	bx	lr
 800b920:	4833      	ldr	r0, [pc, #204]	; (800b9f0 <ai_layer_type_name+0x348>)
 800b922:	4770      	bx	lr
 800b924:	4833      	ldr	r0, [pc, #204]	; (800b9f4 <ai_layer_type_name+0x34c>)
 800b926:	4770      	bx	lr
 800b928:	4833      	ldr	r0, [pc, #204]	; (800b9f8 <ai_layer_type_name+0x350>)
 800b92a:	4770      	bx	lr
 800b92c:	4833      	ldr	r0, [pc, #204]	; (800b9fc <ai_layer_type_name+0x354>)
 800b92e:	4770      	bx	lr
 800b930:	4833      	ldr	r0, [pc, #204]	; (800ba00 <ai_layer_type_name+0x358>)
 800b932:	4770      	bx	lr
 800b934:	4833      	ldr	r0, [pc, #204]	; (800ba04 <ai_layer_type_name+0x35c>)
 800b936:	4770      	bx	lr
 800b938:	4833      	ldr	r0, [pc, #204]	; (800ba08 <ai_layer_type_name+0x360>)
 800b93a:	4770      	bx	lr
 800b93c:	4833      	ldr	r0, [pc, #204]	; (800ba0c <ai_layer_type_name+0x364>)
 800b93e:	4770      	bx	lr
 800b940:	4833      	ldr	r0, [pc, #204]	; (800ba10 <ai_layer_type_name+0x368>)
 800b942:	4770      	bx	lr
 800b944:	4833      	ldr	r0, [pc, #204]	; (800ba14 <ai_layer_type_name+0x36c>)
 800b946:	4770      	bx	lr
 800b948:	4833      	ldr	r0, [pc, #204]	; (800ba18 <ai_layer_type_name+0x370>)
 800b94a:	4770      	bx	lr
 800b94c:	4833      	ldr	r0, [pc, #204]	; (800ba1c <ai_layer_type_name+0x374>)
 800b94e:	4770      	bx	lr
 800b950:	4833      	ldr	r0, [pc, #204]	; (800ba20 <ai_layer_type_name+0x378>)
 800b952:	4770      	bx	lr
 800b954:	4833      	ldr	r0, [pc, #204]	; (800ba24 <ai_layer_type_name+0x37c>)
 800b956:	4770      	bx	lr
 800b958:	4833      	ldr	r0, [pc, #204]	; (800ba28 <ai_layer_type_name+0x380>)
 800b95a:	4770      	bx	lr
 800b95c:	4833      	ldr	r0, [pc, #204]	; (800ba2c <ai_layer_type_name+0x384>)
 800b95e:	4770      	bx	lr
 800b960:	4833      	ldr	r0, [pc, #204]	; (800ba30 <ai_layer_type_name+0x388>)
 800b962:	4770      	bx	lr
 800b964:	4833      	ldr	r0, [pc, #204]	; (800ba34 <ai_layer_type_name+0x38c>)
 800b966:	4770      	bx	lr
 800b968:	4833      	ldr	r0, [pc, #204]	; (800ba38 <ai_layer_type_name+0x390>)
 800b96a:	4770      	bx	lr
 800b96c:	4833      	ldr	r0, [pc, #204]	; (800ba3c <ai_layer_type_name+0x394>)
 800b96e:	4770      	bx	lr
 800b970:	4833      	ldr	r0, [pc, #204]	; (800ba40 <ai_layer_type_name+0x398>)
 800b972:	4770      	bx	lr
 800b974:	4833      	ldr	r0, [pc, #204]	; (800ba44 <ai_layer_type_name+0x39c>)
 800b976:	4770      	bx	lr
 800b978:	4833      	ldr	r0, [pc, #204]	; (800ba48 <ai_layer_type_name+0x3a0>)
 800b97a:	4770      	bx	lr
 800b97c:	4833      	ldr	r0, [pc, #204]	; (800ba4c <ai_layer_type_name+0x3a4>)
 800b97e:	4770      	bx	lr
 800b980:	4833      	ldr	r0, [pc, #204]	; (800ba50 <ai_layer_type_name+0x3a8>)
 800b982:	4770      	bx	lr
 800b984:	4833      	ldr	r0, [pc, #204]	; (800ba54 <ai_layer_type_name+0x3ac>)
 800b986:	4770      	bx	lr
 800b988:	4833      	ldr	r0, [pc, #204]	; (800ba58 <ai_layer_type_name+0x3b0>)
 800b98a:	4770      	bx	lr
 800b98c:	4833      	ldr	r0, [pc, #204]	; (800ba5c <ai_layer_type_name+0x3b4>)
 800b98e:	4770      	bx	lr
 800b990:	4833      	ldr	r0, [pc, #204]	; (800ba60 <ai_layer_type_name+0x3b8>)
 800b992:	4770      	bx	lr
 800b994:	4833      	ldr	r0, [pc, #204]	; (800ba64 <ai_layer_type_name+0x3bc>)
 800b996:	4770      	bx	lr
 800b998:	4833      	ldr	r0, [pc, #204]	; (800ba68 <ai_layer_type_name+0x3c0>)
 800b99a:	4770      	bx	lr
 800b99c:	4833      	ldr	r0, [pc, #204]	; (800ba6c <ai_layer_type_name+0x3c4>)
 800b99e:	4770      	bx	lr
 800b9a0:	4833      	ldr	r0, [pc, #204]	; (800ba70 <ai_layer_type_name+0x3c8>)
 800b9a2:	4770      	bx	lr
 800b9a4:	4833      	ldr	r0, [pc, #204]	; (800ba74 <ai_layer_type_name+0x3cc>)
 800b9a6:	4770      	bx	lr
 800b9a8:	4833      	ldr	r0, [pc, #204]	; (800ba78 <ai_layer_type_name+0x3d0>)
 800b9aa:	4770      	bx	lr
 800b9ac:	4833      	ldr	r0, [pc, #204]	; (800ba7c <ai_layer_type_name+0x3d4>)
 800b9ae:	4770      	bx	lr
 800b9b0:	4833      	ldr	r0, [pc, #204]	; (800ba80 <ai_layer_type_name+0x3d8>)
 800b9b2:	4770      	bx	lr
 800b9b4:	4833      	ldr	r0, [pc, #204]	; (800ba84 <ai_layer_type_name+0x3dc>)
 800b9b6:	4770      	bx	lr
 800b9b8:	4833      	ldr	r0, [pc, #204]	; (800ba88 <ai_layer_type_name+0x3e0>)
 800b9ba:	4770      	bx	lr
 800b9bc:	4833      	ldr	r0, [pc, #204]	; (800ba8c <ai_layer_type_name+0x3e4>)
 800b9be:	4770      	bx	lr
 800b9c0:	4833      	ldr	r0, [pc, #204]	; (800ba90 <ai_layer_type_name+0x3e8>)
 800b9c2:	4770      	bx	lr
 800b9c4:	4833      	ldr	r0, [pc, #204]	; (800ba94 <ai_layer_type_name+0x3ec>)
 800b9c6:	4770      	bx	lr
 800b9c8:	4833      	ldr	r0, [pc, #204]	; (800ba98 <ai_layer_type_name+0x3f0>)
 800b9ca:	4770      	bx	lr
 800b9cc:	0804e1dc 	.word	0x0804e1dc
 800b9d0:	0804e398 	.word	0x0804e398
 800b9d4:	0804e390 	.word	0x0804e390
 800b9d8:	0804e388 	.word	0x0804e388
 800b9dc:	0804e37c 	.word	0x0804e37c
 800b9e0:	0804e344 	.word	0x0804e344
 800b9e4:	0804e330 	.word	0x0804e330
 800b9e8:	0804e374 	.word	0x0804e374
 800b9ec:	0804e368 	.word	0x0804e368
 800b9f0:	0804e314 	.word	0x0804e314
 800b9f4:	0804e300 	.word	0x0804e300
 800b9f8:	0804e35c 	.word	0x0804e35c
 800b9fc:	0804e350 	.word	0x0804e350
 800ba00:	0804e2f8 	.word	0x0804e2f8
 800ba04:	0804e2f0 	.word	0x0804e2f0
 800ba08:	0804e2ec 	.word	0x0804e2ec
 800ba0c:	0804e2d4 	.word	0x0804e2d4
 800ba10:	0804e2cc 	.word	0x0804e2cc
 800ba14:	0804e2c4 	.word	0x0804e2c4
 800ba18:	0804e2bc 	.word	0x0804e2bc
 800ba1c:	0804e2b4 	.word	0x0804e2b4
 800ba20:	0804e2ac 	.word	0x0804e2ac
 800ba24:	0804e2a4 	.word	0x0804e2a4
 800ba28:	0804e29c 	.word	0x0804e29c
 800ba2c:	0804e294 	.word	0x0804e294
 800ba30:	0804e28c 	.word	0x0804e28c
 800ba34:	0804e288 	.word	0x0804e288
 800ba38:	0804e280 	.word	0x0804e280
 800ba3c:	0804e278 	.word	0x0804e278
 800ba40:	0804e270 	.word	0x0804e270
 800ba44:	0804e26c 	.word	0x0804e26c
 800ba48:	0804e254 	.word	0x0804e254
 800ba4c:	0804e244 	.word	0x0804e244
 800ba50:	0804e23c 	.word	0x0804e23c
 800ba54:	0804e230 	.word	0x0804e230
 800ba58:	0804e228 	.word	0x0804e228
 800ba5c:	0804e220 	.word	0x0804e220
 800ba60:	0804e20c 	.word	0x0804e20c
 800ba64:	0804e200 	.word	0x0804e200
 800ba68:	0804e1f8 	.word	0x0804e1f8
 800ba6c:	0804e1f4 	.word	0x0804e1f4
 800ba70:	0804e1ec 	.word	0x0804e1ec
 800ba74:	0804e1e0 	.word	0x0804e1e0
 800ba78:	0804e1cc 	.word	0x0804e1cc
 800ba7c:	0804e1c4 	.word	0x0804e1c4
 800ba80:	0804e1c0 	.word	0x0804e1c0
 800ba84:	0804e1bc 	.word	0x0804e1bc
 800ba88:	0804e1b4 	.word	0x0804e1b4
 800ba8c:	0804e1ac 	.word	0x0804e1ac
 800ba90:	0804e1a8 	.word	0x0804e1a8
 800ba94:	0804e1a4 	.word	0x0804e1a4
 800ba98:	0804e19c 	.word	0x0804e19c

0800ba9c <ai_layers_init_all>:
 800ba9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ba9e:	b16a      	cbz	r2, 800babc <ai_layers_init_all+0x20>
 800baa0:	6913      	ldr	r3, [r2, #16]
 800baa2:	60d0      	str	r0, [r2, #12]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	f04f 0201 	mov.w	r2, #1
 800baaa:	d007      	beq.n	800babc <ai_layers_init_all+0x20>
 800baac:	b133      	cbz	r3, 800babc <ai_layers_init_all+0x20>
 800baae:	6919      	ldr	r1, [r3, #16]
 800bab0:	3201      	adds	r2, #1
 800bab2:	60d8      	str	r0, [r3, #12]
 800bab4:	4299      	cmp	r1, r3
 800bab6:	bf18      	it	ne
 800bab8:	2900      	cmpne	r1, #0
 800baba:	d101      	bne.n	800bac0 <ai_layers_init_all+0x24>
 800babc:	4610      	mov	r0, r2
 800babe:	4770      	bx	lr
 800bac0:	460b      	mov	r3, r1
 800bac2:	e7f4      	b.n	800baae <ai_layers_init_all+0x12>

0800bac4 <ai_layers_post_init_all>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bac8:	b184      	cbz	r4, 800baec <ai_layers_post_init_all+0x28>
 800baca:	2500      	movs	r5, #0
 800bacc:	6863      	ldr	r3, [r4, #4]
 800bace:	4620      	mov	r0, r4
 800bad0:	07db      	lsls	r3, r3, #31
 800bad2:	d503      	bpl.n	800badc <ai_layers_post_init_all+0x18>
 800bad4:	6a23      	ldr	r3, [r4, #32]
 800bad6:	b10b      	cbz	r3, 800badc <ai_layers_post_init_all+0x18>
 800bad8:	3501      	adds	r5, #1
 800bada:	4798      	blx	r3
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	429c      	cmp	r4, r3
 800bae0:	bf18      	it	ne
 800bae2:	2b00      	cmpne	r3, #0
 800bae4:	461c      	mov	r4, r3
 800bae6:	d1f1      	bne.n	800bacc <ai_layers_post_init_all+0x8>
 800bae8:	4628      	mov	r0, r5
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	4625      	mov	r5, r4
 800baee:	e7fb      	b.n	800bae8 <ai_layers_post_init_all+0x24>

0800baf0 <ai_layers_forward_all>:
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800baf6:	4604      	mov	r4, r0
 800baf8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800bafa:	2f00      	cmp	r7, #0
 800bafc:	d02b      	beq.n	800bb56 <ai_layers_forward_all+0x66>
 800bafe:	2d00      	cmp	r5, #0
 800bb00:	d03d      	beq.n	800bb7e <ai_layers_forward_all+0x8e>
 800bb02:	2600      	movs	r6, #0
 800bb04:	6385      	str	r5, [r0, #56]	; 0x38
 800bb06:	4629      	mov	r1, r5
 800bb08:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	46b0      	mov	r8, r6
 800bb0e:	47b8      	blx	r7
 800bb10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bb14:	2002      	movs	r0, #2
 800bb16:	47b8      	blx	r7
 800bb18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800bb1a:	696b      	ldr	r3, [r5, #20]
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	4798      	blx	r3
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	2003      	movs	r0, #3
 800bb24:	429d      	cmp	r5, r3
 800bb26:	4619      	mov	r1, r3
 800bb28:	d009      	beq.n	800bb3e <ai_layers_forward_all+0x4e>
 800bb2a:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb2c:	3601      	adds	r6, #1
 800bb2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bb30:	47b8      	blx	r7
 800bb32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d1ec      	bne.n	800bb12 <ai_layers_forward_all+0x22>
 800bb38:	4630      	mov	r0, r6
 800bb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb3e:	2100      	movs	r1, #0
 800bb40:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800bb44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bb46:	3601      	adds	r6, #1
 800bb48:	47b8      	blx	r7
 800bb4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	d1e0      	bne.n	800bb12 <ai_layers_forward_all+0x22>
 800bb50:	4630      	mov	r0, r6
 800bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb56:	b195      	cbz	r5, 800bb7e <ai_layers_forward_all+0x8e>
 800bb58:	463e      	mov	r6, r7
 800bb5a:	6385      	str	r5, [r0, #56]	; 0x38
 800bb5c:	696b      	ldr	r3, [r5, #20]
 800bb5e:	4628      	mov	r0, r5
 800bb60:	4798      	blx	r3
 800bb62:	692b      	ldr	r3, [r5, #16]
 800bb64:	3601      	adds	r6, #1
 800bb66:	42ab      	cmp	r3, r5
 800bb68:	461d      	mov	r5, r3
 800bb6a:	d003      	beq.n	800bb74 <ai_layers_forward_all+0x84>
 800bb6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1f4      	bne.n	800bb5c <ai_layers_forward_all+0x6c>
 800bb72:	e7e1      	b.n	800bb38 <ai_layers_forward_all+0x48>
 800bb74:	2300      	movs	r3, #0
 800bb76:	4630      	mov	r0, r6
 800bb78:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7e:	462e      	mov	r6, r5
 800bb80:	4630      	mov	r0, r6
 800bb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb86:	bf00      	nop

0800bb88 <ai_layers_destroy_all>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bb8c:	b184      	cbz	r4, 800bbb0 <ai_layers_destroy_all+0x28>
 800bb8e:	2500      	movs	r5, #0
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	4620      	mov	r0, r4
 800bb94:	075b      	lsls	r3, r3, #29
 800bb96:	d503      	bpl.n	800bba0 <ai_layers_destroy_all+0x18>
 800bb98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb9a:	b10b      	cbz	r3, 800bba0 <ai_layers_destroy_all+0x18>
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	4798      	blx	r3
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	429c      	cmp	r4, r3
 800bba4:	bf18      	it	ne
 800bba6:	2b00      	cmpne	r3, #0
 800bba8:	461c      	mov	r4, r3
 800bbaa:	d1f1      	bne.n	800bb90 <ai_layers_destroy_all+0x8>
 800bbac:	4628      	mov	r0, r5
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	4625      	mov	r5, r4
 800bbb2:	e7fb      	b.n	800bbac <ai_layers_destroy_all+0x24>

0800bbb4 <pool_func_ap_array_integer_INT8>:
 800bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	b093      	sub	sp, #76	; 0x4c
 800bbba:	6985      	ldr	r5, [r0, #24]
 800bbbc:	460f      	mov	r7, r1
 800bbbe:	469c      	mov	ip, r3
 800bbc0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800bbc2:	6803      	ldr	r3, [r0, #0]
 800bbc4:	69a1      	ldr	r1, [r4, #24]
 800bbc6:	68a8      	ldr	r0, [r5, #8]
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 800bbce:	6889      	ldr	r1, [r1, #8]
 800bbd0:	940d      	str	r4, [sp, #52]	; 0x34
 800bbd2:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 800bbd6:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 800bbda:	940e      	str	r4, [sp, #56]	; 0x38
 800bbdc:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800bbe0:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800bbe4:	940f      	str	r4, [sp, #60]	; 0x3c
 800bbe6:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 800bbea:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800bbee:	9410      	str	r4, [sp, #64]	; 0x40
 800bbf0:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d03c      	beq.n	800bc72 <pool_func_ap_array_integer_INT8+0xbe>
 800bbf8:	685e      	ldr	r6, [r3, #4]
 800bbfa:	46b3      	mov	fp, r6
 800bbfc:	2e00      	cmp	r6, #0
 800bbfe:	d031      	beq.n	800bc64 <pool_func_ap_array_integer_INT8+0xb0>
 800bc00:	885c      	ldrh	r4, [r3, #2]
 800bc02:	9411      	str	r4, [sp, #68]	; 0x44
 800bc04:	2c00      	cmp	r4, #0
 800bc06:	d051      	beq.n	800bcac <pool_func_ap_array_integer_INT8+0xf8>
 800bc08:	6834      	ldr	r4, [r6, #0]
 800bc0a:	ed94 0a00 	vldr	s0, [r4]
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	d069      	beq.n	800bce6 <pool_func_ap_array_integer_INT8+0x132>
 800bc12:	686c      	ldr	r4, [r5, #4]
 800bc14:	2c00      	cmp	r4, #0
 800bc16:	d054      	beq.n	800bcc2 <pool_func_ap_array_integer_INT8+0x10e>
 800bc18:	886e      	ldrh	r6, [r5, #2]
 800bc1a:	9611      	str	r6, [sp, #68]	; 0x44
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	d033      	beq.n	800bc88 <pool_func_ap_array_integer_INT8+0xd4>
 800bc20:	6826      	ldr	r6, [r4, #0]
 800bc22:	edd6 0a00 	vldr	s1, [r6]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d155      	bne.n	800bcd6 <pool_func_ap_array_integer_INT8+0x122>
 800bc2a:	6864      	ldr	r4, [r4, #4]
 800bc2c:	f994 4000 	ldrsb.w	r4, [r4]
 800bc30:	f8cd 9020 	str.w	r9, [sp, #32]
 800bc34:	f8cd 801c 	str.w	r8, [sp, #28]
 800bc38:	f8cd e018 	str.w	lr, [sp, #24]
 800bc3c:	f8cd c000 	str.w	ip, [sp]
 800bc40:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 800bc44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bc46:	4613      	mov	r3, r2
 800bc48:	463a      	mov	r2, r7
 800bc4a:	9405      	str	r4, [sp, #20]
 800bc4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bc4e:	9404      	str	r4, [sp, #16]
 800bc50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bc52:	9403      	str	r4, [sp, #12]
 800bc54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc56:	e9cd a401 	strd	sl, r4, [sp, #4]
 800bc5a:	f004 fec9 	bl	80109f0 <st_int8_avepool>
 800bc5e:	b013      	add	sp, #76	; 0x4c
 800bc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	d02f      	beq.n	800bcc8 <pool_func_ap_array_integer_INT8+0x114>
 800bc68:	686c      	ldr	r4, [r5, #4]
 800bc6a:	b93c      	cbnz	r4, 800bc7c <pool_func_ap_array_integer_INT8+0xc8>
 800bc6c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bc70:	e00d      	b.n	800bc8e <pool_func_ap_array_integer_INT8+0xda>
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	d028      	beq.n	800bcc8 <pool_func_ap_array_integer_INT8+0x114>
 800bc76:	686c      	ldr	r4, [r5, #4]
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	d03f      	beq.n	800bcfc <pool_func_ap_array_integer_INT8+0x148>
 800bc7c:	886e      	ldrh	r6, [r5, #2]
 800bc7e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bc82:	9611      	str	r6, [sp, #68]	; 0x44
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	d1cb      	bne.n	800bc20 <pool_func_ap_array_integer_INT8+0x6c>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d03e      	beq.n	800bd0a <pool_func_ap_array_integer_INT8+0x156>
 800bc8c:	685e      	ldr	r6, [r3, #4]
 800bc8e:	46b3      	mov	fp, r6
 800bc90:	2e00      	cmp	r6, #0
 800bc92:	d02f      	beq.n	800bcf4 <pool_func_ap_array_integer_INT8+0x140>
 800bc94:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bc98:	885b      	ldrh	r3, [r3, #2]
 800bc9a:	b953      	cbnz	r3, 800bcb2 <pool_func_ap_array_integer_INT8+0xfe>
 800bc9c:	2c00      	cmp	r4, #0
 800bc9e:	d0c7      	beq.n	800bc30 <pool_func_ap_array_integer_INT8+0x7c>
 800bca0:	886d      	ldrh	r5, [r5, #2]
 800bca2:	9511      	str	r5, [sp, #68]	; 0x44
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	d1c0      	bne.n	800bc2a <pool_func_ap_array_integer_INT8+0x76>
 800bca8:	2400      	movs	r4, #0
 800bcaa:	e7c1      	b.n	800bc30 <pool_func_ap_array_integer_INT8+0x7c>
 800bcac:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bcb0:	e7ad      	b.n	800bc0e <pool_func_ap_array_integer_INT8+0x5a>
 800bcb2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bcb6:	f993 3000 	ldrsb.w	r3, [r3]
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	d0f4      	beq.n	800bca8 <pool_func_ap_array_integer_INT8+0xf4>
 800bcbe:	686c      	ldr	r4, [r5, #4]
 800bcc0:	e7ec      	b.n	800bc9c <pool_func_ap_array_integer_INT8+0xe8>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e3      	bne.n	800bc8e <pool_func_ap_array_integer_INT8+0xda>
 800bcc6:	e01b      	b.n	800bd00 <pool_func_ap_array_integer_INT8+0x14c>
 800bcc8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bccc:	462b      	mov	r3, r5
 800bcce:	462c      	mov	r4, r5
 800bcd0:	eef0 0a40 	vmov.f32	s1, s0
 800bcd4:	e7ac      	b.n	800bc30 <pool_func_ap_array_integer_INT8+0x7c>
 800bcd6:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800bcda:	f1bb 0f00 	cmp.w	fp, #0
 800bcde:	d1db      	bne.n	800bc98 <pool_func_ap_array_integer_INT8+0xe4>
 800bce0:	465b      	mov	r3, fp
 800bce2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bce4:	e7de      	b.n	800bca4 <pool_func_ap_array_integer_INT8+0xf0>
 800bce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bce8:	eddf 0a09 	vldr	s1, [pc, #36]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d1e0      	bne.n	800bcb2 <pool_func_ap_array_integer_INT8+0xfe>
 800bcf0:	461c      	mov	r4, r3
 800bcf2:	e79d      	b.n	800bc30 <pool_func_ap_array_integer_INT8+0x7c>
 800bcf4:	4633      	mov	r3, r6
 800bcf6:	eddf 0a06 	vldr	s1, [pc, #24]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bcfa:	e7cf      	b.n	800bc9c <pool_func_ap_array_integer_INT8+0xe8>
 800bcfc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bd00:	2300      	movs	r3, #0
 800bd02:	eddf 0a03 	vldr	s1, [pc, #12]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bd06:	461c      	mov	r4, r3
 800bd08:	e792      	b.n	800bc30 <pool_func_ap_array_integer_INT8+0x7c>
 800bd0a:	eddf 0a01 	vldr	s1, [pc, #4]	; 800bd10 <pool_func_ap_array_integer_INT8+0x15c>
 800bd0e:	e7cb      	b.n	800bca8 <pool_func_ap_array_integer_INT8+0xf4>
 800bd10:	00000000 	.word	0x00000000

0800bd14 <align_factor>:
 800bd14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd18:	b508      	push	{r3, lr}
 800bd1a:	eeb4 0a67 	vcmp.f32	s0, s15
 800bd1e:	2300      	movs	r3, #0
 800bd20:	8003      	strh	r3, [r0, #0]
 800bd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd26:	d52d      	bpl.n	800bd84 <align_factor+0x70>
 800bd28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	dd28      	ble.n	800bd84 <align_factor+0x70>
 800bd32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3e:	d511      	bpl.n	800bd64 <align_factor+0x50>
 800bd40:	2201      	movs	r2, #1
 800bd42:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd46:	2302      	movs	r3, #2
 800bd48:	8002      	strh	r2, [r0, #0]
 800bd4a:	e005      	b.n	800bd58 <align_factor+0x44>
 800bd4c:	8003      	strh	r3, [r0, #0]
 800bd4e:	b293      	uxth	r3, r2
 800bd50:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd54:	2b21      	cmp	r3, #33	; 0x21
 800bd56:	d035      	beq.n	800bdc4 <align_factor+0xb0>
 800bd58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd62:	d4f3      	bmi.n	800bd4c <align_factor+0x38>
 800bd64:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bdd8 <align_factor+0xc4>
 800bd68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bd6c:	ee17 0a90 	vmov	r0, s15
 800bd70:	f7f4 fc34 	bl	80005dc <__aeabi_f2lz>
 800bd74:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800bd78:	d003      	beq.n	800bd82 <align_factor+0x6e>
 800bd7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800bd7e:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800bd82:	bd08      	pop	{r3, pc}
 800bd84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	dde8      	ble.n	800bd64 <align_factor+0x50>
 800bd92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bd96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bd9e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800bda2:	8002      	strh	r2, [r0, #0]
 800bda4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bda8:	e005      	b.n	800bdb6 <align_factor+0xa2>
 800bdaa:	8003      	strh	r3, [r0, #0]
 800bdac:	b293      	uxth	r3, r2
 800bdae:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bdb2:	428b      	cmp	r3, r1
 800bdb4:	d00a      	beq.n	800bdcc <align_factor+0xb8>
 800bdb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bdba:	1e5a      	subs	r2, r3, #1
 800bdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc0:	dcf3      	bgt.n	800bdaa <align_factor+0x96>
 800bdc2:	e7cf      	b.n	800bd64 <align_factor+0x50>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	8003      	strh	r3, [r0, #0]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	bd08      	pop	{r3, pc}
 800bdcc:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800bdd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdd4:	8003      	strh	r3, [r0, #0]
 800bdd6:	e7c5      	b.n	800bd64 <align_factor+0x50>
 800bdd8:	4f000000 	.word	0x4f000000

0800bddc <align_factor_ch>:
 800bddc:	2900      	cmp	r1, #0
 800bdde:	d06f      	beq.n	800bec0 <align_factor_ch+0xe4>
 800bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	ed2d 8b04 	vpush	{d8-d9}
 800bde8:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800bdec:	4604      	mov	r4, r0
 800bdee:	4691      	mov	r9, r2
 800bdf0:	4698      	mov	r8, r3
 800bdf2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800bdf6:	eddf 9a33 	vldr	s19, [pc, #204]	; 800bec4 <align_factor_ch+0xe8>
 800bdfa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800bdfe:	2700      	movs	r7, #0
 800be00:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800be04:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800be08:	ecf4 7a01 	vldmia	r4!, {s15}
 800be0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 800be10:	eef4 7a68 	vcmp.f32	s15, s17
 800be14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be18:	d530      	bpl.n	800be7c <align_factor_ch+0xa0>
 800be1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be22:	dd2b      	ble.n	800be7c <align_factor_ch+0xa0>
 800be24:	eef4 7ac8 	vcmpe.f32	s15, s16
 800be28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2c:	d546      	bpl.n	800bebc <align_factor_ch+0xe0>
 800be2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800be32:	2301      	movs	r3, #1
 800be34:	e004      	b.n	800be40 <align_factor_ch+0x64>
 800be36:	2a20      	cmp	r2, #32
 800be38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800be3c:	b213      	sxth	r3, r2
 800be3e:	d039      	beq.n	800beb4 <align_factor_ch+0xd8>
 800be40:	eef4 7ac8 	vcmpe.f32	s15, s16
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	b292      	uxth	r2, r2
 800be48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4c:	d4f3      	bmi.n	800be36 <align_factor_ch+0x5a>
 800be4e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800be52:	f8a8 3000 	strh.w	r3, [r8]
 800be56:	ee17 0a90 	vmov	r0, s15
 800be5a:	f7f4 fbbf 	bl	80005dc <__aeabi_f2lz>
 800be5e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800be62:	bf18      	it	ne
 800be64:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800be68:	42a5      	cmp	r5, r4
 800be6a:	f849 0b04 	str.w	r0, [r9], #4
 800be6e:	f108 0802 	add.w	r8, r8, #2
 800be72:	d1c9      	bne.n	800be08 <align_factor_ch+0x2c>
 800be74:	ecbd 8b04 	vpop	{d8-d9}
 800be78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be84:	dd1a      	ble.n	800bebc <align_factor_ch+0xe0>
 800be86:	ee67 7a88 	vmul.f32	s15, s15, s16
 800be8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be8e:	e005      	b.n	800be9c <align_factor_ch+0xc0>
 800be90:	b213      	sxth	r3, r2
 800be92:	ee67 7a88 	vmul.f32	s15, s15, s16
 800be96:	f113 0f1f 	cmn.w	r3, #31
 800be9a:	d006      	beq.n	800beaa <align_factor_ch+0xce>
 800be9c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bea0:	1e5a      	subs	r2, r3, #1
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	dcf3      	bgt.n	800be90 <align_factor_ch+0xb4>
 800bea8:	e7d1      	b.n	800be4e <align_factor_ch+0x72>
 800beaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800beae:	f06f 031d 	mvn.w	r3, #29
 800beb2:	e7cc      	b.n	800be4e <align_factor_ch+0x72>
 800beb4:	f8a8 7000 	strh.w	r7, [r8]
 800beb8:	2000      	movs	r0, #0
 800beba:	e7d5      	b.n	800be68 <align_factor_ch+0x8c>
 800bebc:	2300      	movs	r3, #0
 800bebe:	e7c6      	b.n	800be4e <align_factor_ch+0x72>
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	4f000000 	.word	0x4f000000

0800bec8 <st_sssa8_ch_conv_dw_Wadapt>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	b089      	sub	sp, #36	; 0x24
 800bece:	4606      	mov	r6, r0
 800bed0:	ea5f 0991 	movs.w	r9, r1, lsr #2
 800bed4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800bed6:	9005      	str	r0, [sp, #20]
 800bed8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	9303      	str	r3, [sp, #12]
 800bee0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800bee4:	f000 8081 	beq.w	800bfea <st_sssa8_ch_conv_dw_Wadapt+0x122>
 800bee8:	fb03 fa02 	mul.w	sl, r3, r2
 800beec:	461d      	mov	r5, r3
 800beee:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800bef2:	1d34      	adds	r4, r6, #4
 800bef4:	fb12 f505 	smulbb	r5, r2, r5
 800bef8:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
 800befc:	b29b      	uxth	r3, r3
 800befe:	f8cd 9010 	str.w	r9, [sp, #16]
 800bf02:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800bf06:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800bf0a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bf0e:	f005 0301 	and.w	r3, r5, #1
 800bf12:	46b0      	mov	r8, r6
 800bf14:	f8df c128 	ldr.w	ip, [pc, #296]	; 800c040 <st_sssa8_ch_conv_dw_Wadapt+0x178>
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	b293      	uxth	r3, r2
 800bf1c:	46a1      	mov	r9, r4
 800bf1e:	fb03 e30e 	mla	r3, r3, lr, lr
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	9007      	str	r0, [sp, #28]
 800bf26:	4644      	mov	r4, r8
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	d030      	beq.n	800bf90 <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 800bf2e:	4650      	mov	r0, sl
 800bf30:	468b      	mov	fp, r1
 800bf32:	9907      	ldr	r1, [sp, #28]
 800bf34:	3801      	subs	r0, #1
 800bf36:	6822      	ldr	r2, [r4, #0]
 800bf38:	1d0d      	adds	r5, r1, #4
 800bf3a:	f854 300b 	ldr.w	r3, [r4, fp]
 800bf3e:	b296      	uxth	r6, r2
 800bf40:	4474      	add	r4, lr
 800bf42:	9507      	str	r5, [sp, #28]
 800bf44:	ea03 050c 	and.w	r5, r3, ip
 800bf48:	9f07      	ldr	r7, [sp, #28]
 800bf4a:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800bf4e:	ea45 4212 	orr.w	r2, r5, r2, lsr #16
 800bf52:	1d3e      	adds	r6, r7, #4
 800bf54:	b280      	uxth	r0, r0
 800bf56:	fa2f f583 	sxtb16	r5, r3
 800bf5a:	9607      	str	r6, [sp, #28]
 800bf5c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800bf60:	9e07      	ldr	r6, [sp, #28]
 800bf62:	600d      	str	r5, [r1, #0]
 800bf64:	ea4f 2532 	mov.w	r5, r2, ror #8
 800bf68:	1d31      	adds	r1, r6, #4
 800bf6a:	fa2f f383 	sxtb16	r3, r3
 800bf6e:	9107      	str	r1, [sp, #28]
 800bf70:	9907      	ldr	r1, [sp, #28]
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	1d0b      	adds	r3, r1, #4
 800bf76:	fa2f f282 	sxtb16	r2, r2
 800bf7a:	fa2f f585 	sxtb16	r5, r5
 800bf7e:	6032      	str	r2, [r6, #0]
 800bf80:	9307      	str	r3, [sp, #28]
 800bf82:	600d      	str	r5, [r1, #0]
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d1d4      	bne.n	800bf32 <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 800bf88:	9b01      	ldr	r3, [sp, #4]
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	eb03 0408 	add.w	r4, r3, r8
 800bf90:	9b00      	ldr	r3, [sp, #0]
 800bf92:	9807      	ldr	r0, [sp, #28]
 800bf94:	b1fb      	cbz	r3, 800bfd6 <st_sssa8_ch_conv_dw_Wadapt+0x10e>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	2500      	movs	r5, #0
 800bf9a:	3008      	adds	r0, #8
 800bf9c:	ea03 020c 	and.w	r2, r3, ip
 800bfa0:	462c      	mov	r4, r5
 800bfa2:	ea0c 2603 	and.w	r6, ip, r3, lsl #8
 800bfa6:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	ea4f 4232 	mov.w	r2, r2, ror #16
 800bfb0:	4333      	orrs	r3, r6
 800bfb2:	fa2f f282 	sxtb16	r2, r2
 800bfb6:	fa2f f383 	sxtb16	r3, r3
 800bfba:	f362 050f 	bfi	r5, r2, #0, #16
 800bfbe:	f363 040f 	bfi	r4, r3, #0, #16
 800bfc2:	0c12      	lsrs	r2, r2, #16
 800bfc4:	0c1b      	lsrs	r3, r3, #16
 800bfc6:	f362 451f 	bfi	r5, r2, #16, #16
 800bfca:	f363 441f 	bfi	r4, r3, #16, #16
 800bfce:	f840 5c04 	str.w	r5, [r0, #-4]
 800bfd2:	f840 4c08 	str.w	r4, [r0, #-8]
 800bfd6:	f108 0804 	add.w	r8, r8, #4
 800bfda:	45c1      	cmp	r9, r8
 800bfdc:	d1a2      	bne.n	800bf24 <st_sssa8_ch_conv_dw_Wadapt+0x5c>
 800bfde:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bfe2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bfe6:	fa1f f989 	uxth.w	r9, r9
 800bfea:	f011 0703 	ands.w	r7, r1, #3
 800bfee:	d023      	beq.n	800c038 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800bff0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bff4:	fb13 f302 	smulbb	r3, r3, r2
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	b1eb      	cbz	r3, 800c038 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800bffc:	3b01      	subs	r3, #1
 800bffe:	444f      	add	r7, r9
 800c000:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c004:	b29b      	uxth	r3, r3
 800c006:	b2bf      	uxth	r7, r7
 800c008:	f103 0c01 	add.w	ip, r3, #1
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c012:	1c9e      	adds	r6, r3, #2
 800c014:	f109 0401 	add.w	r4, r9, #1
 800c018:	eb0e 0209 	add.w	r2, lr, r9
 800c01c:	1985      	adds	r5, r0, r6
 800c01e:	4603      	mov	r3, r0
 800c020:	fa1f f984 	uxth.w	r9, r4
 800c024:	f992 4000 	ldrsb.w	r4, [r2]
 800c028:	440a      	add	r2, r1
 800c02a:	f823 4b02 	strh.w	r4, [r3], #2
 800c02e:	42ab      	cmp	r3, r5
 800c030:	d1f8      	bne.n	800c024 <st_sssa8_ch_conv_dw_Wadapt+0x15c>
 800c032:	45b9      	cmp	r9, r7
 800c034:	4460      	add	r0, ip
 800c036:	d1ed      	bne.n	800c014 <st_sssa8_ch_conv_dw_Wadapt+0x14c>
 800c038:	b009      	add	sp, #36	; 0x24
 800c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03e:	bf00      	nop
 800c040:	ffff0000 	.word	0xffff0000

0800c044 <st_sssa8_ch_convolve_dw>:
 800c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	b0dd      	sub	sp, #372	; 0x174
 800c04a:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 800c04e:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 800c052:	901f      	str	r0, [sp, #124]	; 0x7c
 800c054:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800c058:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 800c05c:	007e      	lsls	r6, r7, #1
 800c05e:	9108      	str	r1, [sp, #32]
 800c060:	eb08 0107 	add.w	r1, r8, r7
 800c064:	fb04 f900 	mul.w	r9, r4, r0
 800c068:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 800c06c:	9219      	str	r2, [sp, #100]	; 0x64
 800c06e:	fb07 1109 	mla	r1, r7, r9, r1
 800c072:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 800c074:	9033      	str	r0, [sp, #204]	; 0xcc
 800c076:	19f0      	adds	r0, r6, r7
 800c078:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800c07c:	931e      	str	r3, [sp, #120]	; 0x78
 800c07e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800c080:	9218      	str	r2, [sp, #96]	; 0x60
 800c082:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 800c086:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c08a:	9438      	str	r4, [sp, #224]	; 0xe0
 800c08c:	9232      	str	r2, [sp, #200]	; 0xc8
 800c08e:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 800c092:	9614      	str	r6, [sp, #80]	; 0x50
 800c094:	9239      	str	r2, [sp, #228]	; 0xe4
 800c096:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 800c09a:	9326      	str	r3, [sp, #152]	; 0x98
 800c09c:	9222      	str	r2, [sp, #136]	; 0x88
 800c09e:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 800c0a2:	9237      	str	r2, [sp, #220]	; 0xdc
 800c0a4:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 800c0a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c0aa:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 800c0ae:	9225      	str	r2, [sp, #148]	; 0x94
 800c0b0:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 800c0b4:	923a      	str	r2, [sp, #232]	; 0xe8
 800c0b6:	b1af      	cbz	r7, 800c0e4 <st_sssa8_ch_convolve_dw+0xa0>
 800c0b8:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 800c0ba:	1f1c      	subs	r4, r3, #4
 800c0bc:	f04f 0c01 	mov.w	ip, #1
 800c0c0:	198e      	adds	r6, r1, r6
 800c0c2:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800c0c6:	1e5a      	subs	r2, r3, #1
 800c0c8:	fa0c f003 	lsl.w	r0, ip, r3
 800c0cc:	fa05 f303 	lsl.w	r3, r5, r3
 800c0d0:	b292      	uxth	r2, r2
 800c0d2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800c0d6:	2a14      	cmp	r2, #20
 800c0d8:	f200 8512 	bhi.w	800cb00 <st_sssa8_ch_convolve_dw+0xabc>
 800c0dc:	428e      	cmp	r6, r1
 800c0de:	f844 3f04 	str.w	r3, [r4, #4]!
 800c0e2:	d1ee      	bne.n	800c0c2 <st_sssa8_ch_convolve_dw+0x7e>
 800c0e4:	9c08      	ldr	r4, [sp, #32]
 800c0e6:	a944      	add	r1, sp, #272	; 0x110
 800c0e8:	ab40      	add	r3, sp, #256	; 0x100
 800c0ea:	aa3c      	add	r2, sp, #240	; 0xf0
 800c0ec:	943e      	str	r4, [sp, #248]	; 0xf8
 800c0ee:	a848      	add	r0, sp, #288	; 0x120
 800c0f0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c0f2:	9100      	str	r1, [sp, #0]
 800c0f4:	a952      	add	r1, sp, #328	; 0x148
 800c0f6:	943d      	str	r4, [sp, #244]	; 0xf4
 800c0f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c0fa:	9442      	str	r4, [sp, #264]	; 0x108
 800c0fc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800c0fe:	9441      	str	r4, [sp, #260]	; 0x104
 800c100:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800c102:	9446      	str	r4, [sp, #280]	; 0x118
 800c104:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800c106:	9445      	str	r4, [sp, #276]	; 0x114
 800c108:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800c10a:	9454      	str	r4, [sp, #336]	; 0x150
 800c10c:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 800c10e:	9455      	str	r4, [sp, #340]	; 0x154
 800c110:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800c112:	9456      	str	r4, [sp, #344]	; 0x158
 800c114:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 800c116:	9457      	str	r4, [sp, #348]	; 0x15c
 800c118:	f002 fa84 	bl	800e624 <ai_padding_opt_init>
 800c11c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c11e:	fbb7 f3f3 	udiv	r3, r7, r3
 800c122:	079a      	lsls	r2, r3, #30
 800c124:	931a      	str	r3, [sp, #104]	; 0x68
 800c126:	f040 84f2 	bne.w	800cb0e <st_sssa8_ch_convolve_dw+0xaca>
 800c12a:	109c      	asrs	r4, r3, #2
 800c12c:	2304      	movs	r3, #4
 800c12e:	931a      	str	r3, [sp, #104]	; 0x68
 800c130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c132:	425b      	negs	r3, r3
 800c134:	b29a      	uxth	r2, r3
 800c136:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800c13a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 8254 	beq.w	800c5ea <st_sssa8_ch_convolve_dw+0x5a6>
 800c142:	f3c9 014f 	ubfx	r1, r9, #1, #16
 800c146:	08ba      	lsrs	r2, r7, #2
 800c148:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800c14a:	1e4d      	subs	r5, r1, #1
 800c14c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c14e:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 800c150:	fa1f fa85 	uxth.w	sl, r5
 800c154:	2500      	movs	r5, #0
 800c156:	f101 0e20 	add.w	lr, r1, #32
 800c15a:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800c15c:	9536      	str	r5, [sp, #216]	; 0xd8
 800c15e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c160:	f1c1 0c00 	rsb	ip, r1, #0
 800c164:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c166:	9224      	str	r2, [sp, #144]	; 0x90
 800c168:	4629      	mov	r1, r5
 800c16a:	fb13 f300 	smulbb	r3, r3, r0
 800c16e:	3a01      	subs	r2, #1
 800c170:	fb01 f104 	mul.w	r1, r1, r4
 800c174:	9826      	ldr	r0, [sp, #152]	; 0x98
 800c176:	b292      	uxth	r2, r2
 800c178:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c17a:	4440      	add	r0, r8
 800c17c:	9135      	str	r1, [sp, #212]	; 0xd4
 800c17e:	f102 0901 	add.w	r9, r2, #1
 800c182:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 800c186:	eba7 0808 	sub.w	r8, r7, r8
 800c18a:	9029      	str	r0, [sp, #164]	; 0xa4
 800c18c:	9111      	str	r1, [sp, #68]	; 0x44
 800c18e:	b29b      	uxth	r3, r3
 800c190:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 800c194:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 800c196:	ea4f 1009 	mov.w	r0, r9, lsl #4
 800c19a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c19c:	3b01      	subs	r3, #1
 800c19e:	9628      	str	r6, [sp, #160]	; 0xa0
 800c1a0:	4401      	add	r1, r0
 800c1a2:	f10a 0601 	add.w	r6, sl, #1
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	46b8      	mov	r8, r7
 800c1aa:	9130      	str	r1, [sp, #192]	; 0xc0
 800c1ac:	1821      	adds	r1, r4, r0
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	2400      	movs	r4, #0
 800c1b2:	912d      	str	r1, [sp, #180]	; 0xb4
 800c1b4:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 800c1b6:	4401      	add	r1, r0
 800c1b8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800c1ba:	912c      	str	r1, [sp, #176]	; 0xb0
 800c1bc:	0059      	lsls	r1, r3, #1
 800c1be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1c0:	911d      	str	r1, [sp, #116]	; 0x74
 800c1c2:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 800c1c6:	912f      	str	r1, [sp, #188]	; 0xbc
 800c1c8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c1ca:	fb06 f101 	mul.w	r1, r6, r1
 800c1ce:	9115      	str	r1, [sp, #84]	; 0x54
 800c1d0:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800c1d4:	912b      	str	r1, [sp, #172]	; 0xac
 800c1d6:	f003 0101 	and.w	r1, r3, #1
 800c1da:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c1dc:	9110      	str	r1, [sp, #64]	; 0x40
 800c1de:	ea4f 110a 	mov.w	r1, sl, lsl #4
 800c1e2:	fb05 f303 	mul.w	r3, r5, r3
 800c1e6:	912a      	str	r1, [sp, #168]	; 0xa8
 800c1e8:	0131      	lsls	r1, r6, #4
 800c1ea:	933b      	str	r3, [sp, #236]	; 0xec
 800c1ec:	9116      	str	r1, [sp, #88]	; 0x58
 800c1ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1f0:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 800c1f4:	0093      	lsls	r3, r2, #2
 800c1f6:	932e      	str	r3, [sp, #184]	; 0xb8
 800c1f8:	f007 0303 	and.w	r3, r7, #3
 800c1fc:	9321      	str	r3, [sp, #132]	; 0x84
 800c1fe:	fa1f f38c 	uxth.w	r3, ip
 800c202:	9334      	str	r3, [sp, #208]	; 0xd0
 800c204:	a848      	add	r0, sp, #288	; 0x120
 800c206:	f002 fa67 	bl	800e6d8 <ai_padding_opt_phase1>
 800c20a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 81de 	beq.w	800c5ce <st_sssa8_ch_convolve_dw+0x58a>
 800c212:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 800c216:	2100      	movs	r1, #0
 800c218:	46c3      	mov	fp, r8
 800c21a:	9027      	str	r0, [sp, #156]	; 0x9c
 800c21c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800c21e:	9120      	str	r1, [sp, #128]	; 0x80
 800c220:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 800c224:	1a9a      	subs	r2, r3, r2
 800c226:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c228:	425b      	negs	r3, r3
 800c22a:	fb04 2200 	mla	r2, r4, r0, r2
 800c22e:	b29b      	uxth	r3, r3
 800c230:	9217      	str	r2, [sp, #92]	; 0x5c
 800c232:	460a      	mov	r2, r1
 800c234:	931c      	str	r3, [sp, #112]	; 0x70
 800c236:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c238:	3b01      	subs	r3, #1
 800c23a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c23c:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 830e 	beq.w	800c860 <st_sssa8_ch_convolve_dw+0x81c>
 800c244:	3b01      	subs	r3, #1
 800c246:	2101      	movs	r1, #1
 800c248:	9348      	str	r3, [sp, #288]	; 0x120
 800c24a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c24c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c250:	2b01      	cmp	r3, #1
 800c252:	f000 8354 	beq.w	800c8fe <st_sssa8_ch_convolve_dw+0x8ba>
 800c256:	2b04      	cmp	r3, #4
 800c258:	f000 83ed 	beq.w	800ca36 <st_sssa8_ch_convolve_dw+0x9f2>
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	f000 8391 	beq.w	800c984 <st_sssa8_ch_convolve_dw+0x940>
 800c262:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c264:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c266:	4283      	cmp	r3, r0
 800c268:	da45      	bge.n	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c26a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c26c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c26e:	fb02 0201 	mla	r2, r2, r1, r0
 800c272:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c274:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 800c278:	1a12      	subs	r2, r2, r0
 800c27a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c27c:	4291      	cmp	r1, r2
 800c27e:	9203      	str	r2, [sp, #12]
 800c280:	da39      	bge.n	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c282:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800c286:	46d9      	mov	r9, fp
 800c288:	461a      	mov	r2, r3
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	9908      	ldr	r1, [sp, #32]
 800c28e:	0fd2      	lsrs	r2, r2, #31
 800c290:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c292:	f1ca 0b00 	rsb	fp, sl, #0
 800c296:	fb01 f103 	mul.w	r1, r1, r3
 800c29a:	4298      	cmp	r0, r3
 800c29c:	bfd8      	it	le
 800c29e:	f042 0201 	orrle.w	r2, r2, #1
 800c2a2:	9107      	str	r1, [sp, #28]
 800c2a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2a6:	9204      	str	r2, [sp, #16]
 800c2a8:	4688      	mov	r8, r1
 800c2aa:	9b08      	ldr	r3, [sp, #32]
 800c2ac:	428b      	cmp	r3, r1
 800c2ae:	bfcc      	ite	gt
 800c2b0:	2300      	movgt	r3, #0
 800c2b2:	2301      	movle	r3, #1
 800c2b4:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 800c2b8:	d103      	bne.n	800c2c2 <st_sssa8_ch_convolve_dw+0x27e>
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 822e 	beq.w	800c71e <st_sssa8_ch_convolve_dw+0x6da>
 800c2c2:	464a      	mov	r2, r9
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800c2ca:	f002 fa21 	bl	800e710 <st_uint8_fill>
 800c2ce:	f108 0801 	add.w	r8, r8, #1
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	44ca      	add	sl, r9
 800c2d6:	ebab 0b09 	sub.w	fp, fp, r9
 800c2da:	fa0f f888 	sxth.w	r8, r8
 800c2de:	4598      	cmp	r8, r3
 800c2e0:	4641      	mov	r1, r8
 800c2e2:	dbe2      	blt.n	800c2aa <st_sssa8_ch_convolve_dw+0x266>
 800c2e4:	9b05      	ldr	r3, [sp, #20]
 800c2e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	9305      	str	r3, [sp, #20]
 800c2f2:	dbcb      	blt.n	800c28c <st_sssa8_ch_convolve_dw+0x248>
 800c2f4:	46cb      	mov	fp, r9
 800c2f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 82e9 	beq.w	800c8d0 <st_sssa8_ch_convolve_dw+0x88c>
 800c2fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c300:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800c302:	f102 0810 	add.w	r8, r2, #16
 800c306:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800c308:	3310      	adds	r3, #16
 800c30a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c30e:	3204      	adds	r2, #4
 800c310:	9307      	str	r3, [sp, #28]
 800c312:	9204      	str	r2, [sp, #16]
 800c314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c316:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c318:	3308      	adds	r3, #8
 800c31a:	9206      	str	r2, [sp, #24]
 800c31c:	9305      	str	r3, [sp, #20]
 800c31e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800c320:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 800c324:	3310      	adds	r3, #16
 800c326:	3220      	adds	r2, #32
 800c328:	4666      	mov	r6, ip
 800c32a:	469e      	mov	lr, r3
 800c32c:	9b07      	ldr	r3, [sp, #28]
 800c32e:	9212      	str	r2, [sp, #72]	; 0x48
 800c330:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800c334:	920d      	str	r2, [sp, #52]	; 0x34
 800c336:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800c338:	9203      	str	r2, [sp, #12]
 800c33a:	f853 cc10 	ldr.w	ip, [r3, #-16]
 800c33e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c342:	9906      	ldr	r1, [sp, #24]
 800c344:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 800c348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d043      	beq.n	800c3d6 <st_sssa8_ch_convolve_dw+0x392>
 800c34e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c350:	f106 0210 	add.w	r2, r6, #16
 800c354:	9f03      	ldr	r7, [sp, #12]
 800c356:	18f3      	adds	r3, r6, r3
 800c358:	960a      	str	r6, [sp, #40]	; 0x28
 800c35a:	e9cd 8e0b 	strd	r8, lr, [sp, #44]	; 0x2c
 800c35e:	4698      	mov	r8, r3
 800c360:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800c364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c366:	9303      	str	r3, [sp, #12]
 800c368:	9b03      	ldr	r3, [sp, #12]
 800c36a:	f8d1 a000 	ldr.w	sl, [r1]
 800c36e:	f851 b003 	ldr.w	fp, [r1, r3]
 800c372:	4bcf      	ldr	r3, [pc, #828]	; (800c6b0 <st_sssa8_ch_convolve_dw+0x66c>)
 800c374:	fa1f f98a 	uxth.w	r9, sl
 800c378:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c37c:	ea0b 0303 	and.w	r3, fp, r3
 800c380:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800c384:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 800c388:	fa27 fa89 	sxtab16	sl, r7, r9
 800c38c:	fb26 cc0a 	smlad	ip, r6, sl, ip
 800c390:	ea4f 2939 	mov.w	r9, r9, ror #8
 800c394:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 800c398:	fa27 f989 	sxtab16	r9, r7, r9
 800c39c:	fb26 5509 	smlad	r5, r6, r9, r5
 800c3a0:	fa27 f983 	sxtab16	r9, r7, r3
 800c3a4:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c3a8:	fb26 4409 	smlad	r4, r6, r9, r4
 800c3ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c3b0:	f852 6c04 	ldr.w	r6, [r2, #-4]
 800c3b4:	fa27 f383 	sxtab16	r3, r7, r3
 800c3b8:	fb26 0003 	smlad	r0, r6, r3, r0
 800c3bc:	3210      	adds	r2, #16
 800c3be:	4471      	add	r1, lr
 800c3c0:	4590      	cmp	r8, r2
 800c3c2:	d1d1      	bne.n	800c368 <st_sssa8_ch_convolve_dw+0x324>
 800c3c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c3c8:	9a06      	ldr	r2, [sp, #24]
 800c3ca:	441e      	add	r6, r3
 800c3cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ce:	9703      	str	r7, [sp, #12]
 800c3d0:	1899      	adds	r1, r3, r2
 800c3d2:	e9dd 8e0b 	ldrd	r8, lr, [sp, #44]	; 0x2c
 800c3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3d8:	b1f3      	cbz	r3, 800c418 <st_sssa8_ch_convolve_dw+0x3d4>
 800c3da:	680b      	ldr	r3, [r1, #0]
 800c3dc:	3608      	adds	r6, #8
 800c3de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3e0:	fa4f f983 	sxtb.w	r9, r3
 800c3e4:	f836 ac08 	ldrh.w	sl, [r6, #-8]
 800c3e8:	f343 2107 	sbfx	r1, r3, #8, #8
 800c3ec:	f343 4207 	sbfx	r2, r3, #16, #8
 800c3f0:	eba9 0907 	sub.w	r9, r9, r7
 800c3f4:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800c3f8:	1bc9      	subs	r1, r1, r7
 800c3fa:	1bd2      	subs	r2, r2, r7
 800c3fc:	fb1a cc09 	smlabb	ip, sl, r9, ip
 800c400:	f836 ac06 	ldrh.w	sl, [r6, #-6]
 800c404:	f836 9c04 	ldrh.w	r9, [r6, #-4]
 800c408:	fb1a 5501 	smlabb	r5, sl, r1, r5
 800c40c:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 800c410:	fb19 4402 	smlabb	r4, r9, r2, r4
 800c414:	fb11 0003 	smlabb	r0, r1, r3, r0
 800c418:	9b05      	ldr	r3, [sp, #20]
 800c41a:	f85e 9c10 	ldr.w	r9, [lr, #-16]
 800c41e:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 800c422:	f858 1c10 	ldr.w	r1, [r8, #-16]
 800c426:	2a15      	cmp	r2, #21
 800c428:	f340 8113 	ble.w	800c652 <st_sssa8_ch_convolve_dw+0x60e>
 800c42c:	1e93      	subs	r3, r2, #2
 800c42e:	2701      	movs	r7, #1
 800c430:	3a01      	subs	r2, #1
 800c432:	fa07 f303 	lsl.w	r3, r7, r3
 800c436:	fb5c 3c09 	smmla	ip, ip, r9, r3
 800c43a:	fa4c fc02 	asr.w	ip, ip, r2
 800c43e:	448c      	add	ip, r1
 800c440:	f30c 0c07 	ssat	ip, #8, ip
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	f803 cc04 	strb.w	ip, [r3, #-4]
 800c44a:	9b05      	ldr	r3, [sp, #20]
 800c44c:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 800c450:	2915      	cmp	r1, #21
 800c452:	f340 80ee 	ble.w	800c632 <st_sssa8_ch_convolve_dw+0x5ee>
 800c456:	1e8a      	subs	r2, r1, #2
 800c458:	2301      	movs	r3, #1
 800c45a:	3901      	subs	r1, #1
 800c45c:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 800c460:	fa03 f202 	lsl.w	r2, r3, r2
 800c464:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 800c468:	fb55 2507 	smmla	r5, r5, r7, r2
 800c46c:	fa45 f101 	asr.w	r1, r5, r1
 800c470:	4419      	add	r1, r3
 800c472:	f301 0107 	ssat	r1, #8, r1
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	f803 1c03 	strb.w	r1, [r3, #-3]
 800c47c:	9b05      	ldr	r3, [sp, #20]
 800c47e:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800c482:	2915      	cmp	r1, #21
 800c484:	f340 80c5 	ble.w	800c612 <st_sssa8_ch_convolve_dw+0x5ce>
 800c488:	1e8a      	subs	r2, r1, #2
 800c48a:	2301      	movs	r3, #1
 800c48c:	3901      	subs	r1, #1
 800c48e:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800c492:	fa03 f202 	lsl.w	r2, r3, r2
 800c496:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800c49a:	fb54 2405 	smmla	r4, r4, r5, r2
 800c49e:	fa44 f101 	asr.w	r1, r4, r1
 800c4a2:	4419      	add	r1, r3
 800c4a4:	f301 0107 	ssat	r1, #8, r1
 800c4a8:	9b04      	ldr	r3, [sp, #16]
 800c4aa:	f803 1c02 	strb.w	r1, [r3, #-2]
 800c4ae:	9b05      	ldr	r3, [sp, #20]
 800c4b0:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800c4b4:	2915      	cmp	r1, #21
 800c4b6:	f340 809c 	ble.w	800c5f2 <st_sssa8_ch_convolve_dw+0x5ae>
 800c4ba:	1e8a      	subs	r2, r1, #2
 800c4bc:	2301      	movs	r3, #1
 800c4be:	3901      	subs	r1, #1
 800c4c0:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 800c4c4:	fa03 f202 	lsl.w	r2, r3, r2
 800c4c8:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800c4cc:	fb50 2004 	smmla	r0, r0, r4, r2
 800c4d0:	fa40 f101 	asr.w	r1, r0, r1
 800c4d4:	4419      	add	r1, r3
 800c4d6:	f301 0107 	ssat	r1, #8, r1
 800c4da:	9b04      	ldr	r3, [sp, #16]
 800c4dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4e0:	9a05      	ldr	r2, [sp, #20]
 800c4e2:	f10e 0e10 	add.w	lr, lr, #16
 800c4e6:	9b07      	ldr	r3, [sp, #28]
 800c4e8:	f108 0810 	add.w	r8, r8, #16
 800c4ec:	3208      	adds	r2, #8
 800c4ee:	3310      	adds	r3, #16
 800c4f0:	9205      	str	r2, [sp, #20]
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	9307      	str	r3, [sp, #28]
 800c4f6:	3204      	adds	r2, #4
 800c4f8:	9204      	str	r2, [sp, #16]
 800c4fa:	9a06      	ldr	r2, [sp, #24]
 800c4fc:	3204      	adds	r2, #4
 800c4fe:	9206      	str	r2, [sp, #24]
 800c500:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c502:	429a      	cmp	r2, r3
 800c504:	f47f af19 	bne.w	800c33a <st_sssa8_ch_convolve_dw+0x2f6>
 800c508:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 800c50a:	46b4      	mov	ip, r6
 800c50c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c50e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800c512:	4413      	add	r3, r2
 800c514:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 800c518:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 800c51c:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 800c520:	9373      	str	r3, [sp, #460]	; 0x1cc
 800c522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c524:	2b00      	cmp	r3, #0
 800c526:	d044      	beq.n	800c5b2 <st_sssa8_ch_convolve_dw+0x56e>
 800c528:	4433      	add	r3, r6
 800c52a:	f1ae 0704 	sub.w	r7, lr, #4
 800c52e:	f1a9 0902 	sub.w	r9, r9, #2
 800c532:	f1a8 0804 	sub.w	r8, r8, #4
 800c536:	b29b      	uxth	r3, r3
 800c538:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 800c53c:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 800c540:	9303      	str	r3, [sp, #12]
 800c542:	1c73      	adds	r3, r6, #1
 800c544:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c546:	f85a 1b04 	ldr.w	r1, [sl], #4
 800c54a:	4432      	add	r2, r6
 800c54c:	b29e      	uxth	r6, r3
 800c54e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c550:	b163      	cbz	r3, 800c56c <st_sssa8_ch_convolve_dw+0x528>
 800c552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c554:	eb0c 0403 	add.w	r4, ip, r3
 800c558:	f992 3000 	ldrsb.w	r3, [r2]
 800c55c:	445a      	add	r2, fp
 800c55e:	f83c 0b02 	ldrh.w	r0, [ip], #2
 800c562:	1b5b      	subs	r3, r3, r5
 800c564:	45a4      	cmp	ip, r4
 800c566:	fb10 1103 	smlabb	r1, r0, r3, r1
 800c56a:	d1f5      	bne.n	800c558 <st_sssa8_ch_convolve_dw+0x514>
 800c56c:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 800c570:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800c574:	2a15      	cmp	r2, #21
 800c576:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800c57a:	dd78      	ble.n	800c66e <st_sssa8_ch_convolve_dw+0x62a>
 800c57c:	1e93      	subs	r3, r2, #2
 800c57e:	3a01      	subs	r2, #1
 800c580:	9204      	str	r2, [sp, #16]
 800c582:	2201      	movs	r2, #1
 800c584:	fa02 f303 	lsl.w	r3, r2, r3
 800c588:	fb51 3104 	smmla	r1, r1, r4, r3
 800c58c:	9b04      	ldr	r3, [sp, #16]
 800c58e:	4119      	asrs	r1, r3
 800c590:	4401      	add	r1, r0
 800c592:	f301 0107 	ssat	r1, #8, r1
 800c596:	f88e 1000 	strb.w	r1, [lr]
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	f10e 0e01 	add.w	lr, lr, #1
 800c5a0:	429e      	cmp	r6, r3
 800c5a2:	d1ce      	bne.n	800c542 <st_sssa8_ch_convolve_dw+0x4fe>
 800c5a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5a6:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	441a      	add	r2, r3
 800c5b0:	9273      	str	r2, [sp, #460]	; 0x1cc
 800c5b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c5b4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c5b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3201      	adds	r2, #1
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	b212      	sxth	r2, r2
 800c5c0:	931c      	str	r3, [sp, #112]	; 0x70
 800c5c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c5c4:	9220      	str	r2, [sp, #128]	; 0x80
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	f73f ae38 	bgt.w	800c23c <st_sssa8_ch_convolve_dw+0x1f8>
 800c5cc:	46d8      	mov	r8, fp
 800c5ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c5d0:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800c5d2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800c5d4:	440b      	add	r3, r1
 800c5d6:	3201      	adds	r2, #1
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	b212      	sxth	r2, r2
 800c5dc:	9334      	str	r3, [sp, #208]	; 0xd0
 800c5de:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	9236      	str	r2, [sp, #216]	; 0xd8
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	f73f ae0d 	bgt.w	800c204 <st_sssa8_ch_convolve_dw+0x1c0>
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	b05d      	add	sp, #372	; 0x174
 800c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f2:	2900      	cmp	r1, #0
 800c5f4:	dd48      	ble.n	800c688 <st_sssa8_ch_convolve_dw+0x644>
 800c5f6:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800c5fa:	0040      	lsls	r0, r0, #1
 800c5fc:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c600:	fb50 2003 	smmla	r0, r0, r3, r2
 800c604:	4108      	asrs	r0, r1
 800c606:	f300 0007 	ssat	r0, #8, r0
 800c60a:	9b04      	ldr	r3, [sp, #16]
 800c60c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800c610:	e766      	b.n	800c4e0 <st_sssa8_ch_convolve_dw+0x49c>
 800c612:	2900      	cmp	r1, #0
 800c614:	dd5d      	ble.n	800c6d2 <st_sssa8_ch_convolve_dw+0x68e>
 800c616:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 800c61a:	0064      	lsls	r4, r4, #1
 800c61c:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c620:	fb54 2403 	smmla	r4, r4, r3, r2
 800c624:	410c      	asrs	r4, r1
 800c626:	f304 0407 	ssat	r4, #8, r4
 800c62a:	9b04      	ldr	r3, [sp, #16]
 800c62c:	f803 4c02 	strb.w	r4, [r3, #-2]
 800c630:	e73d      	b.n	800c4ae <st_sssa8_ch_convolve_dw+0x46a>
 800c632:	2900      	cmp	r1, #0
 800c634:	dd60      	ble.n	800c6f8 <st_sssa8_ch_convolve_dw+0x6b4>
 800c636:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 800c63a:	006d      	lsls	r5, r5, #1
 800c63c:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 800c640:	fb55 2503 	smmla	r5, r5, r3, r2
 800c644:	410d      	asrs	r5, r1
 800c646:	f305 0507 	ssat	r5, #8, r5
 800c64a:	9b04      	ldr	r3, [sp, #16]
 800c64c:	f803 5c03 	strb.w	r5, [r3, #-3]
 800c650:	e714      	b.n	800c47c <st_sssa8_ch_convolve_dw+0x438>
 800c652:	2a00      	cmp	r2, #0
 800c654:	dd2e      	ble.n	800c6b4 <st_sssa8_ch_convolve_dw+0x670>
 800c656:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c65a:	fb5c 1c09 	smmla	ip, ip, r9, r1
 800c65e:	fa4c f202 	asr.w	r2, ip, r2
 800c662:	f302 0207 	ssat	r2, #8, r2
 800c666:	9b04      	ldr	r3, [sp, #16]
 800c668:	f803 2c04 	strb.w	r2, [r3, #-4]
 800c66c:	e6ed      	b.n	800c44a <st_sssa8_ch_convolve_dw+0x406>
 800c66e:	2a00      	cmp	r2, #0
 800c670:	f340 80e8 	ble.w	800c844 <st_sssa8_ch_convolve_dw+0x800>
 800c674:	0049      	lsls	r1, r1, #1
 800c676:	fb51 0104 	smmla	r1, r1, r4, r0
 800c67a:	fa41 f202 	asr.w	r2, r1, r2
 800c67e:	f302 0207 	ssat	r2, #8, r2
 800c682:	f88e 2000 	strb.w	r2, [lr]
 800c686:	e788      	b.n	800c59a <st_sssa8_ch_convolve_dw+0x556>
 800c688:	f1c1 0101 	rsb	r1, r1, #1
 800c68c:	fa00 f201 	lsl.w	r2, r0, r1
 800c690:	f302 021f 	ssat	r2, #32, r2
 800c694:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800c698:	fb52 f213 	smmulr	r2, r2, r3
 800c69c:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f303 0307 	ssat	r3, #8, r3
 800c6a6:	9a04      	ldr	r2, [sp, #16]
 800c6a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6ac:	e718      	b.n	800c4e0 <st_sssa8_ch_convolve_dw+0x49c>
 800c6ae:	bf00      	nop
 800c6b0:	ffff0000 	.word	0xffff0000
 800c6b4:	f1c2 0201 	rsb	r2, r2, #1
 800c6b8:	fa0c f202 	lsl.w	r2, ip, r2
 800c6bc:	f302 021f 	ssat	r2, #32, r2
 800c6c0:	fb52 f219 	smmulr	r2, r2, r9
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f302 0207 	ssat	r2, #8, r2
 800c6ca:	9b04      	ldr	r3, [sp, #16]
 800c6cc:	f803 2c04 	strb.w	r2, [r3, #-4]
 800c6d0:	e6bb      	b.n	800c44a <st_sssa8_ch_convolve_dw+0x406>
 800c6d2:	f1c1 0101 	rsb	r1, r1, #1
 800c6d6:	fa04 f201 	lsl.w	r2, r4, r1
 800c6da:	f302 021f 	ssat	r2, #32, r2
 800c6de:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 800c6e2:	fb52 f213 	smmulr	r2, r2, r3
 800c6e6:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f303 0307 	ssat	r3, #8, r3
 800c6f0:	9a04      	ldr	r2, [sp, #16]
 800c6f2:	f802 3c02 	strb.w	r3, [r2, #-2]
 800c6f6:	e6da      	b.n	800c4ae <st_sssa8_ch_convolve_dw+0x46a>
 800c6f8:	f1c1 0101 	rsb	r1, r1, #1
 800c6fc:	fa05 f201 	lsl.w	r2, r5, r1
 800c700:	f302 021f 	ssat	r2, #32, r2
 800c704:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 800c708:	fb52 f213 	smmulr	r2, r2, r3
 800c70c:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 800c710:	4413      	add	r3, r2
 800c712:	f303 0307 	ssat	r3, #8, r3
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	f802 3c03 	strb.w	r3, [r2, #-3]
 800c71c:	e6ae      	b.n	800c47c <st_sssa8_ch_convolve_dw+0x438>
 800c71e:	9b07      	ldr	r3, [sp, #28]
 800c720:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c722:	4419      	add	r1, r3
 800c724:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c726:	fb03 0101 	mla	r1, r3, r1, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f adcf 	beq.w	800c2ce <st_sssa8_ch_convolve_dw+0x28a>
 800c730:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c732:	2f00      	cmp	r7, #0
 800c734:	f43f adcb 	beq.w	800c2ce <st_sssa8_ch_convolve_dw+0x28a>
 800c738:	18ca      	adds	r2, r1, r3
 800c73a:	1ebb      	subs	r3, r7, #2
 800c73c:	465c      	mov	r4, fp
 800c73e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800c742:	9306      	str	r3, [sp, #24]
 800c744:	1efb      	subs	r3, r7, #3
 800c746:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800c74a:	4650      	mov	r0, sl
 800c74c:	930a      	str	r3, [sp, #40]	; 0x28
 800c74e:	4693      	mov	fp, r2
 800c750:	1f3b      	subs	r3, r7, #4
 800c752:	46a1      	mov	r9, r4
 800c754:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c758:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 800c75c:	19c6      	adds	r6, r0, r7
 800c75e:	f101 0e01 	add.w	lr, r1, #1
 800c762:	42b1      	cmp	r1, r6
 800c764:	bf38      	it	cc
 800c766:	4570      	cmpcc	r0, lr
 800c768:	d362      	bcc.n	800c830 <st_sssa8_ch_convolve_dw+0x7ec>
 800c76a:	2f0b      	cmp	r7, #11
 800c76c:	d960      	bls.n	800c830 <st_sssa8_ch_convolve_dw+0x7ec>
 800c76e:	f009 0303 	and.w	r3, r9, #3
 800c772:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c774:	1cda      	adds	r2, r3, #3
 800c776:	42a2      	cmp	r2, r4
 800c778:	f200 80b4 	bhi.w	800c8e4 <st_sssa8_ch_convolve_dw+0x8a0>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d05e      	beq.n	800c83e <st_sssa8_ch_convolve_dw+0x7fa>
 800c780:	780a      	ldrb	r2, [r1, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	f100 0a01 	add.w	sl, r0, #1
 800c788:	9d06      	ldr	r5, [sp, #24]
 800c78a:	7002      	strb	r2, [r0, #0]
 800c78c:	d00b      	beq.n	800c7a6 <st_sssa8_ch_convolve_dw+0x762>
 800c78e:	780a      	ldrb	r2, [r1, #0]
 800c790:	2b03      	cmp	r3, #3
 800c792:	f100 0a02 	add.w	sl, r0, #2
 800c796:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c798:	7042      	strb	r2, [r0, #1]
 800c79a:	d104      	bne.n	800c7a6 <st_sssa8_ch_convolve_dw+0x762>
 800c79c:	780a      	ldrb	r2, [r1, #0]
 800c79e:	f100 0a03 	add.w	sl, r0, #3
 800c7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7a4:	7082      	strb	r2, [r0, #2]
 800c7a6:	f891 c000 	ldrb.w	ip, [r1]
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	eba7 0803 	sub.w	r8, r7, r3
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f36c 0407 	bfi	r4, ip, #0, #8
 800c7b6:	4403      	add	r3, r0
 800c7b8:	ea4f 0098 	mov.w	r0, r8, lsr #2
 800c7bc:	f36c 240f 	bfi	r4, ip, #8, #8
 800c7c0:	f36c 4417 	bfi	r4, ip, #16, #8
 800c7c4:	f36c 641f 	bfi	r4, ip, #24, #8
 800c7c8:	3201      	adds	r2, #1
 800c7ca:	f843 4b04 	str.w	r4, [r3], #4
 800c7ce:	4282      	cmp	r2, r0
 800c7d0:	d3fa      	bcc.n	800c7c8 <st_sssa8_ch_convolve_dw+0x784>
 800c7d2:	f028 0203 	bic.w	r2, r8, #3
 800c7d6:	4542      	cmp	r2, r8
 800c7d8:	4492      	add	sl, r2
 800c7da:	eba5 0502 	sub.w	r5, r5, r2
 800c7de:	d01a      	beq.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c7e0:	780b      	ldrb	r3, [r1, #0]
 800c7e2:	f88a 3000 	strb.w	r3, [sl]
 800c7e6:	b1b5      	cbz	r5, 800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c7e8:	780b      	ldrb	r3, [r1, #0]
 800c7ea:	2d01      	cmp	r5, #1
 800c7ec:	f88a 3001 	strb.w	r3, [sl, #1]
 800c7f0:	d011      	beq.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c7f2:	780b      	ldrb	r3, [r1, #0]
 800c7f4:	2d02      	cmp	r5, #2
 800c7f6:	f88a 3002 	strb.w	r3, [sl, #2]
 800c7fa:	d00c      	beq.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c7fc:	780b      	ldrb	r3, [r1, #0]
 800c7fe:	2d03      	cmp	r5, #3
 800c800:	f88a 3003 	strb.w	r3, [sl, #3]
 800c804:	d007      	beq.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c806:	780b      	ldrb	r3, [r1, #0]
 800c808:	2d04      	cmp	r5, #4
 800c80a:	f88a 3004 	strb.w	r3, [sl, #4]
 800c80e:	d002      	beq.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c810:	780b      	ldrb	r3, [r1, #0]
 800c812:	f88a 3005 	strb.w	r3, [sl, #5]
 800c816:	45de      	cmp	lr, fp
 800c818:	4671      	mov	r1, lr
 800c81a:	4630      	mov	r0, r6
 800c81c:	eba9 0907 	sub.w	r9, r9, r7
 800c820:	d19c      	bne.n	800c75c <st_sssa8_ch_convolve_dw+0x718>
 800c822:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800c826:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c82a:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 800c82e:	e54e      	b.n	800c2ce <st_sssa8_ch_convolve_dw+0x28a>
 800c830:	4603      	mov	r3, r0
 800c832:	780a      	ldrb	r2, [r1, #0]
 800c834:	f803 2b01 	strb.w	r2, [r3], #1
 800c838:	429e      	cmp	r6, r3
 800c83a:	d1fa      	bne.n	800c832 <st_sssa8_ch_convolve_dw+0x7ee>
 800c83c:	e7eb      	b.n	800c816 <st_sssa8_ch_convolve_dw+0x7d2>
 800c83e:	4625      	mov	r5, r4
 800c840:	4682      	mov	sl, r0
 800c842:	e7b0      	b.n	800c7a6 <st_sssa8_ch_convolve_dw+0x762>
 800c844:	f1c2 0201 	rsb	r2, r2, #1
 800c848:	fa01 f202 	lsl.w	r2, r1, r2
 800c84c:	f302 031f 	ssat	r3, #32, r2
 800c850:	fb53 f314 	smmulr	r3, r3, r4
 800c854:	4403      	add	r3, r0
 800c856:	f303 0307 	ssat	r3, #8, r3
 800c85a:	f88e 3000 	strb.w	r3, [lr]
 800c85e:	e69c      	b.n	800c59a <st_sssa8_ch_convolve_dw+0x556>
 800c860:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c862:	2b00      	cmp	r3, #0
 800c864:	d041      	beq.n	800c8ea <st_sssa8_ch_convolve_dw+0x8a6>
 800c866:	3b01      	subs	r3, #1
 800c868:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 800c86c:	9349      	str	r3, [sp, #292]	; 0x124
 800c86e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c870:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c874:	2b01      	cmp	r3, #1
 800c876:	f47f acee 	bne.w	800c256 <st_sssa8_ch_convolve_dw+0x212>
 800c87a:	2901      	cmp	r1, #1
 800c87c:	d03f      	beq.n	800c8fe <st_sssa8_ch_convolve_dw+0x8ba>
 800c87e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c880:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c882:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 800c886:	428b      	cmp	r3, r1
 800c888:	f6bf ad35 	bge.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c88c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c88e:	461c      	mov	r4, r3
 800c890:	f8cd b00c 	str.w	fp, [sp, #12]
 800c894:	4618      	mov	r0, r3
 800c896:	4637      	mov	r7, r6
 800c898:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 800c89c:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800c8a0:	468b      	mov	fp, r1
 800c8a2:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8a6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c8a8:	3401      	adds	r4, #1
 800c8aa:	fb00 500a 	mla	r0, r0, sl, r5
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	b224      	sxth	r4, r4
 800c8b4:	fb06 9000 	mla	r0, r6, r0, r9
 800c8b8:	f004 f9c0 	bl	8010c3c <st_dsp_arm_copy_q7>
 800c8bc:	4447      	add	r7, r8
 800c8be:	455c      	cmp	r4, fp
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	dbf1      	blt.n	800c8a8 <st_sssa8_ch_convolve_dw+0x864>
 800c8c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c8c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f47f ad17 	bne.w	800c2fe <st_sssa8_ch_convolve_dw+0x2ba>
 800c8d0:	461e      	mov	r6, r3
 800c8d2:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800c8d6:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 800c8da:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 800c8de:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 800c8e2:	e61e      	b.n	800c522 <st_sssa8_ch_convolve_dw+0x4de>
 800c8e4:	4625      	mov	r5, r4
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	e77a      	b.n	800c7e0 <st_sssa8_ch_convolve_dw+0x79c>
 800c8ea:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c8f4:	934a      	str	r3, [sp, #296]	; 0x128
 800c8f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	f47f acac 	bne.w	800c256 <st_sssa8_ch_convolve_dw+0x212>
 800c8fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c900:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c902:	4283      	cmp	r3, r0
 800c904:	f6bf acf7 	bge.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c908:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c90a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c90c:	fb02 0201 	mla	r2, r2, r1, r0
 800c910:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c912:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 800c916:	1a15      	subs	r5, r2, r0
 800c918:	9104      	str	r1, [sp, #16]
 800c91a:	428d      	cmp	r5, r1
 800c91c:	f77f aceb 	ble.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c920:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800c924:	4698      	mov	r8, r3
 800c926:	461a      	mov	r2, r3
 800c928:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c92c:	9e08      	ldr	r6, [sp, #32]
 800c92e:	fb06 f302 	mul.w	r3, r6, r2
 800c932:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 800c936:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c93a:	9303      	str	r3, [sp, #12]
 800c93c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c93e:	4664      	mov	r4, ip
 800c940:	4293      	cmp	r3, r2
 800c942:	bfd8      	it	le
 800c944:	f047 0701 	orrle.w	r7, r7, #1
 800c948:	4566      	cmp	r6, ip
 800c94a:	465a      	mov	r2, fp
 800c94c:	4651      	mov	r1, sl
 800c94e:	4648      	mov	r0, r9
 800c950:	bfcc      	ite	gt
 800c952:	2300      	movgt	r3, #0
 800c954:	2301      	movle	r3, #1
 800c956:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800c95a:	d102      	bne.n	800c962 <st_sssa8_ch_convolve_dw+0x91e>
 800c95c:	2f00      	cmp	r7, #0
 800c95e:	f000 80c4 	beq.w	800caea <st_sssa8_ch_convolve_dw+0xaa6>
 800c962:	f001 fed5 	bl	800e710 <st_uint8_fill>
 800c966:	3401      	adds	r4, #1
 800c968:	44da      	add	sl, fp
 800c96a:	b224      	sxth	r4, r4
 800c96c:	42ac      	cmp	r4, r5
 800c96e:	46a4      	mov	ip, r4
 800c970:	dbea      	blt.n	800c948 <st_sssa8_ch_convolve_dw+0x904>
 800c972:	f108 0801 	add.w	r8, r8, #1
 800c976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c978:	fa0f f888 	sxth.w	r8, r8
 800c97c:	4598      	cmp	r8, r3
 800c97e:	4642      	mov	r2, r8
 800c980:	dbd5      	blt.n	800c92e <st_sssa8_ch_convolve_dw+0x8ea>
 800c982:	e4b8      	b.n	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c984:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c986:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c988:	4281      	cmp	r1, r0
 800c98a:	f6bf acb4 	bge.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c98e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c990:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c992:	fb02 0203 	mla	r2, r2, r3, r0
 800c996:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c998:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800c99c:	1a15      	subs	r5, r2, r0
 800c99e:	9304      	str	r3, [sp, #16]
 800c9a0:	42ab      	cmp	r3, r5
 800c9a2:	f6bf aca8 	bge.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800c9a6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800c9aa:	460e      	mov	r6, r1
 800c9ac:	4689      	mov	r9, r1
 800c9ae:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800c9b2:	9f08      	ldr	r7, [sp, #32]
 800c9b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9b6:	9a04      	ldr	r2, [sp, #16]
 800c9b8:	454b      	cmp	r3, r9
 800c9ba:	fb09 f307 	mul.w	r3, r9, r7
 800c9be:	4614      	mov	r4, r2
 800c9c0:	bfcc      	ite	gt
 800c9c2:	2100      	movgt	r1, #0
 800c9c4:	2101      	movle	r1, #1
 800c9c6:	9303      	str	r3, [sp, #12]
 800c9c8:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	46b1      	mov	r9, r6
 800c9d0:	461e      	mov	r6, r3
 800c9d2:	4297      	cmp	r7, r2
 800c9d4:	bfcc      	ite	gt
 800c9d6:	2300      	movgt	r3, #0
 800c9d8:	2301      	movle	r3, #1
 800c9da:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800c9de:	d100      	bne.n	800c9e2 <st_sssa8_ch_convolve_dw+0x99e>
 800c9e0:	b196      	cbz	r6, 800ca08 <st_sssa8_ch_convolve_dw+0x9c4>
 800c9e2:	465a      	mov	r2, fp
 800c9e4:	4651      	mov	r1, sl
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	f001 fe92 	bl	800e710 <st_uint8_fill>
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	44da      	add	sl, fp
 800c9f0:	b224      	sxth	r4, r4
 800c9f2:	42ac      	cmp	r4, r5
 800c9f4:	4622      	mov	r2, r4
 800c9f6:	dbec      	blt.n	800c9d2 <st_sssa8_ch_convolve_dw+0x98e>
 800c9f8:	464e      	mov	r6, r9
 800c9fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9fc:	3601      	adds	r6, #1
 800c9fe:	b236      	sxth	r6, r6
 800ca00:	429e      	cmp	r6, r3
 800ca02:	46b1      	mov	r9, r6
 800ca04:	dbd6      	blt.n	800c9b4 <st_sssa8_ch_convolve_dw+0x970>
 800ca06:	e476      	b.n	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ca0c:	441a      	add	r2, r3
 800ca0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca10:	fb03 0102 	mla	r1, r3, r2, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0e9      	beq.n	800c9ec <st_sssa8_ch_convolve_dw+0x9a8>
 800ca18:	eb01 0c03 	add.w	ip, r1, r3
 800ca1c:	4650      	mov	r0, sl
 800ca1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	4561      	cmp	r1, ip
 800ca26:	ea4f 2233 	mov.w	r2, r3, ror #8
 800ca2a:	fa33 f382 	uxtab16	r3, r3, r2
 800ca2e:	f820 3b02 	strh.w	r3, [r0], #2
 800ca32:	d1f4      	bne.n	800ca1e <st_sssa8_ch_convolve_dw+0x9da>
 800ca34:	e7da      	b.n	800c9ec <st_sssa8_ch_convolve_dw+0x9a8>
 800ca36:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ca38:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ca3a:	4281      	cmp	r1, r0
 800ca3c:	f6bf ac5b 	bge.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800ca40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca42:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800ca44:	fb02 0203 	mla	r2, r2, r3, r0
 800ca48:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800ca4a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800ca4e:	1a15      	subs	r5, r2, r0
 800ca50:	9304      	str	r3, [sp, #16]
 800ca52:	429d      	cmp	r5, r3
 800ca54:	f77f ac4f 	ble.w	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800ca58:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800ca5c:	4689      	mov	r9, r1
 800ca5e:	460a      	mov	r2, r1
 800ca60:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800ca64:	9e08      	ldr	r6, [sp, #32]
 800ca66:	fb06 f302 	mul.w	r3, r6, r2
 800ca6a:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 800ca6e:	9904      	ldr	r1, [sp, #16]
 800ca70:	9303      	str	r3, [sp, #12]
 800ca72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca74:	460c      	mov	r4, r1
 800ca76:	4293      	cmp	r3, r2
 800ca78:	bfd8      	it	le
 800ca7a:	f047 0701 	orrle.w	r7, r7, #1
 800ca7e:	428e      	cmp	r6, r1
 800ca80:	bfcc      	ite	gt
 800ca82:	2300      	movgt	r3, #0
 800ca84:	2301      	movle	r3, #1
 800ca86:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800ca8a:	d100      	bne.n	800ca8e <st_sssa8_ch_convolve_dw+0xa4a>
 800ca8c:	b19f      	cbz	r7, 800cab6 <st_sssa8_ch_convolve_dw+0xa72>
 800ca8e:	465a      	mov	r2, fp
 800ca90:	4651      	mov	r1, sl
 800ca92:	4640      	mov	r0, r8
 800ca94:	f001 fe3c 	bl	800e710 <st_uint8_fill>
 800ca98:	3401      	adds	r4, #1
 800ca9a:	44da      	add	sl, fp
 800ca9c:	b224      	sxth	r4, r4
 800ca9e:	42ac      	cmp	r4, r5
 800caa0:	4621      	mov	r1, r4
 800caa2:	dbec      	blt.n	800ca7e <st_sssa8_ch_convolve_dw+0xa3a>
 800caa4:	f109 0901 	add.w	r9, r9, #1
 800caa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caaa:	fa0f f989 	sxth.w	r9, r9
 800caae:	4599      	cmp	r9, r3
 800cab0:	464a      	mov	r2, r9
 800cab2:	dbd8      	blt.n	800ca66 <st_sssa8_ch_convolve_dw+0xa22>
 800cab4:	e41f      	b.n	800c2f6 <st_sssa8_ch_convolve_dw+0x2b2>
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	185a      	adds	r2, r3, r1
 800caba:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	; 0x78
 800cabe:	fb03 1202 	mla	r2, r3, r2, r1
 800cac2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0e7      	beq.n	800ca98 <st_sssa8_ch_convolve_dw+0xa54>
 800cac8:	18d0      	adds	r0, r2, r3
 800caca:	4651      	mov	r1, sl
 800cacc:	f812 cb01 	ldrb.w	ip, [r2], #1
 800cad0:	ea4f 630c 	mov.w	r3, ip, lsl #24
 800cad4:	4282      	cmp	r2, r0
 800cad6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800cada:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800cade:	fa33 f38c 	uxtab16	r3, r3, ip
 800cae2:	f841 3b04 	str.w	r3, [r1], #4
 800cae6:	d1f1      	bne.n	800cacc <st_sssa8_ch_convolve_dw+0xa88>
 800cae8:	e7d6      	b.n	800ca98 <st_sssa8_ch_convolve_dw+0xa54>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	eb03 000c 	add.w	r0, r3, ip
 800caf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800caf2:	461a      	mov	r2, r3
 800caf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800caf6:	fb02 3000 	mla	r0, r2, r0, r3
 800cafa:	f004 f89f 	bl	8010c3c <st_dsp_arm_copy_q7>
 800cafe:	e732      	b.n	800c966 <st_sssa8_ch_convolve_dw+0x922>
 800cb00:	428e      	cmp	r6, r1
 800cb02:	f844 5f04 	str.w	r5, [r4, #4]!
 800cb06:	f47f aadc 	bne.w	800c0c2 <st_sssa8_ch_convolve_dw+0x7e>
 800cb0a:	f7ff baeb 	b.w	800c0e4 <st_sssa8_ch_convolve_dw+0xa0>
 800cb0e:	2401      	movs	r4, #1
 800cb10:	f7ff bb0e 	b.w	800c130 <st_sssa8_ch_convolve_dw+0xec>

0800cb14 <st_sssa8_ch_convolve_rank1upd>:
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800cb1e:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 800cb22:	fb13 f304 	smulbb	r3, r3, r4
 800cb26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb28:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800cb2c:	fb13 f600 	smulbb	r6, r3, r0
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d06c      	beq.n	800cc0e <st_sssa8_ch_convolve_rank1upd+0xfa>
 800cb34:	b2b6      	uxth	r6, r6
 800cb36:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800cb3a:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800cb3e:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 800cb42:	f006 0603 	and.w	r6, r6, #3
 800cb46:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 800cb4a:	f1a9 0904 	sub.w	r9, r9, #4
 800cb4e:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 800cb52:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 800cb56:	44a9      	add	r9, r5
 800cb58:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800cb5c:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 800cb60:	3301      	adds	r3, #1
 800cb62:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 800cb66:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 800cb6a:	b293      	uxth	r3, r2
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800cb72:	d94f      	bls.n	800cc14 <st_sssa8_ch_convolve_rank1upd+0x100>
 800cb74:	eb01 050c 	add.w	r5, r1, ip
 800cb78:	2400      	movs	r4, #0
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800cb80:	461f      	mov	r7, r3
 800cb82:	f851 2b04 	ldr.w	r2, [r1], #4
 800cb86:	fa2f f382 	sxtb16	r3, r2
 800cb8a:	4288      	cmp	r0, r1
 800cb8c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800cb90:	fa97 f313 	qadd16	r3, r7, r3
 800cb94:	fa2f f282 	sxtb16	r2, r2
 800cb98:	fa93 f712 	qadd16	r7, r3, r2
 800cb9c:	d1f1      	bne.n	800cb82 <st_sssa8_ch_convolve_rank1upd+0x6e>
 800cb9e:	b23a      	sxth	r2, r7
 800cba0:	4285      	cmp	r5, r0
 800cba2:	4601      	mov	r1, r0
 800cba4:	eb02 4327 	add.w	r3, r2, r7, asr #16
 800cba8:	441c      	add	r4, r3
 800cbaa:	d1e6      	bne.n	800cb7a <st_sssa8_ch_convolve_rank1upd+0x66>
 800cbac:	9801      	ldr	r0, [sp, #4]
 800cbae:	b1b8      	cbz	r0, 800cbe0 <st_sssa8_ch_convolve_rank1upd+0xcc>
 800cbb0:	3801      	subs	r0, #1
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	b280      	uxth	r0, r0
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800cbbc:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbc0:	fa2f f583 	sxtb16	r5, r3
 800cbc4:	4281      	cmp	r1, r0
 800cbc6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800cbca:	fa92 f215 	qadd16	r2, r2, r5
 800cbce:	fa2f f383 	sxtb16	r3, r3
 800cbd2:	fa92 f213 	qadd16	r2, r2, r3
 800cbd6:	d1f1      	bne.n	800cbbc <st_sssa8_ch_convolve_rank1upd+0xa8>
 800cbd8:	b213      	sxth	r3, r2
 800cbda:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800cbde:	4414      	add	r4, r2
 800cbe0:	b16e      	cbz	r6, 800cbfe <st_sssa8_ch_convolve_rank1upd+0xea>
 800cbe2:	f991 3000 	ldrsb.w	r3, [r1]
 800cbe6:	2e01      	cmp	r6, #1
 800cbe8:	441c      	add	r4, r3
 800cbea:	d018      	beq.n	800cc1e <st_sssa8_ch_convolve_rank1upd+0x10a>
 800cbec:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800cbf0:	2e02      	cmp	r6, #2
 800cbf2:	441c      	add	r4, r3
 800cbf4:	d011      	beq.n	800cc1a <st_sssa8_ch_convolve_rank1upd+0x106>
 800cbf6:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800cbfa:	3103      	adds	r1, #3
 800cbfc:	441c      	add	r4, r3
 800cbfe:	f858 3b04 	ldr.w	r3, [r8], #4
 800cc02:	fb0a 3414 	mls	r4, sl, r4, r3
 800cc06:	45c6      	cmp	lr, r8
 800cc08:	f849 4f04 	str.w	r4, [r9, #4]!
 800cc0c:	d1af      	bne.n	800cb6e <st_sssa8_ch_convolve_rank1upd+0x5a>
 800cc0e:	b003      	add	sp, #12
 800cc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc14:	4658      	mov	r0, fp
 800cc16:	2400      	movs	r4, #0
 800cc18:	e7c9      	b.n	800cbae <st_sssa8_ch_convolve_rank1upd+0x9a>
 800cc1a:	3102      	adds	r1, #2
 800cc1c:	e7ef      	b.n	800cbfe <st_sssa8_ch_convolve_rank1upd+0xea>
 800cc1e:	3101      	adds	r1, #1
 800cc20:	e7ed      	b.n	800cbfe <st_sssa8_ch_convolve_rank1upd+0xea>
 800cc22:	bf00      	nop

0800cc24 <st_sssa8_ch_convolve>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	b0d3      	sub	sp, #332	; 0x14c
 800cc2a:	4699      	mov	r9, r3
 800cc2c:	4688      	mov	r8, r1
 800cc2e:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 800cc32:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 800cc36:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800cc38:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 800cc3c:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 800cc40:	4629      	mov	r1, r5
 800cc42:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800cc46:	900d      	str	r0, [sp, #52]	; 0x34
 800cc48:	fb16 f307 	smulbb	r3, r6, r7
 800cc4c:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 800cc50:	9519      	str	r5, [sp, #100]	; 0x64
 800cc52:	00ad      	lsls	r5, r5, #2
 800cc54:	fb13 f309 	smulbb	r3, r3, r9
 800cc58:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800cc5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4602      	mov	r2, r0
 800cc62:	9022      	str	r0, [sp, #136]	; 0x88
 800cc64:	931a      	str	r3, [sp, #104]	; 0x68
 800cc66:	442a      	add	r2, r5
 800cc68:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 800cc6c:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 800cc70:	9323      	str	r3, [sp, #140]	; 0x8c
 800cc72:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 800cc76:	9617      	str	r6, [sp, #92]	; 0x5c
 800cc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc7a:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 800cc7e:	9414      	str	r4, [sp, #80]	; 0x50
 800cc80:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc82:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 800cc86:	9725      	str	r7, [sp, #148]	; 0x94
 800cc88:	9311      	str	r3, [sp, #68]	; 0x44
 800cc8a:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 800cc8e:	9507      	str	r5, [sp, #28]
 800cc90:	9224      	str	r2, [sp, #144]	; 0x90
 800cc92:	9015      	str	r0, [sp, #84]	; 0x54
 800cc94:	9c66      	ldr	r4, [sp, #408]	; 0x198
 800cc96:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 800cc9a:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 800cc9e:	9320      	str	r3, [sp, #128]	; 0x80
 800cca0:	2900      	cmp	r1, #0
 800cca2:	f000 8516 	beq.w	800d6d2 <st_sssa8_ch_convolve+0xaae>
 800cca6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ccaa:	4620      	mov	r0, r4
 800ccac:	1f15      	subs	r5, r2, #4
 800ccae:	2701      	movs	r7, #1
 800ccb0:	4464      	add	r4, ip
 800ccb2:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800ccb6:	1e5a      	subs	r2, r3, #1
 800ccb8:	fa07 f103 	lsl.w	r1, r7, r3
 800ccbc:	fa06 f303 	lsl.w	r3, r6, r3
 800ccc0:	b292      	uxth	r2, r2
 800ccc2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800ccc6:	2a14      	cmp	r2, #20
 800ccc8:	f200 816a 	bhi.w	800cfa0 <st_sssa8_ch_convolve+0x37c>
 800cccc:	4284      	cmp	r4, r0
 800ccce:	f845 3f04 	str.w	r3, [r5, #4]!
 800ccd2:	d1ee      	bne.n	800ccb2 <st_sssa8_ch_convolve+0x8e>
 800ccd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ccd6:	9a07      	ldr	r2, [sp, #28]
 800ccd8:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ccda:	189d      	adds	r5, r3, r2
 800ccdc:	eba4 010c 	sub.w	r1, r4, ip
 800cce0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cce2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cce4:	aa3a      	add	r2, sp, #232	; 0xe8
 800cce6:	974a      	str	r7, [sp, #296]	; 0x128
 800cce8:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800ccec:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ccee:	ab36      	add	r3, sp, #216	; 0xd8
 800ccf0:	9433      	str	r4, [sp, #204]	; 0xcc
 800ccf2:	a83e      	add	r0, sp, #248	; 0xf8
 800ccf4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ccf6:	974b      	str	r7, [sp, #300]	; 0x12c
 800ccf8:	9438      	str	r4, [sp, #224]	; 0xe0
 800ccfa:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ccfc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800ccfe:	974c      	str	r7, [sp, #304]	; 0x130
 800cd00:	9437      	str	r4, [sp, #220]	; 0xdc
 800cd02:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800cd04:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800cd06:	9200      	str	r2, [sp, #0]
 800cd08:	aa32      	add	r2, sp, #200	; 0xc8
 800cd0a:	9121      	str	r1, [sp, #132]	; 0x84
 800cd0c:	a948      	add	r1, sp, #288	; 0x120
 800cd0e:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 800cd12:	974d      	str	r7, [sp, #308]	; 0x134
 800cd14:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 800cd18:	f001 fc84 	bl	800e624 <ai_padding_opt_init>
 800cd1c:	fb0a f204 	mul.w	r2, sl, r4
 800cd20:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 800cd24:	fb06 f202 	mul.w	r2, r6, r2
 800cd28:	fb03 f301 	mul.w	r3, r3, r1
 800cd2c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cd2e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800cd32:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cd36:	921c      	str	r2, [sp, #112]	; 0x70
 800cd38:	f340 84b2 	ble.w	800d6a0 <st_sssa8_ch_convolve+0xa7c>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd44:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800cd46:	fb03 f302 	mul.w	r3, r3, r2
 800cd4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd4c:	fb02 1303 	mla	r3, r2, r3, r1
 800cd50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd52:	429a      	cmp	r2, r3
 800cd54:	f080 812a 	bcs.w	800cfac <st_sssa8_ch_convolve+0x388>
 800cd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5a:	fb03 f308 	mul.w	r3, r3, r8
 800cd5e:	fb09 2303 	mla	r3, r9, r3, r2
 800cd62:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800cd64:	429a      	cmp	r2, r3
 800cd66:	bf2c      	ite	cs
 800cd68:	2300      	movcs	r3, #0
 800cd6a:	2301      	movcc	r3, #1
 800cd6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cd6e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cd72:	fb92 f2f1 	sdiv	r2, r2, r1
 800cd76:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cd78:	f022 0201 	bic.w	r2, r2, #1
 800cd7c:	428a      	cmp	r2, r1
 800cd7e:	bf28      	it	cs
 800cd80:	460a      	movcs	r2, r1
 800cd82:	2a01      	cmp	r2, #1
 800cd84:	921f      	str	r2, [sp, #124]	; 0x7c
 800cd86:	f240 82ec 	bls.w	800d362 <st_sssa8_ch_convolve+0x73e>
 800cd8a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800cd8c:	460a      	mov	r2, r1
 800cd8e:	fbb1 f1f0 	udiv	r1, r1, r0
 800cd92:	fb00 2211 	mls	r2, r0, r1, r2
 800cd96:	b289      	uxth	r1, r1
 800cd98:	b292      	uxth	r2, r2
 800cd9a:	912c      	str	r1, [sp, #176]	; 0xb0
 800cd9c:	b11a      	cbz	r2, 800cda6 <st_sssa8_ch_convolve+0x182>
 800cd9e:	460a      	mov	r2, r1
 800cda0:	3201      	adds	r2, #1
 800cda2:	b292      	uxth	r2, r2
 800cda4:	922c      	str	r2, [sp, #176]	; 0xb0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 8102 	bne.w	800cfb0 <st_sssa8_ch_convolve+0x38c>
 800cdac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cdae:	fa0f fb8b 	sxth.w	fp, fp
 800cdb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800cdb4:	fb09 f201 	mul.w	r2, r9, r1
 800cdb8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	9216      	str	r2, [sp, #88]	; 0x58
 800cdbe:	0052      	lsls	r2, r2, #1
 800cdc0:	fb01 f303 	mul.w	r3, r1, r3
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdc8:	9026      	str	r0, [sp, #152]	; 0x98
 800cdca:	fb0a 2303 	mla	r3, sl, r3, r2
 800cdce:	4652      	mov	r2, sl
 800cdd0:	46ca      	mov	sl, r9
 800cdd2:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdd4:	465b      	mov	r3, fp
 800cdd6:	4691      	mov	r9, r2
 800cdd8:	46c3      	mov	fp, r8
 800cdda:	4698      	mov	r8, r3
 800cddc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cdde:	1e5a      	subs	r2, r3, #1
 800cde0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cde4:	b292      	uxth	r2, r2
 800cde6:	429a      	cmp	r2, r3
 800cde8:	922c      	str	r2, [sp, #176]	; 0xb0
 800cdea:	f000 82b6 	beq.w	800d35a <st_sssa8_ch_convolve+0x736>
 800cdee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cdf0:	b92b      	cbnz	r3, 800cdfe <st_sssa8_ch_convolve+0x1da>
 800cdf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cdf4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cdf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cdf8:	985c      	ldr	r0, [sp, #368]	; 0x170
 800cdfa:	f002 f93b 	bl	800f074 <st_int8_to16_dual>
 800cdfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 80a9 	beq.w	800cf58 <st_sssa8_ch_convolve+0x334>
 800ce06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce08:	2400      	movs	r4, #0
 800ce0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ce0c:	425b      	negs	r3, r3
 800ce0e:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800ce10:	941e      	str	r4, [sp, #120]	; 0x78
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	921d      	str	r2, [sp, #116]	; 0x74
 800ce16:	9318      	str	r3, [sp, #96]	; 0x60
 800ce18:	4643      	mov	r3, r8
 800ce1a:	46c8      	mov	r8, r9
 800ce1c:	46b9      	mov	r9, r7
 800ce1e:	461f      	mov	r7, r3
 800ce20:	a83e      	add	r0, sp, #248	; 0xf8
 800ce22:	f001 fc59 	bl	800e6d8 <ai_padding_opt_phase1>
 800ce26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d06e      	beq.n	800cf0a <st_sssa8_ch_convolve+0x2e6>
 800ce2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ce2e:	2500      	movs	r5, #0
 800ce30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ce32:	9510      	str	r5, [sp, #64]	; 0x40
 800ce34:	1a99      	subs	r1, r3, r2
 800ce36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce38:	425a      	negs	r2, r3
 800ce3a:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800ce3e:	9312      	str	r3, [sp, #72]	; 0x48
 800ce40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce42:	fb04 1303 	mla	r3, r4, r3, r1
 800ce46:	9308      	str	r3, [sp, #32]
 800ce48:	b293      	uxth	r3, r2
 800ce4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce4c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	f040 8192 	bne.w	800d178 <st_sssa8_ch_convolve+0x554>
 800ce54:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	f040 8194 	bne.w	800d184 <st_sssa8_ch_convolve+0x560>
 800ce5c:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800ce5e:	2101      	movs	r1, #1
 800ce60:	3a01      	subs	r2, #1
 800ce62:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 800ce66:	9240      	str	r2, [sp, #256]	; 0x100
 800ce68:	9b08      	ldr	r3, [sp, #32]
 800ce6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	dd3a      	ble.n	800cee6 <st_sssa8_ch_convolve+0x2c2>
 800ce70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce74:	fb05 2503 	mla	r5, r5, r3, r2
 800ce78:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800ce7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce7e:	930e      	str	r3, [sp, #56]	; 0x38
 800ce80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce82:	1aad      	subs	r5, r5, r2
 800ce84:	461e      	mov	r6, r3
 800ce86:	461a      	mov	r2, r3
 800ce88:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ce8a:	428d      	cmp	r5, r1
 800ce8c:	dd25      	ble.n	800ceda <st_sssa8_ch_convolve+0x2b6>
 800ce8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce90:	460c      	mov	r4, r1
 800ce92:	9609      	str	r6, [sp, #36]	; 0x24
 800ce94:	468c      	mov	ip, r1
 800ce96:	4293      	cmp	r3, r2
 800ce98:	fb02 f20b 	mul.w	r2, r2, fp
 800ce9c:	bfcc      	ite	gt
 800ce9e:	2300      	movgt	r3, #0
 800cea0:	2301      	movle	r3, #1
 800cea2:	920c      	str	r2, [sp, #48]	; 0x30
 800cea4:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800cea8:	461e      	mov	r6, r3
 800ceaa:	45e3      	cmp	fp, ip
 800ceac:	4652      	mov	r2, sl
 800ceae:	4649      	mov	r1, r9
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	bfcc      	ite	gt
 800ceb4:	f04f 0e00 	movgt.w	lr, #0
 800ceb8:	f04f 0e01 	movle.w	lr, #1
 800cebc:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 800cec0:	d102      	bne.n	800cec8 <st_sssa8_ch_convolve+0x2a4>
 800cec2:	2e00      	cmp	r6, #0
 800cec4:	f000 8146 	beq.w	800d154 <st_sssa8_ch_convolve+0x530>
 800cec8:	f003 feda 	bl	8010c80 <st_dsp_arm_fill_q15>
 800cecc:	3401      	adds	r4, #1
 800cece:	44c1      	add	r9, r8
 800ced0:	b224      	sxth	r4, r4
 800ced2:	42ac      	cmp	r4, r5
 800ced4:	46a4      	mov	ip, r4
 800ced6:	dbe8      	blt.n	800ceaa <st_sssa8_ch_convolve+0x286>
 800ced8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ceda:	3601      	adds	r6, #1
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	b236      	sxth	r6, r6
 800cee0:	429e      	cmp	r6, r3
 800cee2:	4632      	mov	r2, r6
 800cee4:	dbd0      	blt.n	800ce88 <st_sssa8_ch_convolve+0x264>
 800cee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cee8:	454b      	cmp	r3, r9
 800ceea:	f000 8179 	beq.w	800d1e0 <st_sssa8_ch_convolve+0x5bc>
 800ceee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cef2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cef4:	4403      	add	r3, r0
 800cef6:	3101      	adds	r1, #1
 800cef8:	461a      	mov	r2, r3
 800cefa:	b20b      	sxth	r3, r1
 800cefc:	b292      	uxth	r2, r2
 800cefe:	9310      	str	r3, [sp, #64]	; 0x40
 800cf00:	461d      	mov	r5, r3
 800cf02:	920a      	str	r2, [sp, #40]	; 0x28
 800cf04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf06:	429a      	cmp	r2, r3
 800cf08:	dca0      	bgt.n	800ce4c <st_sssa8_ch_convolve+0x228>
 800cf0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cf0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf10:	4403      	add	r3, r0
 800cf12:	3101      	adds	r1, #1
 800cf14:	461a      	mov	r2, r3
 800cf16:	b20b      	sxth	r3, r1
 800cf18:	b292      	uxth	r2, r2
 800cf1a:	931e      	str	r3, [sp, #120]	; 0x78
 800cf1c:	461c      	mov	r4, r3
 800cf1e:	9218      	str	r2, [sp, #96]	; 0x60
 800cf20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf22:	429a      	cmp	r2, r3
 800cf24:	f73f af7c 	bgt.w	800ce20 <st_sssa8_ch_convolve+0x1fc>
 800cf28:	463b      	mov	r3, r7
 800cf2a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cf2c:	464f      	mov	r7, r9
 800cf2e:	46c1      	mov	r9, r8
 800cf30:	4698      	mov	r8, r3
 800cf32:	42b9      	cmp	r1, r7
 800cf34:	d010      	beq.n	800cf58 <st_sssa8_ch_convolve+0x334>
 800cf36:	9865      	ldr	r0, [sp, #404]	; 0x194
 800cf38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cf3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cf3e:	9003      	str	r0, [sp, #12]
 800cf40:	9401      	str	r4, [sp, #4]
 800cf42:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cf44:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800cf46:	9305      	str	r3, [sp, #20]
 800cf48:	9204      	str	r2, [sp, #16]
 800cf4a:	9002      	str	r0, [sp, #8]
 800cf4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cf50:	981c      	ldr	r0, [sp, #112]	; 0x70
 800cf52:	9400      	str	r4, [sp, #0]
 800cf54:	f003 fb64 	bl	8010620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800cf58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cf5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	1a9b      	subs	r3, r3, r2
 800cf60:	b298      	uxth	r0, r3
 800cf62:	4282      	cmp	r2, r0
 800cf64:	9026      	str	r0, [sp, #152]	; 0x98
 800cf66:	bf28      	it	cs
 800cf68:	4601      	movcs	r1, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	b1b1      	cbz	r1, 800cf9c <st_sssa8_ch_convolve+0x378>
 800cf6e:	4611      	mov	r1, r2
 800cf70:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 800cf72:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cf74:	0092      	lsls	r2, r2, #2
 800cf76:	fb04 5001 	mla	r0, r4, r1, r5
 800cf7a:	905c      	str	r0, [sp, #368]	; 0x170
 800cf7c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cf7e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cf82:	9021      	str	r0, [sp, #132]	; 0x84
 800cf84:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800cf86:	4408      	add	r0, r1
 800cf88:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cf8a:	4411      	add	r1, r2
 800cf8c:	9069      	str	r0, [sp, #420]	; 0x1a4
 800cf8e:	9122      	str	r1, [sp, #136]	; 0x88
 800cf90:	9965      	ldr	r1, [sp, #404]	; 0x194
 800cf92:	4411      	add	r1, r2
 800cf94:	9165      	str	r1, [sp, #404]	; 0x194
 800cf96:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cf98:	4411      	add	r1, r2
 800cf9a:	9124      	str	r1, [sp, #144]	; 0x90
 800cf9c:	931f      	str	r3, [sp, #124]	; 0x7c
 800cf9e:	e71d      	b.n	800cddc <st_sssa8_ch_convolve+0x1b8>
 800cfa0:	4284      	cmp	r4, r0
 800cfa2:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfa6:	f47f ae84 	bne.w	800ccb2 <st_sssa8_ch_convolve+0x8e>
 800cfaa:	e693      	b.n	800ccd4 <st_sssa8_ch_convolve+0xb0>
 800cfac:	2300      	movs	r3, #0
 800cfae:	e6dd      	b.n	800cd6c <st_sssa8_ch_convolve+0x148>
 800cfb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 81d1 	beq.w	800d35a <st_sssa8_ch_convolve+0x736>
 800cfb8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800cfba:	2400      	movs	r4, #0
 800cfbc:	9925      	ldr	r1, [sp, #148]	; 0x94
 800cfbe:	4242      	negs	r2, r0
 800cfc0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cfc2:	004b      	lsls	r3, r1, #1
 800cfc4:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	fb09 f506 	mul.w	r5, r9, r6
 800cfce:	fb06 f303 	mul.w	r3, r6, r3
 800cfd2:	1a09      	subs	r1, r1, r0
 800cfd4:	922f      	str	r2, [sp, #188]	; 0xbc
 800cfd6:	fa0f f68b 	sxth.w	r6, fp
 800cfda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfdc:	46c3      	mov	fp, r8
 800cfde:	9507      	str	r5, [sp, #28]
 800cfe0:	fb0a 2303 	mla	r3, sl, r3, r2
 800cfe4:	46ca      	mov	sl, r9
 800cfe6:	9430      	str	r4, [sp, #192]	; 0xc0
 800cfe8:	9316      	str	r3, [sp, #88]	; 0x58
 800cfea:	006b      	lsls	r3, r5, #1
 800cfec:	9613      	str	r6, [sp, #76]	; 0x4c
 800cfee:	9131      	str	r1, [sp, #196]	; 0xc4
 800cff0:	931d      	str	r3, [sp, #116]	; 0x74
 800cff2:	a83e      	add	r0, sp, #248	; 0xf8
 800cff4:	f001 fb70 	bl	800e6d8 <ai_padding_opt_phase1>
 800cff8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cffc:	fb04 f303 	mul.w	r3, r4, r3
 800d000:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800d002:	fb02 1303 	mla	r3, r2, r3, r1
 800d006:	9323      	str	r3, [sp, #140]	; 0x8c
 800d008:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d00a:	b92b      	cbnz	r3, 800d018 <st_sssa8_ch_convolve+0x3f4>
 800d00c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d00e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d010:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d012:	985c      	ldr	r0, [sp, #368]	; 0x170
 800d014:	f002 f82e 	bl	800f074 <st_int8_to16_dual>
 800d018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d01a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800d01c:	fb03 2304 	mla	r3, r3, r4, r2
 800d020:	9308      	str	r3, [sp, #32]
 800d022:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 800d026:	9312      	str	r3, [sp, #72]	; 0x48
 800d028:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d02a:	9325      	str	r3, [sp, #148]	; 0x94
 800d02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d02e:	932a      	str	r3, [sp, #168]	; 0xa8
 800d030:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d032:	9318      	str	r3, [sp, #96]	; 0x60
 800d034:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 800d036:	932d      	str	r3, [sp, #180]	; 0xb4
 800d038:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d03a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d03c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d03e:	9329      	str	r3, [sp, #164]	; 0xa4
 800d040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d042:	9326      	str	r3, [sp, #152]	; 0x98
 800d044:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d046:	9328      	str	r3, [sp, #160]	; 0xa0
 800d048:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d04a:	1e5a      	subs	r2, r3, #1
 800d04c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d050:	b292      	uxth	r2, r2
 800d052:	429a      	cmp	r2, r3
 800d054:	9225      	str	r2, [sp, #148]	; 0x94
 800d056:	f000 8172 	beq.w	800d33e <st_sssa8_ch_convolve+0x71a>
 800d05a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d05c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d05e:	9942      	ldr	r1, [sp, #264]	; 0x108
 800d060:	9340      	str	r3, [sp, #256]	; 0x100
 800d062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d064:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 813e 	beq.w	800d2ea <st_sssa8_ch_convolve+0x6c6>
 800d06e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d070:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800d072:	4259      	negs	r1, r3
 800d074:	2300      	movs	r3, #0
 800d076:	901e      	str	r0, [sp, #120]	; 0x78
 800d078:	b289      	uxth	r1, r1
 800d07a:	9310      	str	r3, [sp, #64]	; 0x40
 800d07c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d080:	910a      	str	r1, [sp, #40]	; 0x28
 800d082:	4619      	mov	r1, r3
 800d084:	2a00      	cmp	r2, #0
 800d086:	d15f      	bne.n	800d148 <st_sssa8_ch_convolve+0x524>
 800d088:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	f040 80cc 	bne.w	800d228 <st_sssa8_ch_convolve+0x604>
 800d090:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800d092:	2001      	movs	r0, #1
 800d094:	3a01      	subs	r2, #1
 800d096:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d09a:	9240      	str	r2, [sp, #256]	; 0x100
 800d09c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d09e:	9a08      	ldr	r2, [sp, #32]
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	da3b      	bge.n	800d11c <st_sssa8_ch_convolve+0x4f8>
 800d0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0a8:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 800d0ac:	fb01 2103 	mla	r1, r1, r3, r2
 800d0b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800d0b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0b6:	930e      	str	r3, [sp, #56]	; 0x38
 800d0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0ba:	4617      	mov	r7, r2
 800d0bc:	1ace      	subs	r6, r1, r3
 800d0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0c0:	42b3      	cmp	r3, r6
 800d0c2:	da25      	bge.n	800d110 <st_sssa8_ch_convolve+0x4ec>
 800d0c4:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 800d0c8:	461c      	mov	r4, r3
 800d0ca:	469c      	mov	ip, r3
 800d0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ce:	fb0b f102 	mul.w	r1, fp, r2
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	bfd8      	it	le
 800d0d6:	f045 0501 	orrle.w	r5, r5, #1
 800d0da:	9709      	str	r7, [sp, #36]	; 0x24
 800d0dc:	910c      	str	r1, [sp, #48]	; 0x30
 800d0de:	462f      	mov	r7, r5
 800d0e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d0e2:	45e3      	cmp	fp, ip
 800d0e4:	4652      	mov	r2, sl
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	bfcc      	ite	gt
 800d0ec:	f04f 0e00 	movgt.w	lr, #0
 800d0f0:	f04f 0e01 	movle.w	lr, #1
 800d0f4:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 800d0f8:	d101      	bne.n	800d0fe <st_sssa8_ch_convolve+0x4da>
 800d0fa:	2f00      	cmp	r7, #0
 800d0fc:	d033      	beq.n	800d166 <st_sssa8_ch_convolve+0x542>
 800d0fe:	f003 fdbf 	bl	8010c80 <st_dsp_arm_fill_q15>
 800d102:	3401      	adds	r4, #1
 800d104:	44c1      	add	r9, r8
 800d106:	b224      	sxth	r4, r4
 800d108:	42b4      	cmp	r4, r6
 800d10a:	46a4      	mov	ip, r4
 800d10c:	dbe9      	blt.n	800d0e2 <st_sssa8_ch_convolve+0x4be>
 800d10e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d110:	3701      	adds	r7, #1
 800d112:	9b08      	ldr	r3, [sp, #32]
 800d114:	b23f      	sxth	r7, r7
 800d116:	429f      	cmp	r7, r3
 800d118:	463a      	mov	r2, r7
 800d11a:	dbd0      	blt.n	800d0be <st_sssa8_ch_convolve+0x49a>
 800d11c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d11e:	454b      	cmp	r3, r9
 800d120:	f000 80ac 	beq.w	800d27c <st_sssa8_ch_convolve+0x658>
 800d124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d126:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d128:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d12a:	4403      	add	r3, r0
 800d12c:	3101      	adds	r1, #1
 800d12e:	461a      	mov	r2, r3
 800d130:	b20b      	sxth	r3, r1
 800d132:	b292      	uxth	r2, r2
 800d134:	9310      	str	r3, [sp, #64]	; 0x40
 800d136:	4619      	mov	r1, r3
 800d138:	920a      	str	r2, [sp, #40]	; 0x28
 800d13a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d13c:	429a      	cmp	r2, r3
 800d13e:	f340 80c0 	ble.w	800d2c2 <st_sssa8_ch_convolve+0x69e>
 800d142:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800d144:	2a00      	cmp	r2, #0
 800d146:	d09f      	beq.n	800d088 <st_sssa8_ch_convolve+0x464>
 800d148:	3a01      	subs	r2, #1
 800d14a:	2001      	movs	r0, #1
 800d14c:	923e      	str	r2, [sp, #248]	; 0xf8
 800d14e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d152:	e7a3      	b.n	800d09c <st_sssa8_ch_convolve+0x478>
 800d154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d156:	eb03 000c 	add.w	r0, r3, ip
 800d15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d15c:	fb0a 3000 	mla	r0, sl, r0, r3
 800d160:	f001 fee6 	bl	800ef30 <st_int8_to16_no_shift>
 800d164:	e6b2      	b.n	800cecc <st_sssa8_ch_convolve+0x2a8>
 800d166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d168:	eb03 000c 	add.w	r0, r3, ip
 800d16c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d16e:	fb0a 3000 	mla	r0, sl, r0, r3
 800d172:	f001 fedd 	bl	800ef30 <st_int8_to16_no_shift>
 800d176:	e7c4      	b.n	800d102 <st_sssa8_ch_convolve+0x4de>
 800d178:	3a01      	subs	r2, #1
 800d17a:	2101      	movs	r1, #1
 800d17c:	923e      	str	r2, [sp, #248]	; 0xf8
 800d17e:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 800d182:	e671      	b.n	800ce68 <st_sssa8_ch_convolve+0x244>
 800d184:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 800d188:	3a01      	subs	r2, #1
 800d18a:	2901      	cmp	r1, #1
 800d18c:	923f      	str	r2, [sp, #252]	; 0xfc
 800d18e:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 800d192:	f43f ae69 	beq.w	800ce68 <st_sssa8_ch_convolve+0x244>
 800d196:	9e08      	ldr	r6, [sp, #32]
 800d198:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d19a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800d19e:	4296      	cmp	r6, r2
 800d1a0:	f77f aea1 	ble.w	800cee6 <st_sssa8_ch_convolve+0x2c2>
 800d1a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800d1a8:	4615      	mov	r5, r2
 800d1aa:	970c      	str	r7, [sp, #48]	; 0x30
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d1b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d1b4:	3501      	adds	r5, #1
 800d1b6:	fb00 400b 	mla	r0, r0, fp, r4
 800d1ba:	9b07      	ldr	r3, [sp, #28]
 800d1bc:	4649      	mov	r1, r9
 800d1be:	b22d      	sxth	r5, r5
 800d1c0:	fb0a 7000 	mla	r0, sl, r0, r7
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	4499      	add	r9, r3
 800d1c8:	f001 feb2 	bl	800ef30 <st_int8_to16_no_shift>
 800d1cc:	42b5      	cmp	r5, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	dbf0      	blt.n	800d1b4 <st_sssa8_ch_convolve+0x590>
 800d1d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800d1d8:	454b      	cmp	r3, r9
 800d1da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d1dc:	f47f ae87 	bne.w	800ceee <st_sssa8_ch_convolve+0x2ca>
 800d1e0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d1e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1e6:	9965      	ldr	r1, [sp, #404]	; 0x194
 800d1e8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d1ea:	9401      	str	r4, [sp, #4]
 800d1ec:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800d1ee:	9305      	str	r3, [sp, #20]
 800d1f0:	9204      	str	r2, [sp, #16]
 800d1f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d1f6:	9103      	str	r1, [sp, #12]
 800d1f8:	9002      	str	r0, [sp, #8]
 800d1fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d1fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d1fe:	9400      	str	r4, [sp, #0]
 800d200:	f002 fef4 	bl	800ffec <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800d204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d206:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d208:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d20a:	440b      	add	r3, r1
 800d20c:	901d      	str	r0, [sp, #116]	; 0x74
 800d20e:	3201      	adds	r2, #1
 800d210:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d214:	b29b      	uxth	r3, r3
 800d216:	b212      	sxth	r2, r2
 800d218:	930a      	str	r3, [sp, #40]	; 0x28
 800d21a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d21c:	4615      	mov	r5, r2
 800d21e:	9210      	str	r2, [sp, #64]	; 0x40
 800d220:	4293      	cmp	r3, r2
 800d222:	f73f ae13 	bgt.w	800ce4c <st_sssa8_ch_convolve+0x228>
 800d226:	e670      	b.n	800cf0a <st_sssa8_ch_convolve+0x2e6>
 800d228:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 800d22c:	3a01      	subs	r2, #1
 800d22e:	2801      	cmp	r0, #1
 800d230:	923f      	str	r2, [sp, #252]	; 0xfc
 800d232:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d236:	f43f af31 	beq.w	800d09c <st_sssa8_ch_convolve+0x478>
 800d23a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d23c:	9f08      	ldr	r7, [sp, #32]
 800d23e:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800d242:	42bb      	cmp	r3, r7
 800d244:	f6bf af6a 	bge.w	800d11c <st_sssa8_ch_convolve+0x4f8>
 800d248:	464e      	mov	r6, r9
 800d24a:	461d      	mov	r5, r3
 800d24c:	4618      	mov	r0, r3
 800d24e:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800d252:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800d256:	3501      	adds	r5, #1
 800d258:	fb00 400b 	mla	r0, r0, fp, r4
 800d25c:	4631      	mov	r1, r6
 800d25e:	9a07      	ldr	r2, [sp, #28]
 800d260:	b22d      	sxth	r5, r5
 800d262:	fb0a 8000 	mla	r0, sl, r0, r8
 800d266:	f001 fe63 	bl	800ef30 <st_int8_to16_no_shift>
 800d26a:	444e      	add	r6, r9
 800d26c:	42bd      	cmp	r5, r7
 800d26e:	4628      	mov	r0, r5
 800d270:	dbf1      	blt.n	800d256 <st_sssa8_ch_convolve+0x632>
 800d272:	46b1      	mov	r9, r6
 800d274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d276:	454b      	cmp	r3, r9
 800d278:	f47f af54 	bne.w	800d124 <st_sssa8_ch_convolve+0x500>
 800d27c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d27e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d280:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d282:	9826      	ldr	r0, [sp, #152]	; 0x98
 800d284:	9204      	str	r2, [sp, #16]
 800d286:	9401      	str	r4, [sp, #4]
 800d288:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	9002      	str	r0, [sp, #8]
 800d28e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d290:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d292:	9400      	str	r4, [sp, #0]
 800d294:	e9dd 1228 	ldrd	r1, r2, [sp, #160]	; 0xa0
 800d298:	9103      	str	r1, [sp, #12]
 800d29a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d29c:	f002 fea6 	bl	800ffec <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800d2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2a6:	440b      	add	r3, r1
 800d2a8:	901e      	str	r0, [sp, #120]	; 0x78
 800d2aa:	3201      	adds	r2, #1
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	b212      	sxth	r2, r2
 800d2b0:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	9210      	str	r2, [sp, #64]	; 0x40
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	dd16      	ble.n	800d2ea <st_sssa8_ch_convolve+0x6c6>
 800d2bc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d2c0:	e73f      	b.n	800d142 <st_sssa8_ch_convolve+0x51e>
 800d2c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d2c4:	4589      	cmp	r9, r1
 800d2c6:	d010      	beq.n	800d2ea <st_sssa8_ch_convolve+0x6c6>
 800d2c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d2ca:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d2cc:	9204      	str	r2, [sp, #16]
 800d2ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2d0:	9401      	str	r4, [sp, #4]
 800d2d2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d2d4:	9305      	str	r3, [sp, #20]
 800d2d6:	9400      	str	r4, [sp, #0]
 800d2d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2da:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 800d2de:	9003      	str	r0, [sp, #12]
 800d2e0:	9826      	ldr	r0, [sp, #152]	; 0x98
 800d2e2:	9002      	str	r0, [sp, #8]
 800d2e4:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d2e6:	f003 f99b 	bl	8010620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800d2ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d2ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	4410      	add	r0, r2
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	932a      	str	r3, [sp, #168]	; 0xa8
 800d2fc:	9023      	str	r0, [sp, #140]	; 0x8c
 800d2fe:	bf28      	it	cs
 800d300:	461a      	movcs	r2, r3
 800d302:	b294      	uxth	r4, r2
 800d304:	b90c      	cbnz	r4, 800d30a <st_sssa8_ch_convolve+0x6e6>
 800d306:	9418      	str	r4, [sp, #96]	; 0x60
 800d308:	e69e      	b.n	800d048 <st_sssa8_ch_convolve+0x424>
 800d30a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d30c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800d30e:	4619      	mov	r1, r3
 800d310:	009d      	lsls	r5, r3, #2
 800d312:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800d314:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800d318:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800d31a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d31c:	442e      	add	r6, r5
 800d31e:	9126      	str	r1, [sp, #152]	; 0x98
 800d320:	fb02 0003 	mla	r0, r2, r3, r0
 800d324:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d326:	9629      	str	r6, [sp, #164]	; 0xa4
 800d328:	4623      	mov	r3, r4
 800d32a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800d32c:	902d      	str	r0, [sp, #180]	; 0xb4
 800d32e:	442e      	add	r6, r5
 800d330:	9628      	str	r6, [sp, #160]	; 0xa0
 800d332:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800d334:	442e      	add	r6, r5
 800d336:	9627      	str	r6, [sp, #156]	; 0x9c
 800d338:	f001 fe9c 	bl	800f074 <st_int8_to16_dual>
 800d33c:	e7e3      	b.n	800d306 <st_sssa8_ch_convolve+0x6e2>
 800d33e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800d340:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d342:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d344:	440b      	add	r3, r1
 800d346:	3201      	adds	r2, #1
 800d348:	b29b      	uxth	r3, r3
 800d34a:	b212      	sxth	r2, r2
 800d34c:	932f      	str	r3, [sp, #188]	; 0xbc
 800d34e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d350:	4614      	mov	r4, r2
 800d352:	9230      	str	r2, [sp, #192]	; 0xc0
 800d354:	4293      	cmp	r3, r2
 800d356:	f73f ae4c 	bgt.w	800cff2 <st_sssa8_ch_convolve+0x3ce>
 800d35a:	2000      	movs	r0, #0
 800d35c:	b053      	add	sp, #332	; 0x14c
 800d35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d362:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0f8      	beq.n	800d35a <st_sssa8_ch_convolve+0x736>
 800d368:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d36a:	2400      	movs	r4, #0
 800d36c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d372:	fb00 f109 	mul.w	r1, r0, r9
 800d376:	fb00 f303 	mul.w	r3, r0, r3
 800d37a:	9807      	ldr	r0, [sp, #28]
 800d37c:	4252      	negs	r2, r2
 800d37e:	9116      	str	r1, [sp, #88]	; 0x58
 800d380:	1a28      	subs	r0, r5, r0
 800d382:	941c      	str	r4, [sp, #112]	; 0x70
 800d384:	901d      	str	r0, [sp, #116]	; 0x74
 800d386:	fa0f f08b 	sxth.w	r0, fp
 800d38a:	901e      	str	r0, [sp, #120]	; 0x78
 800d38c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d38e:	fb0a 0303 	mla	r3, sl, r3, r0
 800d392:	4683      	mov	fp, r0
 800d394:	9313      	str	r3, [sp, #76]	; 0x4c
 800d396:	004b      	lsls	r3, r1, #1
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	b293      	uxth	r3, r2
 800d39c:	9318      	str	r3, [sp, #96]	; 0x60
 800d39e:	a83e      	add	r0, sp, #248	; 0xf8
 800d3a0:	f001 f99a 	bl	800e6d8 <ai_padding_opt_phase1>
 800d3a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d070      	beq.n	800d48c <st_sssa8_ch_convolve+0x868>
 800d3aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d3ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d3ae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 800d3b2:	1a99      	subs	r1, r3, r2
 800d3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3b6:	9012      	str	r0, [sp, #72]	; 0x48
 800d3b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d3ba:	425a      	negs	r2, r3
 800d3bc:	2300      	movs	r3, #0
 800d3be:	fb00 1104 	mla	r1, r0, r4, r1
 800d3c2:	b292      	uxth	r2, r2
 800d3c4:	9310      	str	r3, [sp, #64]	; 0x40
 800d3c6:	9108      	str	r1, [sp, #32]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	920a      	str	r2, [sp, #40]	; 0x28
 800d3cc:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800d3ce:	2a00      	cmp	r2, #0
 800d3d0:	f040 8102 	bne.w	800d5d8 <st_sssa8_ch_convolve+0x9b4>
 800d3d4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	f040 8104 	bne.w	800d5e4 <st_sssa8_ch_convolve+0x9c0>
 800d3dc:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800d3de:	2001      	movs	r0, #1
 800d3e0:	3a01      	subs	r2, #1
 800d3e2:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d3e6:	9240      	str	r2, [sp, #256]	; 0x100
 800d3e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3ea:	9a08      	ldr	r2, [sp, #32]
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	da3b      	bge.n	800d468 <st_sssa8_ch_convolve+0x844>
 800d3f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d3f4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800d3f6:	fb01 2103 	mla	r1, r1, r3, r2
 800d3fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800d3fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d400:	930e      	str	r3, [sp, #56]	; 0x38
 800d402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d404:	1a8d      	subs	r5, r1, r2
 800d406:	461e      	mov	r6, r3
 800d408:	461a      	mov	r2, r3
 800d40a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d40c:	42a9      	cmp	r1, r5
 800d40e:	da25      	bge.n	800d45c <st_sssa8_ch_convolve+0x838>
 800d410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d412:	460c      	mov	r4, r1
 800d414:	9609      	str	r6, [sp, #36]	; 0x24
 800d416:	468c      	mov	ip, r1
 800d418:	4293      	cmp	r3, r2
 800d41a:	fb02 f208 	mul.w	r2, r2, r8
 800d41e:	bfcc      	ite	gt
 800d420:	2300      	movgt	r3, #0
 800d422:	2301      	movle	r3, #1
 800d424:	920c      	str	r2, [sp, #48]	; 0x30
 800d426:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800d42a:	461e      	mov	r6, r3
 800d42c:	45e0      	cmp	r8, ip
 800d42e:	464a      	mov	r2, r9
 800d430:	4659      	mov	r1, fp
 800d432:	4638      	mov	r0, r7
 800d434:	bfcc      	ite	gt
 800d436:	f04f 0e00 	movgt.w	lr, #0
 800d43a:	f04f 0e01 	movle.w	lr, #1
 800d43e:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 800d442:	d102      	bne.n	800d44a <st_sssa8_ch_convolve+0x826>
 800d444:	2e00      	cmp	r6, #0
 800d446:	f000 80be 	beq.w	800d5c6 <st_sssa8_ch_convolve+0x9a2>
 800d44a:	f003 fc19 	bl	8010c80 <st_dsp_arm_fill_q15>
 800d44e:	3401      	adds	r4, #1
 800d450:	44d3      	add	fp, sl
 800d452:	b224      	sxth	r4, r4
 800d454:	42ac      	cmp	r4, r5
 800d456:	46a4      	mov	ip, r4
 800d458:	dbe8      	blt.n	800d42c <st_sssa8_ch_convolve+0x808>
 800d45a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d45c:	3601      	adds	r6, #1
 800d45e:	9b08      	ldr	r3, [sp, #32]
 800d460:	b236      	sxth	r6, r6
 800d462:	429e      	cmp	r6, r3
 800d464:	4632      	mov	r2, r6
 800d466:	dbd0      	blt.n	800d40a <st_sssa8_ch_convolve+0x7e6>
 800d468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d46a:	455b      	cmp	r3, fp
 800d46c:	f000 80ea 	beq.w	800d644 <st_sssa8_ch_convolve+0xa20>
 800d470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d472:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d474:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d476:	4403      	add	r3, r0
 800d478:	3101      	adds	r1, #1
 800d47a:	461a      	mov	r2, r3
 800d47c:	b20b      	sxth	r3, r1
 800d47e:	b292      	uxth	r2, r2
 800d480:	9310      	str	r3, [sp, #64]	; 0x40
 800d482:	4619      	mov	r1, r3
 800d484:	920a      	str	r2, [sp, #40]	; 0x28
 800d486:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d488:	429a      	cmp	r2, r3
 800d48a:	dc9f      	bgt.n	800d3cc <st_sssa8_ch_convolve+0x7a8>
 800d48c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d48e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d490:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d492:	4403      	add	r3, r0
 800d494:	3101      	adds	r1, #1
 800d496:	461a      	mov	r2, r3
 800d498:	b20b      	sxth	r3, r1
 800d49a:	b292      	uxth	r2, r2
 800d49c:	931c      	str	r3, [sp, #112]	; 0x70
 800d49e:	461c      	mov	r4, r3
 800d4a0:	9218      	str	r2, [sp, #96]	; 0x60
 800d4a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	f73f af7a 	bgt.w	800d39e <st_sssa8_ch_convolve+0x77a>
 800d4aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4ac:	455a      	cmp	r2, fp
 800d4ae:	f43f af54 	beq.w	800d35a <st_sssa8_ch_convolve+0x736>
 800d4b2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	f43f af50 	beq.w	800d35a <st_sssa8_ch_convolve+0x736>
 800d4ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4bc:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d4be:	1f1d      	subs	r5, r3, #4
 800d4c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4c2:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 800d4c6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d4c8:	1e9e      	subs	r6, r3, #2
 800d4ca:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d4cc:	f1a4 0b04 	sub.w	fp, r4, #4
 800d4d0:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 800d4d2:	f1a3 0904 	sub.w	r9, r3, #4
 800d4d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d4da:	4421      	add	r1, r4
 800d4dc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	f000 0803 	and.w	r8, r0, #3
 800d4e6:	9108      	str	r1, [sp, #32]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800d6e4 <st_sssa8_ch_convolve+0xac0>
 800d4ee:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 800d4f0:	0099      	lsls	r1, r3, #2
 800d4f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4f8:	9109      	str	r1, [sp, #36]	; 0x24
 800d4fa:	9307      	str	r3, [sp, #28]
 800d4fc:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800d500:	2a00      	cmp	r2, #0
 800d502:	d05e      	beq.n	800d5c2 <st_sssa8_ch_convolve+0x99e>
 800d504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d506:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800d50a:	eb07 0a02 	add.w	sl, r7, r2
 800d50e:	f857 2b04 	ldr.w	r2, [r7], #4
 800d512:	fa2f f482 	sxtb16	r4, r2
 800d516:	b2a0      	uxth	r0, r4
 800d518:	f8de 1000 	ldr.w	r1, [lr]
 800d51c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800d520:	fa2f f282 	sxtb16	r2, r2
 800d524:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d528:	fb20 3101 	smlad	r1, r0, r1, r3
 800d52c:	ea02 030c 	and.w	r3, r2, ip
 800d530:	f10e 0e08 	add.w	lr, lr, #8
 800d534:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 800d538:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800d53c:	fb23 1302 	smlad	r3, r3, r2, r1
 800d540:	4557      	cmp	r7, sl
 800d542:	d1e4      	bne.n	800d50e <st_sssa8_ch_convolve+0x8ea>
 800d544:	9a07      	ldr	r2, [sp, #28]
 800d546:	f1b8 0f00 	cmp.w	r8, #0
 800d54a:	d017      	beq.n	800d57c <st_sssa8_ch_convolve+0x958>
 800d54c:	f997 1000 	ldrsb.w	r1, [r7]
 800d550:	f1b8 0f01 	cmp.w	r8, #1
 800d554:	8810      	ldrh	r0, [r2, #0]
 800d556:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d55a:	f000 80ab 	beq.w	800d6b4 <st_sssa8_ch_convolve+0xa90>
 800d55e:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d562:	f1b8 0f02 	cmp.w	r8, #2
 800d566:	8850      	ldrh	r0, [r2, #2]
 800d568:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d56c:	f000 80b7 	beq.w	800d6de <st_sssa8_ch_convolve+0xaba>
 800d570:	8891      	ldrh	r1, [r2, #4]
 800d572:	3703      	adds	r7, #3
 800d574:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 800d578:	fb11 3302 	smlabb	r3, r1, r2, r3
 800d57c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800d57e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
 800d582:	3201      	adds	r2, #1
 800d584:	f859 4f04 	ldr.w	r4, [r9, #4]!
 800d588:	2915      	cmp	r1, #21
 800d58a:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 800d58e:	9269      	str	r2, [sp, #420]	; 0x1a4
 800d590:	dd7a      	ble.n	800d688 <st_sssa8_ch_convolve+0xa64>
 800d592:	1e8a      	subs	r2, r1, #2
 800d594:	f04f 0e01 	mov.w	lr, #1
 800d598:	3901      	subs	r1, #1
 800d59a:	fa0e f202 	lsl.w	r2, lr, r2
 800d59e:	fb53 2304 	smmla	r3, r3, r4, r2
 800d5a2:	410b      	asrs	r3, r1
 800d5a4:	4403      	add	r3, r0
 800d5a6:	f303 0307 	ssat	r3, #8, r3
 800d5aa:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 800d5ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d5b0:	9b08      	ldr	r3, [sp, #32]
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	f43f aed1 	beq.w	800d35a <st_sssa8_ch_convolve+0x736>
 800d5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ba:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800d5be:	2a00      	cmp	r2, #0
 800d5c0:	d1a0      	bne.n	800d504 <st_sssa8_ch_convolve+0x8e0>
 800d5c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5c4:	e7bf      	b.n	800d546 <st_sssa8_ch_convolve+0x922>
 800d5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5c8:	eb03 000c 	add.w	r0, r3, ip
 800d5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ce:	fb09 3000 	mla	r0, r9, r0, r3
 800d5d2:	f001 fcad 	bl	800ef30 <st_int8_to16_no_shift>
 800d5d6:	e73a      	b.n	800d44e <st_sssa8_ch_convolve+0x82a>
 800d5d8:	3a01      	subs	r2, #1
 800d5da:	2001      	movs	r0, #1
 800d5dc:	923e      	str	r2, [sp, #248]	; 0xf8
 800d5de:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d5e2:	e701      	b.n	800d3e8 <st_sssa8_ch_convolve+0x7c4>
 800d5e4:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 800d5e8:	3a01      	subs	r2, #1
 800d5ea:	2801      	cmp	r0, #1
 800d5ec:	923f      	str	r2, [sp, #252]	; 0xfc
 800d5ee:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 800d5f2:	f43f aef9 	beq.w	800d3e8 <st_sssa8_ch_convolve+0x7c4>
 800d5f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5f8:	9f08      	ldr	r7, [sp, #32]
 800d5fa:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800d5fe:	42bb      	cmp	r3, r7
 800d600:	f6bf af32 	bge.w	800d468 <st_sssa8_ch_convolve+0x844>
 800d604:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d608:	461d      	mov	r5, r3
 800d60a:	46ca      	mov	sl, r9
 800d60c:	4618      	mov	r0, r3
 800d60e:	46c1      	mov	r9, r8
 800d610:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800d612:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800d616:	3501      	adds	r5, #1
 800d618:	fb00 4009 	mla	r0, r0, r9, r4
 800d61c:	9b07      	ldr	r3, [sp, #28]
 800d61e:	4659      	mov	r1, fp
 800d620:	b22d      	sxth	r5, r5
 800d622:	fb0a 8000 	mla	r0, sl, r0, r8
 800d626:	4632      	mov	r2, r6
 800d628:	449b      	add	fp, r3
 800d62a:	f001 fc81 	bl	800ef30 <st_int8_to16_no_shift>
 800d62e:	42bd      	cmp	r5, r7
 800d630:	4628      	mov	r0, r5
 800d632:	dbf0      	blt.n	800d616 <st_sssa8_ch_convolve+0x9f2>
 800d634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d636:	46c8      	mov	r8, r9
 800d638:	46d1      	mov	r9, sl
 800d63a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d63e:	455b      	cmp	r3, fp
 800d640:	f47f af16 	bne.w	800d470 <st_sssa8_ch_convolve+0x84c>
 800d644:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800d646:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d648:	9965      	ldr	r1, [sp, #404]	; 0x194
 800d64a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d64c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d64e:	9304      	str	r3, [sp, #16]
 800d650:	9203      	str	r2, [sp, #12]
 800d652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d654:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d656:	9102      	str	r1, [sp, #8]
 800d658:	9001      	str	r0, [sp, #4]
 800d65a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d65c:	985c      	ldr	r0, [sp, #368]	; 0x170
 800d65e:	9400      	str	r4, [sp, #0]
 800d660:	f001 f882 	bl	800e768 <st_sssa8_ch_nn_mat_mult_kernel>
 800d664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d666:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d668:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d66a:	440b      	add	r3, r1
 800d66c:	9069      	str	r0, [sp, #420]	; 0x1a4
 800d66e:	3201      	adds	r2, #1
 800d670:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800d674:	b29b      	uxth	r3, r3
 800d676:	b212      	sxth	r2, r2
 800d678:	930a      	str	r3, [sp, #40]	; 0x28
 800d67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d67c:	4611      	mov	r1, r2
 800d67e:	9210      	str	r2, [sp, #64]	; 0x40
 800d680:	4293      	cmp	r3, r2
 800d682:	f73f aea3 	bgt.w	800d3cc <st_sssa8_ch_convolve+0x7a8>
 800d686:	e701      	b.n	800d48c <st_sssa8_ch_convolve+0x868>
 800d688:	2900      	cmp	r1, #0
 800d68a:	dd15      	ble.n	800d6b8 <st_sssa8_ch_convolve+0xa94>
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	fb53 0304 	smmla	r3, r3, r4, r0
 800d692:	fa43 f101 	asr.w	r1, r3, r1
 800d696:	f301 0307 	ssat	r3, #8, r1
 800d69a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d69e:	e787      	b.n	800d5b0 <st_sssa8_ch_convolve+0x98c>
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	985c      	ldr	r0, [sp, #368]	; 0x170
 800d6a4:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 800d6a8:	f001 fce4 	bl	800f074 <st_int8_to16_dual>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6b0:	f7ff bb46 	b.w	800cd40 <st_sssa8_ch_convolve+0x11c>
 800d6b4:	3701      	adds	r7, #1
 800d6b6:	e761      	b.n	800d57c <st_sssa8_ch_convolve+0x958>
 800d6b8:	f1c1 0101 	rsb	r1, r1, #1
 800d6bc:	408b      	lsls	r3, r1
 800d6be:	f303 031f 	ssat	r3, #32, r3
 800d6c2:	fb53 f314 	smmulr	r3, r3, r4
 800d6c6:	4403      	add	r3, r0
 800d6c8:	f303 0307 	ssat	r3, #8, r3
 800d6cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6d0:	e76e      	b.n	800d5b0 <st_sssa8_ch_convolve+0x98c>
 800d6d2:	4615      	mov	r5, r2
 800d6d4:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800d6d8:	463e      	mov	r6, r7
 800d6da:	f7ff baff 	b.w	800ccdc <st_sssa8_ch_convolve+0xb8>
 800d6de:	3702      	adds	r7, #2
 800d6e0:	e74c      	b.n	800d57c <st_sssa8_ch_convolve+0x958>
 800d6e2:	bf00      	nop
 800d6e4:	ffff0000 	.word	0xffff0000

0800d6e8 <st_sssa8_ch_convolve_rgb>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	b0cb      	sub	sp, #300	; 0x12c
 800d6ee:	468b      	mov	fp, r1
 800d6f0:	2a03      	cmp	r2, #3
 800d6f2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d6f4:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 800d6f8:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 800d6fc:	9310      	str	r3, [sp, #64]	; 0x40
 800d6fe:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 800d702:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 800d706:	930a      	str	r3, [sp, #40]	; 0x28
 800d708:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 800d70c:	9115      	str	r1, [sp, #84]	; 0x54
 800d70e:	931d      	str	r3, [sp, #116]	; 0x74
 800d710:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 800d714:	940f      	str	r4, [sp, #60]	; 0x3c
 800d716:	930e      	str	r3, [sp, #56]	; 0x38
 800d718:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 800d71a:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 800d71e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 800d720:	f040 83ed 	bne.w	800defe <st_sssa8_ch_convolve_rgb+0x816>
 800d724:	4606      	mov	r6, r0
 800d726:	4608      	mov	r0, r1
 800d728:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d72c:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 800d730:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 800d734:	fb14 f304 	smulbb	r3, r4, r4
 800d738:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800d73c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800d740:	9711      	str	r7, [sp, #68]	; 0x44
 800d742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d746:	9221      	str	r2, [sp, #132]	; 0x84
 800d748:	4442      	add	r2, r8
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	9222      	str	r2, [sp, #136]	; 0x88
 800d74e:	9316      	str	r3, [sp, #88]	; 0x58
 800d750:	2800      	cmp	r0, #0
 800d752:	f000 83d1 	beq.w	800def8 <st_sssa8_ch_convolve_rgb+0x810>
 800d756:	0047      	lsls	r7, r0, #1
 800d758:	4629      	mov	r1, r5
 800d75a:	1f14      	subs	r4, r2, #4
 800d75c:	f04f 0c01 	mov.w	ip, #1
 800d760:	443d      	add	r5, r7
 800d762:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800d766:	1e5a      	subs	r2, r3, #1
 800d768:	fa0c f003 	lsl.w	r0, ip, r3
 800d76c:	fa0e f303 	lsl.w	r3, lr, r3
 800d770:	b292      	uxth	r2, r2
 800d772:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800d776:	2a14      	cmp	r2, #20
 800d778:	f200 81e4 	bhi.w	800db44 <st_sssa8_ch_convolve_rgb+0x45c>
 800d77c:	428d      	cmp	r5, r1
 800d77e:	f844 3f04 	str.w	r3, [r4, #4]!
 800d782:	d1ee      	bne.n	800d762 <st_sssa8_ch_convolve_rgb+0x7a>
 800d784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d786:	eb03 0408 	add.w	r4, r3, r8
 800d78a:	1bed      	subs	r5, r5, r7
 800d78c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d78e:	a932      	add	r1, sp, #200	; 0xc8
 800d790:	ab2e      	add	r3, sp, #184	; 0xb8
 800d792:	9523      	str	r5, [sp, #140]	; 0x8c
 800d794:	aa2a      	add	r2, sp, #168	; 0xa8
 800d796:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d798:	a836      	add	r0, sp, #216	; 0xd8
 800d79a:	9744      	str	r7, [sp, #272]	; 0x110
 800d79c:	9745      	str	r7, [sp, #276]	; 0x114
 800d79e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d7a0:	9100      	str	r1, [sp, #0]
 800d7a2:	a940      	add	r1, sp, #256	; 0x100
 800d7a4:	9742      	str	r7, [sp, #264]	; 0x108
 800d7a6:	9743      	str	r7, [sp, #268]	; 0x10c
 800d7a8:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 800d7ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d7ae:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 800d7b2:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 800d7b6:	f000 ff35 	bl	800e624 <ai_padding_opt_init>
 800d7ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d7bc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800d7c0:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	fb02 f200 	mul.w	r2, r2, r0
 800d7ca:	fb05 f303 	mul.w	r3, r5, r3
 800d7ce:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 800d7d2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d7d8:	f340 8384 	ble.w	800dee4 <st_sssa8_ch_convolve_rgb+0x7fc>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4602      	mov	r2, r0
 800d7e0:	9328      	str	r3, [sp, #160]	; 0xa0
 800d7e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d7e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d7ec:	f023 0301 	bic.w	r3, r3, #1
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	bf28      	it	cs
 800d7f4:	4613      	movcs	r3, r2
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	9324      	str	r3, [sp, #144]	; 0x90
 800d7fa:	f240 81ae 	bls.w	800db5a <st_sssa8_ch_convolve_rgb+0x472>
 800d7fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 800d800:	4613      	mov	r3, r2
 800d802:	fbb2 f2f1 	udiv	r2, r2, r1
 800d806:	fb01 3312 	mls	r3, r1, r2, r3
 800d80a:	b292      	uxth	r2, r2
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	9229      	str	r2, [sp, #164]	; 0xa4
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 819d 	bne.w	800db50 <st_sssa8_ch_convolve_rgb+0x468>
 800d816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 818b 	beq.w	800db34 <st_sssa8_ch_convolve_rgb+0x44c>
 800d81e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d820:	2500      	movs	r5, #0
 800d822:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d824:	4253      	negs	r3, r2
 800d826:	4f99      	ldr	r7, [pc, #612]	; (800da8c <st_sssa8_ch_convolve_rgb+0x3a4>)
 800d828:	1a8a      	subs	r2, r1, r2
 800d82a:	9527      	str	r5, [sp, #156]	; 0x9c
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	9226      	str	r2, [sp, #152]	; 0x98
 800d830:	931e      	str	r3, [sp, #120]	; 0x78
 800d832:	9325      	str	r3, [sp, #148]	; 0x94
 800d834:	a836      	add	r0, sp, #216	; 0xd8
 800d836:	f000 ff4f 	bl	800e6d8 <ai_padding_opt_phase1>
 800d83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d83c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d83e:	fb05 f303 	mul.w	r3, r5, r3
 800d842:	995d      	ldr	r1, [sp, #372]	; 0x174
 800d844:	fb02 1303 	mla	r3, r2, r3, r1
 800d848:	9314      	str	r3, [sp, #80]	; 0x50
 800d84a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d84c:	b92b      	cbnz	r3, 800d85a <st_sssa8_ch_convolve_rgb+0x172>
 800d84e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d850:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d852:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d854:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d856:	f001 fc0d 	bl	800f074 <st_int8_to16_dual>
 800d85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d85c:	46d9      	mov	r9, fp
 800d85e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d860:	46b2      	mov	sl, r6
 800d862:	fb03 2505 	mla	r5, r3, r5, r2
 800d866:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d86a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d86c:	46ab      	mov	fp, r5
 800d86e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d870:	9317      	str	r3, [sp, #92]	; 0x5c
 800d872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d874:	931c      	str	r3, [sp, #112]	; 0x70
 800d876:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d878:	9312      	str	r3, [sp, #72]	; 0x48
 800d87a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d87c:	9320      	str	r3, [sp, #128]	; 0x80
 800d87e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d880:	931b      	str	r3, [sp, #108]	; 0x6c
 800d882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d884:	931a      	str	r3, [sp, #104]	; 0x68
 800d886:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d888:	9318      	str	r3, [sp, #96]	; 0x60
 800d88a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800d88c:	9319      	str	r3, [sp, #100]	; 0x64
 800d88e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d896:	b292      	uxth	r2, r2
 800d898:	429a      	cmp	r2, r3
 800d89a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d89c:	f000 813a 	beq.w	800db14 <st_sssa8_ch_convolve_rgb+0x42c>
 800d8a0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800d8a2:	2600      	movs	r6, #0
 800d8a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d8a6:	9238      	str	r2, [sp, #224]	; 0xe0
 800d8a8:	464a      	mov	r2, r9
 800d8aa:	9306      	str	r3, [sp, #24]
 800d8ac:	46d9      	mov	r9, fp
 800d8ae:	9609      	str	r6, [sp, #36]	; 0x24
 800d8b0:	4693      	mov	fp, r2
 800d8b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8b4:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 800d8b8:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 800d8bc:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d8be:	9113      	str	r1, [sp, #76]	; 0x4c
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d17b      	bne.n	800d9bc <st_sssa8_ch_convolve_rgb+0x2d4>
 800d8c4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	d17e      	bne.n	800d9c8 <st_sssa8_ch_convolve_rgb+0x2e0>
 800d8ca:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	3a01      	subs	r2, #1
 800d8d0:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 800d8d4:	9238      	str	r2, [sp, #224]	; 0xe0
 800d8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8d8:	4591      	cmp	r9, r2
 800d8da:	dd5c      	ble.n	800d996 <st_sssa8_ch_convolve_rgb+0x2ae>
 800d8dc:	4610      	mov	r0, r2
 800d8de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d8e4:	4686      	mov	lr, r0
 800d8e6:	fb06 1102 	mla	r1, r6, r2, r1
 800d8ea:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800d8ee:	f8cd 9020 	str.w	r9, [sp, #32]
 800d8f2:	1b09      	subs	r1, r1, r4
 800d8f4:	4691      	mov	r9, r2
 800d8f6:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 800d8fa:	468c      	mov	ip, r1
 800d8fc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800d900:	45cc      	cmp	ip, r9
 800d902:	dd3d      	ble.n	800d980 <st_sssa8_ch_convolve_rgb+0x298>
 800d904:	fb00 f20b 	mul.w	r2, r0, fp
 800d908:	ea4f 71de 	mov.w	r1, lr, lsr #31
 800d90c:	4698      	mov	r8, r3
 800d90e:	9207      	str	r2, [sp, #28]
 800d910:	4583      	cmp	fp, r0
 800d912:	bfd8      	it	le
 800d914:	f041 0101 	orrle.w	r1, r1, #1
 800d918:	464a      	mov	r2, r9
 800d91a:	4648      	mov	r0, r9
 800d91c:	4583      	cmp	fp, r0
 800d91e:	f102 0601 	add.w	r6, r2, #1
 800d922:	f103 0306 	add.w	r3, r3, #6
 800d926:	bfcc      	ite	gt
 800d928:	2500      	movgt	r5, #0
 800d92a:	2501      	movle	r5, #1
 800d92c:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 800d930:	d100      	bne.n	800d934 <st_sssa8_ch_convolve_rgb+0x24c>
 800d932:	b159      	cbz	r1, 800d94c <st_sssa8_ch_convolve_rgb+0x264>
 800d934:	b232      	sxth	r2, r6
 800d936:	f823 4c04 	strh.w	r4, [r3, #-4]
 800d93a:	f823 4c02 	strh.w	r4, [r3, #-2]
 800d93e:	4562      	cmp	r2, ip
 800d940:	f823 4c06 	strh.w	r4, [r3, #-6]
 800d944:	4610      	mov	r0, r2
 800d946:	da1b      	bge.n	800d980 <st_sssa8_ch_convolve_rgb+0x298>
 800d948:	4698      	mov	r8, r3
 800d94a:	e7e7      	b.n	800d91c <st_sssa8_ch_convolve_rgb+0x234>
 800d94c:	9d07      	ldr	r5, [sp, #28]
 800d94e:	3201      	adds	r2, #1
 800d950:	4428      	add	r0, r5
 800d952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d954:	b212      	sxth	r2, r2
 800d956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d95a:	4562      	cmp	r2, ip
 800d95c:	5828      	ldr	r0, [r5, r0]
 800d95e:	fa2f f680 	sxtb16	r6, r0
 800d962:	ea4f 2530 	mov.w	r5, r0, ror #8
 800d966:	ea06 0a07 	and.w	sl, r6, r7
 800d96a:	fa2f f585 	sxtb16	r5, r5
 800d96e:	b2ad      	uxth	r5, r5
 800d970:	4610      	mov	r0, r2
 800d972:	ea45 050a 	orr.w	r5, r5, sl
 800d976:	f8c8 5002 	str.w	r5, [r8, #2]
 800d97a:	f823 6c06 	strh.w	r6, [r3, #-6]
 800d97e:	dbe3      	blt.n	800d948 <st_sssa8_ch_convolve_rgb+0x260>
 800d980:	f10e 0e01 	add.w	lr, lr, #1
 800d984:	9a08      	ldr	r2, [sp, #32]
 800d986:	fa0f fe8e 	sxth.w	lr, lr
 800d98a:	4596      	cmp	lr, r2
 800d98c:	4670      	mov	r0, lr
 800d98e:	dbb7      	blt.n	800d900 <st_sssa8_ch_convolve_rgb+0x218>
 800d990:	4691      	mov	r9, r2
 800d992:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d998:	429a      	cmp	r2, r3
 800d99a:	d055      	beq.n	800da48 <st_sssa8_ch_convolve_rgb+0x360>
 800d99c:	9a06      	ldr	r2, [sp, #24]
 800d99e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9a2:	4402      	add	r2, r0
 800d9a4:	3101      	adds	r1, #1
 800d9a6:	b292      	uxth	r2, r2
 800d9a8:	b209      	sxth	r1, r1
 800d9aa:	9206      	str	r2, [sp, #24]
 800d9ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9ae:	460e      	mov	r6, r1
 800d9b0:	9109      	str	r1, [sp, #36]	; 0x24
 800d9b2:	428a      	cmp	r2, r1
 800d9b4:	dd6c      	ble.n	800da90 <st_sssa8_ch_convolve_rgb+0x3a8>
 800d9b6:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d083      	beq.n	800d8c4 <st_sssa8_ch_convolve_rgb+0x1dc>
 800d9bc:	3801      	subs	r0, #1
 800d9be:	2201      	movs	r2, #1
 800d9c0:	9036      	str	r0, [sp, #216]	; 0xd8
 800d9c2:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800d9c6:	e786      	b.n	800d8d6 <st_sssa8_ch_convolve_rgb+0x1ee>
 800d9c8:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 800d9cc:	3a01      	subs	r2, #1
 800d9ce:	2901      	cmp	r1, #1
 800d9d0:	9237      	str	r2, [sp, #220]	; 0xdc
 800d9d2:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 800d9d6:	f43f af7e 	beq.w	800d8d6 <st_sssa8_ch_convolve_rgb+0x1ee>
 800d9da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9dc:	4591      	cmp	r9, r2
 800d9de:	ddda      	ble.n	800d996 <st_sssa8_ch_convolve_rgb+0x2ae>
 800d9e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9e2:	4694      	mov	ip, r2
 800d9e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d9e6:	4615      	mov	r5, r2
 800d9e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9ea:	fb06 0601 	mla	r6, r6, r1, r0
 800d9ee:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 800d9f2:	1ab6      	subs	r6, r6, r2
 800d9f4:	4576      	cmp	r6, lr
 800d9f6:	dd1d      	ble.n	800da34 <st_sssa8_ch_convolve_rgb+0x34c>
 800d9f8:	fb05 f40b 	mul.w	r4, r5, fp
 800d9fc:	4670      	mov	r0, lr
 800d9fe:	4675      	mov	r5, lr
 800da00:	4425      	add	r5, r4
 800da02:	3001      	adds	r0, #1
 800da04:	3306      	adds	r3, #6
 800da06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da0a:	b200      	sxth	r0, r0
 800da0c:	f85a 2005 	ldr.w	r2, [sl, r5]
 800da10:	fa2f f182 	sxtb16	r1, r2
 800da14:	ea4f 2232 	mov.w	r2, r2, ror #8
 800da18:	ea01 0807 	and.w	r8, r1, r7
 800da1c:	fa2f f282 	sxtb16	r2, r2
 800da20:	b292      	uxth	r2, r2
 800da22:	42b0      	cmp	r0, r6
 800da24:	f823 1c06 	strh.w	r1, [r3, #-6]
 800da28:	4605      	mov	r5, r0
 800da2a:	ea42 0208 	orr.w	r2, r2, r8
 800da2e:	f843 2c04 	str.w	r2, [r3, #-4]
 800da32:	dbe5      	blt.n	800da00 <st_sssa8_ch_convolve_rgb+0x318>
 800da34:	f10c 0c01 	add.w	ip, ip, #1
 800da38:	fa0f fc8c 	sxth.w	ip, ip
 800da3c:	45cc      	cmp	ip, r9
 800da3e:	4665      	mov	r5, ip
 800da40:	dbd8      	blt.n	800d9f4 <st_sssa8_ch_convolve_rgb+0x30c>
 800da42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da44:	429a      	cmp	r2, r3
 800da46:	d1a9      	bne.n	800d99c <st_sssa8_ch_convolve_rgb+0x2b4>
 800da48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800da4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800da4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da4e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800da50:	9204      	str	r2, [sp, #16]
 800da52:	9401      	str	r4, [sp, #4]
 800da54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800da56:	9305      	str	r3, [sp, #20]
 800da58:	9002      	str	r0, [sp, #8]
 800da5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da5e:	9400      	str	r4, [sp, #0]
 800da60:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 800da64:	9103      	str	r1, [sp, #12]
 800da66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da68:	f002 fac0 	bl	800ffec <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800da6c:	9b06      	ldr	r3, [sp, #24]
 800da6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da72:	440b      	add	r3, r1
 800da74:	9013      	str	r0, [sp, #76]	; 0x4c
 800da76:	3201      	adds	r2, #1
 800da78:	b29b      	uxth	r3, r3
 800da7a:	b212      	sxth	r2, r2
 800da7c:	9306      	str	r3, [sp, #24]
 800da7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da80:	4616      	mov	r6, r2
 800da82:	9209      	str	r2, [sp, #36]	; 0x24
 800da84:	4293      	cmp	r3, r2
 800da86:	dd59      	ble.n	800db3c <st_sssa8_ch_convolve_rgb+0x454>
 800da88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da8a:	e794      	b.n	800d9b6 <st_sssa8_ch_convolve_rgb+0x2ce>
 800da8c:	ffff0000 	.word	0xffff0000
 800da90:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da92:	465a      	mov	r2, fp
 800da94:	46cb      	mov	fp, r9
 800da96:	4299      	cmp	r1, r3
 800da98:	4691      	mov	r9, r2
 800da9a:	d010      	beq.n	800dabe <st_sssa8_ch_convolve_rgb+0x3d6>
 800da9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800da9e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800daa0:	9204      	str	r2, [sp, #16]
 800daa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daa4:	9401      	str	r4, [sp, #4]
 800daa6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800daa8:	9305      	str	r3, [sp, #20]
 800daaa:	9400      	str	r4, [sp, #0]
 800daac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daae:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 800dab2:	9003      	str	r0, [sp, #12]
 800dab4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800dab6:	9002      	str	r0, [sp, #8]
 800dab8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800daba:	f002 fdb1 	bl	8010620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800dabe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dac0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dac2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800dac4:	1a9b      	subs	r3, r3, r2
 800dac6:	4608      	mov	r0, r1
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4410      	add	r0, r2
 800dacc:	429a      	cmp	r2, r3
 800dace:	931c      	str	r3, [sp, #112]	; 0x70
 800dad0:	9014      	str	r0, [sp, #80]	; 0x50
 800dad2:	bf28      	it	cs
 800dad4:	461a      	movcs	r2, r3
 800dad6:	4614      	mov	r4, r2
 800dad8:	b90a      	cbnz	r2, 800dade <st_sssa8_ch_convolve_rgb+0x3f6>
 800dada:	9412      	str	r4, [sp, #72]	; 0x48
 800dadc:	e6d7      	b.n	800d88e <st_sssa8_ch_convolve_rgb+0x1a6>
 800dade:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dae0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800dae2:	4619      	mov	r1, r3
 800dae4:	009d      	lsls	r5, r3, #2
 800dae6:	9820      	ldr	r0, [sp, #128]	; 0x80
 800dae8:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800daec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800daee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800daf0:	442e      	add	r6, r5
 800daf2:	9118      	str	r1, [sp, #96]	; 0x60
 800daf4:	fb02 0003 	mla	r0, r2, r3, r0
 800daf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dafa:	961a      	str	r6, [sp, #104]	; 0x68
 800dafc:	4623      	mov	r3, r4
 800dafe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800db00:	9020      	str	r0, [sp, #128]	; 0x80
 800db02:	442e      	add	r6, r5
 800db04:	9619      	str	r6, [sp, #100]	; 0x64
 800db06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800db08:	442e      	add	r6, r5
 800db0a:	4635      	mov	r5, r6
 800db0c:	961b      	str	r6, [sp, #108]	; 0x6c
 800db0e:	f001 fab1 	bl	800f074 <st_int8_to16_dual>
 800db12:	e7e2      	b.n	800dada <st_sssa8_ch_convolve_rgb+0x3f2>
 800db14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800db16:	4656      	mov	r6, sl
 800db18:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db1a:	46cb      	mov	fp, r9
 800db1c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800db1e:	440b      	add	r3, r1
 800db20:	3201      	adds	r2, #1
 800db22:	b29b      	uxth	r3, r3
 800db24:	b212      	sxth	r2, r2
 800db26:	9325      	str	r3, [sp, #148]	; 0x94
 800db28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db2a:	4615      	mov	r5, r2
 800db2c:	9227      	str	r2, [sp, #156]	; 0x9c
 800db2e:	4293      	cmp	r3, r2
 800db30:	f73f ae80 	bgt.w	800d834 <st_sssa8_ch_convolve_rgb+0x14c>
 800db34:	2000      	movs	r0, #0
 800db36:	b04b      	add	sp, #300	; 0x12c
 800db38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3c:	465b      	mov	r3, fp
 800db3e:	46cb      	mov	fp, r9
 800db40:	4699      	mov	r9, r3
 800db42:	e7bc      	b.n	800dabe <st_sssa8_ch_convolve_rgb+0x3d6>
 800db44:	428d      	cmp	r5, r1
 800db46:	f844 ef04 	str.w	lr, [r4, #4]!
 800db4a:	f47f ae0a 	bne.w	800d762 <st_sssa8_ch_convolve_rgb+0x7a>
 800db4e:	e619      	b.n	800d784 <st_sssa8_ch_convolve_rgb+0x9c>
 800db50:	4613      	mov	r3, r2
 800db52:	3301      	adds	r3, #1
 800db54:	b29b      	uxth	r3, r3
 800db56:	9329      	str	r3, [sp, #164]	; 0xa4
 800db58:	e65d      	b.n	800d816 <st_sssa8_ch_convolve_rgb+0x12e>
 800db5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0e9      	beq.n	800db34 <st_sssa8_ch_convolve_rgb+0x44c>
 800db60:	2100      	movs	r1, #0
 800db62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db64:	eba4 0008 	sub.w	r0, r4, r8
 800db68:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800db6a:	4253      	negs	r3, r2
 800db6c:	9113      	str	r1, [sp, #76]	; 0x4c
 800db6e:	460c      	mov	r4, r1
 800db70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800db72:	b29b      	uxth	r3, r3
 800db74:	9012      	str	r0, [sp, #72]	; 0x48
 800db76:	1a8a      	subs	r2, r1, r2
 800db78:	9314      	str	r3, [sp, #80]	; 0x50
 800db7a:	9226      	str	r2, [sp, #152]	; 0x98
 800db7c:	930c      	str	r3, [sp, #48]	; 0x30
 800db7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db80:	2500      	movs	r5, #0
 800db82:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800db84:	a836      	add	r0, sp, #216	; 0xd8
 800db86:	9507      	str	r5, [sp, #28]
 800db88:	fb03 2a04 	mla	sl, r3, r4, r2
 800db8c:	f000 fda4 	bl	800e6d8 <ai_padding_opt_phase1>
 800db90:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800db94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db96:	9309      	str	r3, [sp, #36]	; 0x24
 800db98:	462b      	mov	r3, r5
 800db9a:	9206      	str	r2, [sp, #24]
 800db9c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800db9e:	2a00      	cmp	r2, #0
 800dba0:	f040 8119 	bne.w	800ddd6 <st_sssa8_ch_convolve_rgb+0x6ee>
 800dba4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800dba6:	2a00      	cmp	r2, #0
 800dba8:	f040 811b 	bne.w	800dde2 <st_sssa8_ch_convolve_rgb+0x6fa>
 800dbac:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800dbae:	2101      	movs	r1, #1
 800dbb0:	3a01      	subs	r2, #1
 800dbb2:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 800dbb6:	9238      	str	r2, [sp, #224]	; 0xe0
 800dbb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbba:	4552      	cmp	r2, sl
 800dbbc:	da5d      	bge.n	800dc7a <st_sssa8_ch_convolve_rgb+0x592>
 800dbbe:	4691      	mov	r9, r2
 800dbc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbc4:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800dbc8:	46cc      	mov	ip, r9
 800dbca:	fb03 1302 	mla	r3, r3, r2, r1
 800dbce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbd0:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dbd4:	4680      	mov	r8, r0
 800dbd6:	1a9a      	subs	r2, r3, r2
 800dbd8:	f8cd a020 	str.w	sl, [sp, #32]
 800dbdc:	960b      	str	r6, [sp, #44]	; 0x2c
 800dbde:	4542      	cmp	r2, r8
 800dbe0:	dd41      	ble.n	800dc66 <st_sssa8_ch_convolve_rgb+0x57e>
 800dbe2:	45cb      	cmp	fp, r9
 800dbe4:	fb09 fa0b 	mul.w	sl, r9, fp
 800dbe8:	463e      	mov	r6, r7
 800dbea:	4643      	mov	r3, r8
 800dbec:	bfcc      	ite	gt
 800dbee:	f04f 0e00 	movgt.w	lr, #0
 800dbf2:	f04f 0e01 	movle.w	lr, #1
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 800dbfc:	4583      	cmp	fp, r0
 800dbfe:	f103 0501 	add.w	r5, r3, #1
 800dc02:	f107 0706 	add.w	r7, r7, #6
 800dc06:	bfcc      	ite	gt
 800dc08:	2400      	movgt	r4, #0
 800dc0a:	2401      	movle	r4, #1
 800dc0c:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 800dc10:	d102      	bne.n	800dc18 <st_sssa8_ch_convolve_rgb+0x530>
 800dc12:	f1be 0f00 	cmp.w	lr, #0
 800dc16:	d00b      	beq.n	800dc30 <st_sssa8_ch_convolve_rgb+0x548>
 800dc18:	b22b      	sxth	r3, r5
 800dc1a:	f827 1c04 	strh.w	r1, [r7, #-4]
 800dc1e:	f827 1c02 	strh.w	r1, [r7, #-2]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	f827 1c06 	strh.w	r1, [r7, #-6]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	dd1c      	ble.n	800dc66 <st_sssa8_ch_convolve_rgb+0x57e>
 800dc2c:	463e      	mov	r6, r7
 800dc2e:	e7e5      	b.n	800dbfc <st_sssa8_ch_convolve_rgb+0x514>
 800dc30:	4450      	add	r0, sl
 800dc32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dc34:	3301      	adds	r3, #1
 800dc36:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800df04 <st_sssa8_ch_convolve_rgb+0x81c>
 800dc3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dc3e:	b21b      	sxth	r3, r3
 800dc40:	5820      	ldr	r0, [r4, r0]
 800dc42:	fa2f f580 	sxtb16	r5, r0
 800dc46:	ea4f 2430 	mov.w	r4, r0, ror #8
 800dc4a:	ea05 0909 	and.w	r9, r5, r9
 800dc4e:	fa2f f484 	sxtb16	r4, r4
 800dc52:	b2a4      	uxth	r4, r4
 800dc54:	4293      	cmp	r3, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	ea44 0409 	orr.w	r4, r4, r9
 800dc5c:	f8c6 4002 	str.w	r4, [r6, #2]
 800dc60:	f827 5c06 	strh.w	r5, [r7, #-6]
 800dc64:	dbe2      	blt.n	800dc2c <st_sssa8_ch_convolve_rgb+0x544>
 800dc66:	f10c 0c01 	add.w	ip, ip, #1
 800dc6a:	9b08      	ldr	r3, [sp, #32]
 800dc6c:	fa0f fc8c 	sxth.w	ip, ip
 800dc70:	459c      	cmp	ip, r3
 800dc72:	46e1      	mov	r9, ip
 800dc74:	dbb3      	blt.n	800dbde <st_sssa8_ch_convolve_rgb+0x4f6>
 800dc76:	469a      	mov	sl, r3
 800dc78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc7c:	42bb      	cmp	r3, r7
 800dc7e:	f000 80f3 	beq.w	800de68 <st_sssa8_ch_convolve_rgb+0x780>
 800dc82:	9a07      	ldr	r2, [sp, #28]
 800dc84:	9b06      	ldr	r3, [sp, #24]
 800dc86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc88:	3201      	adds	r2, #1
 800dc8a:	440b      	add	r3, r1
 800dc8c:	b212      	sxth	r2, r2
 800dc8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	9207      	str	r2, [sp, #28]
 800dc94:	4291      	cmp	r1, r2
 800dc96:	9306      	str	r3, [sp, #24]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	f73f af7f 	bgt.w	800db9c <st_sssa8_ch_convolve_rgb+0x4b4>
 800dc9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dca0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dca4:	440b      	add	r3, r1
 800dca6:	3201      	adds	r2, #1
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	b212      	sxth	r2, r2
 800dcac:	930c      	str	r3, [sp, #48]	; 0x30
 800dcae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb0:	4614      	mov	r4, r2
 800dcb2:	9213      	str	r2, [sp, #76]	; 0x4c
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	f73f af62 	bgt.w	800db7e <st_sssa8_ch_convolve_rgb+0x496>
 800dcba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dcbc:	42ba      	cmp	r2, r7
 800dcbe:	f43f af39 	beq.w	800db34 <st_sssa8_ch_convolve_rgb+0x44c>
 800dcc2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	f43f af35 	beq.w	800db34 <st_sssa8_ch_convolve_rgb+0x44c>
 800dcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dccc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800dcce:	1f1f      	subs	r7, r3, #4
 800dcd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dcd2:	ea4f 0990 	mov.w	r9, r0, lsr #2
 800dcd6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800dcd8:	f1a3 0c02 	sub.w	ip, r3, #2
 800dcdc:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800dcde:	f1a4 0a04 	sub.w	sl, r4, #4
 800dce2:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 800dce4:	1f1e      	subs	r6, r3, #4
 800dce6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800dcea:	4421      	add	r1, r4
 800dcec:	f000 0e03 	and.w	lr, r0, #3
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	f8df b210 	ldr.w	fp, [pc, #528]	; 800df04 <st_sssa8_ch_convolve_rgb+0x81c>
 800dcf6:	9107      	str	r1, [sp, #28]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dcfc:	0099      	lsls	r1, r3, #2
 800dcfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd02:	9108      	str	r1, [sp, #32]
 800dd04:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 800dd08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd0a:	46a1      	mov	r9, r4
 800dd0c:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	d05e      	beq.n	800ddd2 <st_sssa8_ch_convolve_rgb+0x6ea>
 800dd14:	9a08      	ldr	r2, [sp, #32]
 800dd16:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800dd1a:	1882      	adds	r2, r0, r2
 800dd1c:	9206      	str	r2, [sp, #24]
 800dd1e:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd22:	fa2f f482 	sxtb16	r4, r2
 800dd26:	b2a1      	uxth	r1, r4
 800dd28:	f8d8 5000 	ldr.w	r5, [r8]
 800dd2c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800dd30:	fa2f f282 	sxtb16	r2, r2
 800dd34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd38:	fb21 3105 	smlad	r1, r1, r5, r3
 800dd3c:	ea02 020b 	and.w	r2, r2, fp
 800dd40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd44:	f108 0808 	add.w	r8, r8, #8
 800dd48:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 800dd4c:	fb24 1303 	smlad	r3, r4, r3, r1
 800dd50:	9a06      	ldr	r2, [sp, #24]
 800dd52:	4290      	cmp	r0, r2
 800dd54:	d1e3      	bne.n	800dd1e <st_sssa8_ch_convolve_rgb+0x636>
 800dd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd58:	f1be 0f00 	cmp.w	lr, #0
 800dd5c:	d017      	beq.n	800dd8e <st_sssa8_ch_convolve_rgb+0x6a6>
 800dd5e:	f990 1000 	ldrsb.w	r1, [r0]
 800dd62:	f1be 0f01 	cmp.w	lr, #1
 800dd66:	8814      	ldrh	r4, [r2, #0]
 800dd68:	fb14 3301 	smlabb	r3, r4, r1, r3
 800dd6c:	f000 80ab 	beq.w	800dec6 <st_sssa8_ch_convolve_rgb+0x7de>
 800dd70:	f990 1001 	ldrsb.w	r1, [r0, #1]
 800dd74:	f1be 0f02 	cmp.w	lr, #2
 800dd78:	8854      	ldrh	r4, [r2, #2]
 800dd7a:	fb14 3301 	smlabb	r3, r4, r1, r3
 800dd7e:	f000 80a0 	beq.w	800dec2 <st_sssa8_ch_convolve_rgb+0x7da>
 800dd82:	8891      	ldrh	r1, [r2, #4]
 800dd84:	3003      	adds	r0, #3
 800dd86:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 800dd8a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800dd8e:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
 800dd92:	f109 0901 	add.w	r9, r9, #1
 800dd96:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800dd9a:	2915      	cmp	r1, #21
 800dd9c:	f85a 4f04 	ldr.w	r4, [sl, #4]!
 800dda0:	f340 8083 	ble.w	800deaa <st_sssa8_ch_convolve_rgb+0x7c2>
 800dda4:	1e8a      	subs	r2, r1, #2
 800dda6:	f04f 0801 	mov.w	r8, #1
 800ddaa:	3901      	subs	r1, #1
 800ddac:	fa08 f202 	lsl.w	r2, r8, r2
 800ddb0:	fb53 2305 	smmla	r3, r3, r5, r2
 800ddb4:	410b      	asrs	r3, r1
 800ddb6:	4423      	add	r3, r4
 800ddb8:	f303 0307 	ssat	r3, #8, r3
 800ddbc:	f809 3c01 	strb.w	r3, [r9, #-1]
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	454b      	cmp	r3, r9
 800ddc4:	f43f aeb6 	beq.w	800db34 <st_sssa8_ch_convolve_rgb+0x44c>
 800ddc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddca:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800ddce:	2a00      	cmp	r2, #0
 800ddd0:	d1a0      	bne.n	800dd14 <st_sssa8_ch_convolve_rgb+0x62c>
 800ddd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddd4:	e7c0      	b.n	800dd58 <st_sssa8_ch_convolve_rgb+0x670>
 800ddd6:	3a01      	subs	r2, #1
 800ddd8:	2101      	movs	r1, #1
 800ddda:	9236      	str	r2, [sp, #216]	; 0xd8
 800dddc:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 800dde0:	e6ea      	b.n	800dbb8 <st_sssa8_ch_convolve_rgb+0x4d0>
 800dde2:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 800dde6:	3a01      	subs	r2, #1
 800dde8:	2901      	cmp	r1, #1
 800ddea:	9237      	str	r2, [sp, #220]	; 0xdc
 800ddec:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 800ddf0:	f43f aee2 	beq.w	800dbb8 <st_sssa8_ch_convolve_rgb+0x4d0>
 800ddf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddf6:	4552      	cmp	r2, sl
 800ddf8:	f6bf af3f 	bge.w	800dc7a <st_sssa8_ch_convolve_rgb+0x592>
 800ddfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ddfe:	4694      	mov	ip, r2
 800de00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800de02:	4614      	mov	r4, r2
 800de04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de06:	fb03 0301 	mla	r3, r3, r1, r0
 800de0a:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 800de0e:	1a9d      	subs	r5, r3, r2
 800de10:	45ae      	cmp	lr, r5
 800de12:	da1e      	bge.n	800de52 <st_sssa8_ch_convolve_rgb+0x76a>
 800de14:	fb04 f00b 	mul.w	r0, r4, fp
 800de18:	4671      	mov	r1, lr
 800de1a:	4674      	mov	r4, lr
 800de1c:	1903      	adds	r3, r0, r4
 800de1e:	3101      	adds	r1, #1
 800de20:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800df04 <st_sssa8_ch_convolve_rgb+0x81c>
 800de24:	3706      	adds	r7, #6
 800de26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800de2a:	b209      	sxth	r1, r1
 800de2c:	58f3      	ldr	r3, [r6, r3]
 800de2e:	fa2f f283 	sxtb16	r2, r3
 800de32:	ea4f 2333 	mov.w	r3, r3, ror #8
 800de36:	ea02 0808 	and.w	r8, r2, r8
 800de3a:	fa2f f383 	sxtb16	r3, r3
 800de3e:	b29b      	uxth	r3, r3
 800de40:	42a9      	cmp	r1, r5
 800de42:	f827 2c06 	strh.w	r2, [r7, #-6]
 800de46:	460c      	mov	r4, r1
 800de48:	ea43 0308 	orr.w	r3, r3, r8
 800de4c:	f847 3c04 	str.w	r3, [r7, #-4]
 800de50:	dbe4      	blt.n	800de1c <st_sssa8_ch_convolve_rgb+0x734>
 800de52:	f10c 0c01 	add.w	ip, ip, #1
 800de56:	fa0f fc8c 	sxth.w	ip, ip
 800de5a:	45d4      	cmp	ip, sl
 800de5c:	4664      	mov	r4, ip
 800de5e:	dbd7      	blt.n	800de10 <st_sssa8_ch_convolve_rgb+0x728>
 800de60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de62:	42bb      	cmp	r3, r7
 800de64:	f47f af0d 	bne.w	800dc82 <st_sssa8_ch_convolve_rgb+0x59a>
 800de68:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800de6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de6c:	9959      	ldr	r1, [sp, #356]	; 0x164
 800de6e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800de70:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800de72:	9304      	str	r3, [sp, #16]
 800de74:	9203      	str	r2, [sp, #12]
 800de76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de7a:	9102      	str	r1, [sp, #8]
 800de7c:	9001      	str	r0, [sp, #4]
 800de7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de80:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800de82:	9400      	str	r4, [sp, #0]
 800de84:	f000 fc70 	bl	800e768 <st_sssa8_ch_nn_mat_mult_kernel>
 800de88:	9a07      	ldr	r2, [sp, #28]
 800de8a:	9b06      	ldr	r3, [sp, #24]
 800de8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de8e:	3201      	adds	r2, #1
 800de90:	905d      	str	r0, [sp, #372]	; 0x174
 800de92:	b212      	sxth	r2, r2
 800de94:	440b      	add	r3, r1
 800de96:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de98:	b29b      	uxth	r3, r3
 800de9a:	9207      	str	r2, [sp, #28]
 800de9c:	4291      	cmp	r1, r2
 800de9e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800dea0:	9306      	str	r3, [sp, #24]
 800dea2:	4613      	mov	r3, r2
 800dea4:	f73f ae7a 	bgt.w	800db9c <st_sssa8_ch_convolve_rgb+0x4b4>
 800dea8:	e6f9      	b.n	800dc9e <st_sssa8_ch_convolve_rgb+0x5b6>
 800deaa:	2900      	cmp	r1, #0
 800deac:	dd0d      	ble.n	800deca <st_sssa8_ch_convolve_rgb+0x7e2>
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	fb53 4305 	smmla	r3, r3, r5, r4
 800deb4:	fa43 f101 	asr.w	r1, r3, r1
 800deb8:	f301 0307 	ssat	r3, #8, r1
 800debc:	f809 3c01 	strb.w	r3, [r9, #-1]
 800dec0:	e77e      	b.n	800ddc0 <st_sssa8_ch_convolve_rgb+0x6d8>
 800dec2:	3002      	adds	r0, #2
 800dec4:	e763      	b.n	800dd8e <st_sssa8_ch_convolve_rgb+0x6a6>
 800dec6:	3001      	adds	r0, #1
 800dec8:	e761      	b.n	800dd8e <st_sssa8_ch_convolve_rgb+0x6a6>
 800deca:	f1c1 0101 	rsb	r1, r1, #1
 800dece:	408b      	lsls	r3, r1
 800ded0:	f303 031f 	ssat	r3, #32, r3
 800ded4:	fb53 f315 	smmulr	r3, r3, r5
 800ded8:	4423      	add	r3, r4
 800deda:	f303 0307 	ssat	r3, #8, r3
 800dede:	f809 3c01 	strb.w	r3, [r9, #-1]
 800dee2:	e76d      	b.n	800ddc0 <st_sssa8_ch_convolve_rgb+0x6d8>
 800dee4:	4602      	mov	r2, r0
 800dee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800deea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800deec:	f001 f8c2 	bl	800f074 <st_int8_to16_dual>
 800def0:	2301      	movs	r3, #1
 800def2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800def4:	9328      	str	r3, [sp, #160]	; 0xa0
 800def6:	e474      	b.n	800d7e2 <st_sssa8_ch_convolve_rgb+0xfa>
 800def8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800defa:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800defc:	e445      	b.n	800d78a <st_sssa8_ch_convolve_rgb+0xa2>
 800defe:	f06f 0002 	mvn.w	r0, #2
 800df02:	e618      	b.n	800db36 <st_sssa8_ch_convolve_rgb+0x44e>
 800df04:	ffff0000 	.word	0xffff0000

0800df08 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	f06f 0509 	mvn.w	r5, #9
 800df0e:	685f      	ldr	r7, [r3, #4]
 800df10:	fb02 f601 	mul.w	r6, r2, r1
 800df14:	fb05 7501 	mla	r5, r5, r1, r7
 800df18:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 800df1c:	db06      	blt.n	800df2c <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 800df1e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800df28:	f001 fa12 	bl	800f350 <st_sssa8_ch_fullW_prefetch>
 800df2c:	2000      	movs	r0, #0
 800df2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df30 <st_sssa8_ch_convolve_1x1>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	b091      	sub	sp, #68	; 0x44
 800df36:	469a      	mov	sl, r3
 800df38:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 800df3c:	f99d 3094 	ldrsb.w	r3, [sp, #148]	; 0x94
 800df40:	2d01      	cmp	r5, #1
 800df42:	920d      	str	r2, [sp, #52]	; 0x34
 800df44:	930e      	str	r3, [sp, #56]	; 0x38
 800df46:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800df4a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800df4e:	f8bd c080 	ldrh.w	ip, [sp, #128]	; 0x80
 800df52:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800df56:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800df58:	f99d 3098 	ldrsb.w	r3, [sp, #152]	; 0x98
 800df5c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800df5e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800df62:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800df66:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 800df6a:	d165      	bne.n	800e038 <st_sssa8_ch_convolve_1x1+0x108>
 800df6c:	2901      	cmp	r1, #1
 800df6e:	d163      	bne.n	800e038 <st_sssa8_ch_convolve_1x1+0x108>
 800df70:	ea56 0100 	orrs.w	r1, r6, r0
 800df74:	d160      	bne.n	800e038 <st_sssa8_ch_convolve_1x1+0x108>
 800df76:	f1bc 0f01 	cmp.w	ip, #1
 800df7a:	d15d      	bne.n	800e038 <st_sssa8_ch_convolve_1x1+0x108>
 800df7c:	f1be 0f01 	cmp.w	lr, #1
 800df80:	d15a      	bne.n	800e038 <st_sssa8_ch_convolve_1x1+0x108>
 800df82:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800df86:	ebc7 7c87 	rsb	ip, r7, r7, lsl #30
 800df8a:	eb09 0807 	add.w	r8, r9, r7
 800df8e:	e9d2 1200 	ldrd	r1, r2, [r2]
 800df92:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 800df96:	920f      	str	r2, [sp, #60]	; 0x3c
 800df98:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 800df9c:	2f00      	cmp	r7, #0
 800df9e:	d048      	beq.n	800e032 <st_sssa8_ch_convolve_1x1+0x102>
 800dfa0:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 800dfa4:	f1ac 0604 	sub.w	r6, ip, #4
 800dfa8:	f04f 0e01 	mov.w	lr, #1
 800dfac:	eb04 050b 	add.w	r5, r4, fp
 800dfb0:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800dfb4:	1e51      	subs	r1, r2, #1
 800dfb6:	fa0e f002 	lsl.w	r0, lr, r2
 800dfba:	fa03 f202 	lsl.w	r2, r3, r2
 800dfbe:	b289      	uxth	r1, r1
 800dfc0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800dfc4:	2914      	cmp	r1, #20
 800dfc6:	d82f      	bhi.n	800e028 <st_sssa8_ch_convolve_1x1+0xf8>
 800dfc8:	42a5      	cmp	r5, r4
 800dfca:	f846 2f04 	str.w	r2, [r6, #4]!
 800dfce:	d1ef      	bne.n	800dfb0 <st_sssa8_ch_convolve_1x1+0x80>
 800dfd0:	462c      	mov	r4, r5
 800dfd2:	44cc      	add	ip, r9
 800dfd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfd6:	f06f 0e09 	mvn.w	lr, #9
 800dfda:	fb07 f50a 	mul.w	r5, r7, sl
 800dfde:	ebac 0609 	sub.w	r6, ip, r9
 800dfe2:	eba4 040b 	sub.w	r4, r4, fp
 800dfe6:	fb0e 3c07 	mla	ip, lr, r7, r3
 800dfea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dfec:	9401      	str	r4, [sp, #4]
 800dfee:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 800dff2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dff4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dff6:	bfac      	ite	ge
 800dff8:	4644      	movge	r4, r8
 800dffa:	2400      	movlt	r4, #0
 800dffc:	9606      	str	r6, [sp, #24]
 800dffe:	f8cd 801c 	str.w	r8, [sp, #28]
 800e002:	9703      	str	r7, [sp, #12]
 800e004:	9408      	str	r4, [sp, #32]
 800e006:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e00a:	e9cd a504 	strd	sl, r5, [sp, #16]
 800e00e:	fb02 f101 	mul.w	r1, r2, r1
 800e012:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800e014:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e016:	9102      	str	r1, [sp, #8]
 800e018:	9500      	str	r5, [sp, #0]
 800e01a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e01c:	f001 fa98 	bl	800f550 <st_sssa8_ch_nn_mat_mult_nt_t>
 800e020:	2000      	movs	r0, #0
 800e022:	b011      	add	sp, #68	; 0x44
 800e024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e028:	42a5      	cmp	r5, r4
 800e02a:	f846 3f04 	str.w	r3, [r6, #4]!
 800e02e:	d1bf      	bne.n	800dfb0 <st_sssa8_ch_convolve_1x1+0x80>
 800e030:	e7ce      	b.n	800dfd0 <st_sssa8_ch_convolve_1x1+0xa0>
 800e032:	46bb      	mov	fp, r7
 800e034:	4613      	mov	r3, r2
 800e036:	e7ce      	b.n	800dfd6 <st_sssa8_ch_convolve_1x1+0xa6>
 800e038:	f06f 0002 	mvn.w	r0, #2
 800e03c:	e7f1      	b.n	800e022 <st_sssa8_ch_convolve_1x1+0xf2>
 800e03e:	bf00      	nop

0800e040 <st_sssa8_fully_connected>:
 800e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	b097      	sub	sp, #92	; 0x5c
 800e046:	4688      	mov	r8, r1
 800e048:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 800e04c:	9312      	str	r3, [sp, #72]	; 0x48
 800e04e:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	9204      	str	r2, [sp, #16]
 800e056:	460c      	mov	r4, r1
 800e058:	9309      	str	r3, [sp, #36]	; 0x24
 800e05a:	1e4b      	subs	r3, r1, #1
 800e05c:	9108      	str	r1, [sp, #32]
 800e05e:	461a      	mov	r2, r3
 800e060:	f99d 108c 	ldrsb.w	r1, [sp, #140]	; 0x8c
 800e064:	930d      	str	r3, [sp, #52]	; 0x34
 800e066:	b292      	uxth	r2, r2
 800e068:	f99d 3088 	ldrsb.w	r3, [sp, #136]	; 0x88
 800e06c:	9107      	str	r1, [sp, #28]
 800e06e:	2a14      	cmp	r2, #20
 800e070:	d805      	bhi.n	800e07e <st_sssa8_fully_connected+0x3e>
 800e072:	2201      	movs	r2, #1
 800e074:	40a1      	lsls	r1, r4
 800e076:	40a2      	lsls	r2, r4
 800e078:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800e07c:	9207      	str	r2, [sp, #28]
 800e07e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e080:	2a00      	cmp	r2, #0
 800e082:	f000 81e4 	beq.w	800e44e <st_sssa8_fully_connected+0x40e>
 800e086:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e088:	b29a      	uxth	r2, r3
 800e08a:	9d04      	ldr	r5, [sp, #16]
 800e08c:	084c      	lsrs	r4, r1, #1
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e092:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800e096:	462a      	mov	r2, r5
 800e098:	f001 ff70 	bl	800ff7c <st_int8_reordered_no_shift_zero>
 800e09c:	2c00      	cmp	r4, #0
 800e09e:	f000 813f 	beq.w	800e320 <st_sssa8_fully_connected+0x2e0>
 800e0a2:	3c01      	subs	r4, #1
 800e0a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e0a6:	f1a5 0310 	sub.w	r3, r5, #16
 800e0aa:	2001      	movs	r0, #1
 800e0ac:	b2a7      	uxth	r7, r4
 800e0ae:	3210      	adds	r2, #16
 800e0b0:	091b      	lsrs	r3, r3, #4
 800e0b2:	462c      	mov	r4, r5
 800e0b4:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800e0b8:	9e08      	ldr	r6, [sp, #32]
 800e0ba:	4403      	add	r3, r0
 800e0bc:	3d03      	subs	r5, #3
 800e0be:	920e      	str	r2, [sp, #56]	; 0x38
 800e0c0:	1eb1      	subs	r1, r6, #2
 800e0c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e0c4:	fa00 f101 	lsl.w	r1, r0, r1
 800e0c8:	9715      	str	r7, [sp, #84]	; 0x54
 800e0ca:	3208      	adds	r2, #8
 800e0cc:	950f      	str	r5, [sp, #60]	; 0x3c
 800e0ce:	9113      	str	r1, [sp, #76]	; 0x4c
 800e0d0:	9205      	str	r2, [sp, #20]
 800e0d2:	011a      	lsls	r2, r3, #4
 800e0d4:	920a      	str	r2, [sp, #40]	; 0x28
 800e0d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e0d8:	9206      	str	r2, [sp, #24]
 800e0da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e0dc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800e0e0:	9310      	str	r3, [sp, #64]	; 0x40
 800e0e2:	1f23      	subs	r3, r4, #4
 800e0e4:	9311      	str	r3, [sp, #68]	; 0x44
 800e0e6:	1b83      	subs	r3, r0, r6
 800e0e8:	9314      	str	r3, [sp, #80]	; 0x50
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	9a04      	ldr	r2, [sp, #16]
 800e0ee:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800e0f2:	eb08 0702 	add.w	r7, r8, r2
 800e0f6:	2a0f      	cmp	r2, #15
 800e0f8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e0fc:	9703      	str	r7, [sp, #12]
 800e0fe:	f340 8279 	ble.w	800e5f4 <st_sssa8_fully_connected+0x5b4>
 800e102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e104:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800e106:	eb08 0c02 	add.w	ip, r8, r2
 800e10a:	f8d8 2000 	ldr.w	r2, [r8]
 800e10e:	683d      	ldr	r5, [r7, #0]
 800e110:	ea4f 2132 	mov.w	r1, r2, ror #8
 800e114:	6834      	ldr	r4, [r6, #0]
 800e116:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800e11a:	fa2f f181 	sxtb16	r1, r1
 800e11e:	fa2f f282 	sxtb16	r2, r2
 800e122:	fa2f f585 	sxtb16	r5, r5
 800e126:	fa2f fe8e 	sxtb16	lr, lr
 800e12a:	fb24 0002 	smlad	r0, r4, r2, r0
 800e12e:	fb24 3305 	smlad	r3, r4, r5, r3
 800e132:	6872      	ldr	r2, [r6, #4]
 800e134:	fb22 0001 	smlad	r0, r2, r1, r0
 800e138:	fb22 3e0e 	smlad	lr, r2, lr, r3
 800e13c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e140:	687d      	ldr	r5, [r7, #4]
 800e142:	ea4f 2331 	mov.w	r3, r1, ror #8
 800e146:	68b2      	ldr	r2, [r6, #8]
 800e148:	ea4f 2935 	mov.w	r9, r5, ror #8
 800e14c:	fa2f f383 	sxtb16	r3, r3
 800e150:	fa2f f181 	sxtb16	r1, r1
 800e154:	fa2f f585 	sxtb16	r5, r5
 800e158:	fa2f f989 	sxtb16	r9, r9
 800e15c:	fb22 0101 	smlad	r1, r2, r1, r0
 800e160:	fb22 e205 	smlad	r2, r2, r5, lr
 800e164:	68f4      	ldr	r4, [r6, #12]
 800e166:	fb24 1103 	smlad	r1, r4, r3, r1
 800e16a:	fb24 2209 	smlad	r2, r4, r9, r2
 800e16e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e172:	68bd      	ldr	r5, [r7, #8]
 800e174:	ea4f 2033 	mov.w	r0, r3, ror #8
 800e178:	6934      	ldr	r4, [r6, #16]
 800e17a:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800e17e:	fa2f f080 	sxtb16	r0, r0
 800e182:	fa2f f383 	sxtb16	r3, r3
 800e186:	fa2f f585 	sxtb16	r5, r5
 800e18a:	fa2f fe8e 	sxtb16	lr, lr
 800e18e:	fb24 1303 	smlad	r3, r4, r3, r1
 800e192:	fb24 2405 	smlad	r4, r4, r5, r2
 800e196:	6971      	ldr	r1, [r6, #20]
 800e198:	fb21 3300 	smlad	r3, r1, r0, r3
 800e19c:	fb21 4e0e 	smlad	lr, r1, lr, r4
 800e1a0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800e1aa:	f108 0810 	add.w	r8, r8, #16
 800e1ae:	ea4f 2032 	mov.w	r0, r2, ror #8
 800e1b2:	69b1      	ldr	r1, [r6, #24]
 800e1b4:	fa2f f580 	sxtb16	r5, r0
 800e1b8:	fa2f f082 	sxtb16	r0, r2
 800e1bc:	ea4f 2234 	mov.w	r2, r4, ror #8
 800e1c0:	fa2f f484 	sxtb16	r4, r4
 800e1c4:	fa2f f282 	sxtb16	r2, r2
 800e1c8:	fb21 3000 	smlad	r0, r1, r0, r3
 800e1cc:	fb21 e104 	smlad	r1, r1, r4, lr
 800e1d0:	69f3      	ldr	r3, [r6, #28]
 800e1d2:	3620      	adds	r6, #32
 800e1d4:	fb23 0005 	smlad	r0, r3, r5, r0
 800e1d8:	fb23 1302 	smlad	r3, r3, r2, r1
 800e1dc:	45e0      	cmp	r8, ip
 800e1de:	d194      	bne.n	800e10a <st_sssa8_fully_connected+0xca>
 800e1e0:	9903      	ldr	r1, [sp, #12]
 800e1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1e4:	460c      	mov	r4, r1
 800e1e6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e1ea:	4696      	mov	lr, r2
 800e1ec:	4414      	add	r4, r2
 800e1ee:	9403      	str	r4, [sp, #12]
 800e1f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1f2:	4596      	cmp	lr, r2
 800e1f4:	da35      	bge.n	800e262 <st_sssa8_fully_connected+0x222>
 800e1f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1f8:	4655      	mov	r5, sl
 800e1fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e1fe:	eba2 020e 	sub.w	r2, r2, lr
 800e202:	0892      	lsrs	r2, r2, #2
 800e204:	920c      	str	r2, [sp, #48]	; 0x30
 800e206:	3201      	adds	r2, #1
 800e208:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800e20c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e20e:	eb08 090b 	add.w	r9, r8, fp
 800e212:	f858 7b04 	ldr.w	r7, [r8], #4
 800e216:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e21a:	ea4f 2637 	mov.w	r6, r7, ror #8
 800e21e:	682a      	ldr	r2, [r5, #0]
 800e220:	ea4f 2431 	mov.w	r4, r1, ror #8
 800e224:	fa2f f686 	sxtb16	r6, r6
 800e228:	fa2f f787 	sxtb16	r7, r7
 800e22c:	fa2f f181 	sxtb16	r1, r1
 800e230:	fa2f f484 	sxtb16	r4, r4
 800e234:	fb22 0007 	smlad	r0, r2, r7, r0
 800e238:	fb22 3301 	smlad	r3, r2, r1, r3
 800e23c:	686a      	ldr	r2, [r5, #4]
 800e23e:	3508      	adds	r5, #8
 800e240:	fb22 0006 	smlad	r0, r2, r6, r0
 800e244:	fb22 3304 	smlad	r3, r2, r4, r3
 800e248:	45c8      	cmp	r8, r9
 800e24a:	d1e2      	bne.n	800e212 <st_sssa8_fully_connected+0x1d2>
 800e24c:	9a03      	ldr	r2, [sp, #12]
 800e24e:	f10e 0e04 	add.w	lr, lr, #4
 800e252:	445a      	add	r2, fp
 800e254:	9203      	str	r2, [sp, #12]
 800e256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e258:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800e25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e25e:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 800e262:	9e04      	ldr	r6, [sp, #16]
 800e264:	45b6      	cmp	lr, r6
 800e266:	da2d      	bge.n	800e2c4 <st_sssa8_fully_connected+0x284>
 800e268:	f10e 0201 	add.w	r2, lr, #1
 800e26c:	9c03      	ldr	r4, [sp, #12]
 800e26e:	f9ba 1000 	ldrsh.w	r1, [sl]
 800e272:	f998 5000 	ldrsb.w	r5, [r8]
 800e276:	4296      	cmp	r6, r2
 800e278:	f994 4000 	ldrsb.w	r4, [r4]
 800e27c:	fb11 0005 	smlabb	r0, r1, r5, r0
 800e280:	fb11 3304 	smlabb	r3, r1, r4, r3
 800e284:	f340 80c6 	ble.w	800e414 <st_sssa8_fully_connected+0x3d4>
 800e288:	9903      	ldr	r1, [sp, #12]
 800e28a:	f10e 0e02 	add.w	lr, lr, #2
 800e28e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800e292:	f998 4001 	ldrsb.w	r4, [r8, #1]
 800e296:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800e29a:	fb12 0004 	smlabb	r0, r2, r4, r0
 800e29e:	fb12 3301 	smlabb	r3, r2, r1, r3
 800e2a2:	9a04      	ldr	r2, [sp, #16]
 800e2a4:	4572      	cmp	r2, lr
 800e2a6:	f340 81aa 	ble.w	800e5fe <st_sssa8_fully_connected+0x5be>
 800e2aa:	9903      	ldr	r1, [sp, #12]
 800e2ac:	f108 0803 	add.w	r8, r8, #3
 800e2b0:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800e2b4:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800e2b8:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
 800e2bc:	fb12 3304 	smlabb	r3, r2, r4, r3
 800e2c0:	fb12 0001 	smlabb	r0, r2, r1, r0
 800e2c4:	9a06      	ldr	r2, [sp, #24]
 800e2c6:	9908      	ldr	r1, [sp, #32]
 800e2c8:	3202      	adds	r2, #2
 800e2ca:	2915      	cmp	r1, #21
 800e2cc:	9206      	str	r2, [sp, #24]
 800e2ce:	f340 808a 	ble.w	800e3e6 <st_sssa8_fully_connected+0x3a6>
 800e2d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e2d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e2d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2d8:	fb50 5001 	smmla	r0, r0, r1, r5
 800e2dc:	fb53 5301 	smmla	r3, r3, r1, r5
 800e2e0:	4120      	asrs	r0, r4
 800e2e2:	9d07      	ldr	r5, [sp, #28]
 800e2e4:	4428      	add	r0, r5
 800e2e6:	f300 0007 	ssat	r0, #8, r0
 800e2ea:	4123      	asrs	r3, r4
 800e2ec:	f802 0c02 	strb.w	r0, [r2, #-2]
 800e2f0:	442b      	add	r3, r5
 800e2f2:	f303 0307 	ssat	r3, #8, r3
 800e2f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	9a04      	ldr	r2, [sp, #16]
 800e2fe:	3308      	adds	r3, #8
 800e300:	4490      	add	r8, r2
 800e302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e304:	9305      	str	r3, [sp, #20]
 800e306:	429a      	cmp	r2, r3
 800e308:	f47f aef0 	bne.w	800e0ec <st_sssa8_fully_connected+0xac>
 800e30c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e30e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e310:	3401      	adds	r4, #1
 800e312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e316:	9324      	str	r3, [sp, #144]	; 0x90
 800e318:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e31a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800e31e:	9325      	str	r3, [sp, #148]	; 0x94
 800e320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e322:	07db      	lsls	r3, r3, #31
 800e324:	d54a      	bpl.n	800e3bc <st_sssa8_fully_connected+0x37c>
 800e326:	9a04      	ldr	r2, [sp, #16]
 800e328:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e32a:	0892      	lsrs	r2, r2, #2
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	d01a      	beq.n	800e366 <st_sssa8_fully_connected+0x326>
 800e330:	1e55      	subs	r5, r2, #1
 800e332:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e334:	b2ad      	uxth	r5, r5
 800e336:	3501      	adds	r5, #1
 800e338:	eb08 0685 	add.w	r6, r8, r5, lsl #2
 800e33c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e340:	6804      	ldr	r4, [r0, #0]
 800e342:	ea4f 2132 	mov.w	r1, r2, ror #8
 800e346:	fa2f f282 	sxtb16	r2, r2
 800e34a:	fa2f f181 	sxtb16	r1, r1
 800e34e:	fb24 3202 	smlad	r2, r4, r2, r3
 800e352:	6843      	ldr	r3, [r0, #4]
 800e354:	3008      	adds	r0, #8
 800e356:	fb23 2301 	smlad	r3, r3, r1, r2
 800e35a:	45b0      	cmp	r8, r6
 800e35c:	d1ee      	bne.n	800e33c <st_sssa8_fully_connected+0x2fc>
 800e35e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e360:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e364:	9226      	str	r2, [sp, #152]	; 0x98
 800e366:	9a04      	ldr	r2, [sp, #16]
 800e368:	f012 0203 	ands.w	r2, r2, #3
 800e36c:	d015      	beq.n	800e39a <st_sssa8_fully_connected+0x35a>
 800e36e:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e370:	2a01      	cmp	r2, #1
 800e372:	f998 1000 	ldrsb.w	r1, [r8]
 800e376:	8800      	ldrh	r0, [r0, #0]
 800e378:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e37c:	d00d      	beq.n	800e39a <st_sssa8_fully_connected+0x35a>
 800e37e:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e380:	2a02      	cmp	r2, #2
 800e382:	f998 1001 	ldrsb.w	r1, [r8, #1]
 800e386:	8840      	ldrh	r0, [r0, #2]
 800e388:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e38c:	d005      	beq.n	800e39a <st_sssa8_fully_connected+0x35a>
 800e38e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e390:	f998 2002 	ldrsb.w	r2, [r8, #2]
 800e394:	8889      	ldrh	r1, [r1, #4]
 800e396:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e39a:	9a08      	ldr	r2, [sp, #32]
 800e39c:	2a15      	cmp	r2, #21
 800e39e:	dd11      	ble.n	800e3c4 <st_sssa8_fully_connected+0x384>
 800e3a0:	1e91      	subs	r1, r2, #2
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	408a      	lsls	r2, r1
 800e3a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3a8:	fb53 2301 	smmla	r3, r3, r1, r2
 800e3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3ae:	4113      	asrs	r3, r2
 800e3b0:	9a07      	ldr	r2, [sp, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f303 0307 	ssat	r3, #8, r3
 800e3b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3ba:	7013      	strb	r3, [r2, #0]
 800e3bc:	2000      	movs	r0, #0
 800e3be:	b017      	add	sp, #92	; 0x5c
 800e3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	f340 811d 	ble.w	800e604 <st_sssa8_fully_connected+0x5c4>
 800e3ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	9807      	ldr	r0, [sp, #28]
 800e3d0:	fb53 0301 	smmla	r3, r3, r1, r0
 800e3d4:	4113      	asrs	r3, r2
 800e3d6:	f303 0307 	ssat	r3, #8, r3
 800e3da:	2000      	movs	r0, #0
 800e3dc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3de:	7013      	strb	r3, [r2, #0]
 800e3e0:	b017      	add	sp, #92	; 0x5c
 800e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e6:	2900      	cmp	r1, #0
 800e3e8:	460a      	mov	r2, r1
 800e3ea:	dd16      	ble.n	800e41a <st_sssa8_fully_connected+0x3da>
 800e3ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3ee:	0040      	lsls	r0, r0, #1
 800e3f0:	9d07      	ldr	r5, [sp, #28]
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	fb50 5001 	smmla	r0, r0, r1, r5
 800e3f8:	fb53 5301 	smmla	r3, r3, r1, r5
 800e3fc:	4110      	asrs	r0, r2
 800e3fe:	f300 0007 	ssat	r0, #8, r0
 800e402:	9906      	ldr	r1, [sp, #24]
 800e404:	4113      	asrs	r3, r2
 800e406:	f801 0c02 	strb.w	r0, [r1, #-2]
 800e40a:	f303 0307 	ssat	r3, #8, r3
 800e40e:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e412:	e772      	b.n	800e2fa <st_sssa8_fully_connected+0x2ba>
 800e414:	f108 0801 	add.w	r8, r8, #1
 800e418:	e754      	b.n	800e2c4 <st_sssa8_fully_connected+0x284>
 800e41a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e41c:	fa00 f201 	lsl.w	r2, r0, r1
 800e420:	f302 021f 	ssat	r2, #32, r2
 800e424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e426:	fb52 f210 	smmulr	r2, r2, r0
 800e42a:	408b      	lsls	r3, r1
 800e42c:	f303 031f 	ssat	r3, #32, r3
 800e430:	fb53 f310 	smmulr	r3, r3, r0
 800e434:	9907      	ldr	r1, [sp, #28]
 800e436:	440a      	add	r2, r1
 800e438:	f302 0207 	ssat	r2, #8, r2
 800e43c:	9806      	ldr	r0, [sp, #24]
 800e43e:	440b      	add	r3, r1
 800e440:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e444:	f303 0307 	ssat	r3, #8, r3
 800e448:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e44c:	e755      	b.n	800e2fa <st_sssa8_fully_connected+0x2ba>
 800e44e:	425a      	negs	r2, r3
 800e450:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e452:	b296      	uxth	r6, r2
 800e454:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800e458:	2f00      	cmp	r7, #0
 800e45a:	d0af      	beq.n	800e3bc <st_sssa8_fully_connected+0x37c>
 800e45c:	9d08      	ldr	r5, [sp, #32]
 800e45e:	46bc      	mov	ip, r7
 800e460:	9a04      	ldr	r2, [sp, #16]
 800e462:	2101      	movs	r1, #1
 800e464:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e466:	46ab      	mov	fp, r5
 800e468:	f1a2 0410 	sub.w	r4, r2, #16
 800e46c:	1eaa      	subs	r2, r5, #2
 800e46e:	44bc      	add	ip, r7
 800e470:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800e474:	f024 040f 	bic.w	r4, r4, #15
 800e478:	9006      	str	r0, [sp, #24]
 800e47a:	f8cd c014 	str.w	ip, [sp, #20]
 800e47e:	fa0f fc83 	sxth.w	ip, r3
 800e482:	fa01 f302 	lsl.w	r3, r1, r2
 800e486:	f1b9 0f0f 	cmp.w	r9, #15
 800e48a:	930a      	str	r3, [sp, #40]	; 0x28
 800e48c:	eba1 0305 	sub.w	r3, r1, r5
 800e490:	930b      	str	r3, [sp, #44]	; 0x2c
 800e492:	f104 0310 	add.w	r3, r4, #16
 800e496:	e9dd ae24 	ldrd	sl, lr, [sp, #144]	; 0x90
 800e49a:	9303      	str	r3, [sp, #12]
 800e49c:	4403      	add	r3, r0
 800e49e:	9308      	str	r3, [sp, #32]
 800e4a0:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e4a4:	f340 8086 	ble.w	800e5b4 <st_sssa8_fully_connected+0x574>
 800e4a8:	9a03      	ldr	r2, [sp, #12]
 800e4aa:	9d06      	ldr	r5, [sp, #24]
 800e4ac:	eb08 0702 	add.w	r7, r8, r2
 800e4b0:	f8d8 4000 	ldr.w	r4, [r8]
 800e4b4:	682a      	ldr	r2, [r5, #0]
 800e4b6:	ea4f 2034 	mov.w	r0, r4, ror #8
 800e4ba:	ea4f 2132 	mov.w	r1, r2, ror #8
 800e4be:	fa2f f484 	sxtb16	r4, r4
 800e4c2:	fa2f f080 	sxtb16	r0, r0
 800e4c6:	fa26 f282 	sxtab16	r2, r6, r2
 800e4ca:	fa26 f181 	sxtab16	r1, r6, r1
 800e4ce:	fb22 3304 	smlad	r3, r2, r4, r3
 800e4d2:	fb21 3200 	smlad	r2, r1, r0, r3
 800e4d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e4da:	686b      	ldr	r3, [r5, #4]
 800e4dc:	ea4f 2034 	mov.w	r0, r4, ror #8
 800e4e0:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e4e4:	fa2f f484 	sxtb16	r4, r4
 800e4e8:	fa2f f080 	sxtb16	r0, r0
 800e4ec:	fa26 f383 	sxtab16	r3, r6, r3
 800e4f0:	fa26 f181 	sxtab16	r1, r6, r1
 800e4f4:	fb23 2204 	smlad	r2, r3, r4, r2
 800e4f8:	fb21 2300 	smlad	r3, r1, r0, r2
 800e4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e500:	68a9      	ldr	r1, [r5, #8]
 800e502:	ea4f 2034 	mov.w	r0, r4, ror #8
 800e506:	ea4f 2231 	mov.w	r2, r1, ror #8
 800e50a:	fa2f f484 	sxtb16	r4, r4
 800e50e:	fa2f f080 	sxtb16	r0, r0
 800e512:	fa26 f181 	sxtab16	r1, r6, r1
 800e516:	fa26 f282 	sxtab16	r2, r6, r2
 800e51a:	fb21 3304 	smlad	r3, r1, r4, r3
 800e51e:	fb22 3100 	smlad	r1, r2, r0, r3
 800e522:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800e526:	3510      	adds	r5, #16
 800e528:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800e52c:	f108 0810 	add.w	r8, r8, #16
 800e530:	ea4f 2034 	mov.w	r0, r4, ror #8
 800e534:	ea4f 2233 	mov.w	r2, r3, ror #8
 800e538:	fa2f f484 	sxtb16	r4, r4
 800e53c:	fa2f f080 	sxtb16	r0, r0
 800e540:	fa26 f383 	sxtab16	r3, r6, r3
 800e544:	fa26 f282 	sxtab16	r2, r6, r2
 800e548:	fb23 1304 	smlad	r3, r3, r4, r1
 800e54c:	fb22 3300 	smlad	r3, r2, r0, r3
 800e550:	45b8      	cmp	r8, r7
 800e552:	d1ad      	bne.n	800e4b0 <st_sssa8_fully_connected+0x470>
 800e554:	9808      	ldr	r0, [sp, #32]
 800e556:	9d03      	ldr	r5, [sp, #12]
 800e558:	454d      	cmp	r5, r9
 800e55a:	da10      	bge.n	800e57e <st_sssa8_fully_connected+0x53e>
 800e55c:	eba9 0505 	sub.w	r5, r9, r5
 800e560:	4644      	mov	r4, r8
 800e562:	4445      	add	r5, r8
 800e564:	7822      	ldrb	r2, [r4, #0]
 800e566:	f108 0801 	add.w	r8, r8, #1
 800e56a:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800e56e:	b252      	sxtb	r2, r2
 800e570:	45a8      	cmp	r8, r5
 800e572:	eba1 010c 	sub.w	r1, r1, ip
 800e576:	4644      	mov	r4, r8
 800e578:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e57c:	d1f2      	bne.n	800e564 <st_sssa8_fully_connected+0x524>
 800e57e:	f1bb 0f15 	cmp.w	fp, #21
 800e582:	f10e 0e01 	add.w	lr, lr, #1
 800e586:	dd18      	ble.n	800e5ba <st_sssa8_fully_connected+0x57a>
 800e588:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 800e58c:	fb53 1302 	smmla	r3, r3, r2, r1
 800e590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e592:	4113      	asrs	r3, r2
 800e594:	9a07      	ldr	r2, [sp, #28]
 800e596:	4413      	add	r3, r2
 800e598:	f303 0307 	ssat	r3, #8, r3
 800e59c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e5a0:	9b05      	ldr	r3, [sp, #20]
 800e5a2:	4573      	cmp	r3, lr
 800e5a4:	f43f af0a 	beq.w	800e3bc <st_sssa8_fully_connected+0x37c>
 800e5a8:	f1b9 0f0f 	cmp.w	r9, #15
 800e5ac:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e5b0:	f73f af7a 	bgt.w	800e4a8 <st_sssa8_fully_connected+0x468>
 800e5b4:	9806      	ldr	r0, [sp, #24]
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	e7ce      	b.n	800e558 <st_sssa8_fully_connected+0x518>
 800e5ba:	f1bb 0f00 	cmp.w	fp, #0
 800e5be:	dd0b      	ble.n	800e5d8 <st_sssa8_fully_connected+0x598>
 800e5c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5c2:	005b      	lsls	r3, r3, #1
 800e5c4:	9907      	ldr	r1, [sp, #28]
 800e5c6:	fb53 1302 	smmla	r3, r3, r2, r1
 800e5ca:	fa43 f30b 	asr.w	r3, r3, fp
 800e5ce:	f303 0307 	ssat	r3, #8, r3
 800e5d2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e5d6:	e7e3      	b.n	800e5a0 <st_sssa8_fully_connected+0x560>
 800e5d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5da:	4093      	lsls	r3, r2
 800e5dc:	f303 031f 	ssat	r3, #32, r3
 800e5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e2:	fb53 f312 	smmulr	r3, r3, r2
 800e5e6:	9a07      	ldr	r2, [sp, #28]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f303 0307 	ssat	r3, #8, r3
 800e5ee:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e5f2:	e7d5      	b.n	800e5a0 <st_sssa8_fully_connected+0x560>
 800e5f4:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e5f8:	f04f 0e00 	mov.w	lr, #0
 800e5fc:	e5f8      	b.n	800e1f0 <st_sssa8_fully_connected+0x1b0>
 800e5fe:	f108 0802 	add.w	r8, r8, #2
 800e602:	e65f      	b.n	800e2c4 <st_sssa8_fully_connected+0x284>
 800e604:	f1c2 0201 	rsb	r2, r2, #1
 800e608:	4093      	lsls	r3, r2
 800e60a:	f303 031f 	ssat	r3, #32, r3
 800e60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e610:	fb53 f312 	smmulr	r3, r3, r2
 800e614:	9a07      	ldr	r2, [sp, #28]
 800e616:	441a      	add	r2, r3
 800e618:	f302 0307 	ssat	r3, #8, r2
 800e61c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e61e:	7013      	strb	r3, [r2, #0]
 800e620:	e6cc      	b.n	800e3bc <st_sssa8_fully_connected+0x37c>
 800e622:	bf00      	nop

0800e624 <ai_padding_opt_init>:
 800e624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e628:	2600      	movs	r6, #0
 800e62a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e62e:	e9c0 6600 	strd	r6, r6, [r0]
 800e632:	6086      	str	r6, [r0, #8]
 800e634:	689d      	ldr	r5, [r3, #8]
 800e636:	690c      	ldr	r4, [r1, #16]
 800e638:	42b5      	cmp	r5, r6
 800e63a:	dd21      	ble.n	800e680 <ai_padding_opt_init+0x5c>
 800e63c:	4264      	negs	r4, r4
 800e63e:	46b0      	mov	r8, r6
 800e640:	46b6      	mov	lr, r6
 800e642:	46b1      	mov	r9, r6
 800e644:	4637      	mov	r7, r6
 800e646:	e00f      	b.n	800e668 <ai_padding_opt_init+0x44>
 800e648:	6895      	ldr	r5, [r2, #8]
 800e64a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800e64e:	1b2d      	subs	r5, r5, r4
 800e650:	42b5      	cmp	r5, r6
 800e652:	da10      	bge.n	800e676 <ai_padding_opt_init+0x52>
 800e654:	f10e 0e01 	add.w	lr, lr, #1
 800e658:	f8c0 e008 	str.w	lr, [r0, #8]
 800e65c:	3701      	adds	r7, #1
 800e65e:	689d      	ldr	r5, [r3, #8]
 800e660:	688e      	ldr	r6, [r1, #8]
 800e662:	42bd      	cmp	r5, r7
 800e664:	4434      	add	r4, r6
 800e666:	dd0e      	ble.n	800e686 <ai_padding_opt_init+0x62>
 800e668:	2c00      	cmp	r4, #0
 800e66a:	daed      	bge.n	800e648 <ai_padding_opt_init+0x24>
 800e66c:	f109 0901 	add.w	r9, r9, #1
 800e670:	f8c0 9000 	str.w	r9, [r0]
 800e674:	e7f2      	b.n	800e65c <ai_padding_opt_init+0x38>
 800e676:	f108 0801 	add.w	r8, r8, #1
 800e67a:	f8c0 8004 	str.w	r8, [r0, #4]
 800e67e:	e7ed      	b.n	800e65c <ai_padding_opt_init+0x38>
 800e680:	46b6      	mov	lr, r6
 800e682:	46b0      	mov	r8, r6
 800e684:	46b1      	mov	r9, r6
 800e686:	2500      	movs	r5, #0
 800e688:	e9c0 9803 	strd	r9, r8, [r0, #12]
 800e68c:	e9c0 e505 	strd	lr, r5, [r0, #20]
 800e690:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800e694:	685e      	ldr	r6, [r3, #4]
 800e696:	694c      	ldr	r4, [r1, #20]
 800e698:	42ae      	cmp	r6, r5
 800e69a:	f1c4 0400 	rsb	r4, r4, #0
 800e69e:	dc0f      	bgt.n	800e6c0 <ai_padding_opt_init+0x9c>
 800e6a0:	e018      	b.n	800e6d4 <ai_padding_opt_init+0xb0>
 800e6a2:	6856      	ldr	r6, [r2, #4]
 800e6a4:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800e6a8:	1b36      	subs	r6, r6, r4
 800e6aa:	42be      	cmp	r6, r7
 800e6ac:	da0e      	bge.n	800e6cc <ai_padding_opt_init+0xa8>
 800e6ae:	6a06      	ldr	r6, [r0, #32]
 800e6b0:	3601      	adds	r6, #1
 800e6b2:	6206      	str	r6, [r0, #32]
 800e6b4:	3501      	adds	r5, #1
 800e6b6:	685e      	ldr	r6, [r3, #4]
 800e6b8:	68cf      	ldr	r7, [r1, #12]
 800e6ba:	42ae      	cmp	r6, r5
 800e6bc:	443c      	add	r4, r7
 800e6be:	dd09      	ble.n	800e6d4 <ai_padding_opt_init+0xb0>
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	daee      	bge.n	800e6a2 <ai_padding_opt_init+0x7e>
 800e6c4:	6986      	ldr	r6, [r0, #24]
 800e6c6:	3601      	adds	r6, #1
 800e6c8:	6186      	str	r6, [r0, #24]
 800e6ca:	e7f3      	b.n	800e6b4 <ai_padding_opt_init+0x90>
 800e6cc:	69c6      	ldr	r6, [r0, #28]
 800e6ce:	3601      	adds	r6, #1
 800e6d0:	61c6      	str	r6, [r0, #28]
 800e6d2:	e7ef      	b.n	800e6b4 <ai_padding_opt_init+0x90>
 800e6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e6d8 <ai_padding_opt_phase1>:
 800e6d8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800e6dc:	b933      	cbnz	r3, 800e6ec <ai_padding_opt_phase1+0x14>
 800e6de:	b992      	cbnz	r2, 800e706 <ai_padding_opt_phase1+0x2e>
 800e6e0:	6a03      	ldr	r3, [r0, #32]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	8482      	strh	r2, [r0, #36]	; 0x24
 800e6e8:	6203      	str	r3, [r0, #32]
 800e6ea:	e005      	b.n	800e6f8 <ai_padding_opt_phase1+0x20>
 800e6ec:	2a00      	cmp	r2, #0
 800e6ee:	d0f7      	beq.n	800e6e0 <ai_padding_opt_phase1+0x8>
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	6183      	str	r3, [r0, #24]
 800e6f6:	8482      	strh	r2, [r0, #36]	; 0x24
 800e6f8:	6943      	ldr	r3, [r0, #20]
 800e6fa:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 800e6fe:	6083      	str	r3, [r0, #8]
 800e700:	e9c0 1200 	strd	r1, r2, [r0]
 800e704:	4770      	bx	lr
 800e706:	3a01      	subs	r2, #1
 800e708:	8483      	strh	r3, [r0, #36]	; 0x24
 800e70a:	61c2      	str	r2, [r0, #28]
 800e70c:	e7f4      	b.n	800e6f8 <ai_padding_opt_phase1+0x20>
 800e70e:	bf00      	nop

0800e710 <st_uint8_fill>:
 800e710:	078b      	lsls	r3, r1, #30
 800e712:	d008      	beq.n	800e726 <st_uint8_fill+0x16>
 800e714:	b90a      	cbnz	r2, 800e71a <st_uint8_fill+0xa>
 800e716:	e01f      	b.n	800e758 <st_uint8_fill+0x48>
 800e718:	b1fa      	cbz	r2, 800e75a <st_uint8_fill+0x4a>
 800e71a:	f801 0b01 	strb.w	r0, [r1], #1
 800e71e:	078b      	lsls	r3, r1, #30
 800e720:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800e724:	d1f8      	bne.n	800e718 <st_uint8_fill+0x8>
 800e726:	b430      	push	{r4, r5}
 800e728:	0404      	lsls	r4, r0, #16
 800e72a:	f002 0503 	and.w	r5, r2, #3
 800e72e:	0893      	lsrs	r3, r2, #2
 800e730:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800e734:	ea44 0400 	orr.w	r4, r4, r0
 800e738:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800e73c:	d010      	beq.n	800e760 <st_uint8_fill+0x50>
 800e73e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e742:	f841 4b04 	str.w	r4, [r1], #4
 800e746:	4299      	cmp	r1, r3
 800e748:	d1fb      	bne.n	800e742 <st_uint8_fill+0x32>
 800e74a:	b13d      	cbz	r5, 800e75c <st_uint8_fill+0x4c>
 800e74c:	462a      	mov	r2, r5
 800e74e:	4601      	mov	r1, r0
 800e750:	4618      	mov	r0, r3
 800e752:	bc30      	pop	{r4, r5}
 800e754:	f002 be6a 	b.w	801142c <memset>
 800e758:	4770      	bx	lr
 800e75a:	4770      	bx	lr
 800e75c:	bc30      	pop	{r4, r5}
 800e75e:	4770      	bx	lr
 800e760:	460b      	mov	r3, r1
 800e762:	2d00      	cmp	r5, #0
 800e764:	d1f2      	bne.n	800e74c <st_uint8_fill+0x3c>
 800e766:	e7f9      	b.n	800e75c <st_uint8_fill+0x4c>

0800e768 <st_sssa8_ch_nn_mat_mult_kernel>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	b09f      	sub	sp, #124	; 0x7c
 800e76e:	4683      	mov	fp, r0
 800e770:	460f      	mov	r7, r1
 800e772:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e774:	9113      	str	r1, [sp, #76]	; 0x4c
 800e776:	0859      	lsrs	r1, r3, #1
 800e778:	eb00 0503 	add.w	r5, r0, r3
 800e77c:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800e780:	931c      	str	r3, [sp, #112]	; 0x70
 800e782:	921a      	str	r2, [sp, #104]	; 0x68
 800e784:	951b      	str	r5, [sp, #108]	; 0x6c
 800e786:	900d      	str	r0, [sp, #52]	; 0x34
 800e788:	f000 827a 	beq.w	800ec80 <st_sssa8_ch_nn_mat_mult_kernel+0x518>
 800e78c:	4614      	mov	r4, r2
 800e78e:	3901      	subs	r1, #1
 800e790:	f1a0 0210 	sub.w	r2, r0, #16
 800e794:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 800e798:	4623      	mov	r3, r4
 800e79a:	1ec4      	subs	r4, r0, #3
 800e79c:	0912      	lsrs	r2, r2, #4
 800e79e:	f8df a78c 	ldr.w	sl, [pc, #1932]	; 800ef2c <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 800e7a2:	3310      	adds	r3, #16
 800e7a4:	9415      	str	r4, [sp, #84]	; 0x54
 800e7a6:	b28c      	uxth	r4, r1
 800e7a8:	3201      	adds	r2, #1
 800e7aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e7ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7b0:	9616      	str	r6, [sp, #88]	; 0x58
 800e7b2:	3108      	adds	r1, #8
 800e7b4:	941d      	str	r4, [sp, #116]	; 0x74
 800e7b6:	9314      	str	r3, [sp, #80]	; 0x50
 800e7b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e7ba:	910e      	str	r1, [sp, #56]	; 0x38
 800e7bc:	3308      	adds	r3, #8
 800e7be:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e7c0:	f8cd b004 	str.w	fp, [sp, #4]
 800e7c4:	930c      	str	r3, [sp, #48]	; 0x30
 800e7c6:	0153      	lsls	r3, r2, #5
 800e7c8:	0112      	lsls	r2, r2, #4
 800e7ca:	3104      	adds	r1, #4
 800e7cc:	920f      	str	r2, [sp, #60]	; 0x3c
 800e7ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e7d0:	9108      	str	r1, [sp, #32]
 800e7d2:	3208      	adds	r2, #8
 800e7d4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800e7d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e7d8:	18fa      	adds	r2, r7, r3
 800e7da:	18f3      	adds	r3, r6, r3
 800e7dc:	3102      	adds	r1, #2
 800e7de:	9218      	str	r2, [sp, #96]	; 0x60
 800e7e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7e2:	1cab      	adds	r3, r5, #2
 800e7e4:	910a      	str	r1, [sp, #40]	; 0x28
 800e7e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7e8:	1f03      	subs	r3, r0, #4
 800e7ea:	9319      	str	r3, [sp, #100]	; 0x64
 800e7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7f0:	9c01      	ldr	r4, [sp, #4]
 800e7f2:	f853 9c08 	ldr.w	r9, [r3, #-8]
 800e7f6:	2a0f      	cmp	r2, #15
 800e7f8:	eb04 0002 	add.w	r0, r4, r2
 800e7fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e800:	9003      	str	r0, [sp, #12]
 800e802:	461f      	mov	r7, r3
 800e804:	f340 8361 	ble.w	800eeca <st_sssa8_ch_nn_mat_mult_kernel+0x762>
 800e808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e80a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 800e80e:	18a2      	adds	r2, r4, r2
 800e810:	9901      	ldr	r1, [sp, #4]
 800e812:	461c      	mov	r4, r3
 800e814:	9002      	str	r0, [sp, #8]
 800e816:	9204      	str	r2, [sp, #16]
 800e818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e81a:	9200      	str	r2, [sp, #0]
 800e81c:	464a      	mov	r2, r9
 800e81e:	f8d1 b000 	ldr.w	fp, [r1]
 800e822:	9802      	ldr	r0, [sp, #8]
 800e824:	ea4f 2c3b 	mov.w	ip, fp, ror #8
 800e828:	6801      	ldr	r1, [r0, #0]
 800e82a:	fa2f f38c 	sxtb16	r3, ip
 800e82e:	9800      	ldr	r0, [sp, #0]
 800e830:	ea03 050a 	and.w	r5, r3, sl
 800e834:	fa2f fb8b 	sxtb16	fp, fp
 800e838:	6806      	ldr	r6, [r0, #0]
 800e83a:	fa1f fc8b 	uxth.w	ip, fp
 800e83e:	ea4f 2831 	mov.w	r8, r1, ror #8
 800e842:	ea45 4b1b 	orr.w	fp, r5, fp, lsr #16
 800e846:	fa2f f888 	sxtb16	r8, r8
 800e84a:	fa2f f181 	sxtb16	r1, r1
 800e84e:	ea08 000a 	and.w	r0, r8, sl
 800e852:	b28d      	uxth	r5, r1
 800e854:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
 800e858:	f8de 3000 	ldr.w	r3, [lr]
 800e85c:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 800e860:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 800e864:	fb2c 9906 	smlad	r9, ip, r6, r9
 800e868:	fb2c 2203 	smlad	r2, ip, r3, r2
 800e86c:	fb25 7706 	smlad	r7, r5, r6, r7
 800e870:	fb25 4003 	smlad	r0, r5, r3, r4
 800e874:	9b00      	ldr	r3, [sp, #0]
 800e876:	f8de c004 	ldr.w	ip, [lr, #4]
 800e87a:	685e      	ldr	r6, [r3, #4]
 800e87c:	fb2b 9906 	smlad	r9, fp, r6, r9
 800e880:	fb2b 240c 	smlad	r4, fp, ip, r2
 800e884:	fb21 7706 	smlad	r7, r1, r6, r7
 800e888:	fb21 000c 	smlad	r0, r1, ip, r0
 800e88c:	9a01      	ldr	r2, [sp, #4]
 800e88e:	9902      	ldr	r1, [sp, #8]
 800e890:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e894:	684d      	ldr	r5, [r1, #4]
 800e896:	ea4f 2238 	mov.w	r2, r8, ror #8
 800e89a:	689e      	ldr	r6, [r3, #8]
 800e89c:	fa2f fb82 	sxtb16	fp, r2
 800e8a0:	fa2f f188 	sxtb16	r1, r8
 800e8a4:	ea0b 080a 	and.w	r8, fp, sl
 800e8a8:	b28a      	uxth	r2, r1
 800e8aa:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800e8ae:	ea48 4811 	orr.w	r8, r8, r1, lsr #16
 800e8b2:	fa2f fc8c 	sxtb16	ip, ip
 800e8b6:	fa2f f585 	sxtb16	r5, r5
 800e8ba:	ea0c 010a 	and.w	r1, ip, sl
 800e8be:	b2ab      	uxth	r3, r5
 800e8c0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 800e8c4:	f8de b008 	ldr.w	fp, [lr, #8]
 800e8c8:	ea41 4515 	orr.w	r5, r1, r5, lsr #16
 800e8cc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800e8d0:	fb22 9906 	smlad	r9, r2, r6, r9
 800e8d4:	fb22 420b 	smlad	r2, r2, fp, r4
 800e8d8:	fb23 7606 	smlad	r6, r3, r6, r7
 800e8dc:	fb23 030b 	smlad	r3, r3, fp, r0
 800e8e0:	9c00      	ldr	r4, [sp, #0]
 800e8e2:	f8de 000c 	ldr.w	r0, [lr, #12]
 800e8e6:	68e7      	ldr	r7, [r4, #12]
 800e8e8:	fb28 9907 	smlad	r9, r8, r7, r9
 800e8ec:	fb28 2800 	smlad	r8, r8, r0, r2
 800e8f0:	fb25 6607 	smlad	r6, r5, r7, r6
 800e8f4:	fb25 3000 	smlad	r0, r5, r0, r3
 800e8f8:	9901      	ldr	r1, [sp, #4]
 800e8fa:	9a02      	ldr	r2, [sp, #8]
 800e8fc:	688b      	ldr	r3, [r1, #8]
 800e8fe:	6895      	ldr	r5, [r2, #8]
 800e900:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e904:	6927      	ldr	r7, [r4, #16]
 800e906:	fa2f f481 	sxtb16	r4, r1
 800e90a:	ea04 0b0a 	and.w	fp, r4, sl
 800e90e:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800e912:	fa2f f383 	sxtb16	r3, r3
 800e916:	fa2f fc8c 	sxtb16	ip, ip
 800e91a:	b299      	uxth	r1, r3
 800e91c:	fa2f f585 	sxtb16	r5, r5
 800e920:	ea4b 4313 	orr.w	r3, fp, r3, lsr #16
 800e924:	ea0c 0b0a 	and.w	fp, ip, sl
 800e928:	b2aa      	uxth	r2, r5
 800e92a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e92e:	f8de 4010 	ldr.w	r4, [lr, #16]
 800e932:	ea4b 4515 	orr.w	r5, fp, r5, lsr #16
 800e936:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800e93a:	fb21 9907 	smlad	r9, r1, r7, r9
 800e93e:	fb21 8804 	smlad	r8, r1, r4, r8
 800e942:	fb22 6707 	smlad	r7, r2, r7, r6
 800e946:	fb22 0204 	smlad	r2, r2, r4, r0
 800e94a:	9e00      	ldr	r6, [sp, #0]
 800e94c:	f8de 1014 	ldr.w	r1, [lr, #20]
 800e950:	f8d6 b014 	ldr.w	fp, [r6, #20]
 800e954:	fb23 990b 	smlad	r9, r3, fp, r9
 800e958:	fb23 8801 	smlad	r8, r3, r1, r8
 800e95c:	fb25 7b0b 	smlad	fp, r5, fp, r7
 800e960:	fb25 2501 	smlad	r5, r5, r1, r2
 800e964:	9b01      	ldr	r3, [sp, #4]
 800e966:	69b7      	ldr	r7, [r6, #24]
 800e968:	68dc      	ldr	r4, [r3, #12]
 800e96a:	f103 0110 	add.w	r1, r3, #16
 800e96e:	9b02      	ldr	r3, [sp, #8]
 800e970:	9101      	str	r1, [sp, #4]
 800e972:	68d8      	ldr	r0, [r3, #12]
 800e974:	3310      	adds	r3, #16
 800e976:	9302      	str	r3, [sp, #8]
 800e978:	ea4f 2334 	mov.w	r3, r4, ror #8
 800e97c:	fa2f f283 	sxtb16	r2, r3
 800e980:	ea02 060a 	and.w	r6, r2, sl
 800e984:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800e988:	fa2f f484 	sxtb16	r4, r4
 800e98c:	fa2f fc8c 	sxtb16	ip, ip
 800e990:	b2a3      	uxth	r3, r4
 800e992:	fa2f f080 	sxtb16	r0, r0
 800e996:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 800e99a:	ea0c 060a 	and.w	r6, ip, sl
 800e99e:	b281      	uxth	r1, r0
 800e9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9a4:	f8de 2018 	ldr.w	r2, [lr, #24]
 800e9a8:	ea46 4010 	orr.w	r0, r6, r0, lsr #16
 800e9ac:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800e9b0:	fb23 9907 	smlad	r9, r3, r7, r9
 800e9b4:	fb23 8302 	smlad	r3, r3, r2, r8
 800e9b8:	fb21 b707 	smlad	r7, r1, r7, fp
 800e9bc:	fb21 5102 	smlad	r1, r1, r2, r5
 800e9c0:	9e00      	ldr	r6, [sp, #0]
 800e9c2:	f10e 0e20 	add.w	lr, lr, #32
 800e9c6:	f106 0220 	add.w	r2, r6, #32
 800e9ca:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 800e9ce:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 800e9d2:	9200      	str	r2, [sp, #0]
 800e9d4:	fb24 990b 	smlad	r9, r4, fp, r9
 800e9d8:	fb24 3206 	smlad	r2, r4, r6, r3
 800e9dc:	fb20 770b 	smlad	r7, r0, fp, r7
 800e9e0:	fb20 1406 	smlad	r4, r0, r6, r1
 800e9e4:	9901      	ldr	r1, [sp, #4]
 800e9e6:	9b04      	ldr	r3, [sp, #16]
 800e9e8:	4299      	cmp	r1, r3
 800e9ea:	f47f af18 	bne.w	800e81e <st_sssa8_ch_nn_mat_mult_kernel+0xb6>
 800e9ee:	9903      	ldr	r1, [sp, #12]
 800e9f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e9f6:	9400      	str	r4, [sp, #0]
 800e9f8:	4418      	add	r0, r3
 800e9fa:	9106      	str	r1, [sp, #24]
 800e9fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e9fe:	9003      	str	r0, [sp, #12]
 800ea00:	9105      	str	r1, [sp, #20]
 800ea02:	9307      	str	r3, [sp, #28]
 800ea04:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ea06:	4283      	cmp	r3, r0
 800ea08:	da68      	bge.n	800eadc <st_sssa8_ch_nn_mat_mult_kernel+0x374>
 800ea0a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ea0c:	46be      	mov	lr, r7
 800ea0e:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ea12:	1acb      	subs	r3, r1, r3
 800ea14:	9903      	ldr	r1, [sp, #12]
 800ea16:	f8cd b008 	str.w	fp, [sp, #8]
 800ea1a:	089b      	lsrs	r3, r3, #2
 800ea1c:	9312      	str	r3, [sp, #72]	; 0x48
 800ea1e:	3301      	adds	r3, #1
 800ea20:	9311      	str	r3, [sp, #68]	; 0x44
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	e9dd c505 	ldrd	ip, r5, [sp, #20]
 800ea28:	9310      	str	r3, [sp, #64]	; 0x40
 800ea2a:	18cb      	adds	r3, r1, r3
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	9b02      	ldr	r3, [sp, #8]
 800ea30:	f8dc b000 	ldr.w	fp, [ip]
 800ea34:	f853 4b04 	ldr.w	r4, [r3], #4
 800ea38:	fa2f f084 	sxtb16	r0, r4
 800ea3c:	9302      	str	r3, [sp, #8]
 800ea3e:	ea4f 2634 	mov.w	r6, r4, ror #8
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	fa1f f880 	uxth.w	r8, r0
 800ea48:	fa2f f686 	sxtb16	r6, r6
 800ea4c:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea50:	ea06 040a 	and.w	r4, r6, sl
 800ea54:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 800ea58:	f8d5 8000 	ldr.w	r8, [r5]
 800ea5c:	9303      	str	r3, [sp, #12]
 800ea5e:	ea4f 2731 	mov.w	r7, r1, ror #8
 800ea62:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
 800ea66:	fa2f f787 	sxtb16	r7, r7
 800ea6a:	fa2f f181 	sxtb16	r1, r1
 800ea6e:	ea07 000a 	and.w	r0, r7, sl
 800ea72:	b28b      	uxth	r3, r1
 800ea74:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 800ea78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea7c:	fb26 990b 	smlad	r9, r6, fp, r9
 800ea80:	fb26 2208 	smlad	r2, r6, r8, r2
 800ea84:	fb23 ee0b 	smlad	lr, r3, fp, lr
 800ea88:	9800      	ldr	r0, [sp, #0]
 800ea8a:	fb23 0308 	smlad	r3, r3, r8, r0
 800ea8e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800ea92:	3508      	adds	r5, #8
 800ea94:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800ea98:	f10c 0c08 	add.w	ip, ip, #8
 800ea9c:	fb24 9906 	smlad	r9, r4, r6, r9
 800eaa0:	fb24 2200 	smlad	r2, r4, r0, r2
 800eaa4:	fb21 ee06 	smlad	lr, r1, r6, lr
 800eaa8:	fb21 3100 	smlad	r1, r1, r0, r3
 800eaac:	9100      	str	r1, [sp, #0]
 800eaae:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 800eab2:	4299      	cmp	r1, r3
 800eab4:	d1bb      	bne.n	800ea2e <st_sssa8_ch_nn_mat_mult_kernel+0x2c6>
 800eab6:	9801      	ldr	r0, [sp, #4]
 800eab8:	4677      	mov	r7, lr
 800eaba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800eabc:	9907      	ldr	r1, [sp, #28]
 800eabe:	4420      	add	r0, r4
 800eac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eac2:	3104      	adds	r1, #4
 800eac4:	9001      	str	r0, [sp, #4]
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eaca:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eace:	9107      	str	r1, [sp, #28]
 800ead0:	9906      	ldr	r1, [sp, #24]
 800ead2:	4419      	add	r1, r3
 800ead4:	9106      	str	r1, [sp, #24]
 800ead6:	9905      	ldr	r1, [sp, #20]
 800ead8:	4419      	add	r1, r3
 800eada:	9105      	str	r1, [sp, #20]
 800eadc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800eade:	9907      	ldr	r1, [sp, #28]
 800eae0:	428e      	cmp	r6, r1
 800eae2:	dd50      	ble.n	800eb86 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 800eae4:	9b01      	ldr	r3, [sp, #4]
 800eae6:	f993 5000 	ldrsb.w	r5, [r3]
 800eaea:	1c4b      	adds	r3, r1, #1
 800eaec:	9905      	ldr	r1, [sp, #20]
 800eaee:	42b3      	cmp	r3, r6
 800eaf0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800eaf4:	9906      	ldr	r1, [sp, #24]
 800eaf6:	fb14 9905 	smlabb	r9, r4, r5, r9
 800eafa:	f9b1 0000 	ldrsh.w	r0, [r1]
 800eafe:	9903      	ldr	r1, [sp, #12]
 800eb00:	fb10 2205 	smlabb	r2, r0, r5, r2
 800eb04:	f991 1000 	ldrsb.w	r1, [r1]
 800eb08:	fb14 7401 	smlabb	r4, r4, r1, r7
 800eb0c:	4627      	mov	r7, r4
 800eb0e:	9c00      	ldr	r4, [sp, #0]
 800eb10:	fb10 4101 	smlabb	r1, r0, r1, r4
 800eb14:	9100      	str	r1, [sp, #0]
 800eb16:	f280 8177 	bge.w	800ee08 <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 800eb1a:	9901      	ldr	r1, [sp, #4]
 800eb1c:	9b07      	ldr	r3, [sp, #28]
 800eb1e:	f991 5001 	ldrsb.w	r5, [r1, #1]
 800eb22:	9905      	ldr	r1, [sp, #20]
 800eb24:	3302      	adds	r3, #2
 800eb26:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800eb2a:	9906      	ldr	r1, [sp, #24]
 800eb2c:	fb14 9905 	smlabb	r9, r4, r5, r9
 800eb30:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800eb34:	9903      	ldr	r1, [sp, #12]
 800eb36:	fb10 2205 	smlabb	r2, r0, r5, r2
 800eb3a:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800eb3e:	fb14 7401 	smlabb	r4, r4, r1, r7
 800eb42:	4627      	mov	r7, r4
 800eb44:	9c00      	ldr	r4, [sp, #0]
 800eb46:	fb10 4101 	smlabb	r1, r0, r1, r4
 800eb4a:	9100      	str	r1, [sp, #0]
 800eb4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eb4e:	4299      	cmp	r1, r3
 800eb50:	f340 81c4 	ble.w	800eedc <st_sssa8_ch_nn_mat_mult_kernel+0x774>
 800eb54:	9b05      	ldr	r3, [sp, #20]
 800eb56:	9d01      	ldr	r5, [sp, #4]
 800eb58:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800eb5c:	9b03      	ldr	r3, [sp, #12]
 800eb5e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800eb62:	9b06      	ldr	r3, [sp, #24]
 800eb64:	fb11 7600 	smlabb	r6, r1, r0, r7
 800eb68:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800eb6c:	4637      	mov	r7, r6
 800eb6e:	9e00      	ldr	r6, [sp, #0]
 800eb70:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800eb74:	fb14 6000 	smlabb	r0, r4, r0, r6
 800eb78:	fb11 9903 	smlabb	r9, r1, r3, r9
 800eb7c:	9000      	str	r0, [sp, #0]
 800eb7e:	fb14 2203 	smlabb	r2, r4, r3, r2
 800eb82:	1ce8      	adds	r0, r5, #3
 800eb84:	9001      	str	r0, [sp, #4]
 800eb86:	9b08      	ldr	r3, [sp, #32]
 800eb88:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 800eb8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb8e:	2815      	cmp	r0, #21
 800eb90:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800eb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb96:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800eb9a:	f340 811a 	ble.w	800edd2 <st_sssa8_ch_nn_mat_mult_kernel+0x66a>
 800eb9e:	1e83      	subs	r3, r0, #2
 800eba0:	2101      	movs	r1, #1
 800eba2:	3801      	subs	r0, #1
 800eba4:	fa01 f303 	lsl.w	r3, r1, r3
 800eba8:	fb59 3904 	smmla	r9, r9, r4, r3
 800ebac:	fa49 f900 	asr.w	r9, r9, r0
 800ebb0:	fb52 3304 	smmla	r3, r2, r4, r3
 800ebb4:	44a9      	add	r9, r5
 800ebb6:	f309 0907 	ssat	r9, #8, r9
 800ebba:	4103      	asrs	r3, r0
 800ebbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebbe:	442b      	add	r3, r5
 800ebc0:	f802 9c02 	strb.w	r9, [r2, #-2]
 800ebc4:	f303 0307 	ssat	r3, #8, r3
 800ebc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebca:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ebce:	9b08      	ldr	r3, [sp, #32]
 800ebd0:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ebd4:	2b15      	cmp	r3, #21
 800ebd6:	f340 80da 	ble.w	800ed8e <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 800ebda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebdc:	1e9c      	subs	r4, r3, #2
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	9900      	ldr	r1, [sp, #0]
 800ebe2:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	fa02 f404 	lsl.w	r4, r2, r4
 800ebec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebee:	fb57 4800 	smmla	r8, r7, r0, r4
 800ebf2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800ebf6:	fa48 f803 	asr.w	r8, r8, r3
 800ebfa:	fb51 4000 	smmla	r0, r1, r0, r4
 800ebfe:	4490      	add	r8, r2
 800ec00:	f308 0807 	ssat	r8, #8, r8
 800ec04:	4118      	asrs	r0, r3
 800ec06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec08:	4410      	add	r0, r2
 800ec0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec0e:	f300 0007 	ssat	r0, #8, r0
 800ec12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec14:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ec18:	9a01      	ldr	r2, [sp, #4]
 800ec1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ec1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec1e:	440a      	add	r2, r1
 800ec20:	3308      	adds	r3, #8
 800ec22:	9201      	str	r2, [sp, #4]
 800ec24:	9a08      	ldr	r2, [sp, #32]
 800ec26:	930e      	str	r3, [sp, #56]	; 0x38
 800ec28:	3204      	adds	r2, #4
 800ec2a:	9208      	str	r2, [sp, #32]
 800ec2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec2e:	3208      	adds	r2, #8
 800ec30:	920c      	str	r2, [sp, #48]	; 0x30
 800ec32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec34:	3202      	adds	r2, #2
 800ec36:	920a      	str	r2, [sp, #40]	; 0x28
 800ec38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec3a:	3208      	adds	r2, #8
 800ec3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec40:	3202      	adds	r2, #2
 800ec42:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec46:	429a      	cmp	r2, r3
 800ec48:	f47f add1 	bne.w	800e7ee <st_sssa8_ch_nn_mat_mult_kernel+0x86>
 800ec4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec4e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ec50:	3301      	adds	r3, #1
 800ec52:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ec56:	00da      	lsls	r2, r3, #3
 800ec58:	0059      	lsls	r1, r3, #1
 800ec5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ec5e:	9329      	str	r3, [sp, #164]	; 0xa4
 800ec60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ec62:	4413      	add	r3, r2
 800ec64:	931a      	str	r3, [sp, #104]	; 0x68
 800ec66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ec68:	4413      	add	r3, r2
 800ec6a:	932a      	str	r3, [sp, #168]	; 0xa8
 800ec6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ec6e:	4413      	add	r3, r2
 800ec70:	932b      	str	r3, [sp, #172]	; 0xac
 800ec72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800ec74:	440b      	add	r3, r1
 800ec76:	932c      	str	r3, [sp, #176]	; 0xb0
 800ec78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec7a:	440b      	add	r3, r1
 800ec7c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ec80:	07da      	lsls	r2, r3, #31
 800ec82:	f140 811c 	bpl.w	800eebe <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 800ec86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ec88:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec8e:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 800ec92:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 800ec96:	f000 8146 	beq.w	800ef26 <st_sssa8_ch_nn_mat_mult_kernel+0x7be>
 800ec9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ec9e:	46cc      	mov	ip, r9
 800eca0:	4602      	mov	r2, r0
 800eca2:	f8df 8288 	ldr.w	r8, [pc, #648]	; 800ef2c <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 800eca6:	fa1f fa8a 	uxth.w	sl, sl
 800ecaa:	f10a 0a01 	add.w	sl, sl, #1
 800ecae:	eb0b 0e8a 	add.w	lr, fp, sl, lsl #2
 800ecb2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ecb6:	fa2f f481 	sxtb16	r4, r1
 800ecba:	ea4f 2331 	mov.w	r3, r1, ror #8
 800ecbe:	683d      	ldr	r5, [r7, #0]
 800ecc0:	b2a1      	uxth	r1, r4
 800ecc2:	fa2f f383 	sxtb16	r3, r3
 800ecc6:	ea03 0608 	and.w	r6, r3, r8
 800ecca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ecce:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 800ecd2:	fb23 0505 	smlad	r5, r3, r5, r0
 800ecd6:	f8dc 1000 	ldr.w	r1, [ip]
 800ecda:	fb23 2301 	smlad	r3, r3, r1, r2
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f10c 0c08 	add.w	ip, ip, #8
 800ece4:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800ece8:	3708      	adds	r7, #8
 800ecea:	fb24 5000 	smlad	r0, r4, r0, r5
 800ecee:	fb24 3202 	smlad	r2, r4, r2, r3
 800ecf2:	45de      	cmp	lr, fp
 800ecf4:	d1dd      	bne.n	800ecb2 <st_sssa8_ch_nn_mat_mult_kernel+0x54a>
 800ecf6:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ecfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecfc:	4453      	add	r3, sl
 800ecfe:	44d1      	add	r9, sl
 800ed00:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed04:	f013 0303 	ands.w	r3, r3, #3
 800ed08:	d01f      	beq.n	800ed4a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 800ed0a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	f99b 1000 	ldrsb.w	r1, [fp]
 800ed12:	8835      	ldrh	r5, [r6, #0]
 800ed14:	f8b9 4000 	ldrh.w	r4, [r9]
 800ed18:	fb15 0001 	smlabb	r0, r5, r1, r0
 800ed1c:	fb14 2201 	smlabb	r2, r4, r1, r2
 800ed20:	d013      	beq.n	800ed4a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 800ed22:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	8875      	ldrh	r5, [r6, #2]
 800ed2a:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 800ed2e:	fb15 0001 	smlabb	r0, r5, r1, r0
 800ed32:	fb14 2201 	smlabb	r2, r4, r1, r2
 800ed36:	d008      	beq.n	800ed4a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 800ed38:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 800ed3c:	88b4      	ldrh	r4, [r6, #4]
 800ed3e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800ed42:	fb14 0003 	smlabb	r0, r4, r3, r0
 800ed46:	fb11 2203 	smlabb	r2, r1, r3, r2
 800ed4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ed4c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ed4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed52:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800ed54:	6825      	ldr	r5, [r4, #0]
 800ed56:	2b15      	cmp	r3, #21
 800ed58:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800ed5a:	f101 0101 	add.w	r1, r1, #1
 800ed5e:	6824      	ldr	r4, [r4, #0]
 800ed60:	f300 8097 	bgt.w	800ee92 <st_sssa8_ch_nn_mat_mult_kernel+0x72a>
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f340 80bd 	ble.w	800eee4 <st_sssa8_ch_nn_mat_mult_kernel+0x77c>
 800ed6a:	0040      	lsls	r0, r0, #1
 800ed6c:	0052      	lsls	r2, r2, #1
 800ed6e:	fb50 4005 	smmla	r0, r0, r5, r4
 800ed72:	fb52 4205 	smmla	r2, r2, r5, r4
 800ed76:	fa40 f303 	asr.w	r3, r0, r3
 800ed7a:	f303 0307 	ssat	r3, #8, r3
 800ed7e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ed80:	7003      	strb	r3, [r0, #0]
 800ed82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ed84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed88:	fa42 f303 	asr.w	r3, r2, r3
 800ed8c:	e091      	b.n	800eeb2 <st_sssa8_ch_nn_mat_mult_kernel+0x74a>
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	dd3e      	ble.n	800ee10 <st_sssa8_ch_nn_mat_mult_kernel+0x6a8>
 800ed92:	9900      	ldr	r1, [sp, #0]
 800ed94:	ea4f 0847 	mov.w	r8, r7, lsl #1
 800ed98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed9a:	0048      	lsls	r0, r1, #1
 800ed9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed9e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800eda2:	f851 4c04 	ldr.w	r4, [r1, #-4]
 800eda6:	fb58 4802 	smmla	r8, r8, r2, r4
 800edaa:	fb50 4002 	smmla	r0, r0, r2, r4
 800edae:	fa48 f303 	asr.w	r3, r8, r3
 800edb2:	f303 0307 	ssat	r3, #8, r3
 800edb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800edbc:	9b08      	ldr	r3, [sp, #32]
 800edbe:	f933 4c02 	ldrsh.w	r4, [r3, #-2]
 800edc2:	fa40 f404 	asr.w	r4, r0, r4
 800edc6:	f304 0407 	ssat	r4, #8, r4
 800edca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edcc:	f803 4c01 	strb.w	r4, [r3, #-1]
 800edd0:	e722      	b.n	800ec18 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	dd3f      	ble.n	800ee56 <st_sssa8_ch_nn_mat_mult_kernel+0x6ee>
 800edd6:	0053      	lsls	r3, r2, #1
 800edd8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800eddc:	fb53 5204 	smmla	r2, r3, r4, r5
 800ede0:	fb59 5904 	smmla	r9, r9, r4, r5
 800ede4:	fa49 f900 	asr.w	r9, r9, r0
 800ede8:	f309 0907 	ssat	r9, #8, r9
 800edec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edee:	f803 9c02 	strb.w	r9, [r3, #-2]
 800edf2:	9b08      	ldr	r3, [sp, #32]
 800edf4:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 800edf8:	fa42 f303 	asr.w	r3, r2, r3
 800edfc:	f303 0307 	ssat	r3, #8, r3
 800ee00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee02:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ee06:	e6e2      	b.n	800ebce <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 800ee08:	9b01      	ldr	r3, [sp, #4]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	9301      	str	r3, [sp, #4]
 800ee0e:	e6ba      	b.n	800eb86 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 800ee10:	f1c3 0301 	rsb	r3, r3, #1
 800ee14:	4639      	mov	r1, r7
 800ee16:	4099      	lsls	r1, r3
 800ee18:	f301 011f 	ssat	r1, #32, r1
 800ee1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee1e:	f852 6c04 	ldr.w	r6, [r2, #-4]
 800ee22:	fb51 f116 	smmulr	r1, r1, r6
 800ee26:	9800      	ldr	r0, [sp, #0]
 800ee28:	4098      	lsls	r0, r3
 800ee2a:	f300 001f 	ssat	r0, #32, r0
 800ee2e:	fb50 f016 	smmulr	r0, r0, r6
 800ee32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee34:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ee38:	440a      	add	r2, r1
 800ee3a:	f302 0207 	ssat	r2, #8, r2
 800ee3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee40:	f801 2c01 	strb.w	r2, [r1, #-1]
 800ee44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ee48:	4403      	add	r3, r0
 800ee4a:	f303 0307 	ssat	r3, #8, r3
 800ee4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee50:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ee54:	e6e0      	b.n	800ec18 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 800ee56:	f1c0 0001 	rsb	r0, r0, #1
 800ee5a:	fa09 f600 	lsl.w	r6, r9, r0
 800ee5e:	f306 061f 	ssat	r6, #32, r6
 800ee62:	fb56 f614 	smmulr	r6, r6, r4
 800ee66:	fa02 f000 	lsl.w	r0, r2, r0
 800ee6a:	f300 001f 	ssat	r0, #32, r0
 800ee6e:	fb50 f414 	smmulr	r4, r0, r4
 800ee72:	4435      	add	r5, r6
 800ee74:	f305 0507 	ssat	r5, #8, r5
 800ee78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee7a:	f803 5c02 	strb.w	r5, [r3, #-2]
 800ee7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee80:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ee84:	4423      	add	r3, r4
 800ee86:	f303 0307 	ssat	r3, #8, r3
 800ee8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee8c:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ee90:	e69d      	b.n	800ebce <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 800ee92:	1e9f      	subs	r7, r3, #2
 800ee94:	1e5e      	subs	r6, r3, #1
 800ee96:	2301      	movs	r3, #1
 800ee98:	40bb      	lsls	r3, r7
 800ee9a:	fb50 3005 	smmla	r0, r0, r5, r3
 800ee9e:	4130      	asrs	r0, r6
 800eea0:	fb52 3305 	smmla	r3, r2, r5, r3
 800eea4:	1902      	adds	r2, r0, r4
 800eea6:	f302 0207 	ssat	r2, #8, r2
 800eeaa:	4133      	asrs	r3, r6
 800eeac:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800eeae:	4423      	add	r3, r4
 800eeb0:	7002      	strb	r2, [r0, #0]
 800eeb2:	f303 0307 	ssat	r3, #8, r3
 800eeb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800eeb8:	912c      	str	r1, [sp, #176]	; 0xb0
 800eeba:	7013      	strb	r3, [r2, #0]
 800eebc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eebe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800eec0:	4413      	add	r3, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	b01f      	add	sp, #124	; 0x7c
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eecc:	464a      	mov	r2, r9
 800eece:	9700      	str	r7, [sp, #0]
 800eed0:	9306      	str	r3, [sp, #24]
 800eed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eed4:	9305      	str	r3, [sp, #20]
 800eed6:	2300      	movs	r3, #0
 800eed8:	9307      	str	r3, [sp, #28]
 800eeda:	e593      	b.n	800ea04 <st_sssa8_ch_nn_mat_mult_kernel+0x29c>
 800eedc:	9b01      	ldr	r3, [sp, #4]
 800eede:	3302      	adds	r3, #2
 800eee0:	9301      	str	r3, [sp, #4]
 800eee2:	e650      	b.n	800eb86 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 800eee4:	f1c3 0601 	rsb	r6, r3, #1
 800eee8:	fa00 f306 	lsl.w	r3, r0, r6
 800eeec:	f303 031f 	ssat	r3, #32, r3
 800eef0:	fb53 f315 	smmulr	r3, r3, r5
 800eef4:	40b2      	lsls	r2, r6
 800eef6:	f302 021f 	ssat	r2, #32, r2
 800eefa:	fb52 f215 	smmulr	r2, r2, r5
 800eefe:	4423      	add	r3, r4
 800ef00:	f303 0307 	ssat	r3, #8, r3
 800ef04:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ef06:	7003      	strb	r3, [r0, #0]
 800ef08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f303 0307 	ssat	r3, #8, r3
 800ef12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ef14:	912c      	str	r1, [sp, #176]	; 0xb0
 800ef16:	7013      	strb	r3, [r2, #0]
 800ef18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ef1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ef1c:	4413      	add	r3, r2
 800ef1e:	4618      	mov	r0, r3
 800ef20:	b01f      	add	sp, #124	; 0x7c
 800ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef26:	4602      	mov	r2, r0
 800ef28:	e6ec      	b.n	800ed04 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 800ef2a:	bf00      	nop
 800ef2c:	ffff0000 	.word	0xffff0000

0800ef30 <st_int8_to16_no_shift>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	f1b2 0610 	subs.w	r6, r2, #16
 800ef38:	f100 8092 	bmi.w	800f060 <st_int8_to16_no_shift+0x130>
 800ef3c:	0936      	lsrs	r6, r6, #4
 800ef3e:	4603      	mov	r3, r0
 800ef40:	4f4b      	ldr	r7, [pc, #300]	; (800f070 <st_int8_to16_no_shift+0x140>)
 800ef42:	f106 0801 	add.w	r8, r6, #1
 800ef46:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 800ef4a:	681d      	ldr	r5, [r3, #0]
 800ef4c:	3120      	adds	r1, #32
 800ef4e:	685e      	ldr	r6, [r3, #4]
 800ef50:	3310      	adds	r3, #16
 800ef52:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800ef56:	fa2f fc8c 	sxtb16	ip, ip
 800ef5a:	ea0c 0a07 	and.w	sl, ip, r7
 800ef5e:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800ef62:	fa2f f585 	sxtb16	r5, r5
 800ef66:	fa2f fe8e 	sxtb16	lr, lr
 800ef6a:	fa1f fb85 	uxth.w	fp, r5
 800ef6e:	ea0e 0907 	and.w	r9, lr, r7
 800ef72:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 800ef76:	fa2f f686 	sxtb16	r6, r6
 800ef7a:	b2b5      	uxth	r5, r6
 800ef7c:	f841 ac1c 	str.w	sl, [r1, #-28]
 800ef80:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 800ef84:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 800ef88:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 800ef8c:	f841 cc20 	str.w	ip, [r1, #-32]
 800ef90:	f841 6c14 	str.w	r6, [r1, #-20]
 800ef94:	f841 5c18 	str.w	r5, [r1, #-24]
 800ef98:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800ef9c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800efa0:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800efa4:	fa2f fe8e 	sxtb16	lr, lr
 800efa8:	ea0e 0a07 	and.w	sl, lr, r7
 800efac:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800efb0:	fa2f f686 	sxtb16	r6, r6
 800efb4:	fa2f f98c 	sxtb16	r9, ip
 800efb8:	fa1f fb86 	uxth.w	fp, r6
 800efbc:	fa2f f585 	sxtb16	r5, r5
 800efc0:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800efc4:	ea09 0a07 	and.w	sl, r9, r7
 800efc8:	fa1f fc85 	uxth.w	ip, r5
 800efcc:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 800efd0:	f841 6c0c 	str.w	r6, [r1, #-12]
 800efd4:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 800efd8:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 800efdc:	f841 ec10 	str.w	lr, [r1, #-16]
 800efe0:	f841 5c04 	str.w	r5, [r1, #-4]
 800efe4:	f841 cc08 	str.w	ip, [r1, #-8]
 800efe8:	428c      	cmp	r4, r1
 800efea:	d1ae      	bne.n	800ef4a <st_int8_to16_no_shift+0x1a>
 800efec:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800eff0:	f1a2 0c04 	sub.w	ip, r2, #4
 800eff4:	45b4      	cmp	ip, r6
 800eff6:	4430      	add	r0, r6
 800eff8:	db38      	blt.n	800f06c <st_int8_to16_no_shift+0x13c>
 800effa:	ebac 0c06 	sub.w	ip, ip, r6
 800effe:	4607      	mov	r7, r0
 800f000:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800f070 <st_int8_to16_no_shift+0x140>
 800f004:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800f008:	f10c 0801 	add.w	r8, ip, #1
 800f00c:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 800f010:	f857 3b04 	ldr.w	r3, [r7], #4
 800f014:	3408      	adds	r4, #8
 800f016:	fa2f f983 	sxtb16	r9, r3
 800f01a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800f01e:	fa1f f189 	uxth.w	r1, r9
 800f022:	fa2f f383 	sxtb16	r3, r3
 800f026:	ea03 0a0e 	and.w	sl, r3, lr
 800f02a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f02e:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800f032:	f844 3c08 	str.w	r3, [r4, #-8]
 800f036:	f844 9c04 	str.w	r9, [r4, #-4]
 800f03a:	42a5      	cmp	r5, r4
 800f03c:	d1e8      	bne.n	800f010 <st_int8_to16_no_shift+0xe0>
 800f03e:	3604      	adds	r6, #4
 800f040:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800f044:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 800f048:	42b2      	cmp	r2, r6
 800f04a:	dd07      	ble.n	800f05c <st_int8_to16_no_shift+0x12c>
 800f04c:	1b92      	subs	r2, r2, r6
 800f04e:	4402      	add	r2, r0
 800f050:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800f054:	4290      	cmp	r0, r2
 800f056:	f825 3b02 	strh.w	r3, [r5], #2
 800f05a:	d1f9      	bne.n	800f050 <st_int8_to16_no_shift+0x120>
 800f05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	2600      	movs	r6, #0
 800f062:	f1a2 0c04 	sub.w	ip, r2, #4
 800f066:	460c      	mov	r4, r1
 800f068:	45b4      	cmp	ip, r6
 800f06a:	dac6      	bge.n	800effa <st_int8_to16_no_shift+0xca>
 800f06c:	4625      	mov	r5, r4
 800f06e:	e7eb      	b.n	800f048 <st_int8_to16_no_shift+0x118>
 800f070:	ffff0000 	.word	0xffff0000

0800f074 <st_int8_to16_dual>:
 800f074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f078:	b08b      	sub	sp, #44	; 0x2c
 800f07a:	468a      	mov	sl, r1
 800f07c:	eb00 0802 	add.w	r8, r0, r2
 800f080:	9309      	str	r3, [sp, #36]	; 0x24
 800f082:	085b      	lsrs	r3, r3, #1
 800f084:	9200      	str	r2, [sp, #0]
 800f086:	9301      	str	r3, [sp, #4]
 800f088:	f000 8123 	beq.w	800f2d2 <st_int8_to16_dual+0x25e>
 800f08c:	f1a2 0310 	sub.w	r3, r2, #16
 800f090:	3a04      	subs	r2, #4
 800f092:	46c2      	mov	sl, r8
 800f094:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 800f34c <st_int8_to16_dual+0x2d8>
 800f098:	9307      	str	r3, [sp, #28]
 800f09a:	091b      	lsrs	r3, r3, #4
 800f09c:	9206      	str	r2, [sp, #24]
 800f09e:	4688      	mov	r8, r1
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	011a      	lsls	r2, r3, #4
 800f0a4:	019b      	lsls	r3, r3, #6
 800f0a6:	9202      	str	r2, [sp, #8]
 800f0a8:	9308      	str	r3, [sp, #32]
 800f0aa:	9b07      	ldr	r3, [sp, #28]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f2c0 8145 	blt.w	800f33c <st_int8_to16_dual+0x2c8>
 800f0b2:	9b02      	ldr	r3, [sp, #8]
 800f0b4:	4655      	mov	r5, sl
 800f0b6:	18c4      	adds	r4, r0, r3
 800f0b8:	4643      	mov	r3, r8
 800f0ba:	682e      	ldr	r6, [r5, #0]
 800f0bc:	3010      	adds	r0, #16
 800f0be:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800f0c2:	3510      	adds	r5, #16
 800f0c4:	fa2f f286 	sxtb16	r2, r6
 800f0c8:	ea4f 2c36 	mov.w	ip, r6, ror #8
 800f0cc:	3340      	adds	r3, #64	; 0x40
 800f0ce:	fa2f fc8c 	sxtb16	ip, ip
 800f0d2:	ea0c 0609 	and.w	r6, ip, r9
 800f0d6:	ea4f 2731 	mov.w	r7, r1, ror #8
 800f0da:	fa2f f181 	sxtb16	r1, r1
 800f0de:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 800f0e2:	fa1f fe81 	uxth.w	lr, r1
 800f0e6:	fa2f f787 	sxtb16	r7, r7
 800f0ea:	b292      	uxth	r2, r2
 800f0ec:	ea07 0b09 	and.w	fp, r7, r9
 800f0f0:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 800f0f4:	f843 6c34 	str.w	r6, [r3, #-52]
 800f0f8:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 800f0fc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800f100:	f843 7c40 	str.w	r7, [r3, #-64]
 800f104:	f843 1c38 	str.w	r1, [r3, #-56]
 800f108:	f843 2c3c 	str.w	r2, [r3, #-60]
 800f10c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 800f110:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800f114:	fa2f f286 	sxtb16	r2, r6
 800f118:	ea4f 2c36 	mov.w	ip, r6, ror #8
 800f11c:	fa2f fc8c 	sxtb16	ip, ip
 800f120:	ea0c 0609 	and.w	r6, ip, r9
 800f124:	ea4f 2731 	mov.w	r7, r1, ror #8
 800f128:	fa2f f181 	sxtb16	r1, r1
 800f12c:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 800f130:	fa1f fe81 	uxth.w	lr, r1
 800f134:	fa2f f787 	sxtb16	r7, r7
 800f138:	b292      	uxth	r2, r2
 800f13a:	ea07 0b09 	and.w	fp, r7, r9
 800f13e:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 800f142:	f843 6c24 	str.w	r6, [r3, #-36]
 800f146:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 800f14a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800f14e:	f843 7c30 	str.w	r7, [r3, #-48]
 800f152:	f843 1c28 	str.w	r1, [r3, #-40]
 800f156:	f843 2c2c 	str.w	r2, [r3, #-44]
 800f15a:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800f15e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f162:	fa2f f286 	sxtb16	r2, r6
 800f166:	ea4f 2c36 	mov.w	ip, r6, ror #8
 800f16a:	fa2f fc8c 	sxtb16	ip, ip
 800f16e:	ea0c 0609 	and.w	r6, ip, r9
 800f172:	ea4f 2731 	mov.w	r7, r1, ror #8
 800f176:	fa2f f181 	sxtb16	r1, r1
 800f17a:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 800f17e:	fa1f fe81 	uxth.w	lr, r1
 800f182:	fa2f f787 	sxtb16	r7, r7
 800f186:	b292      	uxth	r2, r2
 800f188:	ea07 0b09 	and.w	fp, r7, r9
 800f18c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 800f190:	f843 6c14 	str.w	r6, [r3, #-20]
 800f194:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 800f198:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800f19c:	f843 7c20 	str.w	r7, [r3, #-32]
 800f1a0:	f843 1c18 	str.w	r1, [r3, #-24]
 800f1a4:	f843 2c1c 	str.w	r2, [r3, #-28]
 800f1a8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800f1ac:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800f1b0:	4284      	cmp	r4, r0
 800f1b2:	fa2f f286 	sxtb16	r2, r6
 800f1b6:	ea4f 2c36 	mov.w	ip, r6, ror #8
 800f1ba:	fa2f fc8c 	sxtb16	ip, ip
 800f1be:	ea0c 0609 	and.w	r6, ip, r9
 800f1c2:	ea4f 2731 	mov.w	r7, r1, ror #8
 800f1c6:	fa2f f181 	sxtb16	r1, r1
 800f1ca:	fa2f f787 	sxtb16	r7, r7
 800f1ce:	fa1f fe81 	uxth.w	lr, r1
 800f1d2:	ea07 0b09 	and.w	fp, r7, r9
 800f1d6:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 800f1da:	b292      	uxth	r2, r2
 800f1dc:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 800f1e0:	f843 6c04 	str.w	r6, [r3, #-4]
 800f1e4:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 800f1e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800f1ec:	f843 1c08 	str.w	r1, [r3, #-8]
 800f1f0:	f843 7c10 	str.w	r7, [r3, #-16]
 800f1f4:	f843 2c0c 	str.w	r2, [r3, #-12]
 800f1f8:	f47f af5f 	bne.w	800f0ba <st_int8_to16_dual+0x46>
 800f1fc:	9b08      	ldr	r3, [sp, #32]
 800f1fe:	4498      	add	r8, r3
 800f200:	9b02      	ldr	r3, [sp, #8]
 800f202:	449a      	add	sl, r3
 800f204:	469c      	mov	ip, r3
 800f206:	9b06      	ldr	r3, [sp, #24]
 800f208:	4563      	cmp	r3, ip
 800f20a:	db3f      	blt.n	800f28c <st_int8_to16_dual+0x218>
 800f20c:	eba3 030c 	sub.w	r3, r3, ip
 800f210:	4657      	mov	r7, sl
 800f212:	4645      	mov	r5, r8
 800f214:	089b      	lsrs	r3, r3, #2
 800f216:	9303      	str	r3, [sp, #12]
 800f218:	3301      	adds	r3, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	eb04 0e03 	add.w	lr, r4, r3
 800f222:	9305      	str	r3, [sp, #20]
 800f224:	f854 2b04 	ldr.w	r2, [r4], #4
 800f228:	3510      	adds	r5, #16
 800f22a:	f857 3b04 	ldr.w	r3, [r7], #4
 800f22e:	ea4f 2032 	mov.w	r0, r2, ror #8
 800f232:	4574      	cmp	r4, lr
 800f234:	fa2f f080 	sxtb16	r0, r0
 800f238:	ea00 0609 	and.w	r6, r0, r9
 800f23c:	ea4f 2133 	mov.w	r1, r3, ror #8
 800f240:	fa2f f282 	sxtb16	r2, r2
 800f244:	fa2f f181 	sxtb16	r1, r1
 800f248:	fa1f fb82 	uxth.w	fp, r2
 800f24c:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 800f250:	ea01 0609 	and.w	r6, r1, r9
 800f254:	fa2f f383 	sxtb16	r3, r3
 800f258:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 800f25c:	f845 2c08 	str.w	r2, [r5, #-8]
 800f260:	b29b      	uxth	r3, r3
 800f262:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 800f266:	f845 6c04 	str.w	r6, [r5, #-4]
 800f26a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f26e:	f845 0c10 	str.w	r0, [r5, #-16]
 800f272:	f845 3c0c 	str.w	r3, [r5, #-12]
 800f276:	d1d5      	bne.n	800f224 <st_int8_to16_dual+0x1b0>
 800f278:	9b04      	ldr	r3, [sp, #16]
 800f27a:	f10c 0c04 	add.w	ip, ip, #4
 800f27e:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 800f282:	9b05      	ldr	r3, [sp, #20]
 800f284:	449a      	add	sl, r3
 800f286:	9b03      	ldr	r3, [sp, #12]
 800f288:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800f28c:	9b00      	ldr	r3, [sp, #0]
 800f28e:	4563      	cmp	r3, ip
 800f290:	dd14      	ble.n	800f2bc <st_int8_to16_dual+0x248>
 800f292:	eba3 0c0c 	sub.w	ip, r3, ip
 800f296:	4652      	mov	r2, sl
 800f298:	f108 0304 	add.w	r3, r8, #4
 800f29c:	eb04 000c 	add.w	r0, r4, ip
 800f2a0:	f914 1b01 	ldrsb.w	r1, [r4], #1
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	f823 1c08 	strh.w	r1, [r3, #-8]
 800f2aa:	4284      	cmp	r4, r0
 800f2ac:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800f2b0:	f823 1c06 	strh.w	r1, [r3, #-6]
 800f2b4:	d1f4      	bne.n	800f2a0 <st_int8_to16_dual+0x22c>
 800f2b6:	44e2      	add	sl, ip
 800f2b8:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	9a00      	ldr	r2, [sp, #0]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	18a0      	adds	r0, r4, r2
 800f2c4:	4492      	add	sl, r2
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f47f aeed 	bne.w	800f0aa <st_int8_to16_dual+0x36>
 800f2d0:	46c2      	mov	sl, r8
 800f2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d4:	07db      	lsls	r3, r3, #31
 800f2d6:	d52e      	bpl.n	800f336 <st_int8_to16_dual+0x2c2>
 800f2d8:	9b00      	ldr	r3, [sp, #0]
 800f2da:	3b04      	subs	r3, #4
 800f2dc:	d432      	bmi.n	800f344 <st_int8_to16_dual+0x2d0>
 800f2de:	089b      	lsrs	r3, r3, #2
 800f2e0:	4605      	mov	r5, r0
 800f2e2:	4f1a      	ldr	r7, [pc, #104]	; (800f34c <st_int8_to16_dual+0x2d8>)
 800f2e4:	1c5e      	adds	r6, r3, #1
 800f2e6:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 800f2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ee:	f10a 0a08 	add.w	sl, sl, #8
 800f2f2:	fa2f fc83 	sxtb16	ip, r3
 800f2f6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800f2fa:	fa1f f18c 	uxth.w	r1, ip
 800f2fe:	fa2f f383 	sxtb16	r3, r3
 800f302:	ea03 0207 	and.w	r2, r3, r7
 800f306:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f30a:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800f30e:	f84a 3c08 	str.w	r3, [sl, #-8]
 800f312:	f84a 2c04 	str.w	r2, [sl, #-4]
 800f316:	4554      	cmp	r4, sl
 800f318:	d1e7      	bne.n	800f2ea <st_int8_to16_dual+0x276>
 800f31a:	00b3      	lsls	r3, r6, #2
 800f31c:	4418      	add	r0, r3
 800f31e:	9a00      	ldr	r2, [sp, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	dd08      	ble.n	800f336 <st_int8_to16_dual+0x2c2>
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f32a:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800f32e:	f824 2b02 	strh.w	r2, [r4], #2
 800f332:	429c      	cmp	r4, r3
 800f334:	d1f9      	bne.n	800f32a <st_int8_to16_dual+0x2b6>
 800f336:	b00b      	add	sp, #44	; 0x2c
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	4604      	mov	r4, r0
 800f33e:	f04f 0c00 	mov.w	ip, #0
 800f342:	e760      	b.n	800f206 <st_int8_to16_dual+0x192>
 800f344:	4654      	mov	r4, sl
 800f346:	2300      	movs	r3, #0
 800f348:	e7e9      	b.n	800f31e <st_int8_to16_dual+0x2aa>
 800f34a:	bf00      	nop
 800f34c:	ffff0000 	.word	0xffff0000

0800f350 <st_sssa8_ch_fullW_prefetch>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	b087      	sub	sp, #28
 800f356:	eb00 0c02 	add.w	ip, r0, r2
 800f35a:	9105      	str	r1, [sp, #20]
 800f35c:	1049      	asrs	r1, r1, #1
 800f35e:	9100      	str	r1, [sp, #0]
 800f360:	f000 80d7 	beq.w	800f512 <st_sssa8_ch_fullW_prefetch+0x1c2>
 800f364:	f1a2 0110 	sub.w	r1, r2, #16
 800f368:	1ed4      	subs	r4, r2, #3
 800f36a:	0909      	lsrs	r1, r1, #4
 800f36c:	9402      	str	r4, [sp, #8]
 800f36e:	1f14      	subs	r4, r2, #4
 800f370:	3101      	adds	r1, #1
 800f372:	9404      	str	r4, [sp, #16]
 800f374:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 800f378:	0189      	lsls	r1, r1, #6
 800f37a:	9103      	str	r1, [sp, #12]
 800f37c:	2a0f      	cmp	r2, #15
 800f37e:	f340 80dd 	ble.w	800f53c <st_sssa8_ch_fullW_prefetch+0x1ec>
 800f382:	eb00 040a 	add.w	r4, r0, sl
 800f386:	4665      	mov	r5, ip
 800f388:	4619      	mov	r1, r3
 800f38a:	6807      	ldr	r7, [r0, #0]
 800f38c:	3010      	adds	r0, #16
 800f38e:	682e      	ldr	r6, [r5, #0]
 800f390:	3140      	adds	r1, #64	; 0x40
 800f392:	ea4f 2e37 	mov.w	lr, r7, ror #8
 800f396:	3510      	adds	r5, #16
 800f398:	fa2f f787 	sxtb16	r7, r7
 800f39c:	fa2f fe8e 	sxtb16	lr, lr
 800f3a0:	f841 7c40 	str.w	r7, [r1, #-64]
 800f3a4:	ea4f 2736 	mov.w	r7, r6, ror #8
 800f3a8:	f841 ec3c 	str.w	lr, [r1, #-60]
 800f3ac:	fa2f f787 	sxtb16	r7, r7
 800f3b0:	fa2f f686 	sxtb16	r6, r6
 800f3b4:	f841 7c34 	str.w	r7, [r1, #-52]
 800f3b8:	f841 6c38 	str.w	r6, [r1, #-56]
 800f3bc:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800f3c0:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 800f3c4:	ea4f 2e37 	mov.w	lr, r7, ror #8
 800f3c8:	fa2f f787 	sxtb16	r7, r7
 800f3cc:	fa2f fe8e 	sxtb16	lr, lr
 800f3d0:	f841 7c30 	str.w	r7, [r1, #-48]
 800f3d4:	ea4f 2736 	mov.w	r7, r6, ror #8
 800f3d8:	f841 ec2c 	str.w	lr, [r1, #-44]
 800f3dc:	fa2f f787 	sxtb16	r7, r7
 800f3e0:	fa2f f686 	sxtb16	r6, r6
 800f3e4:	f841 7c24 	str.w	r7, [r1, #-36]
 800f3e8:	f841 6c28 	str.w	r6, [r1, #-40]
 800f3ec:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800f3f0:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800f3f4:	ea4f 2e37 	mov.w	lr, r7, ror #8
 800f3f8:	fa2f f787 	sxtb16	r7, r7
 800f3fc:	fa2f fe8e 	sxtb16	lr, lr
 800f400:	f841 7c20 	str.w	r7, [r1, #-32]
 800f404:	ea4f 2736 	mov.w	r7, r6, ror #8
 800f408:	f841 ec1c 	str.w	lr, [r1, #-28]
 800f40c:	fa2f f787 	sxtb16	r7, r7
 800f410:	fa2f f686 	sxtb16	r6, r6
 800f414:	f841 7c14 	str.w	r7, [r1, #-20]
 800f418:	f841 6c18 	str.w	r6, [r1, #-24]
 800f41c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f420:	4284      	cmp	r4, r0
 800f422:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800f426:	ea4f 2e37 	mov.w	lr, r7, ror #8
 800f42a:	fa2f f787 	sxtb16	r7, r7
 800f42e:	fa2f fe8e 	sxtb16	lr, lr
 800f432:	f841 7c10 	str.w	r7, [r1, #-16]
 800f436:	ea4f 2736 	mov.w	r7, r6, ror #8
 800f43a:	f841 ec0c 	str.w	lr, [r1, #-12]
 800f43e:	fa2f f787 	sxtb16	r7, r7
 800f442:	fa2f f686 	sxtb16	r6, r6
 800f446:	f841 7c04 	str.w	r7, [r1, #-4]
 800f44a:	f841 6c08 	str.w	r6, [r1, #-8]
 800f44e:	d19c      	bne.n	800f38a <st_sssa8_ch_fullW_prefetch+0x3a>
 800f450:	9903      	ldr	r1, [sp, #12]
 800f452:	44d4      	add	ip, sl
 800f454:	46d6      	mov	lr, sl
 800f456:	440b      	add	r3, r1
 800f458:	9902      	ldr	r1, [sp, #8]
 800f45a:	458e      	cmp	lr, r1
 800f45c:	da30      	bge.n	800f4c0 <st_sssa8_ch_fullW_prefetch+0x170>
 800f45e:	9904      	ldr	r1, [sp, #16]
 800f460:	4667      	mov	r7, ip
 800f462:	eba1 090e 	sub.w	r9, r1, lr
 800f466:	4619      	mov	r1, r3
 800f468:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800f46c:	f109 0b01 	add.w	fp, r9, #1
 800f470:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800f474:	eb04 0800 	add.w	r8, r4, r0
 800f478:	9001      	str	r0, [sp, #4]
 800f47a:	f854 5b04 	ldr.w	r5, [r4], #4
 800f47e:	3110      	adds	r1, #16
 800f480:	f857 0b04 	ldr.w	r0, [r7], #4
 800f484:	4544      	cmp	r4, r8
 800f486:	ea4f 2635 	mov.w	r6, r5, ror #8
 800f48a:	fa2f f585 	sxtb16	r5, r5
 800f48e:	fa2f f686 	sxtb16	r6, r6
 800f492:	f841 5c10 	str.w	r5, [r1, #-16]
 800f496:	ea4f 2530 	mov.w	r5, r0, ror #8
 800f49a:	f841 6c0c 	str.w	r6, [r1, #-12]
 800f49e:	fa2f f585 	sxtb16	r5, r5
 800f4a2:	fa2f f080 	sxtb16	r0, r0
 800f4a6:	f841 5c04 	str.w	r5, [r1, #-4]
 800f4aa:	f841 0c08 	str.w	r0, [r1, #-8]
 800f4ae:	d1e4      	bne.n	800f47a <st_sssa8_ch_fullW_prefetch+0x12a>
 800f4b0:	f10e 0e04 	add.w	lr, lr, #4
 800f4b4:	9901      	ldr	r1, [sp, #4]
 800f4b6:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 800f4ba:	448c      	add	ip, r1
 800f4bc:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800f4c0:	4572      	cmp	r2, lr
 800f4c2:	dd1f      	ble.n	800f504 <st_sssa8_ch_fullW_prefetch+0x1b4>
 800f4c4:	f994 0000 	ldrsb.w	r0, [r4]
 800f4c8:	f10e 0101 	add.w	r1, lr, #1
 800f4cc:	8018      	strh	r0, [r3, #0]
 800f4ce:	428a      	cmp	r2, r1
 800f4d0:	f99c 0000 	ldrsb.w	r0, [ip]
 800f4d4:	8058      	strh	r0, [r3, #2]
 800f4d6:	dd2c      	ble.n	800f532 <st_sssa8_ch_fullW_prefetch+0x1e2>
 800f4d8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f4dc:	f10e 0e02 	add.w	lr, lr, #2
 800f4e0:	8099      	strh	r1, [r3, #4]
 800f4e2:	4572      	cmp	r2, lr
 800f4e4:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 800f4e8:	80d9      	strh	r1, [r3, #6]
 800f4ea:	dd2b      	ble.n	800f544 <st_sssa8_ch_fullW_prefetch+0x1f4>
 800f4ec:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800f4f0:	f10c 0c03 	add.w	ip, ip, #3
 800f4f4:	3403      	adds	r4, #3
 800f4f6:	330c      	adds	r3, #12
 800f4f8:	f823 1c04 	strh.w	r1, [r3, #-4]
 800f4fc:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 800f500:	f823 1c02 	strh.w	r1, [r3, #-2]
 800f504:	9900      	ldr	r1, [sp, #0]
 800f506:	18a0      	adds	r0, r4, r2
 800f508:	4494      	add	ip, r2
 800f50a:	3901      	subs	r1, #1
 800f50c:	9100      	str	r1, [sp, #0]
 800f50e:	f47f af35 	bne.w	800f37c <st_sssa8_ch_fullW_prefetch+0x2c>
 800f512:	9905      	ldr	r1, [sp, #20]
 800f514:	07c9      	lsls	r1, r1, #31
 800f516:	d509      	bpl.n	800f52c <st_sssa8_ch_fullW_prefetch+0x1dc>
 800f518:	2a00      	cmp	r2, #0
 800f51a:	dd07      	ble.n	800f52c <st_sssa8_ch_fullW_prefetch+0x1dc>
 800f51c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f520:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800f524:	f823 1b02 	strh.w	r1, [r3], #2
 800f528:	4293      	cmp	r3, r2
 800f52a:	d1f9      	bne.n	800f520 <st_sssa8_ch_fullW_prefetch+0x1d0>
 800f52c:	b007      	add	sp, #28
 800f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f532:	3401      	adds	r4, #1
 800f534:	f10c 0c01 	add.w	ip, ip, #1
 800f538:	3304      	adds	r3, #4
 800f53a:	e7e3      	b.n	800f504 <st_sssa8_ch_fullW_prefetch+0x1b4>
 800f53c:	4604      	mov	r4, r0
 800f53e:	f04f 0e00 	mov.w	lr, #0
 800f542:	e789      	b.n	800f458 <st_sssa8_ch_fullW_prefetch+0x108>
 800f544:	3402      	adds	r4, #2
 800f546:	f10c 0c02 	add.w	ip, ip, #2
 800f54a:	3308      	adds	r3, #8
 800f54c:	e7da      	b.n	800f504 <st_sssa8_ch_fullW_prefetch+0x1b4>
 800f54e:	bf00      	nop

0800f550 <st_sssa8_ch_nn_mat_mult_nt_t>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	b0b3      	sub	sp, #204	; 0xcc
 800f556:	9023      	str	r0, [sp, #140]	; 0x8c
 800f558:	9224      	str	r2, [sp, #144]	; 0x90
 800f55a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f55c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800f55e:	9129      	str	r1, [sp, #164]	; 0xa4
 800f560:	2800      	cmp	r0, #0
 800f562:	bf18      	it	ne
 800f564:	4602      	movne	r2, r0
 800f566:	932e      	str	r3, [sp, #184]	; 0xb8
 800f568:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f56c:	9243      	str	r2, [sp, #268]	; 0x10c
 800f56e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f570:	2a01      	cmp	r2, #1
 800f572:	f340 823b 	ble.w	800f9ec <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 800f576:	f00b 0403 	and.w	r4, fp, #3
 800f57a:	3a02      	subs	r2, #2
 800f57c:	ea4f 00ab 	mov.w	r0, fp, asr #2
 800f580:	461e      	mov	r6, r3
 800f582:	942c      	str	r4, [sp, #176]	; 0xb0
 800f584:	f1ab 040f 	sub.w	r4, fp, #15
 800f588:	0852      	lsrs	r2, r2, #1
 800f58a:	f1ab 0310 	sub.w	r3, fp, #16
 800f58e:	9411      	str	r4, [sp, #68]	; 0x44
 800f590:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800f592:	091b      	lsrs	r3, r3, #4
 800f594:	9230      	str	r2, [sp, #192]	; 0xc0
 800f596:	00d2      	lsls	r2, r2, #3
 800f598:	f004 0401 	and.w	r4, r4, #1
 800f59c:	3301      	adds	r3, #1
 800f59e:	320c      	adds	r2, #12
 800f5a0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 800f5a2:	9425      	str	r4, [sp, #148]	; 0x94
 800f5a4:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 800f5a6:	106d      	asrs	r5, r5, #1
 800f5a8:	9227      	str	r2, [sp, #156]	; 0x9c
 800f5aa:	3402      	adds	r4, #2
 800f5ac:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f5ae:	902b      	str	r0, [sp, #172]	; 0xac
 800f5b0:	9417      	str	r4, [sp, #92]	; 0x5c
 800f5b2:	0084      	lsls	r4, r0, #2
 800f5b4:	0052      	lsls	r2, r2, #1
 800f5b6:	9526      	str	r5, [sp, #152]	; 0x98
 800f5b8:	9431      	str	r4, [sp, #196]	; 0xc4
 800f5ba:	445c      	add	r4, fp
 800f5bc:	9212      	str	r2, [sp, #72]	; 0x48
 800f5be:	942f      	str	r4, [sp, #188]	; 0xbc
 800f5c0:	011c      	lsls	r4, r3, #4
 800f5c2:	019b      	lsls	r3, r3, #6
 800f5c4:	9616      	str	r6, [sp, #88]	; 0x58
 800f5c6:	9405      	str	r4, [sp, #20]
 800f5c8:	9322      	str	r3, [sp, #136]	; 0x88
 800f5ca:	fb02 f305 	mul.w	r3, r2, r5
 800f5ce:	911c      	str	r1, [sp, #112]	; 0x70
 800f5d0:	9328      	str	r3, [sp, #160]	; 0xa0
 800f5d2:	0103      	lsls	r3, r0, #4
 800f5d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5d6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800f5da:	9321      	str	r3, [sp, #132]	; 0x84
 800f5dc:	2304      	movs	r3, #4
 800f5de:	9315      	str	r3, [sp, #84]	; 0x54
 800f5e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f5e4:	932a      	str	r3, [sp, #168]	; 0xa8
 800f5e6:	f1ab 0304 	sub.w	r3, fp, #4
 800f5ea:	9314      	str	r3, [sp, #80]	; 0x50
 800f5ec:	f10b 0301 	add.w	r3, fp, #1
 800f5f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5f4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800f5f6:	9942      	ldr	r1, [sp, #264]	; 0x108
 800f5f8:	441a      	add	r2, r3
 800f5fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f5fc:	4419      	add	r1, r3
 800f5fe:	9220      	str	r2, [sp, #128]	; 0x80
 800f600:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f604:	911f      	str	r1, [sp, #124]	; 0x7c
 800f606:	920c      	str	r2, [sp, #48]	; 0x30
 800f608:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f60c:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 800f610:	920e      	str	r2, [sp, #56]	; 0x38
 800f612:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f616:	9403      	str	r4, [sp, #12]
 800f618:	9204      	str	r2, [sp, #16]
 800f61a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800f61c:	4611      	mov	r1, r2
 800f61e:	58ca      	ldr	r2, [r1, r3]
 800f620:	920d      	str	r2, [sp, #52]	; 0x34
 800f622:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800f624:	58d3      	ldr	r3, [r2, r3]
 800f626:	930f      	str	r3, [sp, #60]	; 0x3c
 800f628:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 83f2 	beq.w	800fe14 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c4>
 800f630:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f632:	2b00      	cmp	r3, #0
 800f634:	f040 839c 	bne.w	800fd70 <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 800f638:	4619      	mov	r1, r3
 800f63a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f63c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f63e:	1910      	adds	r0, r2, r4
 800f640:	5912      	ldr	r2, [r2, r4]
 800f642:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f644:	4413      	add	r3, r2
 800f646:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800f64a:	930a      	str	r3, [sp, #40]	; 0x28
 800f64c:	180b      	adds	r3, r1, r0
 800f64e:	9309      	str	r3, [sp, #36]	; 0x24
 800f650:	2c00      	cmp	r4, #0
 800f652:	f000 8447 	beq.w	800fee4 <st_sssa8_ch_nn_mat_mult_nt_t+0x994>
 800f656:	9d40      	ldr	r5, [sp, #256]	; 0x100
 800f658:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f65a:	3d03      	subs	r5, #3
 800f65c:	9804      	ldr	r0, [sp, #16]
 800f65e:	9903      	ldr	r1, [sp, #12]
 800f660:	9510      	str	r5, [sp, #64]	; 0x40
 800f662:	1e83      	subs	r3, r0, #2
 800f664:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 800f666:	1e8a      	subs	r2, r1, #2
 800f668:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800f66c:	4435      	add	r5, r6
 800f66e:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f672:	9402      	str	r4, [sp, #8]
 800f674:	9513      	str	r5, [sp, #76]	; 0x4c
 800f676:	2501      	movs	r5, #1
 800f678:	fa05 f303 	lsl.w	r3, r5, r3
 800f67c:	fa05 f202 	lsl.w	r2, r5, r2
 800f680:	9319      	str	r3, [sp, #100]	; 0x64
 800f682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f684:	9218      	str	r2, [sp, #96]	; 0x60
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	1a6b      	subs	r3, r5, r1
 800f68a:	931d      	str	r3, [sp, #116]	; 0x74
 800f68c:	1e4b      	subs	r3, r1, #1
 800f68e:	931a      	str	r3, [sp, #104]	; 0x68
 800f690:	1a2b      	subs	r3, r5, r0
 800f692:	931e      	str	r3, [sp, #120]	; 0x78
 800f694:	1e43      	subs	r3, r0, #1
 800f696:	931b      	str	r3, [sp, #108]	; 0x6c
 800f698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f340 8259 	ble.w	800fb52 <st_sssa8_ch_nn_mat_mult_nt_t+0x602>
 800f6a0:	9b05      	ldr	r3, [sp, #20]
 800f6a2:	eb0a 090b 	add.w	r9, sl, fp
 800f6a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6a8:	4453      	add	r3, sl
 800f6aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f6ac:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	4634      	mov	r4, r6
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f8da 5000 	ldr.w	r5, [sl]
 800f6ba:	f8d8 2000 	ldr.w	r2, [r8]
 800f6be:	fa2f f185 	sxtb16	r1, r5
 800f6c2:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800f6c6:	fa2f f595 	sxtb16	r5, r5, ror #8
 800f6ca:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800f6ce:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800f6d2:	fb21 6602 	smlad	r6, r1, r2, r6
 800f6d6:	fb25 660c 	smlad	r6, r5, ip, r6
 800f6da:	fb21 000e 	smlad	r0, r1, lr, r0
 800f6de:	fb25 0007 	smlad	r0, r5, r7, r0
 800f6e2:	f85a 100b 	ldr.w	r1, [sl, fp]
 800f6e6:	fa2f f581 	sxtb16	r5, r1
 800f6ea:	fa2f f191 	sxtb16	r1, r1, ror #8
 800f6ee:	fb25 4202 	smlad	r2, r5, r2, r4
 800f6f2:	fb25 330e 	smlad	r3, r5, lr, r3
 800f6f6:	fb21 220c 	smlad	r2, r1, ip, r2
 800f6fa:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800f6fe:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800f702:	fb21 3707 	smlad	r7, r1, r7, r3
 800f706:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f70a:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800f70e:	fa2f f583 	sxtb16	r5, r3
 800f712:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800f716:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f71a:	fb25 660c 	smlad	r6, r5, ip, r6
 800f71e:	fb23 6604 	smlad	r6, r3, r4, r6
 800f722:	fb25 050e 	smlad	r5, r5, lr, r0
 800f726:	fb23 5501 	smlad	r5, r3, r1, r5
 800f72a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f72e:	fa2f f380 	sxtb16	r3, r0
 800f732:	fa2f f090 	sxtb16	r0, r0, ror #8
 800f736:	fb23 2c0c 	smlad	ip, r3, ip, r2
 800f73a:	fb23 770e 	smlad	r7, r3, lr, r7
 800f73e:	fb20 cc04 	smlad	ip, r0, r4, ip
 800f742:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800f746:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 800f74a:	fb20 7101 	smlad	r1, r0, r1, r7
 800f74e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f752:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800f756:	fa2f f382 	sxtb16	r3, r2
 800f75a:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 800f75e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f762:	fb23 6604 	smlad	r6, r3, r4, r6
 800f766:	fb22 660e 	smlad	r6, r2, lr, r6
 800f76a:	fb23 5300 	smlad	r3, r3, r0, r5
 800f76e:	fb22 3207 	smlad	r2, r2, r7, r3
 800f772:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800f776:	fa2f f985 	sxtb16	r9, r5
 800f77a:	fa2f f595 	sxtb16	r5, r5, ror #8
 800f77e:	fb29 c404 	smlad	r4, r9, r4, ip
 800f782:	fb29 1100 	smlad	r1, r9, r0, r1
 800f786:	fb25 4e0e 	smlad	lr, r5, lr, r4
 800f78a:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 800f78e:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800f792:	fb25 1707 	smlad	r7, r5, r7, r1
 800f796:	f8da 000c 	ldr.w	r0, [sl, #12]
 800f79a:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800f79e:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800f7a2:	f10a 0a10 	add.w	sl, sl, #16
 800f7a6:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800f7aa:	fa2f f380 	sxtb16	r3, r0
 800f7ae:	fa2f f090 	sxtb16	r0, r0, ror #8
 800f7b2:	fb23 660c 	smlad	r6, r3, ip, r6
 800f7b6:	fb20 6604 	smlad	r6, r0, r4, r6
 800f7ba:	fb23 2201 	smlad	r2, r3, r1, r2
 800f7be:	fb20 2005 	smlad	r0, r0, r5, r2
 800f7c2:	eb0a 090b 	add.w	r9, sl, fp
 800f7c6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800f7ca:	fa2f f283 	sxtb16	r2, r3
 800f7ce:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f7d2:	fb22 ee0c 	smlad	lr, r2, ip, lr
 800f7d6:	fb22 7701 	smlad	r7, r2, r1, r7
 800f7da:	fb23 e404 	smlad	r4, r3, r4, lr
 800f7de:	fb23 7305 	smlad	r3, r3, r5, r7
 800f7e2:	9a00      	ldr	r2, [sp, #0]
 800f7e4:	4592      	cmp	sl, r2
 800f7e6:	f47f af66 	bne.w	800f6b6 <st_sssa8_ch_nn_mat_mult_nt_t+0x166>
 800f7ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7ec:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f7f0:	9200      	str	r2, [sp, #0]
 800f7f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7f4:	4591      	cmp	r9, r2
 800f7f6:	da44      	bge.n	800f882 <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 800f7f8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f7fa:	f8cd 9020 	str.w	r9, [sp, #32]
 800f7fe:	eba1 0209 	sub.w	r2, r1, r9
 800f802:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 800f806:	9f00      	ldr	r7, [sp, #0]
 800f808:	468b      	mov	fp, r1
 800f80a:	0892      	lsrs	r2, r2, #2
 800f80c:	9207      	str	r2, [sp, #28]
 800f80e:	3201      	adds	r2, #1
 800f810:	9206      	str	r2, [sp, #24]
 800f812:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f816:	4691      	mov	r9, r2
 800f818:	f85a 2b04 	ldr.w	r2, [sl], #4
 800f81c:	3710      	adds	r7, #16
 800f81e:	f857 5c10 	ldr.w	r5, [r7, #-16]
 800f822:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 800f826:	f857 8c08 	ldr.w	r8, [r7, #-8]
 800f82a:	fa2f f182 	sxtb16	r1, r2
 800f82e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 800f832:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f836:	fb21 6605 	smlad	r6, r1, r5, r6
 800f83a:	fb22 660e 	smlad	r6, r2, lr, r6
 800f83e:	fb21 0008 	smlad	r0, r1, r8, r0
 800f842:	fb22 000c 	smlad	r0, r2, ip, r0
 800f846:	f85a 200b 	ldr.w	r2, [sl, fp]
 800f84a:	fa2f f182 	sxtb16	r1, r2
 800f84e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f852:	fb21 4405 	smlad	r4, r1, r5, r4
 800f856:	fb21 3308 	smlad	r3, r1, r8, r3
 800f85a:	fb22 440e 	smlad	r4, r2, lr, r4
 800f85e:	fb22 330c 	smlad	r3, r2, ip, r3
 800f862:	45ca      	cmp	sl, r9
 800f864:	d1d8      	bne.n	800f818 <st_sssa8_ch_nn_mat_mult_nt_t+0x2c8>
 800f866:	9a00      	ldr	r2, [sp, #0]
 800f868:	9906      	ldr	r1, [sp, #24]
 800f86a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f86e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f872:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f876:	f109 0904 	add.w	r9, r9, #4
 800f87a:	9200      	str	r2, [sp, #0]
 800f87c:	9a07      	ldr	r2, [sp, #28]
 800f87e:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800f882:	45cb      	cmp	fp, r9
 800f884:	eb0a 020b 	add.w	r2, sl, fp
 800f888:	f340 812a 	ble.w	800fae0 <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 800f88c:	9900      	ldr	r1, [sp, #0]
 800f88e:	f109 0201 	add.w	r2, r9, #1
 800f892:	f99a c000 	ldrsb.w	ip, [sl]
 800f896:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f89a:	4593      	cmp	fp, r2
 800f89c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f8a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8a2:	fb17 660c 	smlabb	r6, r7, ip, r6
 800f8a6:	fb15 000c 	smlabb	r0, r5, ip, r0
 800f8aa:	eb0a 0e01 	add.w	lr, sl, r1
 800f8ae:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800f8b2:	fb17 4401 	smlabb	r4, r7, r1, r4
 800f8b6:	fb15 3301 	smlabb	r3, r5, r1, r3
 800f8ba:	f340 8113 	ble.w	800fae4 <st_sssa8_ch_nn_mat_mult_nt_t+0x594>
 800f8be:	9a00      	ldr	r2, [sp, #0]
 800f8c0:	f109 0902 	add.w	r9, r9, #2
 800f8c4:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 800f8c8:	f10a 0c02 	add.w	ip, sl, #2
 800f8cc:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800f8d0:	45cb      	cmp	fp, r9
 800f8d2:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800f8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8d8:	fb15 6607 	smlabb	r6, r5, r7, r6
 800f8dc:	fb11 0007 	smlabb	r0, r1, r7, r0
 800f8e0:	4696      	mov	lr, r2
 800f8e2:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 800f8e6:	fb15 4402 	smlabb	r4, r5, r2, r4
 800f8ea:	eb0c 050b 	add.w	r5, ip, fp
 800f8ee:	fb11 3302 	smlabb	r3, r1, r2, r3
 800f8f2:	f340 8137 	ble.w	800fb64 <st_sssa8_ch_nn_mat_mult_nt_t+0x614>
 800f8f6:	9a00      	ldr	r2, [sp, #0]
 800f8f8:	f10a 0703 	add.w	r7, sl, #3
 800f8fc:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 800f900:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800f904:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 800f908:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 800f90c:	fb11 4405 	smlabb	r4, r1, r5, r4
 800f910:	fb1c 3305 	smlabb	r3, ip, r5, r3
 800f914:	eb07 0a0b 	add.w	sl, r7, fp
 800f918:	fb11 6602 	smlabb	r6, r1, r2, r6
 800f91c:	fb1c 0002 	smlabb	r0, ip, r2, r0
 800f920:	9a03      	ldr	r2, [sp, #12]
 800f922:	2a15      	cmp	r2, #21
 800f924:	f340 80c7 	ble.w	800fab6 <st_sssa8_ch_nn_mat_mult_nt_t+0x566>
 800f928:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f92c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800f92e:	fb56 5602 	smmla	r6, r6, r2, r5
 800f932:	fb54 5402 	smmla	r4, r4, r2, r5
 800f936:	410e      	asrs	r6, r1
 800f938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f93a:	4416      	add	r6, r2
 800f93c:	f306 0607 	ssat	r6, #8, r6
 800f940:	410c      	asrs	r4, r1
 800f942:	9901      	ldr	r1, [sp, #4]
 800f944:	4414      	add	r4, r2
 800f946:	700e      	strb	r6, [r1, #0]
 800f948:	f304 0407 	ssat	r4, #8, r4
 800f94c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f94e:	548c      	strb	r4, [r1, r2]
 800f950:	9a04      	ldr	r2, [sp, #16]
 800f952:	2a15      	cmp	r2, #21
 800f954:	f340 809e 	ble.w	800fa94 <st_sssa8_ch_nn_mat_mult_nt_t+0x544>
 800f958:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f95a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f95c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800f95e:	fb50 4002 	smmla	r0, r0, r2, r4
 800f962:	fb53 4302 	smmla	r3, r3, r2, r4
 800f966:	4108      	asrs	r0, r1
 800f968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f96a:	4410      	add	r0, r2
 800f96c:	f300 0007 	ssat	r0, #8, r0
 800f970:	410b      	asrs	r3, r1
 800f972:	9901      	ldr	r1, [sp, #4]
 800f974:	4413      	add	r3, r2
 800f976:	7048      	strb	r0, [r1, #1]
 800f978:	f303 0307 	ssat	r3, #8, r3
 800f97c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f97e:	188a      	adds	r2, r1, r2
 800f980:	7053      	strb	r3, [r2, #1]
 800f982:	460b      	mov	r3, r1
 800f984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f986:	4413      	add	r3, r2
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	9b02      	ldr	r3, [sp, #8]
 800f98c:	3b01      	subs	r3, #1
 800f98e:	9302      	str	r3, [sp, #8]
 800f990:	f47f ae82 	bne.w	800f698 <st_sssa8_ch_nn_mat_mult_nt_t+0x148>
 800f994:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f996:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f998:	eb03 0b02 	add.w	fp, r3, r2
 800f99c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f040 80e2 	bne.w	800fb68 <st_sssa8_ch_nn_mat_mult_nt_t+0x618>
 800f9a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f9a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9a8:	4413      	add	r3, r2
 800f9aa:	931c      	str	r3, [sp, #112]	; 0x70
 800f9ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f9ae:	3302      	adds	r3, #2
 800f9b0:	9316      	str	r3, [sp, #88]	; 0x58
 800f9b2:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800f9b4:	b11b      	cbz	r3, 800f9be <st_sssa8_ch_nn_mat_mult_nt_t+0x46e>
 800f9b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f9b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f9ba:	4413      	add	r3, r2
 800f9bc:	9343      	str	r3, [sp, #268]	; 0x10c
 800f9be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c2:	3204      	adds	r2, #4
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f9ca:	9315      	str	r3, [sp, #84]	; 0x54
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	f47f ae11 	bne.w	800f5f4 <st_sssa8_ch_nn_mat_mult_nt_t+0xa4>
 800f9d2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f9d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f9d6:	3201      	adds	r2, #1
 800f9d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9da:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f9de:	fb02 1303 	mla	r3, r2, r3, r1
 800f9e2:	9329      	str	r3, [sp, #164]	; 0xa4
 800f9e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f9ea:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9ec:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f9ee:	07db      	lsls	r3, r3, #31
 800f9f0:	d54c      	bpl.n	800fa8c <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 800f9f2:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd49      	ble.n	800fa8c <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 800f9f8:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f9fa:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800f9fe:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800fa02:	2500      	movs	r5, #0
 800fa04:	441e      	add	r6, r3
 800fa06:	f04f 0801 	mov.w	r8, #1
 800fa0a:	441f      	add	r7, r3
 800fa0c:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800fa0e:	00b6      	lsls	r6, r6, #2
 800fa10:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fa12:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800fa16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fa18:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 800fa1c:	4433      	add	r3, r6
 800fa1e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 800fa22:	469e      	mov	lr, r3
 800fa24:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800fa26:	eb03 0c06 	add.w	ip, r3, r6
 800fa2a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fa2c:	f8cd e000 	str.w	lr, [sp]
 800fa30:	441e      	add	r6, r3
 800fa32:	9b00      	ldr	r3, [sp, #0]
 800fa34:	f1bb 0f00 	cmp.w	fp, #0
 800fa38:	6819      	ldr	r1, [r3, #0]
 800fa3a:	dd0d      	ble.n	800fa58 <st_sssa8_ch_nn_mat_mult_nt_t+0x508>
 800fa3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fa3e:	eb02 0e0b 	add.w	lr, r2, fp
 800fa42:	1e58      	subs	r0, r3, #1
 800fa44:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800fa48:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800fa4c:	eba3 0309 	sub.w	r3, r3, r9
 800fa50:	4572      	cmp	r2, lr
 800fa52:	fb04 1103 	mla	r1, r4, r3, r1
 800fa56:	d1f5      	bne.n	800fa44 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f4>
 800fa58:	f9b7 0000 	ldrsh.w	r0, [r7]
 800fa5c:	f8dc e000 	ldr.w	lr, [ip]
 800fa60:	2815      	cmp	r0, #21
 800fa62:	6834      	ldr	r4, [r6, #0]
 800fa64:	f340 8243 	ble.w	800feee <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 800fa68:	1e83      	subs	r3, r0, #2
 800fa6a:	3801      	subs	r0, #1
 800fa6c:	fa08 f303 	lsl.w	r3, r8, r3
 800fa70:	fb51 330e 	smmla	r3, r1, lr, r3
 800fa74:	4103      	asrs	r3, r0
 800fa76:	4423      	add	r3, r4
 800fa78:	f303 0307 	ssat	r3, #8, r3
 800fa7c:	f88a 3000 	strb.w	r3, [sl]
 800fa80:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800fa82:	3501      	adds	r5, #1
 800fa84:	449a      	add	sl, r3
 800fa86:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800fa88:	42ab      	cmp	r3, r5
 800fa8a:	d1d2      	bne.n	800fa32 <st_sssa8_ch_nn_mat_mult_nt_t+0x4e2>
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	b033      	add	sp, #204	; 0xcc
 800fa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	dd27      	ble.n	800fae8 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 800fa98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fa9a:	0040      	lsls	r0, r0, #1
 800fa9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	fb50 5001 	smmla	r0, r0, r1, r5
 800faa4:	fb53 5301 	smmla	r3, r3, r1, r5
 800faa8:	4110      	asrs	r0, r2
 800faaa:	f300 0007 	ssat	r0, #8, r0
 800faae:	9901      	ldr	r1, [sp, #4]
 800fab0:	4113      	asrs	r3, r2
 800fab2:	7048      	strb	r0, [r1, #1]
 800fab4:	e760      	b.n	800f978 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	dd31      	ble.n	800fb1e <st_sssa8_ch_nn_mat_mult_nt_t+0x5ce>
 800faba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fabc:	0076      	lsls	r6, r6, #1
 800fabe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800fac0:	0064      	lsls	r4, r4, #1
 800fac2:	fb56 7601 	smmla	r6, r6, r1, r7
 800fac6:	fb54 7401 	smmla	r4, r4, r1, r7
 800faca:	4116      	asrs	r6, r2
 800facc:	f306 0607 	ssat	r6, #8, r6
 800fad0:	9901      	ldr	r1, [sp, #4]
 800fad2:	4114      	asrs	r4, r2
 800fad4:	700e      	strb	r6, [r1, #0]
 800fad6:	f304 0407 	ssat	r4, #8, r4
 800fada:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800fadc:	548c      	strb	r4, [r1, r2]
 800fade:	e737      	b.n	800f950 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 800fae0:	4692      	mov	sl, r2
 800fae2:	e71d      	b.n	800f920 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 800fae4:	46f2      	mov	sl, lr
 800fae6:	e71b      	b.n	800f920 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 800fae8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800faea:	fa00 f201 	lsl.w	r2, r0, r1
 800faee:	f302 021f 	ssat	r2, #32, r2
 800faf2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800faf4:	fb52 f210 	smmulr	r2, r2, r0
 800faf8:	408b      	lsls	r3, r1
 800fafa:	f303 031f 	ssat	r3, #32, r3
 800fafe:	fb53 f310 	smmulr	r3, r3, r0
 800fb02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb04:	440a      	add	r2, r1
 800fb06:	f302 0207 	ssat	r2, #8, r2
 800fb0a:	9801      	ldr	r0, [sp, #4]
 800fb0c:	440b      	add	r3, r1
 800fb0e:	7042      	strb	r2, [r0, #1]
 800fb10:	f303 0307 	ssat	r3, #8, r3
 800fb14:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800fb16:	1882      	adds	r2, r0, r2
 800fb18:	7053      	strb	r3, [r2, #1]
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	e732      	b.n	800f984 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 800fb1e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fb20:	fa06 f201 	lsl.w	r2, r6, r1
 800fb24:	f302 021f 	ssat	r2, #32, r2
 800fb28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb2a:	fb52 f215 	smmulr	r2, r2, r5
 800fb2e:	fa04 f101 	lsl.w	r1, r4, r1
 800fb32:	f301 011f 	ssat	r1, #32, r1
 800fb36:	fb51 f115 	smmulr	r1, r1, r5
 800fb3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fb3c:	4422      	add	r2, r4
 800fb3e:	f302 0207 	ssat	r2, #8, r2
 800fb42:	9d01      	ldr	r5, [sp, #4]
 800fb44:	4421      	add	r1, r4
 800fb46:	702a      	strb	r2, [r5, #0]
 800fb48:	f301 0107 	ssat	r1, #8, r1
 800fb4c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800fb4e:	54a9      	strb	r1, [r5, r2]
 800fb50:	e6fe      	b.n	800f950 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 800fb52:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fb54:	f04f 0900 	mov.w	r9, #0
 800fb58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fb5c:	9300      	str	r3, [sp, #0]
 800fb5e:	4603      	mov	r3, r0
 800fb60:	4634      	mov	r4, r6
 800fb62:	e646      	b.n	800f7f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x2a2>
 800fb64:	46aa      	mov	sl, r5
 800fb66:	e6db      	b.n	800f920 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 800fb68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f340 81fe 	ble.w	800ff6c <st_sssa8_ch_nn_mat_mult_nt_t+0xa1c>
 800fb70:	9b05      	ldr	r3, [sp, #20]
 800fb72:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 800fb74:	eb0a 0703 	add.w	r7, sl, r3
 800fb78:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 800fb7c:	f8da 2000 	ldr.w	r2, [sl]
 800fb80:	6828      	ldr	r0, [r5, #0]
 800fb82:	fa2f f182 	sxtb16	r1, r2
 800fb86:	fa2f f292 	sxtb16	r2, r2, ror #8
 800fb8a:	fb21 4000 	smlad	r0, r1, r0, r4
 800fb8e:	686c      	ldr	r4, [r5, #4]
 800fb90:	fb22 0404 	smlad	r4, r2, r4, r0
 800fb94:	68a8      	ldr	r0, [r5, #8]
 800fb96:	fb21 3300 	smlad	r3, r1, r0, r3
 800fb9a:	68e9      	ldr	r1, [r5, #12]
 800fb9c:	fb22 3201 	smlad	r2, r2, r1, r3
 800fba0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fba4:	6928      	ldr	r0, [r5, #16]
 800fba6:	fa2f f183 	sxtb16	r1, r3
 800fbaa:	fa2f f393 	sxtb16	r3, r3, ror #8
 800fbae:	fb21 4000 	smlad	r0, r1, r0, r4
 800fbb2:	696c      	ldr	r4, [r5, #20]
 800fbb4:	fb23 0404 	smlad	r4, r3, r4, r0
 800fbb8:	69a8      	ldr	r0, [r5, #24]
 800fbba:	fb21 2100 	smlad	r1, r1, r0, r2
 800fbbe:	69ea      	ldr	r2, [r5, #28]
 800fbc0:	fb23 1302 	smlad	r3, r3, r2, r1
 800fbc4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800fbc8:	6a28      	ldr	r0, [r5, #32]
 800fbca:	fa2f f182 	sxtb16	r1, r2
 800fbce:	fa2f f292 	sxtb16	r2, r2, ror #8
 800fbd2:	fb21 4000 	smlad	r0, r1, r0, r4
 800fbd6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800fbd8:	fb22 0606 	smlad	r6, r2, r6, r0
 800fbdc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fbde:	fb21 3100 	smlad	r1, r1, r0, r3
 800fbe2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fbe4:	fb22 1203 	smlad	r2, r2, r3, r1
 800fbe8:	f8da 400c 	ldr.w	r4, [sl, #12]
 800fbec:	3540      	adds	r5, #64	; 0x40
 800fbee:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800fbf2:	f10a 0a10 	add.w	sl, sl, #16
 800fbf6:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 800fbfa:	f855 ec08 	ldr.w	lr, [r5, #-8]
 800fbfe:	f855 cc04 	ldr.w	ip, [r5, #-4]
 800fc02:	fa2f f184 	sxtb16	r1, r4
 800fc06:	fa2f f394 	sxtb16	r3, r4, ror #8
 800fc0a:	fb21 6000 	smlad	r0, r1, r0, r6
 800fc0e:	fb23 0408 	smlad	r4, r3, r8, r0
 800fc12:	fb21 220e 	smlad	r2, r1, lr, r2
 800fc16:	fb23 230c 	smlad	r3, r3, ip, r2
 800fc1a:	45ba      	cmp	sl, r7
 800fc1c:	d1ae      	bne.n	800fb7c <st_sssa8_ch_nn_mat_mult_nt_t+0x62c>
 800fc1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fc20:	f8dd e014 	ldr.w	lr, [sp, #20]
 800fc24:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 800fc28:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fc2a:	eb03 0c02 	add.w	ip, r3, r2
 800fc2e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fc30:	3b03      	subs	r3, #3
 800fc32:	459e      	cmp	lr, r3
 800fc34:	da34      	bge.n	800fca0 <st_sssa8_ch_nn_mat_mult_nt_t+0x750>
 800fc36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc38:	4661      	mov	r1, ip
 800fc3a:	f8cd c000 	str.w	ip, [sp]
 800fc3e:	eba3 090e 	sub.w	r9, r3, lr
 800fc42:	f8cd e004 	str.w	lr, [sp, #4]
 800fc46:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800fc4a:	f109 0801 	add.w	r8, r9, #1
 800fc4e:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 800fc52:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 800fc56:	f85a 3b04 	ldr.w	r3, [sl], #4
 800fc5a:	3110      	adds	r1, #16
 800fc5c:	f851 0c10 	ldr.w	r0, [r1, #-16]
 800fc60:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 800fc64:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800fc68:	f851 6c04 	ldr.w	r6, [r1, #-4]
 800fc6c:	fa2f f283 	sxtb16	r2, r3
 800fc70:	fa2f f393 	sxtb16	r3, r3, ror #8
 800fc74:	fb22 4400 	smlad	r4, r2, r0, r4
 800fc78:	fb23 440e 	smlad	r4, r3, lr, r4
 800fc7c:	fb22 550c 	smlad	r5, r2, ip, r5
 800fc80:	fb23 5506 	smlad	r5, r3, r6, r5
 800fc84:	45ba      	cmp	sl, r7
 800fc86:	d1e6      	bne.n	800fc56 <st_sssa8_ch_nn_mat_mult_nt_t+0x706>
 800fc88:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fc8c:	f8dd c000 	ldr.w	ip, [sp]
 800fc90:	f10e 0e04 	add.w	lr, lr, #4
 800fc94:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 800fc98:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800fc9c:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800fca0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fca2:	4573      	cmp	r3, lr
 800fca4:	dd2f      	ble.n	800fd06 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 800fca6:	f99a 2000 	ldrsb.w	r2, [sl]
 800fcaa:	f10e 0301 	add.w	r3, lr, #1
 800fcae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fcb0:	f8bc 0000 	ldrh.w	r0, [ip]
 800fcb4:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800fcb8:	fb10 4002 	smlabb	r0, r0, r2, r4
 800fcbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fcbe:	fb11 4402 	smlabb	r4, r1, r2, r4
 800fcc2:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800fcc4:	9009      	str	r0, [sp, #36]	; 0x24
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	940a      	str	r4, [sp, #40]	; 0x28
 800fcca:	dd1c      	ble.n	800fd06 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 800fccc:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 800fcd0:	f10e 0e02 	add.w	lr, lr, #2
 800fcd4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800fcd8:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800fcdc:	fb11 0003 	smlabb	r0, r1, r3, r0
 800fce0:	fb12 4403 	smlabb	r4, r2, r3, r4
 800fce4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fce6:	9009      	str	r0, [sp, #36]	; 0x24
 800fce8:	4573      	cmp	r3, lr
 800fcea:	940a      	str	r4, [sp, #40]	; 0x28
 800fcec:	dd0b      	ble.n	800fd06 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 800fcee:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 800fcf2:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800fcf6:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 800fcfa:	fb12 0203 	smlabb	r2, r2, r3, r0
 800fcfe:	fb11 4303 	smlabb	r3, r1, r3, r4
 800fd02:	9209      	str	r2, [sp, #36]	; 0x24
 800fd04:	930a      	str	r3, [sp, #40]	; 0x28
 800fd06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd08:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 800fd0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fd0e:	2a15      	cmp	r2, #21
 800fd10:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd16:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800fd1a:	f340 80d7 	ble.w	800fecc <st_sssa8_ch_nn_mat_mult_nt_t+0x97c>
 800fd1e:	1e93      	subs	r3, r2, #2
 800fd20:	2401      	movs	r4, #1
 800fd22:	3a01      	subs	r2, #1
 800fd24:	fa04 f303 	lsl.w	r3, r4, r3
 800fd28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fd2a:	fb54 3300 	smmla	r3, r4, r0, r3
 800fd2e:	4113      	asrs	r3, r2
 800fd30:	440b      	add	r3, r1
 800fd32:	f303 0307 	ssat	r3, #8, r3
 800fd36:	f88b 3000 	strb.w	r3, [fp]
 800fd3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd3c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fd40:	2915      	cmp	r1, #21
 800fd42:	f340 80b1 	ble.w	800fea8 <st_sssa8_ch_nn_mat_mult_nt_t+0x958>
 800fd46:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800fd48:	1e8a      	subs	r2, r1, #2
 800fd4a:	3901      	subs	r1, #1
 800fd4c:	461c      	mov	r4, r3
 800fd4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd50:	58e0      	ldr	r0, [r4, r3]
 800fd52:	2401      	movs	r4, #1
 800fd54:	fa04 f202 	lsl.w	r2, r4, r2
 800fd58:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800fd5a:	58e3      	ldr	r3, [r4, r3]
 800fd5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fd5e:	fb54 2200 	smmla	r2, r4, r0, r2
 800fd62:	410a      	asrs	r2, r1
 800fd64:	4413      	add	r3, r2
 800fd66:	f303 0307 	ssat	r3, #8, r3
 800fd6a:	f88b 3001 	strb.w	r3, [fp, #1]
 800fd6e:	e619      	b.n	800f9a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 800fd70:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800fd72:	2c00      	cmp	r4, #0
 800fd74:	f000 80f6 	beq.w	800ff64 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f102 0010 	add.w	r0, r2, #16
 800fd82:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 800fd86:	3c01      	subs	r4, #1
 800fd88:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 800fd8c:	f100 0010 	add.w	r0, r0, #16
 800fd90:	eba1 0105 	sub.w	r1, r1, r5
 800fd94:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 800fd98:	eba3 0302 	sub.w	r3, r3, r2
 800fd9c:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 800fda0:	eba1 0105 	sub.w	r1, r1, r5
 800fda4:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 800fda8:	eba3 0302 	sub.w	r3, r3, r2
 800fdac:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 800fdb0:	eba1 0105 	sub.w	r1, r1, r5
 800fdb4:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 800fdb8:	eba3 0302 	sub.w	r3, r3, r2
 800fdbc:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 800fdc0:	eba1 0105 	sub.w	r1, r1, r5
 800fdc4:	eba3 0302 	sub.w	r3, r3, r2
 800fdc8:	d1db      	bne.n	800fd82 <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 800fdca:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fdcc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800fdce:	4402      	add	r2, r0
 800fdd0:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800fdd2:	b1cd      	cbz	r5, 800fe08 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 800fdd4:	f9b2 4000 	ldrsh.w	r4, [r2]
 800fdd8:	2d01      	cmp	r5, #1
 800fdda:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800fdde:	eba1 0104 	sub.w	r1, r1, r4
 800fde2:	eba3 0300 	sub.w	r3, r3, r0
 800fde6:	d00f      	beq.n	800fe08 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 800fde8:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800fdec:	2d02      	cmp	r5, #2
 800fdee:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800fdf2:	eba1 0104 	sub.w	r1, r1, r4
 800fdf6:	eba3 0300 	sub.w	r3, r3, r0
 800fdfa:	d005      	beq.n	800fe08 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 800fdfc:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 800fe00:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800fe04:	1a09      	subs	r1, r1, r0
 800fe06:	1a9b      	subs	r3, r3, r2
 800fe08:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fe0a:	fb02 f101 	mul.w	r1, r2, r1
 800fe0e:	fb02 f303 	mul.w	r3, r2, r3
 800fe12:	e412      	b.n	800f63a <st_sssa8_ch_nn_mat_mult_nt_t+0xea>
 800fe14:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800fe16:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fe18:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800fe1a:	18f5      	adds	r5, r6, r3
 800fe1c:	2c00      	cmp	r4, #0
 800fe1e:	f000 80aa 	beq.w	800ff76 <st_sssa8_ch_nn_mat_mult_nt_t+0xa26>
 800fe22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fe24:	f856 1b04 	ldr.w	r1, [r6], #4
 800fe28:	3c01      	subs	r4, #1
 800fe2a:	f855 2b04 	ldr.w	r2, [r5], #4
 800fe2e:	f103 0310 	add.w	r3, r3, #16
 800fe32:	ea4f 2031 	mov.w	r0, r1, ror #8
 800fe36:	fa2f f181 	sxtb16	r1, r1
 800fe3a:	fa2f f080 	sxtb16	r0, r0
 800fe3e:	f843 1c10 	str.w	r1, [r3, #-16]
 800fe42:	ea4f 2132 	mov.w	r1, r2, ror #8
 800fe46:	f843 0c0c 	str.w	r0, [r3, #-12]
 800fe4a:	fa2f f181 	sxtb16	r1, r1
 800fe4e:	fa2f f282 	sxtb16	r2, r2
 800fe52:	f843 1c04 	str.w	r1, [r3, #-4]
 800fe56:	f843 2c08 	str.w	r2, [r3, #-8]
 800fe5a:	d1e3      	bne.n	800fe24 <st_sssa8_ch_nn_mat_mult_nt_t+0x8d4>
 800fe5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe5e:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800fe60:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800fe62:	185d      	adds	r5, r3, r1
 800fe64:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fe66:	189a      	adds	r2, r3, r2
 800fe68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fe6a:	440b      	add	r3, r1
 800fe6c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f43f abde 	beq.w	800f630 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 800fe74:	f992 1000 	ldrsb.w	r1, [r2]
 800fe78:	2801      	cmp	r0, #1
 800fe7a:	8019      	strh	r1, [r3, #0]
 800fe7c:	f995 1000 	ldrsb.w	r1, [r5]
 800fe80:	8059      	strh	r1, [r3, #2]
 800fe82:	f43f abd5 	beq.w	800f630 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 800fe86:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800fe8a:	2802      	cmp	r0, #2
 800fe8c:	8099      	strh	r1, [r3, #4]
 800fe8e:	f995 1001 	ldrsb.w	r1, [r5, #1]
 800fe92:	80d9      	strh	r1, [r3, #6]
 800fe94:	f43f abcc 	beq.w	800f630 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 800fe98:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800fe9c:	811a      	strh	r2, [r3, #8]
 800fe9e:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800fea2:	815a      	strh	r2, [r3, #10]
 800fea4:	f7ff bbc4 	b.w	800f630 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 800fea8:	2900      	cmp	r1, #0
 800feaa:	dd47      	ble.n	800ff3c <st_sssa8_ch_nn_mat_mult_nt_t+0x9ec>
 800feac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800feb0:	0058      	lsls	r0, r3, #1
 800feb2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800feb4:	461c      	mov	r4, r3
 800feb6:	58a3      	ldr	r3, [r4, r2]
 800feb8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800feba:	58a2      	ldr	r2, [r4, r2]
 800febc:	fb50 2303 	smmla	r3, r0, r3, r2
 800fec0:	410b      	asrs	r3, r1
 800fec2:	f303 0307 	ssat	r3, #8, r3
 800fec6:	f88b 3001 	strb.w	r3, [fp, #1]
 800feca:	e56b      	b.n	800f9a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 800fecc:	2a00      	cmp	r2, #0
 800fece:	dd27      	ble.n	800ff20 <st_sssa8_ch_nn_mat_mult_nt_t+0x9d0>
 800fed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	fb53 1300 	smmla	r3, r3, r0, r1
 800fed8:	4113      	asrs	r3, r2
 800feda:	f303 0307 	ssat	r3, #8, r3
 800fede:	f88b 3000 	strb.w	r3, [fp]
 800fee2:	e72a      	b.n	800fd3a <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 800fee4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800fee8:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800feec:	e556      	b.n	800f99c <st_sssa8_ch_nn_mat_mult_nt_t+0x44c>
 800feee:	2800      	cmp	r0, #0
 800fef0:	dd08      	ble.n	800ff04 <st_sssa8_ch_nn_mat_mult_nt_t+0x9b4>
 800fef2:	0049      	lsls	r1, r1, #1
 800fef4:	fb51 410e 	smmla	r1, r1, lr, r4
 800fef8:	4101      	asrs	r1, r0
 800fefa:	f301 0307 	ssat	r3, #8, r1
 800fefe:	f88a 3000 	strb.w	r3, [sl]
 800ff02:	e5bd      	b.n	800fa80 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 800ff04:	f1c0 0001 	rsb	r0, r0, #1
 800ff08:	fa01 f000 	lsl.w	r0, r1, r0
 800ff0c:	f300 031f 	ssat	r3, #32, r0
 800ff10:	fb53 f31e 	smmulr	r3, r3, lr
 800ff14:	4423      	add	r3, r4
 800ff16:	f303 0307 	ssat	r3, #8, r3
 800ff1a:	f88a 3000 	strb.w	r3, [sl]
 800ff1e:	e5af      	b.n	800fa80 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 800ff20:	f1c2 0201 	rsb	r2, r2, #1
 800ff24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff26:	4093      	lsls	r3, r2
 800ff28:	f303 031f 	ssat	r3, #32, r3
 800ff2c:	fb53 f310 	smmulr	r3, r3, r0
 800ff30:	440b      	add	r3, r1
 800ff32:	f303 0307 	ssat	r3, #8, r3
 800ff36:	f88b 3000 	strb.w	r3, [fp]
 800ff3a:	e6fe      	b.n	800fd3a <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 800ff3c:	f1c1 0101 	rsb	r1, r1, #1
 800ff40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff42:	408a      	lsls	r2, r1
 800ff44:	f302 021f 	ssat	r2, #32, r2
 800ff48:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800ff4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	5843      	ldr	r3, [r0, r1]
 800ff50:	fb52 f213 	smmulr	r2, r2, r3
 800ff54:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ff56:	585b      	ldr	r3, [r3, r1]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f303 0307 	ssat	r3, #8, r3
 800ff5e:	f88b 3001 	strb.w	r3, [fp, #1]
 800ff62:	e51f      	b.n	800f9a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 800ff64:	4621      	mov	r1, r4
 800ff66:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ff68:	4623      	mov	r3, r4
 800ff6a:	e731      	b.n	800fdd0 <st_sssa8_ch_nn_mat_mult_nt_t+0x880>
 800ff6c:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 800ff70:	f04f 0e00 	mov.w	lr, #0
 800ff74:	e65b      	b.n	800fc2e <st_sssa8_ch_nn_mat_mult_nt_t+0x6de>
 800ff76:	4632      	mov	r2, r6
 800ff78:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ff7a:	e777      	b.n	800fe6c <st_sssa8_ch_nn_mat_mult_nt_t+0x91c>

0800ff7c <st_int8_reordered_no_shift_zero>:
 800ff7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800ff82:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800ff86:	d02e      	beq.n	800ffe6 <st_int8_reordered_no_shift_zero+0x6a>
 800ff88:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 800ff8c:	460e      	mov	r6, r1
 800ff8e:	f850 4b04 	ldr.w	r4, [r0], #4
 800ff92:	ea4f 2534 	mov.w	r5, r4, ror #8
 800ff96:	fa2f f585 	sxtb16	r5, r5
 800ff9a:	fad5 f503 	ssub16	r5, r5, r3
 800ff9e:	fa2f f484 	sxtb16	r4, r4
 800ffa2:	fad4 f403 	ssub16	r4, r4, r3
 800ffa6:	42b8      	cmp	r0, r7
 800ffa8:	6034      	str	r4, [r6, #0]
 800ffaa:	6075      	str	r5, [r6, #4]
 800ffac:	f106 0608 	add.w	r6, r6, #8
 800ffb0:	d1ed      	bne.n	800ff8e <st_int8_reordered_no_shift_zero+0x12>
 800ffb2:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800ffb6:	f012 0203 	ands.w	r2, r2, #3
 800ffba:	d013      	beq.n	800ffe4 <st_int8_reordered_no_shift_zero+0x68>
 800ffbc:	f997 0000 	ldrsb.w	r0, [r7]
 800ffc0:	fa4f f38c 	sxtb.w	r3, ip
 800ffc4:	2a01      	cmp	r2, #1
 800ffc6:	eba0 0003 	sub.w	r0, r0, r3
 800ffca:	8008      	strh	r0, [r1, #0]
 800ffcc:	d00a      	beq.n	800ffe4 <st_int8_reordered_no_shift_zero+0x68>
 800ffce:	f997 0001 	ldrsb.w	r0, [r7, #1]
 800ffd2:	2a02      	cmp	r2, #2
 800ffd4:	eba0 0003 	sub.w	r0, r0, r3
 800ffd8:	8048      	strh	r0, [r1, #2]
 800ffda:	d003      	beq.n	800ffe4 <st_int8_reordered_no_shift_zero+0x68>
 800ffdc:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	808b      	strh	r3, [r1, #4]
 800ffe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe6:	4607      	mov	r7, r0
 800ffe8:	e7e5      	b.n	800ffb6 <st_int8_reordered_no_shift_zero+0x3a>
 800ffea:	bf00      	nop

0800ffec <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800ffec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff0:	b09b      	sub	sp, #108	; 0x6c
 800fff2:	4683      	mov	fp, r0
 800fff4:	460f      	mov	r7, r1
 800fff6:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 800fffa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800fffc:	910d      	str	r1, [sp, #52]	; 0x34
 800fffe:	0861      	lsrs	r1, r4, #1
 8010000:	eb00 0503 	add.w	r5, r0, r3
 8010004:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8010008:	9318      	str	r3, [sp, #96]	; 0x60
 801000a:	9417      	str	r4, [sp, #92]	; 0x5c
 801000c:	9215      	str	r2, [sp, #84]	; 0x54
 801000e:	9516      	str	r5, [sp, #88]	; 0x58
 8010010:	9006      	str	r0, [sp, #24]
 8010012:	f000 81ca 	beq.w	80103aa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3be>
 8010016:	3901      	subs	r1, #1
 8010018:	1ec4      	subs	r4, r0, #3
 801001a:	3210      	adds	r2, #16
 801001c:	f1a0 0310 	sub.w	r3, r0, #16
 8010020:	940f      	str	r4, [sp, #60]	; 0x3c
 8010022:	b28c      	uxth	r4, r1
 8010024:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010026:	091b      	lsrs	r3, r3, #4
 8010028:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801002c:	9419      	str	r4, [sp, #100]	; 0x64
 801002e:	3108      	adds	r1, #8
 8010030:	3301      	adds	r3, #1
 8010032:	920e      	str	r2, [sp, #56]	; 0x38
 8010034:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8010038:	9107      	str	r1, [sp, #28]
 801003a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801003c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801003e:	3104      	adds	r1, #4
 8010040:	9610      	str	r6, [sp, #64]	; 0x40
 8010042:	3208      	adds	r2, #8
 8010044:	9101      	str	r1, [sp, #4]
 8010046:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010048:	9205      	str	r2, [sp, #20]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	3102      	adds	r1, #2
 801004e:	9104      	str	r1, [sp, #16]
 8010050:	0199      	lsls	r1, r3, #6
 8010052:	011b      	lsls	r3, r3, #4
 8010054:	9111      	str	r1, [sp, #68]	; 0x44
 8010056:	9313      	str	r3, [sp, #76]	; 0x4c
 8010058:	1cab      	adds	r3, r5, #2
 801005a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801005c:	9303      	str	r3, [sp, #12]
 801005e:	1f03      	subs	r3, r0, #4
 8010060:	3108      	adds	r1, #8
 8010062:	9314      	str	r3, [sp, #80]	; 0x50
 8010064:	9102      	str	r1, [sp, #8]
 8010066:	18b9      	adds	r1, r7, r2
 8010068:	9b07      	ldr	r3, [sp, #28]
 801006a:	18b2      	adds	r2, r6, r2
 801006c:	9108      	str	r1, [sp, #32]
 801006e:	9212      	str	r2, [sp, #72]	; 0x48
 8010070:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8010074:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010078:	9b06      	ldr	r3, [sp, #24]
 801007a:	2b0f      	cmp	r3, #15
 801007c:	f340 82a6 	ble.w	80105cc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 8010080:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010084:	46dc      	mov	ip, fp
 8010086:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801008a:	4603      	mov	r3, r0
 801008c:	462c      	mov	r4, r5
 801008e:	9e08      	ldr	r6, [sp, #32]
 8010090:	f8de 7000 	ldr.w	r7, [lr]
 8010094:	f8d8 2000 	ldr.w	r2, [r8]
 8010098:	f8dc 1000 	ldr.w	r1, [ip]
 801009c:	f8dc a004 	ldr.w	sl, [ip, #4]
 80100a0:	fb21 5507 	smlad	r5, r1, r7, r5
 80100a4:	fb21 4102 	smlad	r1, r1, r2, r4
 80100a8:	fb2a 0007 	smlad	r0, sl, r7, r0
 80100ac:	fb2a 3202 	smlad	r2, sl, r2, r3
 80100b0:	f8de 7004 	ldr.w	r7, [lr, #4]
 80100b4:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80100b8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80100bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80100c0:	fb24 5507 	smlad	r5, r4, r7, r5
 80100c4:	fb24 110a 	smlad	r1, r4, sl, r1
 80100c8:	fb23 0007 	smlad	r0, r3, r7, r0
 80100cc:	fb23 230a 	smlad	r3, r3, sl, r2
 80100d0:	f8de 7008 	ldr.w	r7, [lr, #8]
 80100d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80100d8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80100dc:	f8dc a014 	ldr.w	sl, [ip, #20]
 80100e0:	fb24 5507 	smlad	r5, r4, r7, r5
 80100e4:	fb24 1102 	smlad	r1, r4, r2, r1
 80100e8:	fb2a 0007 	smlad	r0, sl, r7, r0
 80100ec:	fb2a 3202 	smlad	r2, sl, r2, r3
 80100f0:	f8de 700c 	ldr.w	r7, [lr, #12]
 80100f4:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80100f8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80100fc:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8010100:	fb24 5507 	smlad	r5, r4, r7, r5
 8010104:	fb24 140a 	smlad	r4, r4, sl, r1
 8010108:	fb29 0007 	smlad	r0, r9, r7, r0
 801010c:	fb29 2a0a 	smlad	sl, r9, sl, r2
 8010110:	f8de 7010 	ldr.w	r7, [lr, #16]
 8010114:	f8d8 9010 	ldr.w	r9, [r8, #16]
 8010118:	f8dc 1020 	ldr.w	r1, [ip, #32]
 801011c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8010120:	fb21 5507 	smlad	r5, r1, r7, r5
 8010124:	fb21 4409 	smlad	r4, r1, r9, r4
 8010128:	fb23 0007 	smlad	r0, r3, r7, r0
 801012c:	fb23 a909 	smlad	r9, r3, r9, sl
 8010130:	f8de 7014 	ldr.w	r7, [lr, #20]
 8010134:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8010138:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 801013c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8010140:	fb21 5507 	smlad	r5, r1, r7, r5
 8010144:	fb21 4402 	smlad	r4, r1, r2, r4
 8010148:	fb23 0007 	smlad	r0, r3, r7, r0
 801014c:	fb23 9302 	smlad	r3, r3, r2, r9
 8010150:	f8de 7018 	ldr.w	r7, [lr, #24]
 8010154:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8010158:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 801015c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 8010160:	fb21 5507 	smlad	r5, r1, r7, r5
 8010164:	fb21 4409 	smlad	r4, r1, r9, r4
 8010168:	fb22 0707 	smlad	r7, r2, r7, r0
 801016c:	fb22 3909 	smlad	r9, r2, r9, r3
 8010170:	f8de 001c 	ldr.w	r0, [lr, #28]
 8010174:	f108 0820 	add.w	r8, r8, #32
 8010178:	f858 3c04 	ldr.w	r3, [r8, #-4]
 801017c:	f10e 0e20 	add.w	lr, lr, #32
 8010180:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 8010184:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8010188:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 801018c:	fb21 5500 	smlad	r5, r1, r0, r5
 8010190:	fb21 4403 	smlad	r4, r1, r3, r4
 8010194:	fb22 7000 	smlad	r0, r2, r0, r7
 8010198:	fb22 9303 	smlad	r3, r2, r3, r9
 801019c:	45b6      	cmp	lr, r6
 801019e:	f47f af77 	bne.w	8010090 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 80101a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80101a4:	9f08      	ldr	r7, [sp, #32]
 80101a6:	4493      	add	fp, r2
 80101a8:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80101ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101ae:	9200      	str	r2, [sp, #0]
 80101b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101b2:	4596      	cmp	lr, r2
 80101b4:	da41      	bge.n	801023a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 80101b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101b8:	465e      	mov	r6, fp
 80101ba:	f8dd c000 	ldr.w	ip, [sp]
 80101be:	eba2 020e 	sub.w	r2, r2, lr
 80101c2:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80101c6:	0892      	lsrs	r2, r2, #2
 80101c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80101ca:	3201      	adds	r2, #1
 80101cc:	920a      	str	r2, [sp, #40]	; 0x28
 80101ce:	00d2      	lsls	r2, r2, #3
 80101d0:	eb07 0802 	add.w	r8, r7, r2
 80101d4:	9209      	str	r2, [sp, #36]	; 0x24
 80101d6:	f8d7 e000 	ldr.w	lr, [r7]
 80101da:	f8dc 9000 	ldr.w	r9, [ip]
 80101de:	6831      	ldr	r1, [r6, #0]
 80101e0:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80101e4:	fb21 550e 	smlad	r5, r1, lr, r5
 80101e8:	fb21 4409 	smlad	r4, r1, r9, r4
 80101ec:	fb2a 000e 	smlad	r0, sl, lr, r0
 80101f0:	fb2a 3309 	smlad	r3, sl, r9, r3
 80101f4:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80101f8:	f10c 0c08 	add.w	ip, ip, #8
 80101fc:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 8010200:	3708      	adds	r7, #8
 8010202:	68b1      	ldr	r1, [r6, #8]
 8010204:	3610      	adds	r6, #16
 8010206:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801020a:	fb21 550e 	smlad	r5, r1, lr, r5
 801020e:	fb21 4409 	smlad	r4, r1, r9, r4
 8010212:	fb22 000e 	smlad	r0, r2, lr, r0
 8010216:	fb22 3309 	smlad	r3, r2, r9, r3
 801021a:	4547      	cmp	r7, r8
 801021c:	d1db      	bne.n	80101d6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 801021e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010222:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 8010226:	9a00      	ldr	r2, [sp, #0]
 8010228:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801022c:	440a      	add	r2, r1
 801022e:	f10e 0e04 	add.w	lr, lr, #4
 8010232:	9200      	str	r2, [sp, #0]
 8010234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010236:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 801023a:	9a06      	ldr	r2, [sp, #24]
 801023c:	4572      	cmp	r2, lr
 801023e:	dd40      	ble.n	80102c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8010240:	9e00      	ldr	r6, [sp, #0]
 8010242:	f10e 0201 	add.w	r2, lr, #1
 8010246:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801024a:	f9b7 c000 	ldrsh.w	ip, [r7]
 801024e:	f9b6 6000 	ldrsh.w	r6, [r6]
 8010252:	fb0c 0001 	mla	r0, ip, r1, r0
 8010256:	f9bb 8000 	ldrsh.w	r8, [fp]
 801025a:	fb06 3301 	mla	r3, r6, r1, r3
 801025e:	9906      	ldr	r1, [sp, #24]
 8010260:	fb08 550c 	mla	r5, r8, ip, r5
 8010264:	4291      	cmp	r1, r2
 8010266:	fb08 4406 	mla	r4, r8, r6, r4
 801026a:	f340 814e 	ble.w	801050a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 801026e:	9a00      	ldr	r2, [sp, #0]
 8010270:	f10e 0e02 	add.w	lr, lr, #2
 8010274:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8010278:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 801027c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8010280:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8010284:	fb06 0002 	mla	r0, r6, r2, r0
 8010288:	fb01 3302 	mla	r3, r1, r2, r3
 801028c:	9a06      	ldr	r2, [sp, #24]
 801028e:	fb0c 5506 	mla	r5, ip, r6, r5
 8010292:	4572      	cmp	r2, lr
 8010294:	fb0c 4401 	mla	r4, ip, r1, r4
 8010298:	f340 81a0 	ble.w	80105dc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 801029c:	9a00      	ldr	r2, [sp, #0]
 801029e:	f10b 0b0c 	add.w	fp, fp, #12
 80102a2:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80102a6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80102aa:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 80102ae:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 80102b2:	fb07 5506 	mla	r5, r7, r6, r5
 80102b6:	fb07 4401 	mla	r4, r7, r1, r4
 80102ba:	fb06 0002 	mla	r0, r6, r2, r0
 80102be:	fb01 3302 	mla	r3, r1, r2, r3
 80102c2:	9a01      	ldr	r2, [sp, #4]
 80102c4:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 80102c8:	9a05      	ldr	r2, [sp, #20]
 80102ca:	2915      	cmp	r1, #21
 80102cc:	f852 6c08 	ldr.w	r6, [r2, #-8]
 80102d0:	9a02      	ldr	r2, [sp, #8]
 80102d2:	f852 7c08 	ldr.w	r7, [r2, #-8]
 80102d6:	f340 8100 	ble.w	80104da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 80102da:	1e8a      	subs	r2, r1, #2
 80102dc:	f04f 0c01 	mov.w	ip, #1
 80102e0:	3901      	subs	r1, #1
 80102e2:	fa0c f202 	lsl.w	r2, ip, r2
 80102e6:	fb55 2506 	smmla	r5, r5, r6, r2
 80102ea:	410d      	asrs	r5, r1
 80102ec:	fb54 2206 	smmla	r2, r4, r6, r2
 80102f0:	443d      	add	r5, r7
 80102f2:	f305 0507 	ssat	r5, #8, r5
 80102f6:	410a      	asrs	r2, r1
 80102f8:	9904      	ldr	r1, [sp, #16]
 80102fa:	443a      	add	r2, r7
 80102fc:	f801 5c02 	strb.w	r5, [r1, #-2]
 8010300:	f302 0207 	ssat	r2, #8, r2
 8010304:	9903      	ldr	r1, [sp, #12]
 8010306:	f801 2c02 	strb.w	r2, [r1, #-2]
 801030a:	9a01      	ldr	r2, [sp, #4]
 801030c:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8010310:	2915      	cmp	r1, #21
 8010312:	f340 80c2 	ble.w	801049a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 8010316:	9c05      	ldr	r4, [sp, #20]
 8010318:	1e8a      	subs	r2, r1, #2
 801031a:	3901      	subs	r1, #1
 801031c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010320:	2401      	movs	r4, #1
 8010322:	fa04 f202 	lsl.w	r2, r4, r2
 8010326:	9c02      	ldr	r4, [sp, #8]
 8010328:	fb50 2005 	smmla	r0, r0, r5, r2
 801032c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8010330:	4108      	asrs	r0, r1
 8010332:	fb53 2305 	smmla	r3, r3, r5, r2
 8010336:	4420      	add	r0, r4
 8010338:	f300 0007 	ssat	r0, #8, r0
 801033c:	410b      	asrs	r3, r1
 801033e:	9a04      	ldr	r2, [sp, #16]
 8010340:	4423      	add	r3, r4
 8010342:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010346:	f303 0307 	ssat	r3, #8, r3
 801034a:	9a03      	ldr	r2, [sp, #12]
 801034c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010350:	9a01      	ldr	r2, [sp, #4]
 8010352:	3204      	adds	r2, #4
 8010354:	9b07      	ldr	r3, [sp, #28]
 8010356:	9201      	str	r2, [sp, #4]
 8010358:	3308      	adds	r3, #8
 801035a:	9a05      	ldr	r2, [sp, #20]
 801035c:	9307      	str	r3, [sp, #28]
 801035e:	3208      	adds	r2, #8
 8010360:	9205      	str	r2, [sp, #20]
 8010362:	9a04      	ldr	r2, [sp, #16]
 8010364:	3202      	adds	r2, #2
 8010366:	9204      	str	r2, [sp, #16]
 8010368:	9a02      	ldr	r2, [sp, #8]
 801036a:	3208      	adds	r2, #8
 801036c:	9202      	str	r2, [sp, #8]
 801036e:	9a03      	ldr	r2, [sp, #12]
 8010370:	3202      	adds	r2, #2
 8010372:	9203      	str	r2, [sp, #12]
 8010374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010376:	429a      	cmp	r2, r3
 8010378:	f47f ae7a 	bne.w	8010070 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 801037c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801037e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010380:	3301      	adds	r3, #1
 8010382:	00da      	lsls	r2, r3, #3
 8010384:	0059      	lsls	r1, r3, #1
 8010386:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801038a:	9326      	str	r3, [sp, #152]	; 0x98
 801038c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801038e:	4413      	add	r3, r2
 8010390:	9315      	str	r3, [sp, #84]	; 0x54
 8010392:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010394:	4413      	add	r3, r2
 8010396:	9327      	str	r3, [sp, #156]	; 0x9c
 8010398:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801039a:	4413      	add	r3, r2
 801039c:	9328      	str	r3, [sp, #160]	; 0xa0
 801039e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80103a0:	440b      	add	r3, r1
 80103a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80103a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80103a6:	440b      	add	r3, r1
 80103a8:	9316      	str	r3, [sp, #88]	; 0x58
 80103aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103ac:	07da      	lsls	r2, r3, #31
 80103ae:	f140 8105 	bpl.w	80105bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 80103b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80103b6:	6819      	ldr	r1, [r3, #0]
 80103b8:	9b06      	ldr	r3, [sp, #24]
 80103ba:	089e      	lsrs	r6, r3, #2
 80103bc:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 80103c0:	f000 812b 	beq.w	801061a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62e>
 80103c4:	3e01      	subs	r6, #1
 80103c6:	4664      	mov	r4, ip
 80103c8:	460b      	mov	r3, r1
 80103ca:	b2b6      	uxth	r6, r6
 80103cc:	3601      	adds	r6, #1
 80103ce:	00f6      	lsls	r6, r6, #3
 80103d0:	eb0b 0706 	add.w	r7, fp, r6
 80103d4:	f8db 5000 	ldr.w	r5, [fp]
 80103d8:	f10b 0b08 	add.w	fp, fp, #8
 80103dc:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 80103e0:	f8d0 e000 	ldr.w	lr, [r0]
 80103e4:	fb25 110e 	smlad	r1, r5, lr, r1
 80103e8:	f8d4 e000 	ldr.w	lr, [r4]
 80103ec:	fb25 330e 	smlad	r3, r5, lr, r3
 80103f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80103f4:	3408      	adds	r4, #8
 80103f6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80103fa:	3008      	adds	r0, #8
 80103fc:	fb22 110e 	smlad	r1, r2, lr, r1
 8010400:	fb22 3305 	smlad	r3, r2, r5, r3
 8010404:	45bb      	cmp	fp, r7
 8010406:	d1e5      	bne.n	80103d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 8010408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801040a:	44b4      	add	ip, r6
 801040c:	4432      	add	r2, r6
 801040e:	920d      	str	r2, [sp, #52]	; 0x34
 8010410:	9a06      	ldr	r2, [sp, #24]
 8010412:	f012 0203 	ands.w	r2, r2, #3
 8010416:	d01f      	beq.n	8010458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8010418:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801041a:	2a01      	cmp	r2, #1
 801041c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8010420:	8835      	ldrh	r5, [r6, #0]
 8010422:	f8bc 4000 	ldrh.w	r4, [ip]
 8010426:	fb15 1100 	smlabb	r1, r5, r0, r1
 801042a:	fb14 3300 	smlabb	r3, r4, r0, r3
 801042e:	d013      	beq.n	8010458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8010430:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8010434:	2a02      	cmp	r2, #2
 8010436:	8875      	ldrh	r5, [r6, #2]
 8010438:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 801043c:	fb15 1100 	smlabb	r1, r5, r0, r1
 8010440:	fb14 3300 	smlabb	r3, r4, r0, r3
 8010444:	d008      	beq.n	8010458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8010446:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 801044a:	88b4      	ldrh	r4, [r6, #4]
 801044c:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8010450:	fb12 1104 	smlabb	r1, r2, r4, r1
 8010454:	fb12 3300 	smlabb	r3, r2, r0, r3
 8010458:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801045a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801045c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010460:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010462:	6825      	ldr	r5, [r4, #0]
 8010464:	2a15      	cmp	r2, #21
 8010466:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8010468:	f100 0001 	add.w	r0, r0, #1
 801046c:	6824      	ldr	r4, [r4, #0]
 801046e:	f300 808f 	bgt.w	8010590 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 8010472:	2a00      	cmp	r2, #0
 8010474:	f340 80b5 	ble.w	80105e2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 8010478:	0049      	lsls	r1, r1, #1
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	fb51 4105 	smmla	r1, r1, r5, r4
 8010480:	fb53 4305 	smmla	r3, r3, r5, r4
 8010484:	fa41 f202 	asr.w	r2, r1, r2
 8010488:	f302 0207 	ssat	r2, #8, r2
 801048c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801048e:	700a      	strb	r2, [r1, #0]
 8010490:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010492:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010496:	4113      	asrs	r3, r2
 8010498:	e08a      	b.n	80105b0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 801049a:	2900      	cmp	r1, #0
 801049c:	dd38      	ble.n	8010510 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 801049e:	9a05      	ldr	r2, [sp, #20]
 80104a0:	0040      	lsls	r0, r0, #1
 80104a2:	9c02      	ldr	r4, [sp, #8]
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80104aa:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80104ae:	fb50 4002 	smmla	r0, r0, r2, r4
 80104b2:	fb53 4302 	smmla	r3, r3, r2, r4
 80104b6:	fa40 f101 	asr.w	r1, r0, r1
 80104ba:	f301 0107 	ssat	r1, #8, r1
 80104be:	9a04      	ldr	r2, [sp, #16]
 80104c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80104c4:	9a01      	ldr	r2, [sp, #4]
 80104c6:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 80104ca:	fa43 f404 	asr.w	r4, r3, r4
 80104ce:	f304 0407 	ssat	r4, #8, r4
 80104d2:	9b03      	ldr	r3, [sp, #12]
 80104d4:	f803 4c01 	strb.w	r4, [r3, #-1]
 80104d8:	e73b      	b.n	8010352 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 80104da:	2900      	cmp	r1, #0
 80104dc:	dd3b      	ble.n	8010556 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 80104de:	006d      	lsls	r5, r5, #1
 80104e0:	0064      	lsls	r4, r4, #1
 80104e2:	fb55 7506 	smmla	r5, r5, r6, r7
 80104e6:	fb54 7406 	smmla	r4, r4, r6, r7
 80104ea:	410d      	asrs	r5, r1
 80104ec:	f305 0507 	ssat	r5, #8, r5
 80104f0:	9a04      	ldr	r2, [sp, #16]
 80104f2:	f802 5c02 	strb.w	r5, [r2, #-2]
 80104f6:	9a01      	ldr	r2, [sp, #4]
 80104f8:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80104fc:	4114      	asrs	r4, r2
 80104fe:	f304 0407 	ssat	r4, #8, r4
 8010502:	9a03      	ldr	r2, [sp, #12]
 8010504:	f802 4c02 	strb.w	r4, [r2, #-2]
 8010508:	e6ff      	b.n	801030a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 801050a:	f10b 0b04 	add.w	fp, fp, #4
 801050e:	e6d8      	b.n	80102c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8010510:	f1c1 0101 	rsb	r1, r1, #1
 8010514:	4088      	lsls	r0, r1
 8010516:	f300 001f 	ssat	r0, #32, r0
 801051a:	9a05      	ldr	r2, [sp, #20]
 801051c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010520:	fb50 f014 	smmulr	r0, r0, r4
 8010524:	fa03 f101 	lsl.w	r1, r3, r1
 8010528:	f301 011f 	ssat	r1, #32, r1
 801052c:	fb51 f114 	smmulr	r1, r1, r4
 8010530:	9b02      	ldr	r3, [sp, #8]
 8010532:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8010536:	4402      	add	r2, r0
 8010538:	f302 0207 	ssat	r2, #8, r2
 801053c:	9804      	ldr	r0, [sp, #16]
 801053e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8010542:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010546:	440b      	add	r3, r1
 8010548:	f303 0307 	ssat	r3, #8, r3
 801054c:	9a03      	ldr	r2, [sp, #12]
 801054e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010552:	9a01      	ldr	r2, [sp, #4]
 8010554:	e6fd      	b.n	8010352 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8010556:	f1c1 0101 	rsb	r1, r1, #1
 801055a:	408d      	lsls	r5, r1
 801055c:	f305 051f 	ssat	r5, #32, r5
 8010560:	fb55 f516 	smmulr	r5, r5, r6
 8010564:	fa04 f101 	lsl.w	r1, r4, r1
 8010568:	f301 011f 	ssat	r1, #32, r1
 801056c:	fb51 f616 	smmulr	r6, r1, r6
 8010570:	443d      	add	r5, r7
 8010572:	f305 0507 	ssat	r5, #8, r5
 8010576:	9a04      	ldr	r2, [sp, #16]
 8010578:	f802 5c02 	strb.w	r5, [r2, #-2]
 801057c:	9a02      	ldr	r2, [sp, #8]
 801057e:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8010582:	4416      	add	r6, r2
 8010584:	f306 0607 	ssat	r6, #8, r6
 8010588:	9a03      	ldr	r2, [sp, #12]
 801058a:	f802 6c02 	strb.w	r6, [r2, #-2]
 801058e:	e6bc      	b.n	801030a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 8010590:	1e97      	subs	r7, r2, #2
 8010592:	1e56      	subs	r6, r2, #1
 8010594:	2201      	movs	r2, #1
 8010596:	40ba      	lsls	r2, r7
 8010598:	fb51 2105 	smmla	r1, r1, r5, r2
 801059c:	4131      	asrs	r1, r6
 801059e:	fb53 2305 	smmla	r3, r3, r5, r2
 80105a2:	190a      	adds	r2, r1, r4
 80105a4:	f302 0207 	ssat	r2, #8, r2
 80105a8:	4133      	asrs	r3, r6
 80105aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80105ac:	4423      	add	r3, r4
 80105ae:	700a      	strb	r2, [r1, #0]
 80105b0:	f303 0307 	ssat	r3, #8, r3
 80105b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105b6:	9029      	str	r0, [sp, #164]	; 0xa4
 80105b8:	7013      	strb	r3, [r2, #0]
 80105ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80105bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105be:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 80105c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80105c4:	4418      	add	r0, r3
 80105c6:	b01b      	add	sp, #108	; 0x6c
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105ce:	462c      	mov	r4, r5
 80105d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105d2:	f04f 0e00 	mov.w	lr, #0
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	4603      	mov	r3, r0
 80105da:	e5e9      	b.n	80101b0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 80105dc:	f10b 0b08 	add.w	fp, fp, #8
 80105e0:	e66f      	b.n	80102c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 80105e2:	f1c2 0601 	rsb	r6, r2, #1
 80105e6:	fa01 f206 	lsl.w	r2, r1, r6
 80105ea:	f302 021f 	ssat	r2, #32, r2
 80105ee:	fb52 f215 	smmulr	r2, r2, r5
 80105f2:	40b3      	lsls	r3, r6
 80105f4:	f303 031f 	ssat	r3, #32, r3
 80105f8:	fb53 f115 	smmulr	r1, r3, r5
 80105fc:	1913      	adds	r3, r2, r4
 80105fe:	f303 0307 	ssat	r3, #8, r3
 8010602:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010604:	7013      	strb	r3, [r2, #0]
 8010606:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	440b      	add	r3, r1
 801060c:	f303 0307 	ssat	r3, #8, r3
 8010610:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010612:	9029      	str	r0, [sp, #164]	; 0xa4
 8010614:	7013      	strb	r3, [r2, #0]
 8010616:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010618:	e7d0      	b.n	80105bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 801061a:	460b      	mov	r3, r1
 801061c:	e6f8      	b.n	8010410 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 801061e:	bf00      	nop

08010620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	b08f      	sub	sp, #60	; 0x3c
 8010626:	460f      	mov	r7, r1
 8010628:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801062c:	9105      	str	r1, [sp, #20]
 801062e:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8010632:	0859      	lsrs	r1, r3, #1
 8010634:	930c      	str	r3, [sp, #48]	; 0x30
 8010636:	920b      	str	r2, [sp, #44]	; 0x2c
 8010638:	9402      	str	r4, [sp, #8]
 801063a:	f000 81d6 	beq.w	80109ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ca>
 801063e:	4616      	mov	r6, r2
 8010640:	1ee5      	subs	r5, r4, #3
 8010642:	3901      	subs	r1, #1
 8010644:	3210      	adds	r2, #16
 8010646:	9507      	str	r5, [sp, #28]
 8010648:	f106 0508 	add.w	r5, r6, #8
 801064c:	f1a4 0310 	sub.w	r3, r4, #16
 8010650:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010652:	9503      	str	r5, [sp, #12]
 8010654:	b28d      	uxth	r5, r1
 8010656:	091b      	lsrs	r3, r3, #4
 8010658:	3602      	adds	r6, #2
 801065a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801065e:	950d      	str	r5, [sp, #52]	; 0x34
 8010660:	3301      	adds	r3, #1
 8010662:	9601      	str	r6, [sp, #4]
 8010664:	9206      	str	r2, [sp, #24]
 8010666:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010668:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 801066c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801066e:	f102 0a08 	add.w	sl, r2, #8
 8010672:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010674:	3604      	adds	r6, #4
 8010676:	f102 0b08 	add.w	fp, r2, #8
 801067a:	019a      	lsls	r2, r3, #6
 801067c:	011b      	lsls	r3, r3, #4
 801067e:	9600      	str	r6, [sp, #0]
 8010680:	9208      	str	r2, [sp, #32]
 8010682:	1f22      	subs	r2, r4, #4
 8010684:	9309      	str	r3, [sp, #36]	; 0x24
 8010686:	9b03      	ldr	r3, [sp, #12]
 8010688:	920a      	str	r2, [sp, #40]	; 0x28
 801068a:	9a02      	ldr	r2, [sp, #8]
 801068c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8010690:	2a0f      	cmp	r2, #15
 8010692:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010696:	f340 8182 	ble.w	801099e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 801069a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801069e:	4607      	mov	r7, r0
 80106a0:	f8dc 5000 	ldr.w	r5, [ip]
 80106a4:	6839      	ldr	r1, [r7, #0]
 80106a6:	fb21 4405 	smlad	r4, r1, r5, r4
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	fb22 3305 	smlad	r3, r2, r5, r3
 80106b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80106b4:	68b9      	ldr	r1, [r7, #8]
 80106b6:	fb21 4105 	smlad	r1, r1, r5, r4
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	fb22 3205 	smlad	r2, r2, r5, r3
 80106c0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80106c4:	693c      	ldr	r4, [r7, #16]
 80106c6:	fb24 1105 	smlad	r1, r4, r5, r1
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	fb23 2205 	smlad	r2, r3, r5, r2
 80106d0:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80106d4:	69bc      	ldr	r4, [r7, #24]
 80106d6:	fb24 1405 	smlad	r4, r4, r5, r1
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	fb23 2305 	smlad	r3, r3, r5, r2
 80106e0:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80106e4:	6a39      	ldr	r1, [r7, #32]
 80106e6:	fb21 4405 	smlad	r4, r1, r5, r4
 80106ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ec:	fb22 3305 	smlad	r3, r2, r5, r3
 80106f0:	f8dc 5014 	ldr.w	r5, [ip, #20]
 80106f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106f6:	fb21 4105 	smlad	r1, r1, r5, r4
 80106fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106fc:	fb22 3205 	smlad	r2, r2, r5, r3
 8010700:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8010704:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010706:	fb24 1105 	smlad	r1, r4, r5, r1
 801070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070c:	fb23 2205 	smlad	r2, r3, r5, r2
 8010710:	f8dc 501c 	ldr.w	r5, [ip, #28]
 8010714:	3740      	adds	r7, #64	; 0x40
 8010716:	f857 4c08 	ldr.w	r4, [r7, #-8]
 801071a:	f10c 0c20 	add.w	ip, ip, #32
 801071e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010722:	fb24 1405 	smlad	r4, r4, r5, r1
 8010726:	fb23 2305 	smlad	r3, r3, r5, r2
 801072a:	45f4      	cmp	ip, lr
 801072c:	d1b8      	bne.n	80106a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 801072e:	9a08      	ldr	r2, [sp, #32]
 8010730:	4677      	mov	r7, lr
 8010732:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8010736:	4410      	add	r0, r2
 8010738:	9a07      	ldr	r2, [sp, #28]
 801073a:	4594      	cmp	ip, r2
 801073c:	da25      	bge.n	801078a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 801073e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010740:	4606      	mov	r6, r0
 8010742:	eba2 090c 	sub.w	r9, r2, ip
 8010746:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801074a:	f109 0201 	add.w	r2, r9, #1
 801074e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8010752:	9204      	str	r2, [sp, #16]
 8010754:	683a      	ldr	r2, [r7, #0]
 8010756:	6831      	ldr	r1, [r6, #0]
 8010758:	fb21 4402 	smlad	r4, r1, r2, r4
 801075c:	6871      	ldr	r1, [r6, #4]
 801075e:	fb21 3202 	smlad	r2, r1, r2, r3
 8010762:	6879      	ldr	r1, [r7, #4]
 8010764:	3610      	adds	r6, #16
 8010766:	f856 5c08 	ldr.w	r5, [r6, #-8]
 801076a:	3708      	adds	r7, #8
 801076c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010770:	fb25 4401 	smlad	r4, r5, r1, r4
 8010774:	fb23 2301 	smlad	r3, r3, r1, r2
 8010778:	4547      	cmp	r7, r8
 801077a:	d1eb      	bne.n	8010754 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 801077c:	f10c 0c04 	add.w	ip, ip, #4
 8010780:	9a04      	ldr	r2, [sp, #16]
 8010782:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8010786:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801078a:	9a02      	ldr	r2, [sp, #8]
 801078c:	4562      	cmp	r2, ip
 801078e:	dd26      	ble.n	80107de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8010790:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010794:	f10c 0201 	add.w	r2, ip, #1
 8010798:	8806      	ldrh	r6, [r0, #0]
 801079a:	8845      	ldrh	r5, [r0, #2]
 801079c:	fb16 4401 	smlabb	r4, r6, r1, r4
 80107a0:	fb11 3305 	smlabb	r3, r1, r5, r3
 80107a4:	9902      	ldr	r1, [sp, #8]
 80107a6:	4291      	cmp	r1, r2
 80107a8:	f340 80d5 	ble.w	8010956 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 80107ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80107b0:	f10c 0c02 	add.w	ip, ip, #2
 80107b4:	8885      	ldrh	r5, [r0, #4]
 80107b6:	88c1      	ldrh	r1, [r0, #6]
 80107b8:	fb15 4402 	smlabb	r4, r5, r2, r4
 80107bc:	fb12 3301 	smlabb	r3, r2, r1, r3
 80107c0:	9a02      	ldr	r2, [sp, #8]
 80107c2:	4562      	cmp	r2, ip
 80107c4:	f340 80ef 	ble.w	80109a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x386>
 80107c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80107cc:	300c      	adds	r0, #12
 80107ce:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 80107d2:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 80107d6:	fb15 4402 	smlabb	r4, r5, r2, r4
 80107da:	fb12 3301 	smlabb	r3, r2, r1, r3
 80107de:	9a00      	ldr	r2, [sp, #0]
 80107e0:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 80107e4:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80107e8:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 80107ec:	2a15      	cmp	r2, #21
 80107ee:	f340 80a5 	ble.w	801093c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31c>
 80107f2:	1e95      	subs	r5, r2, #2
 80107f4:	2701      	movs	r7, #1
 80107f6:	3a01      	subs	r2, #1
 80107f8:	fa07 f505 	lsl.w	r5, r7, r5
 80107fc:	fb54 5406 	smmla	r4, r4, r6, r5
 8010800:	4114      	asrs	r4, r2
 8010802:	440c      	add	r4, r1
 8010804:	f304 0407 	ssat	r4, #8, r4
 8010808:	9a01      	ldr	r2, [sp, #4]
 801080a:	f802 4c02 	strb.w	r4, [r2, #-2]
 801080e:	9a00      	ldr	r2, [sp, #0]
 8010810:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 8010814:	2e15      	cmp	r6, #21
 8010816:	f340 8081 	ble.w	801091c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 801081a:	1eb1      	subs	r1, r6, #2
 801081c:	2401      	movs	r4, #1
 801081e:	3e01      	subs	r6, #1
 8010820:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8010824:	fa04 f101 	lsl.w	r1, r4, r1
 8010828:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 801082c:	fb53 1302 	smmla	r3, r3, r2, r1
 8010830:	4133      	asrs	r3, r6
 8010832:	4423      	add	r3, r4
 8010834:	f303 0307 	ssat	r3, #8, r3
 8010838:	9a01      	ldr	r2, [sp, #4]
 801083a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801083e:	3202      	adds	r2, #2
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	f10a 0a08 	add.w	sl, sl, #8
 8010846:	f10b 0b08 	add.w	fp, fp, #8
 801084a:	9201      	str	r2, [sp, #4]
 801084c:	3308      	adds	r3, #8
 801084e:	9a00      	ldr	r2, [sp, #0]
 8010850:	9303      	str	r3, [sp, #12]
 8010852:	3204      	adds	r2, #4
 8010854:	9200      	str	r2, [sp, #0]
 8010856:	9a06      	ldr	r2, [sp, #24]
 8010858:	429a      	cmp	r2, r3
 801085a:	f47f af16 	bne.w	801068a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 801085e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010860:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010862:	3301      	adds	r3, #1
 8010864:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8010868:	991a      	ldr	r1, [sp, #104]	; 0x68
 801086a:	00da      	lsls	r2, r3, #3
 801086c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010870:	931a      	str	r3, [sp, #104]	; 0x68
 8010872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010874:	4413      	add	r3, r2
 8010876:	930b      	str	r3, [sp, #44]	; 0x2c
 8010878:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801087a:	4413      	add	r3, r2
 801087c:	931b      	str	r3, [sp, #108]	; 0x6c
 801087e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010880:	4413      	add	r3, r2
 8010882:	931c      	str	r3, [sp, #112]	; 0x70
 8010884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010886:	07db      	lsls	r3, r3, #31
 8010888:	d544      	bpl.n	8010914 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f4>
 801088a:	9a02      	ldr	r2, [sp, #8]
 801088c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801088e:	0892      	lsrs	r2, r2, #2
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	d016      	beq.n	80108c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a2>
 8010894:	1e56      	subs	r6, r2, #1
 8010896:	9905      	ldr	r1, [sp, #20]
 8010898:	b2b6      	uxth	r6, r6
 801089a:	3601      	adds	r6, #1
 801089c:	00f6      	lsls	r6, r6, #3
 801089e:	1987      	adds	r7, r0, r6
 80108a0:	6805      	ldr	r5, [r0, #0]
 80108a2:	3008      	adds	r0, #8
 80108a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80108a8:	f8d1 c000 	ldr.w	ip, [r1]
 80108ac:	fb25 330c 	smlad	r3, r5, ip, r3
 80108b0:	684d      	ldr	r5, [r1, #4]
 80108b2:	3108      	adds	r1, #8
 80108b4:	fb22 3305 	smlad	r3, r2, r5, r3
 80108b8:	42b8      	cmp	r0, r7
 80108ba:	d1f1      	bne.n	80108a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x280>
 80108bc:	9a05      	ldr	r2, [sp, #20]
 80108be:	4432      	add	r2, r6
 80108c0:	9205      	str	r2, [sp, #20]
 80108c2:	9a02      	ldr	r2, [sp, #8]
 80108c4:	f012 0203 	ands.w	r2, r2, #3
 80108c8:	d010      	beq.n	80108ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80108ca:	9e05      	ldr	r6, [sp, #20]
 80108cc:	2a01      	cmp	r2, #1
 80108ce:	8801      	ldrh	r1, [r0, #0]
 80108d0:	8835      	ldrh	r5, [r6, #0]
 80108d2:	fb15 3301 	smlabb	r3, r5, r1, r3
 80108d6:	d009      	beq.n	80108ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80108d8:	8875      	ldrh	r5, [r6, #2]
 80108da:	2a02      	cmp	r2, #2
 80108dc:	8841      	ldrh	r1, [r0, #2]
 80108de:	fb15 3301 	smlabb	r3, r5, r1, r3
 80108e2:	d003      	beq.n	80108ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80108e4:	8881      	ldrh	r1, [r0, #4]
 80108e6:	88b2      	ldrh	r2, [r6, #4]
 80108e8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80108ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80108ee:	1c61      	adds	r1, r4, #1
 80108f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80108f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80108f6:	6806      	ldr	r6, [r0, #0]
 80108f8:	2a15      	cmp	r2, #21
 80108fa:	981c      	ldr	r0, [sp, #112]	; 0x70
 80108fc:	6805      	ldr	r5, [r0, #0]
 80108fe:	dc54      	bgt.n	80109aa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38a>
 8010900:	2a00      	cmp	r2, #0
 8010902:	dd62      	ble.n	80109ca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3aa>
 8010904:	005b      	lsls	r3, r3, #1
 8010906:	fb53 5306 	smmla	r3, r3, r6, r5
 801090a:	4113      	asrs	r3, r2
 801090c:	f303 0307 	ssat	r3, #8, r3
 8010910:	7023      	strb	r3, [r4, #0]
 8010912:	460c      	mov	r4, r1
 8010914:	4620      	mov	r0, r4
 8010916:	b00f      	add	sp, #60	; 0x3c
 8010918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091c:	2e00      	cmp	r6, #0
 801091e:	dd1c      	ble.n	801095a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33a>
 8010920:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 801092a:	fb53 5304 	smmla	r3, r3, r4, r5
 801092e:	4133      	asrs	r3, r6
 8010930:	f303 0307 	ssat	r3, #8, r3
 8010934:	9a01      	ldr	r2, [sp, #4]
 8010936:	f802 3c01 	strb.w	r3, [r2, #-1]
 801093a:	e780      	b.n	801083e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 801093c:	2a00      	cmp	r2, #0
 801093e:	dd1f      	ble.n	8010980 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x360>
 8010940:	0064      	lsls	r4, r4, #1
 8010942:	fb54 1406 	smmla	r4, r4, r6, r1
 8010946:	fa44 f202 	asr.w	r2, r4, r2
 801094a:	f302 0207 	ssat	r2, #8, r2
 801094e:	9901      	ldr	r1, [sp, #4]
 8010950:	f801 2c02 	strb.w	r2, [r1, #-2]
 8010954:	e75b      	b.n	801080e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 8010956:	3004      	adds	r0, #4
 8010958:	e741      	b.n	80107de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 801095a:	f1c6 0601 	rsb	r6, r6, #1
 801095e:	40b3      	lsls	r3, r6
 8010960:	f303 031f 	ssat	r3, #32, r3
 8010964:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8010968:	fb53 f212 	smmulr	r2, r3, r2
 801096c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8010970:	441a      	add	r2, r3
 8010972:	f302 0207 	ssat	r2, #8, r2
 8010976:	9b01      	ldr	r3, [sp, #4]
 8010978:	f803 2c01 	strb.w	r2, [r3, #-1]
 801097c:	461a      	mov	r2, r3
 801097e:	e75e      	b.n	801083e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8010980:	f1c2 0201 	rsb	r2, r2, #1
 8010984:	fa04 f202 	lsl.w	r2, r4, r2
 8010988:	f302 021f 	ssat	r2, #32, r2
 801098c:	fb52 f216 	smmulr	r2, r2, r6
 8010990:	440a      	add	r2, r1
 8010992:	f302 0207 	ssat	r2, #8, r2
 8010996:	9901      	ldr	r1, [sp, #4]
 8010998:	f801 2c02 	strb.w	r2, [r1, #-2]
 801099c:	e737      	b.n	801080e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 801099e:	9f05      	ldr	r7, [sp, #20]
 80109a0:	f04f 0c00 	mov.w	ip, #0
 80109a4:	e6c8      	b.n	8010738 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 80109a6:	3008      	adds	r0, #8
 80109a8:	e719      	b.n	80107de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 80109aa:	1e97      	subs	r7, r2, #2
 80109ac:	2001      	movs	r0, #1
 80109ae:	3a01      	subs	r2, #1
 80109b0:	40b8      	lsls	r0, r7
 80109b2:	fb53 0306 	smmla	r3, r3, r6, r0
 80109b6:	4113      	asrs	r3, r2
 80109b8:	442b      	add	r3, r5
 80109ba:	f303 0307 	ssat	r3, #8, r3
 80109be:	7023      	strb	r3, [r4, #0]
 80109c0:	460c      	mov	r4, r1
 80109c2:	4620      	mov	r0, r4
 80109c4:	b00f      	add	sp, #60	; 0x3c
 80109c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ca:	f1c2 0201 	rsb	r2, r2, #1
 80109ce:	4093      	lsls	r3, r2
 80109d0:	f303 031f 	ssat	r3, #32, r3
 80109d4:	fb53 f316 	smmulr	r3, r3, r6
 80109d8:	442b      	add	r3, r5
 80109da:	f303 0307 	ssat	r3, #8, r3
 80109de:	7023      	strb	r3, [r4, #0]
 80109e0:	460c      	mov	r4, r1
 80109e2:	4620      	mov	r0, r4
 80109e4:	b00f      	add	sp, #60	; 0x3c
 80109e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ea:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80109ec:	e74b      	b.n	8010886 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x266>
 80109ee:	bf00      	nop

080109f0 <st_int8_avepool>:
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	b099      	sub	sp, #100	; 0x64
 80109f6:	4615      	mov	r5, r2
 80109f8:	eec0 4a20 	vdiv.f32	s9, s0, s1
 80109fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80109fe:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8010a02:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 8010a06:	9012      	str	r0, [sp, #72]	; 0x48
 8010a08:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8010a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8010a0e:	9015      	str	r0, [sp, #84]	; 0x54
 8010a10:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8010a14:	9416      	str	r4, [sp, #88]	; 0x58
 8010a16:	900e      	str	r0, [sp, #56]	; 0x38
 8010a18:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 8010a1c:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8010a20:	ee03 0a90 	vmov	s7, r0
 8010a24:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8010a28:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 8010a2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010a30:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8010a34:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8010a38:	9311      	str	r3, [sp, #68]	; 0x44
 8010a3a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8010a3e:	2c00      	cmp	r4, #0
 8010a40:	f000 80dc 	beq.w	8010bfc <st_int8_avepool+0x20c>
 8010a44:	1ac9      	subs	r1, r1, r3
 8010a46:	eeb4 0a60 	vcmp.f32	s0, s1
 8010a4a:	425b      	negs	r3, r3
 8010a4c:	ee04 0a10 	vmov	s8, r0
 8010a50:	b289      	uxth	r1, r1
 8010a52:	2000      	movs	r0, #0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	9113      	str	r1, [sp, #76]	; 0x4c
 8010a5c:	f1c2 0100 	rsb	r1, r2, #0
 8010a60:	9014      	str	r0, [sp, #80]	; 0x50
 8010a62:	4602      	mov	r2, r0
 8010a64:	9117      	str	r1, [sp, #92]	; 0x5c
 8010a66:	ee13 1a90 	vmov	r1, s7
 8010a6a:	9301      	str	r3, [sp, #4]
 8010a6c:	462b      	mov	r3, r5
 8010a6e:	fb05 fb07 	mul.w	fp, r5, r7
 8010a72:	bf14      	ite	ne
 8010a74:	4603      	movne	r3, r0
 8010a76:	2301      	moveq	r3, #1
 8010a78:	ee14 0a10 	vmov	r0, s8
 8010a7c:	ed9f 5a6d 	vldr	s10, [pc, #436]	; 8010c34 <st_int8_avepool+0x244>
 8010a80:	46da      	mov	sl, fp
 8010a82:	4281      	cmp	r1, r0
 8010a84:	bf14      	ite	ne
 8010a86:	2300      	movne	r3, #0
 8010a88:	f003 0301 	andeq.w	r3, r3, #1
 8010a8c:	ed9f 3a6a 	vldr	s6, [pc, #424]	; 8010c38 <st_int8_avepool+0x248>
 8010a90:	46b9      	mov	r9, r7
 8010a92:	9307      	str	r3, [sp, #28]
 8010a94:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010a96:	2900      	cmp	r1, #0
 8010a98:	f000 809d 	beq.w	8010bd6 <st_int8_avepool+0x1e6>
 8010a9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010a9e:	fb01 f202 	mul.w	r2, r1, r2
 8010aa2:	9d01      	ldr	r5, [sp, #4]
 8010aa4:	2400      	movs	r4, #0
 8010aa6:	1e43      	subs	r3, r0, #1
 8010aa8:	920f      	str	r2, [sp, #60]	; 0x3c
 8010aaa:	fa0f fb85 	sxth.w	fp, r5
 8010aae:	9a03      	ldr	r2, [sp, #12]
 8010ab0:	1b5b      	subs	r3, r3, r5
 8010ab2:	b201      	sxth	r1, r0
 8010ab4:	fb02 f20b 	mul.w	r2, r2, fp
 8010ab8:	464f      	mov	r7, r9
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	9108      	str	r1, [sp, #32]
 8010abe:	9210      	str	r2, [sp, #64]	; 0x40
 8010ac0:	4622      	mov	r2, r4
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8010ac8:	940d      	str	r4, [sp, #52]	; 0x34
 8010aca:	4699      	mov	r9, r3
 8010acc:	910c      	str	r1, [sp, #48]	; 0x30
 8010ace:	2f00      	cmp	r7, #0
 8010ad0:	d073      	beq.n	8010bba <st_int8_avepool+0x1ca>
 8010ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ad4:	eef8 5ae3 	vcvt.f32.s32	s11, s7
 8010ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ada:	eeb8 6ac4 	vcvt.f32.s32	s12, s8
 8010ade:	441a      	add	r2, r3
 8010ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ae2:	fa0f f881 	sxth.w	r8, r1
 8010ae6:	185d      	adds	r5, r3, r1
 8010ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010aea:	2100      	movs	r1, #0
 8010aec:	fb07 f202 	mul.w	r2, r7, r2
 8010af0:	4443      	add	r3, r8
 8010af2:	b22d      	sxth	r5, r5
 8010af4:	9105      	str	r1, [sp, #20]
 8010af6:	fb07 f303 	mul.w	r3, r7, r3
 8010afa:	9206      	str	r2, [sp, #24]
 8010afc:	930a      	str	r3, [sp, #40]	; 0x28
 8010afe:	9104      	str	r1, [sp, #16]
 8010b00:	9b08      	ldr	r3, [sp, #32]
 8010b02:	459b      	cmp	fp, r3
 8010b04:	f280 8090 	bge.w	8010c28 <st_int8_avepool+0x238>
 8010b08:	9b04      	ldr	r3, [sp, #16]
 8010b0a:	2400      	movs	r4, #0
 8010b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b0e:	46a4      	mov	ip, r4
 8010b10:	46a6      	mov	lr, r4
 8010b12:	189e      	adds	r6, r3, r2
 8010b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b16:	441e      	add	r6, r3
 8010b18:	45a8      	cmp	r8, r5
 8010b1a:	da1b      	bge.n	8010b54 <st_int8_avepool+0x164>
 8010b1c:	9b01      	ldr	r3, [sp, #4]
 8010b1e:	9902      	ldr	r1, [sp, #8]
 8010b20:	191a      	adds	r2, r3, r4
 8010b22:	eb0b 0304 	add.w	r3, fp, r4
 8010b26:	43d2      	mvns	r2, r2
 8010b28:	4299      	cmp	r1, r3
 8010b2a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8010b2e:	dd11      	ble.n	8010b54 <st_int8_avepool+0x164>
 8010b30:	4631      	mov	r1, r6
 8010b32:	4643      	mov	r3, r8
 8010b34:	0418      	lsls	r0, r3, #16
 8010b36:	d408      	bmi.n	8010b4a <st_int8_avepool+0x15a>
 8010b38:	b13a      	cbz	r2, 8010b4a <st_int8_avepool+0x15a>
 8010b3a:	9803      	ldr	r0, [sp, #12]
 8010b3c:	4298      	cmp	r0, r3
 8010b3e:	dd04      	ble.n	8010b4a <st_int8_avepool+0x15a>
 8010b40:	f991 0000 	ldrsb.w	r0, [r1]
 8010b44:	f10c 0c01 	add.w	ip, ip, #1
 8010b48:	4486      	add	lr, r0
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	4439      	add	r1, r7
 8010b4e:	b218      	sxth	r0, r3
 8010b50:	4285      	cmp	r5, r0
 8010b52:	dcef      	bgt.n	8010b34 <st_int8_avepool+0x144>
 8010b54:	3401      	adds	r4, #1
 8010b56:	4456      	add	r6, sl
 8010b58:	45a1      	cmp	r9, r4
 8010b5a:	d1dd      	bne.n	8010b18 <st_int8_avepool+0x128>
 8010b5c:	9b07      	ldr	r3, [sp, #28]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d14f      	bne.n	8010c02 <st_int8_avepool+0x212>
 8010b62:	ee07 ea90 	vmov	s15, lr
 8010b66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010b6a:	ee07 ca90 	vmov	s15, ip
 8010b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b76:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010b7a:	eef0 6a46 	vmov.f32	s13, s12
 8010b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010b82:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8010b86:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8e:	fe27 7a05 	vselge.f32	s14, s14, s10
 8010b92:	ee77 7a26 	vadd.f32	s15, s14, s13
 8010b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b9a:	ee17 3a90 	vmov	r3, s15
 8010b9e:	f303 0307 	ssat	r3, #8, r3
 8010ba2:	9906      	ldr	r1, [sp, #24]
 8010ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ba6:	440a      	add	r2, r1
 8010ba8:	9904      	ldr	r1, [sp, #16]
 8010baa:	5453      	strb	r3, [r2, r1]
 8010bac:	9b05      	ldr	r3, [sp, #20]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	b21b      	sxth	r3, r3
 8010bb2:	42bb      	cmp	r3, r7
 8010bb4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010bb8:	dba2      	blt.n	8010b00 <st_int8_avepool+0x110>
 8010bba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010bc0:	3201      	adds	r2, #1
 8010bc2:	440b      	add	r3, r1
 8010bc4:	b212      	sxth	r2, r2
 8010bc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	920d      	str	r2, [sp, #52]	; 0x34
 8010bcc:	428a      	cmp	r2, r1
 8010bce:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd0:	f6ff af7d 	blt.w	8010ace <st_int8_avepool+0xde>
 8010bd4:	46b9      	mov	r9, r7
 8010bd6:	9b01      	ldr	r3, [sp, #4]
 8010bd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010bda:	461a      	mov	r2, r3
 8010bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010bde:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010be0:	4403      	add	r3, r0
 8010be2:	4402      	add	r2, r0
 8010be4:	3101      	adds	r1, #1
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	b209      	sxth	r1, r1
 8010bea:	9313      	str	r3, [sp, #76]	; 0x4c
 8010bec:	b292      	uxth	r2, r2
 8010bee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010bf0:	9201      	str	r2, [sp, #4]
 8010bf2:	460a      	mov	r2, r1
 8010bf4:	428b      	cmp	r3, r1
 8010bf6:	9114      	str	r1, [sp, #80]	; 0x50
 8010bf8:	f73f af4c 	bgt.w	8010a94 <st_int8_avepool+0xa4>
 8010bfc:	b019      	add	sp, #100	; 0x64
 8010bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c02:	f1be 0f00 	cmp.w	lr, #0
 8010c06:	db04      	blt.n	8010c12 <st_int8_avepool+0x222>
 8010c08:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8010c0c:	fb9e f3fc 	sdiv	r3, lr, ip
 8010c10:	e7c5      	b.n	8010b9e <st_int8_avepool+0x1ae>
 8010c12:	f1bc 0f00 	cmp.w	ip, #0
 8010c16:	4663      	mov	r3, ip
 8010c18:	bfb8      	it	lt
 8010c1a:	f10c 0301 	addlt.w	r3, ip, #1
 8010c1e:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 8010c22:	fb93 f3fc 	sdiv	r3, r3, ip
 8010c26:	e7ba      	b.n	8010b9e <st_int8_avepool+0x1ae>
 8010c28:	9b07      	ldr	r3, [sp, #28]
 8010c2a:	b913      	cbnz	r3, 8010c32 <st_int8_avepool+0x242>
 8010c2c:	eef0 7a43 	vmov.f32	s15, s6
 8010c30:	e7a1      	b.n	8010b76 <st_int8_avepool+0x186>
 8010c32:	deff      	udf	#255	; 0xff
 8010c34:	befffffc 	.word	0xbefffffc
 8010c38:	7fc00000 	.word	0x7fc00000

08010c3c <st_dsp_arm_copy_q7>:
 8010c3c:	b470      	push	{r4, r5, r6}
 8010c3e:	0896      	lsrs	r6, r2, #2
 8010c40:	d01b      	beq.n	8010c7a <st_dsp_arm_copy_q7+0x3e>
 8010c42:	00b6      	lsls	r6, r6, #2
 8010c44:	460b      	mov	r3, r1
 8010c46:	1985      	adds	r5, r0, r6
 8010c48:	f850 4b04 	ldr.w	r4, [r0], #4
 8010c4c:	42a8      	cmp	r0, r5
 8010c4e:	f843 4b04 	str.w	r4, [r3], #4
 8010c52:	d1f9      	bne.n	8010c48 <st_dsp_arm_copy_q7+0xc>
 8010c54:	4431      	add	r1, r6
 8010c56:	f012 0203 	ands.w	r2, r2, #3
 8010c5a:	d00c      	beq.n	8010c76 <st_dsp_arm_copy_q7+0x3a>
 8010c5c:	f995 3000 	ldrsb.w	r3, [r5]
 8010c60:	2a01      	cmp	r2, #1
 8010c62:	700b      	strb	r3, [r1, #0]
 8010c64:	d007      	beq.n	8010c76 <st_dsp_arm_copy_q7+0x3a>
 8010c66:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8010c6a:	2a02      	cmp	r2, #2
 8010c6c:	704b      	strb	r3, [r1, #1]
 8010c6e:	d002      	beq.n	8010c76 <st_dsp_arm_copy_q7+0x3a>
 8010c70:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8010c74:	708b      	strb	r3, [r1, #2]
 8010c76:	bc70      	pop	{r4, r5, r6}
 8010c78:	4770      	bx	lr
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	e7eb      	b.n	8010c56 <st_dsp_arm_copy_q7+0x1a>
 8010c7e:	bf00      	nop

08010c80 <st_dsp_arm_fill_q15>:
 8010c80:	b470      	push	{r4, r5, r6}
 8010c82:	b285      	uxth	r5, r0
 8010c84:	0896      	lsrs	r6, r2, #2
 8010c86:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8010c8a:	d009      	beq.n	8010ca0 <st_dsp_arm_fill_q15+0x20>
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4634      	mov	r4, r6
 8010c90:	3c01      	subs	r4, #1
 8010c92:	601d      	str	r5, [r3, #0]
 8010c94:	605d      	str	r5, [r3, #4]
 8010c96:	f103 0308 	add.w	r3, r3, #8
 8010c9a:	d1f9      	bne.n	8010c90 <st_dsp_arm_fill_q15+0x10>
 8010c9c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010ca0:	f012 0203 	ands.w	r2, r2, #3
 8010ca4:	d006      	beq.n	8010cb4 <st_dsp_arm_fill_q15+0x34>
 8010ca6:	2a01      	cmp	r2, #1
 8010ca8:	8008      	strh	r0, [r1, #0]
 8010caa:	d003      	beq.n	8010cb4 <st_dsp_arm_fill_q15+0x34>
 8010cac:	2a02      	cmp	r2, #2
 8010cae:	8048      	strh	r0, [r1, #2]
 8010cb0:	bf18      	it	ne
 8010cb2:	8088      	strhne	r0, [r1, #4]
 8010cb4:	bc70      	pop	{r4, r5, r6}
 8010cb6:	4770      	bx	lr

08010cb8 <ai_version_get>:
 8010cb8:	0212      	lsls	r2, r2, #8
 8010cba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010cbe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010cc2:	4770      	bx	lr

08010cc4 <ai_platform_version_get>:
 8010cc4:	0e01      	lsrs	r1, r0, #24
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010ccc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010cd0:	f361 0307 	bfi	r3, r1, #0, #8
 8010cd4:	b082      	sub	sp, #8
 8010cd6:	f362 230f 	bfi	r3, r2, #8, #8
 8010cda:	f360 4317 	bfi	r3, r0, #16, #8
 8010cde:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8010ce2:	b002      	add	sp, #8
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <get_tensor_byte_size>:
 8010ce8:	b410      	push	{r4}
 8010cea:	6984      	ldr	r4, [r0, #24]
 8010cec:	4b08      	ldr	r3, [pc, #32]	; (8010d10 <get_tensor_byte_size+0x28>)
 8010cee:	6824      	ldr	r4, [r4, #0]
 8010cf0:	68c1      	ldr	r1, [r0, #12]
 8010cf2:	4a08      	ldr	r2, [pc, #32]	; (8010d14 <get_tensor_byte_size+0x2c>)
 8010cf4:	4023      	ands	r3, r4
 8010cf6:	6940      	ldr	r0, [r0, #20]
 8010cf8:	68c9      	ldr	r1, [r1, #12]
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	68c0      	ldr	r0, [r0, #12]
 8010cfe:	fb00 f001 	mul.w	r0, r0, r1
 8010d02:	d101      	bne.n	8010d08 <get_tensor_byte_size+0x20>
 8010d04:	3007      	adds	r0, #7
 8010d06:	08c0      	lsrs	r0, r0, #3
 8010d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	017fffff 	.word	0x017fffff
 8010d14:	000400c0 	.word	0x000400c0

08010d18 <ai_array_to_buffer_fmt>:
 8010d18:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	d036      	beq.n	8010d8e <ai_array_to_buffer_fmt+0x76>
 8010d20:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8010d24:	4a20      	ldr	r2, [pc, #128]	; (8010da8 <ai_array_to_buffer_fmt+0x90>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d00f      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d2a:	dd12      	ble.n	8010d52 <ai_array_to_buffer_fmt+0x3a>
 8010d2c:	4a1f      	ldr	r2, [pc, #124]	; (8010dac <ai_array_to_buffer_fmt+0x94>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d00b      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d32:	dd1e      	ble.n	8010d72 <ai_array_to_buffer_fmt+0x5a>
 8010d34:	4a1e      	ldr	r2, [pc, #120]	; (8010db0 <ai_array_to_buffer_fmt+0x98>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d007      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d3a:	dd30      	ble.n	8010d9e <ai_array_to_buffer_fmt+0x86>
 8010d3c:	4a1d      	ldr	r2, [pc, #116]	; (8010db4 <ai_array_to_buffer_fmt+0x9c>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d003      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d42:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d11f      	bne.n	8010d8a <ai_array_to_buffer_fmt+0x72>
 8010d4a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010d4e:	4318      	orrs	r0, r3
 8010d50:	4770      	bx	lr
 8010d52:	4a19      	ldr	r2, [pc, #100]	; (8010db8 <ai_array_to_buffer_fmt+0xa0>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d0f8      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d58:	dd0b      	ble.n	8010d72 <ai_array_to_buffer_fmt+0x5a>
 8010d5a:	4a18      	ldr	r2, [pc, #96]	; (8010dbc <ai_array_to_buffer_fmt+0xa4>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d0f4      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d60:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d0f0      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d68:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d10c      	bne.n	8010d8a <ai_array_to_buffer_fmt+0x72>
 8010d70:	e7eb      	b.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d72:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d0e7      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d7a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d0e3      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d82:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d0df      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d8a:	2340      	movs	r3, #64	; 0x40
 8010d8c:	e7dd      	b.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010d8e:	4b0c      	ldr	r3, [pc, #48]	; (8010dc0 <ai_array_to_buffer_fmt+0xa8>)
 8010d90:	4003      	ands	r3, r0
 8010d92:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010d9a:	4318      	orrs	r0, r3
 8010d9c:	4770      	bx	lr
 8010d9e:	3a0f      	subs	r2, #15
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d0d2      	beq.n	8010d4a <ai_array_to_buffer_fmt+0x32>
 8010da4:	e7f1      	b.n	8010d8a <ai_array_to_buffer_fmt+0x72>
 8010da6:	bf00      	nop
 8010da8:	00060440 	.word	0x00060440
 8010dac:	00840447 	.word	0x00840447
 8010db0:	0084084f 	.word	0x0084084f
 8010db4:	00841040 	.word	0x00841040
 8010db8:	00040447 	.word	0x00040447
 8010dbc:	0004084f 	.word	0x0004084f
 8010dc0:	00803fff 	.word	0x00803fff

08010dc4 <ai_array_get_data_byte_size>:
 8010dc4:	b161      	cbz	r1, 8010de0 <ai_array_get_data_byte_size+0x1c>
 8010dc6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8010dca:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8010dce:	fb01 f103 	mul.w	r1, r1, r3
 8010dd2:	3107      	adds	r1, #7
 8010dd4:	f021 0107 	bic.w	r1, r1, #7
 8010dd8:	40c1      	lsrs	r1, r0
 8010dda:	3107      	adds	r1, #7
 8010ddc:	08c8      	lsrs	r0, r1, #3
 8010dde:	4770      	bx	lr
 8010de0:	4608      	mov	r0, r1
 8010de2:	4770      	bx	lr

08010de4 <core_get_broadcasted_shape>:
 8010de4:	b4f0      	push	{r4, r5, r6, r7}
 8010de6:	6804      	ldr	r4, [r0, #0]
 8010de8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8010dec:	b30c      	cbz	r4, 8010e32 <core_get_broadcasted_shape+0x4e>
 8010dee:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8010df2:	4623      	mov	r3, r4
 8010df4:	4425      	add	r5, r4
 8010df6:	00ad      	lsls	r5, r5, #2
 8010df8:	e002      	b.n	8010e00 <core_get_broadcasted_shape+0x1c>
 8010dfa:	6804      	ldr	r4, [r0, #0]
 8010dfc:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8010e00:	3b01      	subs	r3, #1
 8010e02:	429c      	cmp	r4, r3
 8010e04:	d912      	bls.n	8010e2c <core_get_broadcasted_shape+0x48>
 8010e06:	6816      	ldr	r6, [r2, #0]
 8010e08:	2401      	movs	r4, #1
 8010e0a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8010e0e:	d201      	bcs.n	8010e14 <core_get_broadcasted_shape+0x30>
 8010e10:	6854      	ldr	r4, [r2, #4]
 8010e12:	5964      	ldr	r4, [r4, r5]
 8010e14:	680f      	ldr	r7, [r1, #0]
 8010e16:	2601      	movs	r6, #1
 8010e18:	ebb3 2f17 	cmp.w	r3, r7, lsr #8
 8010e1c:	d201      	bcs.n	8010e22 <core_get_broadcasted_shape+0x3e>
 8010e1e:	684e      	ldr	r6, [r1, #4]
 8010e20:	5976      	ldr	r6, [r6, r5]
 8010e22:	42b4      	cmp	r4, r6
 8010e24:	bf38      	it	cc
 8010e26:	4634      	movcc	r4, r6
 8010e28:	6846      	ldr	r6, [r0, #4]
 8010e2a:	5174      	str	r4, [r6, r5]
 8010e2c:	3d04      	subs	r5, #4
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1e3      	bne.n	8010dfa <core_get_broadcasted_shape+0x16>
 8010e32:	bcf0      	pop	{r4, r5, r6, r7}
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop

08010e38 <core_compute_offsets_in_bytes>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	684e      	ldr	r6, [r1, #4]
 8010e3e:	b083      	sub	sp, #12
 8010e40:	6855      	ldr	r5, [r2, #4]
 8010e42:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010e46:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8010e4a:	6809      	ldr	r1, [r1, #0]
 8010e4c:	ebbe 090a 	subs.w	r9, lr, sl
 8010e50:	bf18      	it	ne
 8010e52:	f04f 0901 	movne.w	r9, #1
 8010e56:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8010e5a:	f0c0 808f 	bcc.w	8010f7c <core_compute_offsets_in_bytes+0x144>
 8010e5e:	f8d6 8010 	ldr.w	r8, [r6, #16]
 8010e62:	fb08 fc0e 	mul.w	ip, r8, lr
 8010e66:	6812      	ldr	r2, [r2, #0]
 8010e68:	68af      	ldr	r7, [r5, #8]
 8010e6a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8010e6e:	68b1      	ldr	r1, [r6, #8]
 8010e70:	6802      	ldr	r2, [r0, #0]
 8010e72:	bf2c      	ite	cs
 8010e74:	f8d5 b010 	ldrcs.w	fp, [r5, #16]
 8010e78:	f04f 0b01 	movcc.w	fp, #1
 8010e7c:	68f6      	ldr	r6, [r6, #12]
 8010e7e:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010e82:	ebb8 040b 	subs.w	r4, r8, fp
 8010e86:	9701      	str	r7, [sp, #4]
 8010e88:	9600      	str	r6, [sp, #0]
 8010e8a:	bf18      	it	ne
 8010e8c:	2401      	movne	r4, #1
 8010e8e:	1bce      	subs	r6, r1, r7
 8010e90:	68ed      	ldr	r5, [r5, #12]
 8010e92:	bf18      	it	ne
 8010e94:	2601      	movne	r6, #1
 8010e96:	2a01      	cmp	r2, #1
 8010e98:	d974      	bls.n	8010f84 <core_compute_offsets_in_bytes+0x14c>
 8010e9a:	ebae 020a 	sub.w	r2, lr, sl
 8010e9e:	6847      	ldr	r7, [r0, #4]
 8010ea0:	fb0e fe04 	mul.w	lr, lr, r4
 8010ea4:	fab2 f282 	clz	r2, r2
 8010ea8:	0952      	lsrs	r2, r2, #5
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	6802      	ldr	r2, [r0, #0]
 8010eae:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010eb2:	2a04      	cmp	r2, #4
 8010eb4:	d90c      	bls.n	8010ed0 <core_compute_offsets_in_bytes+0x98>
 8010eb6:	45d8      	cmp	r8, fp
 8010eb8:	bf14      	ite	ne
 8010eba:	f04f 0800 	movne.w	r8, #0
 8010ebe:	f009 0801 	andeq.w	r8, r9, #1
 8010ec2:	6847      	ldr	r7, [r0, #4]
 8010ec4:	eba8 020e 	sub.w	r2, r8, lr
 8010ec8:	613a      	str	r2, [r7, #16]
 8010eca:	6802      	ldr	r2, [r0, #0]
 8010ecc:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010ed0:	2a02      	cmp	r2, #2
 8010ed2:	fb0c f806 	mul.w	r8, ip, r6
 8010ed6:	d911      	bls.n	8010efc <core_compute_offsets_in_bytes+0xc4>
 8010ed8:	9a01      	ldr	r2, [sp, #4]
 8010eda:	6847      	ldr	r7, [r0, #4]
 8010edc:	4291      	cmp	r1, r2
 8010ede:	bf14      	ite	ne
 8010ee0:	f04f 0b00 	movne.w	fp, #0
 8010ee4:	f009 0b01 	andeq.w	fp, r9, #1
 8010ee8:	ea04 0b0b 	and.w	fp, r4, fp
 8010eec:	ebab 0b08 	sub.w	fp, fp, r8
 8010ef0:	eb0b 020e 	add.w	r2, fp, lr
 8010ef4:	60ba      	str	r2, [r7, #8]
 8010ef6:	6802      	ldr	r2, [r0, #0]
 8010ef8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010efc:	9f00      	ldr	r7, [sp, #0]
 8010efe:	42af      	cmp	r7, r5
 8010f00:	d13a      	bne.n	8010f78 <core_compute_offsets_in_bytes+0x140>
 8010f02:	2e00      	cmp	r6, #0
 8010f04:	d038      	beq.n	8010f78 <core_compute_offsets_in_bytes+0x140>
 8010f06:	ea09 0404 	and.w	r4, r9, r4
 8010f0a:	2a03      	cmp	r2, #3
 8010f0c:	d90d      	bls.n	8010f2a <core_compute_offsets_in_bytes+0xf2>
 8010f0e:	9a00      	ldr	r2, [sp, #0]
 8010f10:	fb0c f101 	mul.w	r1, ip, r1
 8010f14:	1b55      	subs	r5, r2, r5
 8010f16:	6842      	ldr	r2, [r0, #4]
 8010f18:	bf18      	it	ne
 8010f1a:	2501      	movne	r5, #1
 8010f1c:	fb05 4511 	mls	r5, r5, r1, r4
 8010f20:	4445      	add	r5, r8
 8010f22:	60d5      	str	r5, [r2, #12]
 8010f24:	6802      	ldr	r2, [r0, #0]
 8010f26:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010f2a:	2a01      	cmp	r2, #1
 8010f2c:	d911      	bls.n	8010f52 <core_compute_offsets_in_bytes+0x11a>
 8010f2e:	6841      	ldr	r1, [r0, #4]
 8010f30:	684a      	ldr	r2, [r1, #4]
 8010f32:	fb03 f202 	mul.w	r2, r3, r2
 8010f36:	604a      	str	r2, [r1, #4]
 8010f38:	6802      	ldr	r2, [r0, #0]
 8010f3a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010f3e:	2a04      	cmp	r2, #4
 8010f40:	d907      	bls.n	8010f52 <core_compute_offsets_in_bytes+0x11a>
 8010f42:	6841      	ldr	r1, [r0, #4]
 8010f44:	690a      	ldr	r2, [r1, #16]
 8010f46:	fb03 f202 	mul.w	r2, r3, r2
 8010f4a:	610a      	str	r2, [r1, #16]
 8010f4c:	6802      	ldr	r2, [r0, #0]
 8010f4e:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010f52:	2a02      	cmp	r2, #2
 8010f54:	d90d      	bls.n	8010f72 <core_compute_offsets_in_bytes+0x13a>
 8010f56:	6841      	ldr	r1, [r0, #4]
 8010f58:	688a      	ldr	r2, [r1, #8]
 8010f5a:	fb03 f202 	mul.w	r2, r3, r2
 8010f5e:	608a      	str	r2, [r1, #8]
 8010f60:	6802      	ldr	r2, [r0, #0]
 8010f62:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010f66:	d304      	bcc.n	8010f72 <core_compute_offsets_in_bytes+0x13a>
 8010f68:	6841      	ldr	r1, [r0, #4]
 8010f6a:	68ca      	ldr	r2, [r1, #12]
 8010f6c:	fb03 f302 	mul.w	r3, r3, r2
 8010f70:	60cb      	str	r3, [r1, #12]
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f78:	2400      	movs	r4, #0
 8010f7a:	e7c6      	b.n	8010f0a <core_compute_offsets_in_bytes+0xd2>
 8010f7c:	46f4      	mov	ip, lr
 8010f7e:	f04f 0801 	mov.w	r8, #1
 8010f82:	e770      	b.n	8010e66 <core_compute_offsets_in_bytes+0x2e>
 8010f84:	fb0e fe04 	mul.w	lr, lr, r4
 8010f88:	e7a2      	b.n	8010ed0 <core_compute_offsets_in_bytes+0x98>
 8010f8a:	bf00      	nop

08010f8c <core_tensor_clone>:
 8010f8c:	680b      	ldr	r3, [r1, #0]
 8010f8e:	6882      	ldr	r2, [r0, #8]
 8010f90:	6003      	str	r3, [r0, #0]
 8010f92:	684b      	ldr	r3, [r1, #4]
 8010f94:	6043      	str	r3, [r0, #4]
 8010f96:	698b      	ldr	r3, [r1, #24]
 8010f98:	6183      	str	r3, [r0, #24]
 8010f9a:	688b      	ldr	r3, [r1, #8]
 8010f9c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010fa0:	f363 221f 	bfi	r2, r3, #8, #24
 8010fa4:	b410      	push	{r4}
 8010fa6:	6082      	str	r2, [r0, #8]
 8010fa8:	b15b      	cbz	r3, 8010fc2 <core_tensor_clone+0x36>
 8010faa:	2300      	movs	r3, #0
 8010fac:	68cc      	ldr	r4, [r1, #12]
 8010fae:	68c2      	ldr	r2, [r0, #12]
 8010fb0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8010fb4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	6882      	ldr	r2, [r0, #8]
 8010fbc:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8010fc0:	d3f4      	bcc.n	8010fac <core_tensor_clone+0x20>
 8010fc2:	690b      	ldr	r3, [r1, #16]
 8010fc4:	6902      	ldr	r2, [r0, #16]
 8010fc6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010fca:	f363 221f 	bfi	r2, r3, #8, #24
 8010fce:	6102      	str	r2, [r0, #16]
 8010fd0:	b15b      	cbz	r3, 8010fea <core_tensor_clone+0x5e>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	694c      	ldr	r4, [r1, #20]
 8010fd6:	6942      	ldr	r2, [r0, #20]
 8010fd8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8010fdc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	6902      	ldr	r2, [r0, #16]
 8010fe4:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8010fe8:	d3f4      	bcc.n	8010fd4 <core_tensor_clone+0x48>
 8010fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <core_array_clone>:
 8010ff0:	b410      	push	{r4}
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <__errno>:
 8011000:	4b01      	ldr	r3, [pc, #4]	; (8011008 <__errno+0x8>)
 8011002:	6818      	ldr	r0, [r3, #0]
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	24003e40 	.word	0x24003e40

0801100c <__sflush_r>:
 801100c:	898a      	ldrh	r2, [r1, #12]
 801100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011012:	4605      	mov	r5, r0
 8011014:	0710      	lsls	r0, r2, #28
 8011016:	460c      	mov	r4, r1
 8011018:	d458      	bmi.n	80110cc <__sflush_r+0xc0>
 801101a:	684b      	ldr	r3, [r1, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dc05      	bgt.n	801102c <__sflush_r+0x20>
 8011020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011022:	2b00      	cmp	r3, #0
 8011024:	dc02      	bgt.n	801102c <__sflush_r+0x20>
 8011026:	2000      	movs	r0, #0
 8011028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801102e:	2e00      	cmp	r6, #0
 8011030:	d0f9      	beq.n	8011026 <__sflush_r+0x1a>
 8011032:	2300      	movs	r3, #0
 8011034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011038:	682f      	ldr	r7, [r5, #0]
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	d032      	beq.n	80110a4 <__sflush_r+0x98>
 801103e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	075a      	lsls	r2, r3, #29
 8011044:	d505      	bpl.n	8011052 <__sflush_r+0x46>
 8011046:	6863      	ldr	r3, [r4, #4]
 8011048:	1ac0      	subs	r0, r0, r3
 801104a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801104c:	b10b      	cbz	r3, 8011052 <__sflush_r+0x46>
 801104e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011050:	1ac0      	subs	r0, r0, r3
 8011052:	2300      	movs	r3, #0
 8011054:	4602      	mov	r2, r0
 8011056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011058:	6a21      	ldr	r1, [r4, #32]
 801105a:	4628      	mov	r0, r5
 801105c:	47b0      	blx	r6
 801105e:	1c43      	adds	r3, r0, #1
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	d106      	bne.n	8011072 <__sflush_r+0x66>
 8011064:	6829      	ldr	r1, [r5, #0]
 8011066:	291d      	cmp	r1, #29
 8011068:	d82c      	bhi.n	80110c4 <__sflush_r+0xb8>
 801106a:	4a2a      	ldr	r2, [pc, #168]	; (8011114 <__sflush_r+0x108>)
 801106c:	40ca      	lsrs	r2, r1
 801106e:	07d6      	lsls	r6, r2, #31
 8011070:	d528      	bpl.n	80110c4 <__sflush_r+0xb8>
 8011072:	2200      	movs	r2, #0
 8011074:	6062      	str	r2, [r4, #4]
 8011076:	04d9      	lsls	r1, r3, #19
 8011078:	6922      	ldr	r2, [r4, #16]
 801107a:	6022      	str	r2, [r4, #0]
 801107c:	d504      	bpl.n	8011088 <__sflush_r+0x7c>
 801107e:	1c42      	adds	r2, r0, #1
 8011080:	d101      	bne.n	8011086 <__sflush_r+0x7a>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	b903      	cbnz	r3, 8011088 <__sflush_r+0x7c>
 8011086:	6560      	str	r0, [r4, #84]	; 0x54
 8011088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801108a:	602f      	str	r7, [r5, #0]
 801108c:	2900      	cmp	r1, #0
 801108e:	d0ca      	beq.n	8011026 <__sflush_r+0x1a>
 8011090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011094:	4299      	cmp	r1, r3
 8011096:	d002      	beq.n	801109e <__sflush_r+0x92>
 8011098:	4628      	mov	r0, r5
 801109a:	f000 f9cf 	bl	801143c <_free_r>
 801109e:	2000      	movs	r0, #0
 80110a0:	6360      	str	r0, [r4, #52]	; 0x34
 80110a2:	e7c1      	b.n	8011028 <__sflush_r+0x1c>
 80110a4:	6a21      	ldr	r1, [r4, #32]
 80110a6:	2301      	movs	r3, #1
 80110a8:	4628      	mov	r0, r5
 80110aa:	47b0      	blx	r6
 80110ac:	1c41      	adds	r1, r0, #1
 80110ae:	d1c7      	bne.n	8011040 <__sflush_r+0x34>
 80110b0:	682b      	ldr	r3, [r5, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d0c4      	beq.n	8011040 <__sflush_r+0x34>
 80110b6:	2b1d      	cmp	r3, #29
 80110b8:	d001      	beq.n	80110be <__sflush_r+0xb2>
 80110ba:	2b16      	cmp	r3, #22
 80110bc:	d101      	bne.n	80110c2 <__sflush_r+0xb6>
 80110be:	602f      	str	r7, [r5, #0]
 80110c0:	e7b1      	b.n	8011026 <__sflush_r+0x1a>
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	e7ad      	b.n	8011028 <__sflush_r+0x1c>
 80110cc:	690f      	ldr	r7, [r1, #16]
 80110ce:	2f00      	cmp	r7, #0
 80110d0:	d0a9      	beq.n	8011026 <__sflush_r+0x1a>
 80110d2:	0793      	lsls	r3, r2, #30
 80110d4:	680e      	ldr	r6, [r1, #0]
 80110d6:	bf08      	it	eq
 80110d8:	694b      	ldreq	r3, [r1, #20]
 80110da:	600f      	str	r7, [r1, #0]
 80110dc:	bf18      	it	ne
 80110de:	2300      	movne	r3, #0
 80110e0:	eba6 0807 	sub.w	r8, r6, r7
 80110e4:	608b      	str	r3, [r1, #8]
 80110e6:	f1b8 0f00 	cmp.w	r8, #0
 80110ea:	dd9c      	ble.n	8011026 <__sflush_r+0x1a>
 80110ec:	6a21      	ldr	r1, [r4, #32]
 80110ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110f0:	4643      	mov	r3, r8
 80110f2:	463a      	mov	r2, r7
 80110f4:	4628      	mov	r0, r5
 80110f6:	47b0      	blx	r6
 80110f8:	2800      	cmp	r0, #0
 80110fa:	dc06      	bgt.n	801110a <__sflush_r+0xfe>
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011102:	81a3      	strh	r3, [r4, #12]
 8011104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011108:	e78e      	b.n	8011028 <__sflush_r+0x1c>
 801110a:	4407      	add	r7, r0
 801110c:	eba8 0800 	sub.w	r8, r8, r0
 8011110:	e7e9      	b.n	80110e6 <__sflush_r+0xda>
 8011112:	bf00      	nop
 8011114:	20400001 	.word	0x20400001

08011118 <_fflush_r>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	690b      	ldr	r3, [r1, #16]
 801111c:	4605      	mov	r5, r0
 801111e:	460c      	mov	r4, r1
 8011120:	b913      	cbnz	r3, 8011128 <_fflush_r+0x10>
 8011122:	2500      	movs	r5, #0
 8011124:	4628      	mov	r0, r5
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	b118      	cbz	r0, 8011132 <_fflush_r+0x1a>
 801112a:	6983      	ldr	r3, [r0, #24]
 801112c:	b90b      	cbnz	r3, 8011132 <_fflush_r+0x1a>
 801112e:	f000 f899 	bl	8011264 <__sinit>
 8011132:	4b14      	ldr	r3, [pc, #80]	; (8011184 <_fflush_r+0x6c>)
 8011134:	429c      	cmp	r4, r3
 8011136:	d11b      	bne.n	8011170 <_fflush_r+0x58>
 8011138:	686c      	ldr	r4, [r5, #4]
 801113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d0ef      	beq.n	8011122 <_fflush_r+0xa>
 8011142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011144:	07d0      	lsls	r0, r2, #31
 8011146:	d404      	bmi.n	8011152 <_fflush_r+0x3a>
 8011148:	0599      	lsls	r1, r3, #22
 801114a:	d402      	bmi.n	8011152 <_fflush_r+0x3a>
 801114c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801114e:	f000 f94c 	bl	80113ea <__retarget_lock_acquire_recursive>
 8011152:	4628      	mov	r0, r5
 8011154:	4621      	mov	r1, r4
 8011156:	f7ff ff59 	bl	801100c <__sflush_r>
 801115a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801115c:	07da      	lsls	r2, r3, #31
 801115e:	4605      	mov	r5, r0
 8011160:	d4e0      	bmi.n	8011124 <_fflush_r+0xc>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	059b      	lsls	r3, r3, #22
 8011166:	d4dd      	bmi.n	8011124 <_fflush_r+0xc>
 8011168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116a:	f000 f93f 	bl	80113ec <__retarget_lock_release_recursive>
 801116e:	e7d9      	b.n	8011124 <_fflush_r+0xc>
 8011170:	4b05      	ldr	r3, [pc, #20]	; (8011188 <_fflush_r+0x70>)
 8011172:	429c      	cmp	r4, r3
 8011174:	d101      	bne.n	801117a <_fflush_r+0x62>
 8011176:	68ac      	ldr	r4, [r5, #8]
 8011178:	e7df      	b.n	801113a <_fflush_r+0x22>
 801117a:	4b04      	ldr	r3, [pc, #16]	; (801118c <_fflush_r+0x74>)
 801117c:	429c      	cmp	r4, r3
 801117e:	bf08      	it	eq
 8011180:	68ec      	ldreq	r4, [r5, #12]
 8011182:	e7da      	b.n	801113a <_fflush_r+0x22>
 8011184:	0804e3bc 	.word	0x0804e3bc
 8011188:	0804e3dc 	.word	0x0804e3dc
 801118c:	0804e39c 	.word	0x0804e39c

08011190 <fflush>:
 8011190:	4601      	mov	r1, r0
 8011192:	b920      	cbnz	r0, 801119e <fflush+0xe>
 8011194:	4b04      	ldr	r3, [pc, #16]	; (80111a8 <fflush+0x18>)
 8011196:	4905      	ldr	r1, [pc, #20]	; (80111ac <fflush+0x1c>)
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	f000 b8e1 	b.w	8011360 <_fwalk_reent>
 801119e:	4b04      	ldr	r3, [pc, #16]	; (80111b0 <fflush+0x20>)
 80111a0:	6818      	ldr	r0, [r3, #0]
 80111a2:	f7ff bfb9 	b.w	8011118 <_fflush_r>
 80111a6:	bf00      	nop
 80111a8:	0804e3fc 	.word	0x0804e3fc
 80111ac:	08011119 	.word	0x08011119
 80111b0:	24003e40 	.word	0x24003e40

080111b4 <std>:
 80111b4:	2300      	movs	r3, #0
 80111b6:	b510      	push	{r4, lr}
 80111b8:	4604      	mov	r4, r0
 80111ba:	e9c0 3300 	strd	r3, r3, [r0]
 80111be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111c2:	6083      	str	r3, [r0, #8]
 80111c4:	8181      	strh	r1, [r0, #12]
 80111c6:	6643      	str	r3, [r0, #100]	; 0x64
 80111c8:	81c2      	strh	r2, [r0, #14]
 80111ca:	6183      	str	r3, [r0, #24]
 80111cc:	4619      	mov	r1, r3
 80111ce:	2208      	movs	r2, #8
 80111d0:	305c      	adds	r0, #92	; 0x5c
 80111d2:	f000 f92b 	bl	801142c <memset>
 80111d6:	4b05      	ldr	r3, [pc, #20]	; (80111ec <std+0x38>)
 80111d8:	6263      	str	r3, [r4, #36]	; 0x24
 80111da:	4b05      	ldr	r3, [pc, #20]	; (80111f0 <std+0x3c>)
 80111dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80111de:	4b05      	ldr	r3, [pc, #20]	; (80111f4 <std+0x40>)
 80111e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111e2:	4b05      	ldr	r3, [pc, #20]	; (80111f8 <std+0x44>)
 80111e4:	6224      	str	r4, [r4, #32]
 80111e6:	6323      	str	r3, [r4, #48]	; 0x30
 80111e8:	bd10      	pop	{r4, pc}
 80111ea:	bf00      	nop
 80111ec:	08011f7d 	.word	0x08011f7d
 80111f0:	08011f9f 	.word	0x08011f9f
 80111f4:	08011fd7 	.word	0x08011fd7
 80111f8:	08011ffb 	.word	0x08011ffb

080111fc <_cleanup_r>:
 80111fc:	4901      	ldr	r1, [pc, #4]	; (8011204 <_cleanup_r+0x8>)
 80111fe:	f000 b8af 	b.w	8011360 <_fwalk_reent>
 8011202:	bf00      	nop
 8011204:	08011119 	.word	0x08011119

08011208 <__sfmoreglue>:
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	2268      	movs	r2, #104	; 0x68
 801120c:	1e4d      	subs	r5, r1, #1
 801120e:	4355      	muls	r5, r2
 8011210:	460e      	mov	r6, r1
 8011212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011216:	f000 f97d 	bl	8011514 <_malloc_r>
 801121a:	4604      	mov	r4, r0
 801121c:	b140      	cbz	r0, 8011230 <__sfmoreglue+0x28>
 801121e:	2100      	movs	r1, #0
 8011220:	e9c0 1600 	strd	r1, r6, [r0]
 8011224:	300c      	adds	r0, #12
 8011226:	60a0      	str	r0, [r4, #8]
 8011228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801122c:	f000 f8fe 	bl	801142c <memset>
 8011230:	4620      	mov	r0, r4
 8011232:	bd70      	pop	{r4, r5, r6, pc}

08011234 <__sfp_lock_acquire>:
 8011234:	4801      	ldr	r0, [pc, #4]	; (801123c <__sfp_lock_acquire+0x8>)
 8011236:	f000 b8d8 	b.w	80113ea <__retarget_lock_acquire_recursive>
 801123a:	bf00      	nop
 801123c:	2405b10d 	.word	0x2405b10d

08011240 <__sfp_lock_release>:
 8011240:	4801      	ldr	r0, [pc, #4]	; (8011248 <__sfp_lock_release+0x8>)
 8011242:	f000 b8d3 	b.w	80113ec <__retarget_lock_release_recursive>
 8011246:	bf00      	nop
 8011248:	2405b10d 	.word	0x2405b10d

0801124c <__sinit_lock_acquire>:
 801124c:	4801      	ldr	r0, [pc, #4]	; (8011254 <__sinit_lock_acquire+0x8>)
 801124e:	f000 b8cc 	b.w	80113ea <__retarget_lock_acquire_recursive>
 8011252:	bf00      	nop
 8011254:	2405b10e 	.word	0x2405b10e

08011258 <__sinit_lock_release>:
 8011258:	4801      	ldr	r0, [pc, #4]	; (8011260 <__sinit_lock_release+0x8>)
 801125a:	f000 b8c7 	b.w	80113ec <__retarget_lock_release_recursive>
 801125e:	bf00      	nop
 8011260:	2405b10e 	.word	0x2405b10e

08011264 <__sinit>:
 8011264:	b510      	push	{r4, lr}
 8011266:	4604      	mov	r4, r0
 8011268:	f7ff fff0 	bl	801124c <__sinit_lock_acquire>
 801126c:	69a3      	ldr	r3, [r4, #24]
 801126e:	b11b      	cbz	r3, 8011278 <__sinit+0x14>
 8011270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011274:	f7ff bff0 	b.w	8011258 <__sinit_lock_release>
 8011278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801127c:	6523      	str	r3, [r4, #80]	; 0x50
 801127e:	4b13      	ldr	r3, [pc, #76]	; (80112cc <__sinit+0x68>)
 8011280:	4a13      	ldr	r2, [pc, #76]	; (80112d0 <__sinit+0x6c>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	62a2      	str	r2, [r4, #40]	; 0x28
 8011286:	42a3      	cmp	r3, r4
 8011288:	bf04      	itt	eq
 801128a:	2301      	moveq	r3, #1
 801128c:	61a3      	streq	r3, [r4, #24]
 801128e:	4620      	mov	r0, r4
 8011290:	f000 f820 	bl	80112d4 <__sfp>
 8011294:	6060      	str	r0, [r4, #4]
 8011296:	4620      	mov	r0, r4
 8011298:	f000 f81c 	bl	80112d4 <__sfp>
 801129c:	60a0      	str	r0, [r4, #8]
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 f818 	bl	80112d4 <__sfp>
 80112a4:	2200      	movs	r2, #0
 80112a6:	60e0      	str	r0, [r4, #12]
 80112a8:	2104      	movs	r1, #4
 80112aa:	6860      	ldr	r0, [r4, #4]
 80112ac:	f7ff ff82 	bl	80111b4 <std>
 80112b0:	68a0      	ldr	r0, [r4, #8]
 80112b2:	2201      	movs	r2, #1
 80112b4:	2109      	movs	r1, #9
 80112b6:	f7ff ff7d 	bl	80111b4 <std>
 80112ba:	68e0      	ldr	r0, [r4, #12]
 80112bc:	2202      	movs	r2, #2
 80112be:	2112      	movs	r1, #18
 80112c0:	f7ff ff78 	bl	80111b4 <std>
 80112c4:	2301      	movs	r3, #1
 80112c6:	61a3      	str	r3, [r4, #24]
 80112c8:	e7d2      	b.n	8011270 <__sinit+0xc>
 80112ca:	bf00      	nop
 80112cc:	0804e3fc 	.word	0x0804e3fc
 80112d0:	080111fd 	.word	0x080111fd

080112d4 <__sfp>:
 80112d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112d6:	4607      	mov	r7, r0
 80112d8:	f7ff ffac 	bl	8011234 <__sfp_lock_acquire>
 80112dc:	4b1e      	ldr	r3, [pc, #120]	; (8011358 <__sfp+0x84>)
 80112de:	681e      	ldr	r6, [r3, #0]
 80112e0:	69b3      	ldr	r3, [r6, #24]
 80112e2:	b913      	cbnz	r3, 80112ea <__sfp+0x16>
 80112e4:	4630      	mov	r0, r6
 80112e6:	f7ff ffbd 	bl	8011264 <__sinit>
 80112ea:	3648      	adds	r6, #72	; 0x48
 80112ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112f0:	3b01      	subs	r3, #1
 80112f2:	d503      	bpl.n	80112fc <__sfp+0x28>
 80112f4:	6833      	ldr	r3, [r6, #0]
 80112f6:	b30b      	cbz	r3, 801133c <__sfp+0x68>
 80112f8:	6836      	ldr	r6, [r6, #0]
 80112fa:	e7f7      	b.n	80112ec <__sfp+0x18>
 80112fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011300:	b9d5      	cbnz	r5, 8011338 <__sfp+0x64>
 8011302:	4b16      	ldr	r3, [pc, #88]	; (801135c <__sfp+0x88>)
 8011304:	60e3      	str	r3, [r4, #12]
 8011306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801130a:	6665      	str	r5, [r4, #100]	; 0x64
 801130c:	f000 f86c 	bl	80113e8 <__retarget_lock_init_recursive>
 8011310:	f7ff ff96 	bl	8011240 <__sfp_lock_release>
 8011314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801131c:	6025      	str	r5, [r4, #0]
 801131e:	61a5      	str	r5, [r4, #24]
 8011320:	2208      	movs	r2, #8
 8011322:	4629      	mov	r1, r5
 8011324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011328:	f000 f880 	bl	801142c <memset>
 801132c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011334:	4620      	mov	r0, r4
 8011336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011338:	3468      	adds	r4, #104	; 0x68
 801133a:	e7d9      	b.n	80112f0 <__sfp+0x1c>
 801133c:	2104      	movs	r1, #4
 801133e:	4638      	mov	r0, r7
 8011340:	f7ff ff62 	bl	8011208 <__sfmoreglue>
 8011344:	4604      	mov	r4, r0
 8011346:	6030      	str	r0, [r6, #0]
 8011348:	2800      	cmp	r0, #0
 801134a:	d1d5      	bne.n	80112f8 <__sfp+0x24>
 801134c:	f7ff ff78 	bl	8011240 <__sfp_lock_release>
 8011350:	230c      	movs	r3, #12
 8011352:	603b      	str	r3, [r7, #0]
 8011354:	e7ee      	b.n	8011334 <__sfp+0x60>
 8011356:	bf00      	nop
 8011358:	0804e3fc 	.word	0x0804e3fc
 801135c:	ffff0001 	.word	0xffff0001

08011360 <_fwalk_reent>:
 8011360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011364:	4606      	mov	r6, r0
 8011366:	4688      	mov	r8, r1
 8011368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801136c:	2700      	movs	r7, #0
 801136e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011372:	f1b9 0901 	subs.w	r9, r9, #1
 8011376:	d505      	bpl.n	8011384 <_fwalk_reent+0x24>
 8011378:	6824      	ldr	r4, [r4, #0]
 801137a:	2c00      	cmp	r4, #0
 801137c:	d1f7      	bne.n	801136e <_fwalk_reent+0xe>
 801137e:	4638      	mov	r0, r7
 8011380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011384:	89ab      	ldrh	r3, [r5, #12]
 8011386:	2b01      	cmp	r3, #1
 8011388:	d907      	bls.n	801139a <_fwalk_reent+0x3a>
 801138a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801138e:	3301      	adds	r3, #1
 8011390:	d003      	beq.n	801139a <_fwalk_reent+0x3a>
 8011392:	4629      	mov	r1, r5
 8011394:	4630      	mov	r0, r6
 8011396:	47c0      	blx	r8
 8011398:	4307      	orrs	r7, r0
 801139a:	3568      	adds	r5, #104	; 0x68
 801139c:	e7e9      	b.n	8011372 <_fwalk_reent+0x12>
	...

080113a0 <__libc_init_array>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4d0d      	ldr	r5, [pc, #52]	; (80113d8 <__libc_init_array+0x38>)
 80113a4:	4c0d      	ldr	r4, [pc, #52]	; (80113dc <__libc_init_array+0x3c>)
 80113a6:	1b64      	subs	r4, r4, r5
 80113a8:	10a4      	asrs	r4, r4, #2
 80113aa:	2600      	movs	r6, #0
 80113ac:	42a6      	cmp	r6, r4
 80113ae:	d109      	bne.n	80113c4 <__libc_init_array+0x24>
 80113b0:	4d0b      	ldr	r5, [pc, #44]	; (80113e0 <__libc_init_array+0x40>)
 80113b2:	4c0c      	ldr	r4, [pc, #48]	; (80113e4 <__libc_init_array+0x44>)
 80113b4:	f002 fb9c 	bl	8013af0 <_init>
 80113b8:	1b64      	subs	r4, r4, r5
 80113ba:	10a4      	asrs	r4, r4, #2
 80113bc:	2600      	movs	r6, #0
 80113be:	42a6      	cmp	r6, r4
 80113c0:	d105      	bne.n	80113ce <__libc_init_array+0x2e>
 80113c2:	bd70      	pop	{r4, r5, r6, pc}
 80113c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80113c8:	4798      	blx	r3
 80113ca:	3601      	adds	r6, #1
 80113cc:	e7ee      	b.n	80113ac <__libc_init_array+0xc>
 80113ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d2:	4798      	blx	r3
 80113d4:	3601      	adds	r6, #1
 80113d6:	e7f2      	b.n	80113be <__libc_init_array+0x1e>
 80113d8:	0804e7d8 	.word	0x0804e7d8
 80113dc:	0804e7d8 	.word	0x0804e7d8
 80113e0:	0804e7d8 	.word	0x0804e7d8
 80113e4:	0804e7dc 	.word	0x0804e7dc

080113e8 <__retarget_lock_init_recursive>:
 80113e8:	4770      	bx	lr

080113ea <__retarget_lock_acquire_recursive>:
 80113ea:	4770      	bx	lr

080113ec <__retarget_lock_release_recursive>:
 80113ec:	4770      	bx	lr
	...

080113f0 <malloc>:
 80113f0:	4b02      	ldr	r3, [pc, #8]	; (80113fc <malloc+0xc>)
 80113f2:	4601      	mov	r1, r0
 80113f4:	6818      	ldr	r0, [r3, #0]
 80113f6:	f000 b88d 	b.w	8011514 <_malloc_r>
 80113fa:	bf00      	nop
 80113fc:	24003e40 	.word	0x24003e40

08011400 <free>:
 8011400:	4b02      	ldr	r3, [pc, #8]	; (801140c <free+0xc>)
 8011402:	4601      	mov	r1, r0
 8011404:	6818      	ldr	r0, [r3, #0]
 8011406:	f000 b819 	b.w	801143c <_free_r>
 801140a:	bf00      	nop
 801140c:	24003e40 	.word	0x24003e40

08011410 <memcpy>:
 8011410:	440a      	add	r2, r1
 8011412:	4291      	cmp	r1, r2
 8011414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011418:	d100      	bne.n	801141c <memcpy+0xc>
 801141a:	4770      	bx	lr
 801141c:	b510      	push	{r4, lr}
 801141e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011426:	4291      	cmp	r1, r2
 8011428:	d1f9      	bne.n	801141e <memcpy+0xe>
 801142a:	bd10      	pop	{r4, pc}

0801142c <memset>:
 801142c:	4402      	add	r2, r0
 801142e:	4603      	mov	r3, r0
 8011430:	4293      	cmp	r3, r2
 8011432:	d100      	bne.n	8011436 <memset+0xa>
 8011434:	4770      	bx	lr
 8011436:	f803 1b01 	strb.w	r1, [r3], #1
 801143a:	e7f9      	b.n	8011430 <memset+0x4>

0801143c <_free_r>:
 801143c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801143e:	2900      	cmp	r1, #0
 8011440:	d044      	beq.n	80114cc <_free_r+0x90>
 8011442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011446:	9001      	str	r0, [sp, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	f1a1 0404 	sub.w	r4, r1, #4
 801144e:	bfb8      	it	lt
 8011450:	18e4      	addlt	r4, r4, r3
 8011452:	f001 fc4f 	bl	8012cf4 <__malloc_lock>
 8011456:	4a1e      	ldr	r2, [pc, #120]	; (80114d0 <_free_r+0x94>)
 8011458:	9801      	ldr	r0, [sp, #4]
 801145a:	6813      	ldr	r3, [r2, #0]
 801145c:	b933      	cbnz	r3, 801146c <_free_r+0x30>
 801145e:	6063      	str	r3, [r4, #4]
 8011460:	6014      	str	r4, [r2, #0]
 8011462:	b003      	add	sp, #12
 8011464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011468:	f001 bc4a 	b.w	8012d00 <__malloc_unlock>
 801146c:	42a3      	cmp	r3, r4
 801146e:	d908      	bls.n	8011482 <_free_r+0x46>
 8011470:	6825      	ldr	r5, [r4, #0]
 8011472:	1961      	adds	r1, r4, r5
 8011474:	428b      	cmp	r3, r1
 8011476:	bf01      	itttt	eq
 8011478:	6819      	ldreq	r1, [r3, #0]
 801147a:	685b      	ldreq	r3, [r3, #4]
 801147c:	1949      	addeq	r1, r1, r5
 801147e:	6021      	streq	r1, [r4, #0]
 8011480:	e7ed      	b.n	801145e <_free_r+0x22>
 8011482:	461a      	mov	r2, r3
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	b10b      	cbz	r3, 801148c <_free_r+0x50>
 8011488:	42a3      	cmp	r3, r4
 801148a:	d9fa      	bls.n	8011482 <_free_r+0x46>
 801148c:	6811      	ldr	r1, [r2, #0]
 801148e:	1855      	adds	r5, r2, r1
 8011490:	42a5      	cmp	r5, r4
 8011492:	d10b      	bne.n	80114ac <_free_r+0x70>
 8011494:	6824      	ldr	r4, [r4, #0]
 8011496:	4421      	add	r1, r4
 8011498:	1854      	adds	r4, r2, r1
 801149a:	42a3      	cmp	r3, r4
 801149c:	6011      	str	r1, [r2, #0]
 801149e:	d1e0      	bne.n	8011462 <_free_r+0x26>
 80114a0:	681c      	ldr	r4, [r3, #0]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	6053      	str	r3, [r2, #4]
 80114a6:	4421      	add	r1, r4
 80114a8:	6011      	str	r1, [r2, #0]
 80114aa:	e7da      	b.n	8011462 <_free_r+0x26>
 80114ac:	d902      	bls.n	80114b4 <_free_r+0x78>
 80114ae:	230c      	movs	r3, #12
 80114b0:	6003      	str	r3, [r0, #0]
 80114b2:	e7d6      	b.n	8011462 <_free_r+0x26>
 80114b4:	6825      	ldr	r5, [r4, #0]
 80114b6:	1961      	adds	r1, r4, r5
 80114b8:	428b      	cmp	r3, r1
 80114ba:	bf04      	itt	eq
 80114bc:	6819      	ldreq	r1, [r3, #0]
 80114be:	685b      	ldreq	r3, [r3, #4]
 80114c0:	6063      	str	r3, [r4, #4]
 80114c2:	bf04      	itt	eq
 80114c4:	1949      	addeq	r1, r1, r5
 80114c6:	6021      	streq	r1, [r4, #0]
 80114c8:	6054      	str	r4, [r2, #4]
 80114ca:	e7ca      	b.n	8011462 <_free_r+0x26>
 80114cc:	b003      	add	sp, #12
 80114ce:	bd30      	pop	{r4, r5, pc}
 80114d0:	2405b110 	.word	0x2405b110

080114d4 <sbrk_aligned>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	4e0e      	ldr	r6, [pc, #56]	; (8011510 <sbrk_aligned+0x3c>)
 80114d8:	460c      	mov	r4, r1
 80114da:	6831      	ldr	r1, [r6, #0]
 80114dc:	4605      	mov	r5, r0
 80114de:	b911      	cbnz	r1, 80114e6 <sbrk_aligned+0x12>
 80114e0:	f000 fd3c 	bl	8011f5c <_sbrk_r>
 80114e4:	6030      	str	r0, [r6, #0]
 80114e6:	4621      	mov	r1, r4
 80114e8:	4628      	mov	r0, r5
 80114ea:	f000 fd37 	bl	8011f5c <_sbrk_r>
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	d00a      	beq.n	8011508 <sbrk_aligned+0x34>
 80114f2:	1cc4      	adds	r4, r0, #3
 80114f4:	f024 0403 	bic.w	r4, r4, #3
 80114f8:	42a0      	cmp	r0, r4
 80114fa:	d007      	beq.n	801150c <sbrk_aligned+0x38>
 80114fc:	1a21      	subs	r1, r4, r0
 80114fe:	4628      	mov	r0, r5
 8011500:	f000 fd2c 	bl	8011f5c <_sbrk_r>
 8011504:	3001      	adds	r0, #1
 8011506:	d101      	bne.n	801150c <sbrk_aligned+0x38>
 8011508:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801150c:	4620      	mov	r0, r4
 801150e:	bd70      	pop	{r4, r5, r6, pc}
 8011510:	2405b114 	.word	0x2405b114

08011514 <_malloc_r>:
 8011514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011518:	1ccd      	adds	r5, r1, #3
 801151a:	f025 0503 	bic.w	r5, r5, #3
 801151e:	3508      	adds	r5, #8
 8011520:	2d0c      	cmp	r5, #12
 8011522:	bf38      	it	cc
 8011524:	250c      	movcc	r5, #12
 8011526:	2d00      	cmp	r5, #0
 8011528:	4607      	mov	r7, r0
 801152a:	db01      	blt.n	8011530 <_malloc_r+0x1c>
 801152c:	42a9      	cmp	r1, r5
 801152e:	d905      	bls.n	801153c <_malloc_r+0x28>
 8011530:	230c      	movs	r3, #12
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	2600      	movs	r6, #0
 8011536:	4630      	mov	r0, r6
 8011538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153c:	4e2e      	ldr	r6, [pc, #184]	; (80115f8 <_malloc_r+0xe4>)
 801153e:	f001 fbd9 	bl	8012cf4 <__malloc_lock>
 8011542:	6833      	ldr	r3, [r6, #0]
 8011544:	461c      	mov	r4, r3
 8011546:	bb34      	cbnz	r4, 8011596 <_malloc_r+0x82>
 8011548:	4629      	mov	r1, r5
 801154a:	4638      	mov	r0, r7
 801154c:	f7ff ffc2 	bl	80114d4 <sbrk_aligned>
 8011550:	1c43      	adds	r3, r0, #1
 8011552:	4604      	mov	r4, r0
 8011554:	d14d      	bne.n	80115f2 <_malloc_r+0xde>
 8011556:	6834      	ldr	r4, [r6, #0]
 8011558:	4626      	mov	r6, r4
 801155a:	2e00      	cmp	r6, #0
 801155c:	d140      	bne.n	80115e0 <_malloc_r+0xcc>
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	4631      	mov	r1, r6
 8011562:	4638      	mov	r0, r7
 8011564:	eb04 0803 	add.w	r8, r4, r3
 8011568:	f000 fcf8 	bl	8011f5c <_sbrk_r>
 801156c:	4580      	cmp	r8, r0
 801156e:	d13a      	bne.n	80115e6 <_malloc_r+0xd2>
 8011570:	6821      	ldr	r1, [r4, #0]
 8011572:	3503      	adds	r5, #3
 8011574:	1a6d      	subs	r5, r5, r1
 8011576:	f025 0503 	bic.w	r5, r5, #3
 801157a:	3508      	adds	r5, #8
 801157c:	2d0c      	cmp	r5, #12
 801157e:	bf38      	it	cc
 8011580:	250c      	movcc	r5, #12
 8011582:	4629      	mov	r1, r5
 8011584:	4638      	mov	r0, r7
 8011586:	f7ff ffa5 	bl	80114d4 <sbrk_aligned>
 801158a:	3001      	adds	r0, #1
 801158c:	d02b      	beq.n	80115e6 <_malloc_r+0xd2>
 801158e:	6823      	ldr	r3, [r4, #0]
 8011590:	442b      	add	r3, r5
 8011592:	6023      	str	r3, [r4, #0]
 8011594:	e00e      	b.n	80115b4 <_malloc_r+0xa0>
 8011596:	6822      	ldr	r2, [r4, #0]
 8011598:	1b52      	subs	r2, r2, r5
 801159a:	d41e      	bmi.n	80115da <_malloc_r+0xc6>
 801159c:	2a0b      	cmp	r2, #11
 801159e:	d916      	bls.n	80115ce <_malloc_r+0xba>
 80115a0:	1961      	adds	r1, r4, r5
 80115a2:	42a3      	cmp	r3, r4
 80115a4:	6025      	str	r5, [r4, #0]
 80115a6:	bf18      	it	ne
 80115a8:	6059      	strne	r1, [r3, #4]
 80115aa:	6863      	ldr	r3, [r4, #4]
 80115ac:	bf08      	it	eq
 80115ae:	6031      	streq	r1, [r6, #0]
 80115b0:	5162      	str	r2, [r4, r5]
 80115b2:	604b      	str	r3, [r1, #4]
 80115b4:	4638      	mov	r0, r7
 80115b6:	f104 060b 	add.w	r6, r4, #11
 80115ba:	f001 fba1 	bl	8012d00 <__malloc_unlock>
 80115be:	f026 0607 	bic.w	r6, r6, #7
 80115c2:	1d23      	adds	r3, r4, #4
 80115c4:	1af2      	subs	r2, r6, r3
 80115c6:	d0b6      	beq.n	8011536 <_malloc_r+0x22>
 80115c8:	1b9b      	subs	r3, r3, r6
 80115ca:	50a3      	str	r3, [r4, r2]
 80115cc:	e7b3      	b.n	8011536 <_malloc_r+0x22>
 80115ce:	6862      	ldr	r2, [r4, #4]
 80115d0:	42a3      	cmp	r3, r4
 80115d2:	bf0c      	ite	eq
 80115d4:	6032      	streq	r2, [r6, #0]
 80115d6:	605a      	strne	r2, [r3, #4]
 80115d8:	e7ec      	b.n	80115b4 <_malloc_r+0xa0>
 80115da:	4623      	mov	r3, r4
 80115dc:	6864      	ldr	r4, [r4, #4]
 80115de:	e7b2      	b.n	8011546 <_malloc_r+0x32>
 80115e0:	4634      	mov	r4, r6
 80115e2:	6876      	ldr	r6, [r6, #4]
 80115e4:	e7b9      	b.n	801155a <_malloc_r+0x46>
 80115e6:	230c      	movs	r3, #12
 80115e8:	603b      	str	r3, [r7, #0]
 80115ea:	4638      	mov	r0, r7
 80115ec:	f001 fb88 	bl	8012d00 <__malloc_unlock>
 80115f0:	e7a1      	b.n	8011536 <_malloc_r+0x22>
 80115f2:	6025      	str	r5, [r4, #0]
 80115f4:	e7de      	b.n	80115b4 <_malloc_r+0xa0>
 80115f6:	bf00      	nop
 80115f8:	2405b110 	.word	0x2405b110

080115fc <__cvt>:
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fe:	ed2d 8b02 	vpush	{d8}
 8011602:	eeb0 8b40 	vmov.f64	d8, d0
 8011606:	b085      	sub	sp, #20
 8011608:	4617      	mov	r7, r2
 801160a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801160c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801160e:	ee18 2a90 	vmov	r2, s17
 8011612:	f025 0520 	bic.w	r5, r5, #32
 8011616:	2a00      	cmp	r2, #0
 8011618:	bfb6      	itet	lt
 801161a:	222d      	movlt	r2, #45	; 0x2d
 801161c:	2200      	movge	r2, #0
 801161e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011622:	2d46      	cmp	r5, #70	; 0x46
 8011624:	460c      	mov	r4, r1
 8011626:	701a      	strb	r2, [r3, #0]
 8011628:	d004      	beq.n	8011634 <__cvt+0x38>
 801162a:	2d45      	cmp	r5, #69	; 0x45
 801162c:	d100      	bne.n	8011630 <__cvt+0x34>
 801162e:	3401      	adds	r4, #1
 8011630:	2102      	movs	r1, #2
 8011632:	e000      	b.n	8011636 <__cvt+0x3a>
 8011634:	2103      	movs	r1, #3
 8011636:	ab03      	add	r3, sp, #12
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	ab02      	add	r3, sp, #8
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	4622      	mov	r2, r4
 8011640:	4633      	mov	r3, r6
 8011642:	eeb0 0b48 	vmov.f64	d0, d8
 8011646:	f000 fdbf 	bl	80121c8 <_dtoa_r>
 801164a:	2d47      	cmp	r5, #71	; 0x47
 801164c:	d101      	bne.n	8011652 <__cvt+0x56>
 801164e:	07fb      	lsls	r3, r7, #31
 8011650:	d51a      	bpl.n	8011688 <__cvt+0x8c>
 8011652:	2d46      	cmp	r5, #70	; 0x46
 8011654:	eb00 0204 	add.w	r2, r0, r4
 8011658:	d10c      	bne.n	8011674 <__cvt+0x78>
 801165a:	7803      	ldrb	r3, [r0, #0]
 801165c:	2b30      	cmp	r3, #48	; 0x30
 801165e:	d107      	bne.n	8011670 <__cvt+0x74>
 8011660:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	bf1c      	itt	ne
 801166a:	f1c4 0401 	rsbne	r4, r4, #1
 801166e:	6034      	strne	r4, [r6, #0]
 8011670:	6833      	ldr	r3, [r6, #0]
 8011672:	441a      	add	r2, r3
 8011674:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167c:	bf08      	it	eq
 801167e:	9203      	streq	r2, [sp, #12]
 8011680:	2130      	movs	r1, #48	; 0x30
 8011682:	9b03      	ldr	r3, [sp, #12]
 8011684:	4293      	cmp	r3, r2
 8011686:	d307      	bcc.n	8011698 <__cvt+0x9c>
 8011688:	9b03      	ldr	r3, [sp, #12]
 801168a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801168c:	1a1b      	subs	r3, r3, r0
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	b005      	add	sp, #20
 8011692:	ecbd 8b02 	vpop	{d8}
 8011696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011698:	1c5c      	adds	r4, r3, #1
 801169a:	9403      	str	r4, [sp, #12]
 801169c:	7019      	strb	r1, [r3, #0]
 801169e:	e7f0      	b.n	8011682 <__cvt+0x86>

080116a0 <__exponent>:
 80116a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116a2:	4603      	mov	r3, r0
 80116a4:	2900      	cmp	r1, #0
 80116a6:	bfb8      	it	lt
 80116a8:	4249      	neglt	r1, r1
 80116aa:	f803 2b02 	strb.w	r2, [r3], #2
 80116ae:	bfb4      	ite	lt
 80116b0:	222d      	movlt	r2, #45	; 0x2d
 80116b2:	222b      	movge	r2, #43	; 0x2b
 80116b4:	2909      	cmp	r1, #9
 80116b6:	7042      	strb	r2, [r0, #1]
 80116b8:	dd2a      	ble.n	8011710 <__exponent+0x70>
 80116ba:	f10d 0407 	add.w	r4, sp, #7
 80116be:	46a4      	mov	ip, r4
 80116c0:	270a      	movs	r7, #10
 80116c2:	46a6      	mov	lr, r4
 80116c4:	460a      	mov	r2, r1
 80116c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80116ca:	fb07 1516 	mls	r5, r7, r6, r1
 80116ce:	3530      	adds	r5, #48	; 0x30
 80116d0:	2a63      	cmp	r2, #99	; 0x63
 80116d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80116d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80116da:	4631      	mov	r1, r6
 80116dc:	dcf1      	bgt.n	80116c2 <__exponent+0x22>
 80116de:	3130      	adds	r1, #48	; 0x30
 80116e0:	f1ae 0502 	sub.w	r5, lr, #2
 80116e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80116e8:	1c44      	adds	r4, r0, #1
 80116ea:	4629      	mov	r1, r5
 80116ec:	4561      	cmp	r1, ip
 80116ee:	d30a      	bcc.n	8011706 <__exponent+0x66>
 80116f0:	f10d 0209 	add.w	r2, sp, #9
 80116f4:	eba2 020e 	sub.w	r2, r2, lr
 80116f8:	4565      	cmp	r5, ip
 80116fa:	bf88      	it	hi
 80116fc:	2200      	movhi	r2, #0
 80116fe:	4413      	add	r3, r2
 8011700:	1a18      	subs	r0, r3, r0
 8011702:	b003      	add	sp, #12
 8011704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011706:	f811 2b01 	ldrb.w	r2, [r1], #1
 801170a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801170e:	e7ed      	b.n	80116ec <__exponent+0x4c>
 8011710:	2330      	movs	r3, #48	; 0x30
 8011712:	3130      	adds	r1, #48	; 0x30
 8011714:	7083      	strb	r3, [r0, #2]
 8011716:	70c1      	strb	r1, [r0, #3]
 8011718:	1d03      	adds	r3, r0, #4
 801171a:	e7f1      	b.n	8011700 <__exponent+0x60>
 801171c:	0000      	movs	r0, r0
	...

08011720 <_printf_float>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	b08b      	sub	sp, #44	; 0x2c
 8011726:	460c      	mov	r4, r1
 8011728:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801172c:	4616      	mov	r6, r2
 801172e:	461f      	mov	r7, r3
 8011730:	4605      	mov	r5, r0
 8011732:	f001 fac9 	bl	8012cc8 <_localeconv_r>
 8011736:	f8d0 b000 	ldr.w	fp, [r0]
 801173a:	4658      	mov	r0, fp
 801173c:	f7ee fdd0 	bl	80002e0 <strlen>
 8011740:	2300      	movs	r3, #0
 8011742:	9308      	str	r3, [sp, #32]
 8011744:	f8d8 3000 	ldr.w	r3, [r8]
 8011748:	f894 9018 	ldrb.w	r9, [r4, #24]
 801174c:	6822      	ldr	r2, [r4, #0]
 801174e:	3307      	adds	r3, #7
 8011750:	f023 0307 	bic.w	r3, r3, #7
 8011754:	f103 0108 	add.w	r1, r3, #8
 8011758:	f8c8 1000 	str.w	r1, [r8]
 801175c:	4682      	mov	sl, r0
 801175e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011762:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011766:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80119c8 <_printf_float+0x2a8>
 801176a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801176e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011772:	eeb4 6b47 	vcmp.f64	d6, d7
 8011776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801177a:	dd24      	ble.n	80117c6 <_printf_float+0xa6>
 801177c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011784:	d502      	bpl.n	801178c <_printf_float+0x6c>
 8011786:	232d      	movs	r3, #45	; 0x2d
 8011788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801178c:	4b90      	ldr	r3, [pc, #576]	; (80119d0 <_printf_float+0x2b0>)
 801178e:	4891      	ldr	r0, [pc, #580]	; (80119d4 <_printf_float+0x2b4>)
 8011790:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011794:	bf94      	ite	ls
 8011796:	4698      	movls	r8, r3
 8011798:	4680      	movhi	r8, r0
 801179a:	2303      	movs	r3, #3
 801179c:	6123      	str	r3, [r4, #16]
 801179e:	f022 0204 	bic.w	r2, r2, #4
 80117a2:	2300      	movs	r3, #0
 80117a4:	6022      	str	r2, [r4, #0]
 80117a6:	9304      	str	r3, [sp, #16]
 80117a8:	9700      	str	r7, [sp, #0]
 80117aa:	4633      	mov	r3, r6
 80117ac:	aa09      	add	r2, sp, #36	; 0x24
 80117ae:	4621      	mov	r1, r4
 80117b0:	4628      	mov	r0, r5
 80117b2:	f000 f9d3 	bl	8011b5c <_printf_common>
 80117b6:	3001      	adds	r0, #1
 80117b8:	f040 808a 	bne.w	80118d0 <_printf_float+0x1b0>
 80117bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117c0:	b00b      	add	sp, #44	; 0x2c
 80117c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80117ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ce:	d709      	bvc.n	80117e4 <_printf_float+0xc4>
 80117d0:	ee10 3a90 	vmov	r3, s1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	bfbc      	itt	lt
 80117d8:	232d      	movlt	r3, #45	; 0x2d
 80117da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80117de:	487e      	ldr	r0, [pc, #504]	; (80119d8 <_printf_float+0x2b8>)
 80117e0:	4b7e      	ldr	r3, [pc, #504]	; (80119dc <_printf_float+0x2bc>)
 80117e2:	e7d5      	b.n	8011790 <_printf_float+0x70>
 80117e4:	6863      	ldr	r3, [r4, #4]
 80117e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80117ea:	9104      	str	r1, [sp, #16]
 80117ec:	1c59      	adds	r1, r3, #1
 80117ee:	d13c      	bne.n	801186a <_printf_float+0x14a>
 80117f0:	2306      	movs	r3, #6
 80117f2:	6063      	str	r3, [r4, #4]
 80117f4:	2300      	movs	r3, #0
 80117f6:	9303      	str	r3, [sp, #12]
 80117f8:	ab08      	add	r3, sp, #32
 80117fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80117fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011802:	ab07      	add	r3, sp, #28
 8011804:	6861      	ldr	r1, [r4, #4]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	6022      	str	r2, [r4, #0]
 801180a:	f10d 031b 	add.w	r3, sp, #27
 801180e:	4628      	mov	r0, r5
 8011810:	f7ff fef4 	bl	80115fc <__cvt>
 8011814:	9b04      	ldr	r3, [sp, #16]
 8011816:	9907      	ldr	r1, [sp, #28]
 8011818:	2b47      	cmp	r3, #71	; 0x47
 801181a:	4680      	mov	r8, r0
 801181c:	d108      	bne.n	8011830 <_printf_float+0x110>
 801181e:	1cc8      	adds	r0, r1, #3
 8011820:	db02      	blt.n	8011828 <_printf_float+0x108>
 8011822:	6863      	ldr	r3, [r4, #4]
 8011824:	4299      	cmp	r1, r3
 8011826:	dd41      	ble.n	80118ac <_printf_float+0x18c>
 8011828:	f1a9 0902 	sub.w	r9, r9, #2
 801182c:	fa5f f989 	uxtb.w	r9, r9
 8011830:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011834:	d820      	bhi.n	8011878 <_printf_float+0x158>
 8011836:	3901      	subs	r1, #1
 8011838:	464a      	mov	r2, r9
 801183a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801183e:	9107      	str	r1, [sp, #28]
 8011840:	f7ff ff2e 	bl	80116a0 <__exponent>
 8011844:	9a08      	ldr	r2, [sp, #32]
 8011846:	9004      	str	r0, [sp, #16]
 8011848:	1813      	adds	r3, r2, r0
 801184a:	2a01      	cmp	r2, #1
 801184c:	6123      	str	r3, [r4, #16]
 801184e:	dc02      	bgt.n	8011856 <_printf_float+0x136>
 8011850:	6822      	ldr	r2, [r4, #0]
 8011852:	07d2      	lsls	r2, r2, #31
 8011854:	d501      	bpl.n	801185a <_printf_float+0x13a>
 8011856:	3301      	adds	r3, #1
 8011858:	6123      	str	r3, [r4, #16]
 801185a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d0a2      	beq.n	80117a8 <_printf_float+0x88>
 8011862:	232d      	movs	r3, #45	; 0x2d
 8011864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011868:	e79e      	b.n	80117a8 <_printf_float+0x88>
 801186a:	9904      	ldr	r1, [sp, #16]
 801186c:	2947      	cmp	r1, #71	; 0x47
 801186e:	d1c1      	bne.n	80117f4 <_printf_float+0xd4>
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1bf      	bne.n	80117f4 <_printf_float+0xd4>
 8011874:	2301      	movs	r3, #1
 8011876:	e7bc      	b.n	80117f2 <_printf_float+0xd2>
 8011878:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801187c:	d118      	bne.n	80118b0 <_printf_float+0x190>
 801187e:	2900      	cmp	r1, #0
 8011880:	6863      	ldr	r3, [r4, #4]
 8011882:	dd0b      	ble.n	801189c <_printf_float+0x17c>
 8011884:	6121      	str	r1, [r4, #16]
 8011886:	b913      	cbnz	r3, 801188e <_printf_float+0x16e>
 8011888:	6822      	ldr	r2, [r4, #0]
 801188a:	07d0      	lsls	r0, r2, #31
 801188c:	d502      	bpl.n	8011894 <_printf_float+0x174>
 801188e:	3301      	adds	r3, #1
 8011890:	440b      	add	r3, r1
 8011892:	6123      	str	r3, [r4, #16]
 8011894:	2300      	movs	r3, #0
 8011896:	65a1      	str	r1, [r4, #88]	; 0x58
 8011898:	9304      	str	r3, [sp, #16]
 801189a:	e7de      	b.n	801185a <_printf_float+0x13a>
 801189c:	b913      	cbnz	r3, 80118a4 <_printf_float+0x184>
 801189e:	6822      	ldr	r2, [r4, #0]
 80118a0:	07d2      	lsls	r2, r2, #31
 80118a2:	d501      	bpl.n	80118a8 <_printf_float+0x188>
 80118a4:	3302      	adds	r3, #2
 80118a6:	e7f4      	b.n	8011892 <_printf_float+0x172>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e7f2      	b.n	8011892 <_printf_float+0x172>
 80118ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80118b0:	9b08      	ldr	r3, [sp, #32]
 80118b2:	4299      	cmp	r1, r3
 80118b4:	db05      	blt.n	80118c2 <_printf_float+0x1a2>
 80118b6:	6823      	ldr	r3, [r4, #0]
 80118b8:	6121      	str	r1, [r4, #16]
 80118ba:	07d8      	lsls	r0, r3, #31
 80118bc:	d5ea      	bpl.n	8011894 <_printf_float+0x174>
 80118be:	1c4b      	adds	r3, r1, #1
 80118c0:	e7e7      	b.n	8011892 <_printf_float+0x172>
 80118c2:	2900      	cmp	r1, #0
 80118c4:	bfd4      	ite	le
 80118c6:	f1c1 0202 	rsble	r2, r1, #2
 80118ca:	2201      	movgt	r2, #1
 80118cc:	4413      	add	r3, r2
 80118ce:	e7e0      	b.n	8011892 <_printf_float+0x172>
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	055a      	lsls	r2, r3, #21
 80118d4:	d407      	bmi.n	80118e6 <_printf_float+0x1c6>
 80118d6:	6923      	ldr	r3, [r4, #16]
 80118d8:	4642      	mov	r2, r8
 80118da:	4631      	mov	r1, r6
 80118dc:	4628      	mov	r0, r5
 80118de:	47b8      	blx	r7
 80118e0:	3001      	adds	r0, #1
 80118e2:	d12a      	bne.n	801193a <_printf_float+0x21a>
 80118e4:	e76a      	b.n	80117bc <_printf_float+0x9c>
 80118e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80118ea:	f240 80e2 	bls.w	8011ab2 <_printf_float+0x392>
 80118ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80118f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fa:	d133      	bne.n	8011964 <_printf_float+0x244>
 80118fc:	4a38      	ldr	r2, [pc, #224]	; (80119e0 <_printf_float+0x2c0>)
 80118fe:	2301      	movs	r3, #1
 8011900:	4631      	mov	r1, r6
 8011902:	4628      	mov	r0, r5
 8011904:	47b8      	blx	r7
 8011906:	3001      	adds	r0, #1
 8011908:	f43f af58 	beq.w	80117bc <_printf_float+0x9c>
 801190c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011910:	429a      	cmp	r2, r3
 8011912:	db02      	blt.n	801191a <_printf_float+0x1fa>
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	07d8      	lsls	r0, r3, #31
 8011918:	d50f      	bpl.n	801193a <_printf_float+0x21a>
 801191a:	4653      	mov	r3, sl
 801191c:	465a      	mov	r2, fp
 801191e:	4631      	mov	r1, r6
 8011920:	4628      	mov	r0, r5
 8011922:	47b8      	blx	r7
 8011924:	3001      	adds	r0, #1
 8011926:	f43f af49 	beq.w	80117bc <_printf_float+0x9c>
 801192a:	f04f 0800 	mov.w	r8, #0
 801192e:	f104 091a 	add.w	r9, r4, #26
 8011932:	9b08      	ldr	r3, [sp, #32]
 8011934:	3b01      	subs	r3, #1
 8011936:	4543      	cmp	r3, r8
 8011938:	dc09      	bgt.n	801194e <_printf_float+0x22e>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	079b      	lsls	r3, r3, #30
 801193e:	f100 8108 	bmi.w	8011b52 <_printf_float+0x432>
 8011942:	68e0      	ldr	r0, [r4, #12]
 8011944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011946:	4298      	cmp	r0, r3
 8011948:	bfb8      	it	lt
 801194a:	4618      	movlt	r0, r3
 801194c:	e738      	b.n	80117c0 <_printf_float+0xa0>
 801194e:	2301      	movs	r3, #1
 8011950:	464a      	mov	r2, r9
 8011952:	4631      	mov	r1, r6
 8011954:	4628      	mov	r0, r5
 8011956:	47b8      	blx	r7
 8011958:	3001      	adds	r0, #1
 801195a:	f43f af2f 	beq.w	80117bc <_printf_float+0x9c>
 801195e:	f108 0801 	add.w	r8, r8, #1
 8011962:	e7e6      	b.n	8011932 <_printf_float+0x212>
 8011964:	9b07      	ldr	r3, [sp, #28]
 8011966:	2b00      	cmp	r3, #0
 8011968:	dc3c      	bgt.n	80119e4 <_printf_float+0x2c4>
 801196a:	4a1d      	ldr	r2, [pc, #116]	; (80119e0 <_printf_float+0x2c0>)
 801196c:	2301      	movs	r3, #1
 801196e:	4631      	mov	r1, r6
 8011970:	4628      	mov	r0, r5
 8011972:	47b8      	blx	r7
 8011974:	3001      	adds	r0, #1
 8011976:	f43f af21 	beq.w	80117bc <_printf_float+0x9c>
 801197a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801197e:	4313      	orrs	r3, r2
 8011980:	d102      	bne.n	8011988 <_printf_float+0x268>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	07d9      	lsls	r1, r3, #31
 8011986:	d5d8      	bpl.n	801193a <_printf_float+0x21a>
 8011988:	4653      	mov	r3, sl
 801198a:	465a      	mov	r2, fp
 801198c:	4631      	mov	r1, r6
 801198e:	4628      	mov	r0, r5
 8011990:	47b8      	blx	r7
 8011992:	3001      	adds	r0, #1
 8011994:	f43f af12 	beq.w	80117bc <_printf_float+0x9c>
 8011998:	f04f 0900 	mov.w	r9, #0
 801199c:	f104 0a1a 	add.w	sl, r4, #26
 80119a0:	9b07      	ldr	r3, [sp, #28]
 80119a2:	425b      	negs	r3, r3
 80119a4:	454b      	cmp	r3, r9
 80119a6:	dc01      	bgt.n	80119ac <_printf_float+0x28c>
 80119a8:	9b08      	ldr	r3, [sp, #32]
 80119aa:	e795      	b.n	80118d8 <_printf_float+0x1b8>
 80119ac:	2301      	movs	r3, #1
 80119ae:	4652      	mov	r2, sl
 80119b0:	4631      	mov	r1, r6
 80119b2:	4628      	mov	r0, r5
 80119b4:	47b8      	blx	r7
 80119b6:	3001      	adds	r0, #1
 80119b8:	f43f af00 	beq.w	80117bc <_printf_float+0x9c>
 80119bc:	f109 0901 	add.w	r9, r9, #1
 80119c0:	e7ee      	b.n	80119a0 <_printf_float+0x280>
 80119c2:	bf00      	nop
 80119c4:	f3af 8000 	nop.w
 80119c8:	ffffffff 	.word	0xffffffff
 80119cc:	7fefffff 	.word	0x7fefffff
 80119d0:	0804e400 	.word	0x0804e400
 80119d4:	0804e404 	.word	0x0804e404
 80119d8:	0804e40c 	.word	0x0804e40c
 80119dc:	0804e408 	.word	0x0804e408
 80119e0:	0804e410 	.word	0x0804e410
 80119e4:	9a08      	ldr	r2, [sp, #32]
 80119e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119e8:	429a      	cmp	r2, r3
 80119ea:	bfa8      	it	ge
 80119ec:	461a      	movge	r2, r3
 80119ee:	2a00      	cmp	r2, #0
 80119f0:	4691      	mov	r9, r2
 80119f2:	dc38      	bgt.n	8011a66 <_printf_float+0x346>
 80119f4:	2300      	movs	r3, #0
 80119f6:	9305      	str	r3, [sp, #20]
 80119f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80119fc:	f104 021a 	add.w	r2, r4, #26
 8011a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a02:	9905      	ldr	r1, [sp, #20]
 8011a04:	9304      	str	r3, [sp, #16]
 8011a06:	eba3 0309 	sub.w	r3, r3, r9
 8011a0a:	428b      	cmp	r3, r1
 8011a0c:	dc33      	bgt.n	8011a76 <_printf_float+0x356>
 8011a0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	db3c      	blt.n	8011a90 <_printf_float+0x370>
 8011a16:	6823      	ldr	r3, [r4, #0]
 8011a18:	07da      	lsls	r2, r3, #31
 8011a1a:	d439      	bmi.n	8011a90 <_printf_float+0x370>
 8011a1c:	9b08      	ldr	r3, [sp, #32]
 8011a1e:	9a04      	ldr	r2, [sp, #16]
 8011a20:	9907      	ldr	r1, [sp, #28]
 8011a22:	1a9a      	subs	r2, r3, r2
 8011a24:	eba3 0901 	sub.w	r9, r3, r1
 8011a28:	4591      	cmp	r9, r2
 8011a2a:	bfa8      	it	ge
 8011a2c:	4691      	movge	r9, r2
 8011a2e:	f1b9 0f00 	cmp.w	r9, #0
 8011a32:	dc35      	bgt.n	8011aa0 <_printf_float+0x380>
 8011a34:	f04f 0800 	mov.w	r8, #0
 8011a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a3c:	f104 0a1a 	add.w	sl, r4, #26
 8011a40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a44:	1a9b      	subs	r3, r3, r2
 8011a46:	eba3 0309 	sub.w	r3, r3, r9
 8011a4a:	4543      	cmp	r3, r8
 8011a4c:	f77f af75 	ble.w	801193a <_printf_float+0x21a>
 8011a50:	2301      	movs	r3, #1
 8011a52:	4652      	mov	r2, sl
 8011a54:	4631      	mov	r1, r6
 8011a56:	4628      	mov	r0, r5
 8011a58:	47b8      	blx	r7
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	f43f aeae 	beq.w	80117bc <_printf_float+0x9c>
 8011a60:	f108 0801 	add.w	r8, r8, #1
 8011a64:	e7ec      	b.n	8011a40 <_printf_float+0x320>
 8011a66:	4613      	mov	r3, r2
 8011a68:	4631      	mov	r1, r6
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	47b8      	blx	r7
 8011a70:	3001      	adds	r0, #1
 8011a72:	d1bf      	bne.n	80119f4 <_printf_float+0x2d4>
 8011a74:	e6a2      	b.n	80117bc <_printf_float+0x9c>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4631      	mov	r1, r6
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	9204      	str	r2, [sp, #16]
 8011a7e:	47b8      	blx	r7
 8011a80:	3001      	adds	r0, #1
 8011a82:	f43f ae9b 	beq.w	80117bc <_printf_float+0x9c>
 8011a86:	9b05      	ldr	r3, [sp, #20]
 8011a88:	9a04      	ldr	r2, [sp, #16]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	9305      	str	r3, [sp, #20]
 8011a8e:	e7b7      	b.n	8011a00 <_printf_float+0x2e0>
 8011a90:	4653      	mov	r3, sl
 8011a92:	465a      	mov	r2, fp
 8011a94:	4631      	mov	r1, r6
 8011a96:	4628      	mov	r0, r5
 8011a98:	47b8      	blx	r7
 8011a9a:	3001      	adds	r0, #1
 8011a9c:	d1be      	bne.n	8011a1c <_printf_float+0x2fc>
 8011a9e:	e68d      	b.n	80117bc <_printf_float+0x9c>
 8011aa0:	9a04      	ldr	r2, [sp, #16]
 8011aa2:	464b      	mov	r3, r9
 8011aa4:	4442      	add	r2, r8
 8011aa6:	4631      	mov	r1, r6
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	47b8      	blx	r7
 8011aac:	3001      	adds	r0, #1
 8011aae:	d1c1      	bne.n	8011a34 <_printf_float+0x314>
 8011ab0:	e684      	b.n	80117bc <_printf_float+0x9c>
 8011ab2:	9a08      	ldr	r2, [sp, #32]
 8011ab4:	2a01      	cmp	r2, #1
 8011ab6:	dc01      	bgt.n	8011abc <_printf_float+0x39c>
 8011ab8:	07db      	lsls	r3, r3, #31
 8011aba:	d537      	bpl.n	8011b2c <_printf_float+0x40c>
 8011abc:	2301      	movs	r3, #1
 8011abe:	4642      	mov	r2, r8
 8011ac0:	4631      	mov	r1, r6
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	47b8      	blx	r7
 8011ac6:	3001      	adds	r0, #1
 8011ac8:	f43f ae78 	beq.w	80117bc <_printf_float+0x9c>
 8011acc:	4653      	mov	r3, sl
 8011ace:	465a      	mov	r2, fp
 8011ad0:	4631      	mov	r1, r6
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	47b8      	blx	r7
 8011ad6:	3001      	adds	r0, #1
 8011ad8:	f43f ae70 	beq.w	80117bc <_printf_float+0x9c>
 8011adc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011ae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae8:	d01b      	beq.n	8011b22 <_printf_float+0x402>
 8011aea:	9b08      	ldr	r3, [sp, #32]
 8011aec:	f108 0201 	add.w	r2, r8, #1
 8011af0:	3b01      	subs	r3, #1
 8011af2:	4631      	mov	r1, r6
 8011af4:	4628      	mov	r0, r5
 8011af6:	47b8      	blx	r7
 8011af8:	3001      	adds	r0, #1
 8011afa:	d10e      	bne.n	8011b1a <_printf_float+0x3fa>
 8011afc:	e65e      	b.n	80117bc <_printf_float+0x9c>
 8011afe:	2301      	movs	r3, #1
 8011b00:	464a      	mov	r2, r9
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	f43f ae57 	beq.w	80117bc <_printf_float+0x9c>
 8011b0e:	f108 0801 	add.w	r8, r8, #1
 8011b12:	9b08      	ldr	r3, [sp, #32]
 8011b14:	3b01      	subs	r3, #1
 8011b16:	4543      	cmp	r3, r8
 8011b18:	dcf1      	bgt.n	8011afe <_printf_float+0x3de>
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b20:	e6db      	b.n	80118da <_printf_float+0x1ba>
 8011b22:	f04f 0800 	mov.w	r8, #0
 8011b26:	f104 091a 	add.w	r9, r4, #26
 8011b2a:	e7f2      	b.n	8011b12 <_printf_float+0x3f2>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	4642      	mov	r2, r8
 8011b30:	e7df      	b.n	8011af2 <_printf_float+0x3d2>
 8011b32:	2301      	movs	r3, #1
 8011b34:	464a      	mov	r2, r9
 8011b36:	4631      	mov	r1, r6
 8011b38:	4628      	mov	r0, r5
 8011b3a:	47b8      	blx	r7
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	f43f ae3d 	beq.w	80117bc <_printf_float+0x9c>
 8011b42:	f108 0801 	add.w	r8, r8, #1
 8011b46:	68e3      	ldr	r3, [r4, #12]
 8011b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b4a:	1a5b      	subs	r3, r3, r1
 8011b4c:	4543      	cmp	r3, r8
 8011b4e:	dcf0      	bgt.n	8011b32 <_printf_float+0x412>
 8011b50:	e6f7      	b.n	8011942 <_printf_float+0x222>
 8011b52:	f04f 0800 	mov.w	r8, #0
 8011b56:	f104 0919 	add.w	r9, r4, #25
 8011b5a:	e7f4      	b.n	8011b46 <_printf_float+0x426>

08011b5c <_printf_common>:
 8011b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b60:	4616      	mov	r6, r2
 8011b62:	4699      	mov	r9, r3
 8011b64:	688a      	ldr	r2, [r1, #8]
 8011b66:	690b      	ldr	r3, [r1, #16]
 8011b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	bfb8      	it	lt
 8011b70:	4613      	movlt	r3, r2
 8011b72:	6033      	str	r3, [r6, #0]
 8011b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b78:	4607      	mov	r7, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	b10a      	cbz	r2, 8011b82 <_printf_common+0x26>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	6033      	str	r3, [r6, #0]
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	0699      	lsls	r1, r3, #26
 8011b86:	bf42      	ittt	mi
 8011b88:	6833      	ldrmi	r3, [r6, #0]
 8011b8a:	3302      	addmi	r3, #2
 8011b8c:	6033      	strmi	r3, [r6, #0]
 8011b8e:	6825      	ldr	r5, [r4, #0]
 8011b90:	f015 0506 	ands.w	r5, r5, #6
 8011b94:	d106      	bne.n	8011ba4 <_printf_common+0x48>
 8011b96:	f104 0a19 	add.w	sl, r4, #25
 8011b9a:	68e3      	ldr	r3, [r4, #12]
 8011b9c:	6832      	ldr	r2, [r6, #0]
 8011b9e:	1a9b      	subs	r3, r3, r2
 8011ba0:	42ab      	cmp	r3, r5
 8011ba2:	dc26      	bgt.n	8011bf2 <_printf_common+0x96>
 8011ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ba8:	1e13      	subs	r3, r2, #0
 8011baa:	6822      	ldr	r2, [r4, #0]
 8011bac:	bf18      	it	ne
 8011bae:	2301      	movne	r3, #1
 8011bb0:	0692      	lsls	r2, r2, #26
 8011bb2:	d42b      	bmi.n	8011c0c <_printf_common+0xb0>
 8011bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bb8:	4649      	mov	r1, r9
 8011bba:	4638      	mov	r0, r7
 8011bbc:	47c0      	blx	r8
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	d01e      	beq.n	8011c00 <_printf_common+0xa4>
 8011bc2:	6823      	ldr	r3, [r4, #0]
 8011bc4:	68e5      	ldr	r5, [r4, #12]
 8011bc6:	6832      	ldr	r2, [r6, #0]
 8011bc8:	f003 0306 	and.w	r3, r3, #6
 8011bcc:	2b04      	cmp	r3, #4
 8011bce:	bf08      	it	eq
 8011bd0:	1aad      	subeq	r5, r5, r2
 8011bd2:	68a3      	ldr	r3, [r4, #8]
 8011bd4:	6922      	ldr	r2, [r4, #16]
 8011bd6:	bf0c      	ite	eq
 8011bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bdc:	2500      	movne	r5, #0
 8011bde:	4293      	cmp	r3, r2
 8011be0:	bfc4      	itt	gt
 8011be2:	1a9b      	subgt	r3, r3, r2
 8011be4:	18ed      	addgt	r5, r5, r3
 8011be6:	2600      	movs	r6, #0
 8011be8:	341a      	adds	r4, #26
 8011bea:	42b5      	cmp	r5, r6
 8011bec:	d11a      	bne.n	8011c24 <_printf_common+0xc8>
 8011bee:	2000      	movs	r0, #0
 8011bf0:	e008      	b.n	8011c04 <_printf_common+0xa8>
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	4652      	mov	r2, sl
 8011bf6:	4649      	mov	r1, r9
 8011bf8:	4638      	mov	r0, r7
 8011bfa:	47c0      	blx	r8
 8011bfc:	3001      	adds	r0, #1
 8011bfe:	d103      	bne.n	8011c08 <_printf_common+0xac>
 8011c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c08:	3501      	adds	r5, #1
 8011c0a:	e7c6      	b.n	8011b9a <_printf_common+0x3e>
 8011c0c:	18e1      	adds	r1, r4, r3
 8011c0e:	1c5a      	adds	r2, r3, #1
 8011c10:	2030      	movs	r0, #48	; 0x30
 8011c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c16:	4422      	add	r2, r4
 8011c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c20:	3302      	adds	r3, #2
 8011c22:	e7c7      	b.n	8011bb4 <_printf_common+0x58>
 8011c24:	2301      	movs	r3, #1
 8011c26:	4622      	mov	r2, r4
 8011c28:	4649      	mov	r1, r9
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	47c0      	blx	r8
 8011c2e:	3001      	adds	r0, #1
 8011c30:	d0e6      	beq.n	8011c00 <_printf_common+0xa4>
 8011c32:	3601      	adds	r6, #1
 8011c34:	e7d9      	b.n	8011bea <_printf_common+0x8e>
	...

08011c38 <_printf_i>:
 8011c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c3c:	7e0f      	ldrb	r7, [r1, #24]
 8011c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c40:	2f78      	cmp	r7, #120	; 0x78
 8011c42:	4691      	mov	r9, r2
 8011c44:	4680      	mov	r8, r0
 8011c46:	460c      	mov	r4, r1
 8011c48:	469a      	mov	sl, r3
 8011c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c4e:	d807      	bhi.n	8011c60 <_printf_i+0x28>
 8011c50:	2f62      	cmp	r7, #98	; 0x62
 8011c52:	d80a      	bhi.n	8011c6a <_printf_i+0x32>
 8011c54:	2f00      	cmp	r7, #0
 8011c56:	f000 80d8 	beq.w	8011e0a <_printf_i+0x1d2>
 8011c5a:	2f58      	cmp	r7, #88	; 0x58
 8011c5c:	f000 80a3 	beq.w	8011da6 <_printf_i+0x16e>
 8011c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c68:	e03a      	b.n	8011ce0 <_printf_i+0xa8>
 8011c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c6e:	2b15      	cmp	r3, #21
 8011c70:	d8f6      	bhi.n	8011c60 <_printf_i+0x28>
 8011c72:	a101      	add	r1, pc, #4	; (adr r1, 8011c78 <_printf_i+0x40>)
 8011c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c78:	08011cd1 	.word	0x08011cd1
 8011c7c:	08011ce5 	.word	0x08011ce5
 8011c80:	08011c61 	.word	0x08011c61
 8011c84:	08011c61 	.word	0x08011c61
 8011c88:	08011c61 	.word	0x08011c61
 8011c8c:	08011c61 	.word	0x08011c61
 8011c90:	08011ce5 	.word	0x08011ce5
 8011c94:	08011c61 	.word	0x08011c61
 8011c98:	08011c61 	.word	0x08011c61
 8011c9c:	08011c61 	.word	0x08011c61
 8011ca0:	08011c61 	.word	0x08011c61
 8011ca4:	08011df1 	.word	0x08011df1
 8011ca8:	08011d15 	.word	0x08011d15
 8011cac:	08011dd3 	.word	0x08011dd3
 8011cb0:	08011c61 	.word	0x08011c61
 8011cb4:	08011c61 	.word	0x08011c61
 8011cb8:	08011e13 	.word	0x08011e13
 8011cbc:	08011c61 	.word	0x08011c61
 8011cc0:	08011d15 	.word	0x08011d15
 8011cc4:	08011c61 	.word	0x08011c61
 8011cc8:	08011c61 	.word	0x08011c61
 8011ccc:	08011ddb 	.word	0x08011ddb
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	1d1a      	adds	r2, r3, #4
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	602a      	str	r2, [r5, #0]
 8011cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	e0a3      	b.n	8011e2c <_printf_i+0x1f4>
 8011ce4:	6820      	ldr	r0, [r4, #0]
 8011ce6:	6829      	ldr	r1, [r5, #0]
 8011ce8:	0606      	lsls	r6, r0, #24
 8011cea:	f101 0304 	add.w	r3, r1, #4
 8011cee:	d50a      	bpl.n	8011d06 <_printf_i+0xce>
 8011cf0:	680e      	ldr	r6, [r1, #0]
 8011cf2:	602b      	str	r3, [r5, #0]
 8011cf4:	2e00      	cmp	r6, #0
 8011cf6:	da03      	bge.n	8011d00 <_printf_i+0xc8>
 8011cf8:	232d      	movs	r3, #45	; 0x2d
 8011cfa:	4276      	negs	r6, r6
 8011cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d00:	485e      	ldr	r0, [pc, #376]	; (8011e7c <_printf_i+0x244>)
 8011d02:	230a      	movs	r3, #10
 8011d04:	e019      	b.n	8011d3a <_printf_i+0x102>
 8011d06:	680e      	ldr	r6, [r1, #0]
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d0e:	bf18      	it	ne
 8011d10:	b236      	sxthne	r6, r6
 8011d12:	e7ef      	b.n	8011cf4 <_printf_i+0xbc>
 8011d14:	682b      	ldr	r3, [r5, #0]
 8011d16:	6820      	ldr	r0, [r4, #0]
 8011d18:	1d19      	adds	r1, r3, #4
 8011d1a:	6029      	str	r1, [r5, #0]
 8011d1c:	0601      	lsls	r1, r0, #24
 8011d1e:	d501      	bpl.n	8011d24 <_printf_i+0xec>
 8011d20:	681e      	ldr	r6, [r3, #0]
 8011d22:	e002      	b.n	8011d2a <_printf_i+0xf2>
 8011d24:	0646      	lsls	r6, r0, #25
 8011d26:	d5fb      	bpl.n	8011d20 <_printf_i+0xe8>
 8011d28:	881e      	ldrh	r6, [r3, #0]
 8011d2a:	4854      	ldr	r0, [pc, #336]	; (8011e7c <_printf_i+0x244>)
 8011d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8011d2e:	bf0c      	ite	eq
 8011d30:	2308      	moveq	r3, #8
 8011d32:	230a      	movne	r3, #10
 8011d34:	2100      	movs	r1, #0
 8011d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d3a:	6865      	ldr	r5, [r4, #4]
 8011d3c:	60a5      	str	r5, [r4, #8]
 8011d3e:	2d00      	cmp	r5, #0
 8011d40:	bfa2      	ittt	ge
 8011d42:	6821      	ldrge	r1, [r4, #0]
 8011d44:	f021 0104 	bicge.w	r1, r1, #4
 8011d48:	6021      	strge	r1, [r4, #0]
 8011d4a:	b90e      	cbnz	r6, 8011d50 <_printf_i+0x118>
 8011d4c:	2d00      	cmp	r5, #0
 8011d4e:	d04d      	beq.n	8011dec <_printf_i+0x1b4>
 8011d50:	4615      	mov	r5, r2
 8011d52:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d56:	fb03 6711 	mls	r7, r3, r1, r6
 8011d5a:	5dc7      	ldrb	r7, [r0, r7]
 8011d5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d60:	4637      	mov	r7, r6
 8011d62:	42bb      	cmp	r3, r7
 8011d64:	460e      	mov	r6, r1
 8011d66:	d9f4      	bls.n	8011d52 <_printf_i+0x11a>
 8011d68:	2b08      	cmp	r3, #8
 8011d6a:	d10b      	bne.n	8011d84 <_printf_i+0x14c>
 8011d6c:	6823      	ldr	r3, [r4, #0]
 8011d6e:	07de      	lsls	r6, r3, #31
 8011d70:	d508      	bpl.n	8011d84 <_printf_i+0x14c>
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	6861      	ldr	r1, [r4, #4]
 8011d76:	4299      	cmp	r1, r3
 8011d78:	bfde      	ittt	le
 8011d7a:	2330      	movle	r3, #48	; 0x30
 8011d7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011d84:	1b52      	subs	r2, r2, r5
 8011d86:	6122      	str	r2, [r4, #16]
 8011d88:	f8cd a000 	str.w	sl, [sp]
 8011d8c:	464b      	mov	r3, r9
 8011d8e:	aa03      	add	r2, sp, #12
 8011d90:	4621      	mov	r1, r4
 8011d92:	4640      	mov	r0, r8
 8011d94:	f7ff fee2 	bl	8011b5c <_printf_common>
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d14c      	bne.n	8011e36 <_printf_i+0x1fe>
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011da0:	b004      	add	sp, #16
 8011da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da6:	4835      	ldr	r0, [pc, #212]	; (8011e7c <_printf_i+0x244>)
 8011da8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011dac:	6829      	ldr	r1, [r5, #0]
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011db4:	6029      	str	r1, [r5, #0]
 8011db6:	061d      	lsls	r5, r3, #24
 8011db8:	d514      	bpl.n	8011de4 <_printf_i+0x1ac>
 8011dba:	07df      	lsls	r7, r3, #31
 8011dbc:	bf44      	itt	mi
 8011dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8011dc2:	6023      	strmi	r3, [r4, #0]
 8011dc4:	b91e      	cbnz	r6, 8011dce <_printf_i+0x196>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	f023 0320 	bic.w	r3, r3, #32
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	2310      	movs	r3, #16
 8011dd0:	e7b0      	b.n	8011d34 <_printf_i+0xfc>
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	f043 0320 	orr.w	r3, r3, #32
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	2378      	movs	r3, #120	; 0x78
 8011ddc:	4828      	ldr	r0, [pc, #160]	; (8011e80 <_printf_i+0x248>)
 8011dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011de2:	e7e3      	b.n	8011dac <_printf_i+0x174>
 8011de4:	0659      	lsls	r1, r3, #25
 8011de6:	bf48      	it	mi
 8011de8:	b2b6      	uxthmi	r6, r6
 8011dea:	e7e6      	b.n	8011dba <_printf_i+0x182>
 8011dec:	4615      	mov	r5, r2
 8011dee:	e7bb      	b.n	8011d68 <_printf_i+0x130>
 8011df0:	682b      	ldr	r3, [r5, #0]
 8011df2:	6826      	ldr	r6, [r4, #0]
 8011df4:	6961      	ldr	r1, [r4, #20]
 8011df6:	1d18      	adds	r0, r3, #4
 8011df8:	6028      	str	r0, [r5, #0]
 8011dfa:	0635      	lsls	r5, r6, #24
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	d501      	bpl.n	8011e04 <_printf_i+0x1cc>
 8011e00:	6019      	str	r1, [r3, #0]
 8011e02:	e002      	b.n	8011e0a <_printf_i+0x1d2>
 8011e04:	0670      	lsls	r0, r6, #25
 8011e06:	d5fb      	bpl.n	8011e00 <_printf_i+0x1c8>
 8011e08:	8019      	strh	r1, [r3, #0]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6123      	str	r3, [r4, #16]
 8011e0e:	4615      	mov	r5, r2
 8011e10:	e7ba      	b.n	8011d88 <_printf_i+0x150>
 8011e12:	682b      	ldr	r3, [r5, #0]
 8011e14:	1d1a      	adds	r2, r3, #4
 8011e16:	602a      	str	r2, [r5, #0]
 8011e18:	681d      	ldr	r5, [r3, #0]
 8011e1a:	6862      	ldr	r2, [r4, #4]
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f7ee fa66 	bl	80002f0 <memchr>
 8011e24:	b108      	cbz	r0, 8011e2a <_printf_i+0x1f2>
 8011e26:	1b40      	subs	r0, r0, r5
 8011e28:	6060      	str	r0, [r4, #4]
 8011e2a:	6863      	ldr	r3, [r4, #4]
 8011e2c:	6123      	str	r3, [r4, #16]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e34:	e7a8      	b.n	8011d88 <_printf_i+0x150>
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	462a      	mov	r2, r5
 8011e3a:	4649      	mov	r1, r9
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	47d0      	blx	sl
 8011e40:	3001      	adds	r0, #1
 8011e42:	d0ab      	beq.n	8011d9c <_printf_i+0x164>
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	079b      	lsls	r3, r3, #30
 8011e48:	d413      	bmi.n	8011e72 <_printf_i+0x23a>
 8011e4a:	68e0      	ldr	r0, [r4, #12]
 8011e4c:	9b03      	ldr	r3, [sp, #12]
 8011e4e:	4298      	cmp	r0, r3
 8011e50:	bfb8      	it	lt
 8011e52:	4618      	movlt	r0, r3
 8011e54:	e7a4      	b.n	8011da0 <_printf_i+0x168>
 8011e56:	2301      	movs	r3, #1
 8011e58:	4632      	mov	r2, r6
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	4640      	mov	r0, r8
 8011e5e:	47d0      	blx	sl
 8011e60:	3001      	adds	r0, #1
 8011e62:	d09b      	beq.n	8011d9c <_printf_i+0x164>
 8011e64:	3501      	adds	r5, #1
 8011e66:	68e3      	ldr	r3, [r4, #12]
 8011e68:	9903      	ldr	r1, [sp, #12]
 8011e6a:	1a5b      	subs	r3, r3, r1
 8011e6c:	42ab      	cmp	r3, r5
 8011e6e:	dcf2      	bgt.n	8011e56 <_printf_i+0x21e>
 8011e70:	e7eb      	b.n	8011e4a <_printf_i+0x212>
 8011e72:	2500      	movs	r5, #0
 8011e74:	f104 0619 	add.w	r6, r4, #25
 8011e78:	e7f5      	b.n	8011e66 <_printf_i+0x22e>
 8011e7a:	bf00      	nop
 8011e7c:	0804e412 	.word	0x0804e412
 8011e80:	0804e423 	.word	0x0804e423

08011e84 <srand>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4b10      	ldr	r3, [pc, #64]	; (8011ec8 <srand+0x44>)
 8011e88:	681d      	ldr	r5, [r3, #0]
 8011e8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	b9b3      	cbnz	r3, 8011ebe <srand+0x3a>
 8011e90:	2018      	movs	r0, #24
 8011e92:	f7f3 f849 	bl	8004f28 <__wrap_malloc>
 8011e96:	4602      	mov	r2, r0
 8011e98:	63a8      	str	r0, [r5, #56]	; 0x38
 8011e9a:	b920      	cbnz	r0, 8011ea6 <srand+0x22>
 8011e9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <srand+0x48>)
 8011e9e:	480c      	ldr	r0, [pc, #48]	; (8011ed0 <srand+0x4c>)
 8011ea0:	2142      	movs	r1, #66	; 0x42
 8011ea2:	f000 f8d5 	bl	8012050 <__assert_func>
 8011ea6:	490b      	ldr	r1, [pc, #44]	; (8011ed4 <srand+0x50>)
 8011ea8:	4b0b      	ldr	r3, [pc, #44]	; (8011ed8 <srand+0x54>)
 8011eaa:	e9c0 1300 	strd	r1, r3, [r0]
 8011eae:	4b0b      	ldr	r3, [pc, #44]	; (8011edc <srand+0x58>)
 8011eb0:	6083      	str	r3, [r0, #8]
 8011eb2:	230b      	movs	r3, #11
 8011eb4:	8183      	strh	r3, [r0, #12]
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	2001      	movs	r0, #1
 8011eba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011ebe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	611c      	str	r4, [r3, #16]
 8011ec4:	615a      	str	r2, [r3, #20]
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	24003e40 	.word	0x24003e40
 8011ecc:	0804e434 	.word	0x0804e434
 8011ed0:	0804e44b 	.word	0x0804e44b
 8011ed4:	abcd330e 	.word	0xabcd330e
 8011ed8:	e66d1234 	.word	0xe66d1234
 8011edc:	0005deec 	.word	0x0005deec

08011ee0 <rand>:
 8011ee0:	4b16      	ldr	r3, [pc, #88]	; (8011f3c <rand+0x5c>)
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	681c      	ldr	r4, [r3, #0]
 8011ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ee8:	b9b3      	cbnz	r3, 8011f18 <rand+0x38>
 8011eea:	2018      	movs	r0, #24
 8011eec:	f7f3 f81c 	bl	8004f28 <__wrap_malloc>
 8011ef0:	63a0      	str	r0, [r4, #56]	; 0x38
 8011ef2:	b928      	cbnz	r0, 8011f00 <rand+0x20>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	4b12      	ldr	r3, [pc, #72]	; (8011f40 <rand+0x60>)
 8011ef8:	4812      	ldr	r0, [pc, #72]	; (8011f44 <rand+0x64>)
 8011efa:	214e      	movs	r1, #78	; 0x4e
 8011efc:	f000 f8a8 	bl	8012050 <__assert_func>
 8011f00:	4a11      	ldr	r2, [pc, #68]	; (8011f48 <rand+0x68>)
 8011f02:	4b12      	ldr	r3, [pc, #72]	; (8011f4c <rand+0x6c>)
 8011f04:	e9c0 2300 	strd	r2, r3, [r0]
 8011f08:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <rand+0x70>)
 8011f0a:	6083      	str	r3, [r0, #8]
 8011f0c:	230b      	movs	r3, #11
 8011f0e:	8183      	strh	r3, [r0, #12]
 8011f10:	2201      	movs	r2, #1
 8011f12:	2300      	movs	r3, #0
 8011f14:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011f18:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8011f1a:	4a0e      	ldr	r2, [pc, #56]	; (8011f54 <rand+0x74>)
 8011f1c:	6920      	ldr	r0, [r4, #16]
 8011f1e:	6963      	ldr	r3, [r4, #20]
 8011f20:	490d      	ldr	r1, [pc, #52]	; (8011f58 <rand+0x78>)
 8011f22:	4342      	muls	r2, r0
 8011f24:	fb01 2203 	mla	r2, r1, r3, r2
 8011f28:	fba0 0101 	umull	r0, r1, r0, r1
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	eb42 0001 	adc.w	r0, r2, r1
 8011f32:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011f36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f3a:	bd10      	pop	{r4, pc}
 8011f3c:	24003e40 	.word	0x24003e40
 8011f40:	0804e434 	.word	0x0804e434
 8011f44:	0804e44b 	.word	0x0804e44b
 8011f48:	abcd330e 	.word	0xabcd330e
 8011f4c:	e66d1234 	.word	0xe66d1234
 8011f50:	0005deec 	.word	0x0005deec
 8011f54:	5851f42d 	.word	0x5851f42d
 8011f58:	4c957f2d 	.word	0x4c957f2d

08011f5c <_sbrk_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4d06      	ldr	r5, [pc, #24]	; (8011f78 <_sbrk_r+0x1c>)
 8011f60:	2300      	movs	r3, #0
 8011f62:	4604      	mov	r4, r0
 8011f64:	4608      	mov	r0, r1
 8011f66:	602b      	str	r3, [r5, #0]
 8011f68:	f7ee ffb4 	bl	8000ed4 <_sbrk>
 8011f6c:	1c43      	adds	r3, r0, #1
 8011f6e:	d102      	bne.n	8011f76 <_sbrk_r+0x1a>
 8011f70:	682b      	ldr	r3, [r5, #0]
 8011f72:	b103      	cbz	r3, 8011f76 <_sbrk_r+0x1a>
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	bd38      	pop	{r3, r4, r5, pc}
 8011f78:	2405b118 	.word	0x2405b118

08011f7c <__sread>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	460c      	mov	r4, r1
 8011f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f84:	f001 fbb6 	bl	80136f4 <_read_r>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	bfab      	itete	ge
 8011f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f90:	181b      	addge	r3, r3, r0
 8011f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f96:	bfac      	ite	ge
 8011f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f9a:	81a3      	strhlt	r3, [r4, #12]
 8011f9c:	bd10      	pop	{r4, pc}

08011f9e <__swrite>:
 8011f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa2:	461f      	mov	r7, r3
 8011fa4:	898b      	ldrh	r3, [r1, #12]
 8011fa6:	05db      	lsls	r3, r3, #23
 8011fa8:	4605      	mov	r5, r0
 8011faa:	460c      	mov	r4, r1
 8011fac:	4616      	mov	r6, r2
 8011fae:	d505      	bpl.n	8011fbc <__swrite+0x1e>
 8011fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f000 fe8a 	bl	8012cd0 <_lseek_r>
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fc6:	81a3      	strh	r3, [r4, #12]
 8011fc8:	4632      	mov	r2, r6
 8011fca:	463b      	mov	r3, r7
 8011fcc:	4628      	mov	r0, r5
 8011fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd2:	f000 b82b 	b.w	801202c <_write_r>

08011fd6 <__sseek>:
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	460c      	mov	r4, r1
 8011fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fde:	f000 fe77 	bl	8012cd0 <_lseek_r>
 8011fe2:	1c43      	adds	r3, r0, #1
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	bf15      	itete	ne
 8011fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ff2:	81a3      	strheq	r3, [r4, #12]
 8011ff4:	bf18      	it	ne
 8011ff6:	81a3      	strhne	r3, [r4, #12]
 8011ff8:	bd10      	pop	{r4, pc}

08011ffa <__sclose>:
 8011ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ffe:	f000 b845 	b.w	801208c <_close_r>

08012002 <strncmp>:
 8012002:	b510      	push	{r4, lr}
 8012004:	b17a      	cbz	r2, 8012026 <strncmp+0x24>
 8012006:	4603      	mov	r3, r0
 8012008:	3901      	subs	r1, #1
 801200a:	1884      	adds	r4, r0, r2
 801200c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012010:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012014:	4290      	cmp	r0, r2
 8012016:	d101      	bne.n	801201c <strncmp+0x1a>
 8012018:	42a3      	cmp	r3, r4
 801201a:	d101      	bne.n	8012020 <strncmp+0x1e>
 801201c:	1a80      	subs	r0, r0, r2
 801201e:	bd10      	pop	{r4, pc}
 8012020:	2800      	cmp	r0, #0
 8012022:	d1f3      	bne.n	801200c <strncmp+0xa>
 8012024:	e7fa      	b.n	801201c <strncmp+0x1a>
 8012026:	4610      	mov	r0, r2
 8012028:	e7f9      	b.n	801201e <strncmp+0x1c>
	...

0801202c <_write_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4d07      	ldr	r5, [pc, #28]	; (801204c <_write_r+0x20>)
 8012030:	4604      	mov	r4, r0
 8012032:	4608      	mov	r0, r1
 8012034:	4611      	mov	r1, r2
 8012036:	2200      	movs	r2, #0
 8012038:	602a      	str	r2, [r5, #0]
 801203a:	461a      	mov	r2, r3
 801203c:	f7f2 ff42 	bl	8004ec4 <_write>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_write_r+0x1e>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_write_r+0x1e>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	2405b118 	.word	0x2405b118

08012050 <__assert_func>:
 8012050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012052:	4614      	mov	r4, r2
 8012054:	461a      	mov	r2, r3
 8012056:	4b09      	ldr	r3, [pc, #36]	; (801207c <__assert_func+0x2c>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4605      	mov	r5, r0
 801205c:	68d8      	ldr	r0, [r3, #12]
 801205e:	b14c      	cbz	r4, 8012074 <__assert_func+0x24>
 8012060:	4b07      	ldr	r3, [pc, #28]	; (8012080 <__assert_func+0x30>)
 8012062:	9100      	str	r1, [sp, #0]
 8012064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012068:	4906      	ldr	r1, [pc, #24]	; (8012084 <__assert_func+0x34>)
 801206a:	462b      	mov	r3, r5
 801206c:	f000 fe1a 	bl	8012ca4 <fiprintf>
 8012070:	f001 fc12 	bl	8013898 <abort>
 8012074:	4b04      	ldr	r3, [pc, #16]	; (8012088 <__assert_func+0x38>)
 8012076:	461c      	mov	r4, r3
 8012078:	e7f3      	b.n	8012062 <__assert_func+0x12>
 801207a:	bf00      	nop
 801207c:	24003e40 	.word	0x24003e40
 8012080:	0804e4a6 	.word	0x0804e4a6
 8012084:	0804e4b3 	.word	0x0804e4b3
 8012088:	0804e4e1 	.word	0x0804e4e1

0801208c <_close_r>:
 801208c:	b538      	push	{r3, r4, r5, lr}
 801208e:	4d06      	ldr	r5, [pc, #24]	; (80120a8 <_close_r+0x1c>)
 8012090:	2300      	movs	r3, #0
 8012092:	4604      	mov	r4, r0
 8012094:	4608      	mov	r0, r1
 8012096:	602b      	str	r3, [r5, #0]
 8012098:	f001 fcf0 	bl	8013a7c <_close>
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d102      	bne.n	80120a6 <_close_r+0x1a>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	b103      	cbz	r3, 80120a6 <_close_r+0x1a>
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	bd38      	pop	{r3, r4, r5, pc}
 80120a8:	2405b118 	.word	0x2405b118

080120ac <quorem>:
 80120ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b0:	6903      	ldr	r3, [r0, #16]
 80120b2:	690c      	ldr	r4, [r1, #16]
 80120b4:	42a3      	cmp	r3, r4
 80120b6:	4607      	mov	r7, r0
 80120b8:	f2c0 8081 	blt.w	80121be <quorem+0x112>
 80120bc:	3c01      	subs	r4, #1
 80120be:	f101 0814 	add.w	r8, r1, #20
 80120c2:	f100 0514 	add.w	r5, r0, #20
 80120c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120ca:	9301      	str	r3, [sp, #4]
 80120cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80120d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120d4:	3301      	adds	r3, #1
 80120d6:	429a      	cmp	r2, r3
 80120d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80120dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80120e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80120e4:	d331      	bcc.n	801214a <quorem+0x9e>
 80120e6:	f04f 0e00 	mov.w	lr, #0
 80120ea:	4640      	mov	r0, r8
 80120ec:	46ac      	mov	ip, r5
 80120ee:	46f2      	mov	sl, lr
 80120f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80120f4:	b293      	uxth	r3, r2
 80120f6:	fb06 e303 	mla	r3, r6, r3, lr
 80120fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80120fe:	b29b      	uxth	r3, r3
 8012100:	ebaa 0303 	sub.w	r3, sl, r3
 8012104:	f8dc a000 	ldr.w	sl, [ip]
 8012108:	0c12      	lsrs	r2, r2, #16
 801210a:	fa13 f38a 	uxtah	r3, r3, sl
 801210e:	fb06 e202 	mla	r2, r6, r2, lr
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	9b00      	ldr	r3, [sp, #0]
 8012116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801211a:	b292      	uxth	r2, r2
 801211c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012124:	f8bd 3000 	ldrh.w	r3, [sp]
 8012128:	4581      	cmp	r9, r0
 801212a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801212e:	f84c 3b04 	str.w	r3, [ip], #4
 8012132:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012136:	d2db      	bcs.n	80120f0 <quorem+0x44>
 8012138:	f855 300b 	ldr.w	r3, [r5, fp]
 801213c:	b92b      	cbnz	r3, 801214a <quorem+0x9e>
 801213e:	9b01      	ldr	r3, [sp, #4]
 8012140:	3b04      	subs	r3, #4
 8012142:	429d      	cmp	r5, r3
 8012144:	461a      	mov	r2, r3
 8012146:	d32e      	bcc.n	80121a6 <quorem+0xfa>
 8012148:	613c      	str	r4, [r7, #16]
 801214a:	4638      	mov	r0, r7
 801214c:	f001 f860 	bl	8013210 <__mcmp>
 8012150:	2800      	cmp	r0, #0
 8012152:	db24      	blt.n	801219e <quorem+0xf2>
 8012154:	3601      	adds	r6, #1
 8012156:	4628      	mov	r0, r5
 8012158:	f04f 0c00 	mov.w	ip, #0
 801215c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012160:	f8d0 e000 	ldr.w	lr, [r0]
 8012164:	b293      	uxth	r3, r2
 8012166:	ebac 0303 	sub.w	r3, ip, r3
 801216a:	0c12      	lsrs	r2, r2, #16
 801216c:	fa13 f38e 	uxtah	r3, r3, lr
 8012170:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012178:	b29b      	uxth	r3, r3
 801217a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801217e:	45c1      	cmp	r9, r8
 8012180:	f840 3b04 	str.w	r3, [r0], #4
 8012184:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012188:	d2e8      	bcs.n	801215c <quorem+0xb0>
 801218a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801218e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012192:	b922      	cbnz	r2, 801219e <quorem+0xf2>
 8012194:	3b04      	subs	r3, #4
 8012196:	429d      	cmp	r5, r3
 8012198:	461a      	mov	r2, r3
 801219a:	d30a      	bcc.n	80121b2 <quorem+0x106>
 801219c:	613c      	str	r4, [r7, #16]
 801219e:	4630      	mov	r0, r6
 80121a0:	b003      	add	sp, #12
 80121a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121a6:	6812      	ldr	r2, [r2, #0]
 80121a8:	3b04      	subs	r3, #4
 80121aa:	2a00      	cmp	r2, #0
 80121ac:	d1cc      	bne.n	8012148 <quorem+0x9c>
 80121ae:	3c01      	subs	r4, #1
 80121b0:	e7c7      	b.n	8012142 <quorem+0x96>
 80121b2:	6812      	ldr	r2, [r2, #0]
 80121b4:	3b04      	subs	r3, #4
 80121b6:	2a00      	cmp	r2, #0
 80121b8:	d1f0      	bne.n	801219c <quorem+0xf0>
 80121ba:	3c01      	subs	r4, #1
 80121bc:	e7eb      	b.n	8012196 <quorem+0xea>
 80121be:	2000      	movs	r0, #0
 80121c0:	e7ee      	b.n	80121a0 <quorem+0xf4>
 80121c2:	0000      	movs	r0, r0
 80121c4:	0000      	movs	r0, r0
	...

080121c8 <_dtoa_r>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	ed2d 8b02 	vpush	{d8}
 80121d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121d2:	b091      	sub	sp, #68	; 0x44
 80121d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80121d8:	ec59 8b10 	vmov	r8, r9, d0
 80121dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80121de:	9106      	str	r1, [sp, #24]
 80121e0:	4606      	mov	r6, r0
 80121e2:	9208      	str	r2, [sp, #32]
 80121e4:	930c      	str	r3, [sp, #48]	; 0x30
 80121e6:	b975      	cbnz	r5, 8012206 <_dtoa_r+0x3e>
 80121e8:	2010      	movs	r0, #16
 80121ea:	f7f2 fe9d 	bl	8004f28 <__wrap_malloc>
 80121ee:	4602      	mov	r2, r0
 80121f0:	6270      	str	r0, [r6, #36]	; 0x24
 80121f2:	b920      	cbnz	r0, 80121fe <_dtoa_r+0x36>
 80121f4:	4baa      	ldr	r3, [pc, #680]	; (80124a0 <_dtoa_r+0x2d8>)
 80121f6:	21ea      	movs	r1, #234	; 0xea
 80121f8:	48aa      	ldr	r0, [pc, #680]	; (80124a4 <_dtoa_r+0x2dc>)
 80121fa:	f7ff ff29 	bl	8012050 <__assert_func>
 80121fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012202:	6005      	str	r5, [r0, #0]
 8012204:	60c5      	str	r5, [r0, #12]
 8012206:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	b151      	cbz	r1, 8012222 <_dtoa_r+0x5a>
 801220c:	685a      	ldr	r2, [r3, #4]
 801220e:	604a      	str	r2, [r1, #4]
 8012210:	2301      	movs	r3, #1
 8012212:	4093      	lsls	r3, r2
 8012214:	608b      	str	r3, [r1, #8]
 8012216:	4630      	mov	r0, r6
 8012218:	f000 fdb8 	bl	8012d8c <_Bfree>
 801221c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801221e:	2200      	movs	r2, #0
 8012220:	601a      	str	r2, [r3, #0]
 8012222:	f1b9 0300 	subs.w	r3, r9, #0
 8012226:	bfbb      	ittet	lt
 8012228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801222c:	9303      	strlt	r3, [sp, #12]
 801222e:	2300      	movge	r3, #0
 8012230:	2201      	movlt	r2, #1
 8012232:	bfac      	ite	ge
 8012234:	6023      	strge	r3, [r4, #0]
 8012236:	6022      	strlt	r2, [r4, #0]
 8012238:	4b9b      	ldr	r3, [pc, #620]	; (80124a8 <_dtoa_r+0x2e0>)
 801223a:	9c03      	ldr	r4, [sp, #12]
 801223c:	43a3      	bics	r3, r4
 801223e:	d11c      	bne.n	801227a <_dtoa_r+0xb2>
 8012240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012242:	f242 730f 	movw	r3, #9999	; 0x270f
 8012246:	6013      	str	r3, [r2, #0]
 8012248:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801224c:	ea53 0308 	orrs.w	r3, r3, r8
 8012250:	f000 84fd 	beq.w	8012c4e <_dtoa_r+0xa86>
 8012254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012256:	b963      	cbnz	r3, 8012272 <_dtoa_r+0xaa>
 8012258:	4b94      	ldr	r3, [pc, #592]	; (80124ac <_dtoa_r+0x2e4>)
 801225a:	e01f      	b.n	801229c <_dtoa_r+0xd4>
 801225c:	4b94      	ldr	r3, [pc, #592]	; (80124b0 <_dtoa_r+0x2e8>)
 801225e:	9301      	str	r3, [sp, #4]
 8012260:	3308      	adds	r3, #8
 8012262:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	9801      	ldr	r0, [sp, #4]
 8012268:	b011      	add	sp, #68	; 0x44
 801226a:	ecbd 8b02 	vpop	{d8}
 801226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012272:	4b8e      	ldr	r3, [pc, #568]	; (80124ac <_dtoa_r+0x2e4>)
 8012274:	9301      	str	r3, [sp, #4]
 8012276:	3303      	adds	r3, #3
 8012278:	e7f3      	b.n	8012262 <_dtoa_r+0x9a>
 801227a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801227e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	d10b      	bne.n	80122a0 <_dtoa_r+0xd8>
 8012288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801228a:	2301      	movs	r3, #1
 801228c:	6013      	str	r3, [r2, #0]
 801228e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 84d9 	beq.w	8012c48 <_dtoa_r+0xa80>
 8012296:	4887      	ldr	r0, [pc, #540]	; (80124b4 <_dtoa_r+0x2ec>)
 8012298:	6018      	str	r0, [r3, #0]
 801229a:	1e43      	subs	r3, r0, #1
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	e7e2      	b.n	8012266 <_dtoa_r+0x9e>
 80122a0:	a90f      	add	r1, sp, #60	; 0x3c
 80122a2:	aa0e      	add	r2, sp, #56	; 0x38
 80122a4:	4630      	mov	r0, r6
 80122a6:	eeb0 0b48 	vmov.f64	d0, d8
 80122aa:	f001 f857 	bl	801335c <__d2b>
 80122ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80122b2:	4605      	mov	r5, r0
 80122b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80122b6:	2900      	cmp	r1, #0
 80122b8:	d046      	beq.n	8012348 <_dtoa_r+0x180>
 80122ba:	ee18 4a90 	vmov	r4, s17
 80122be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80122c2:	ec53 2b18 	vmov	r2, r3, d8
 80122c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80122ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80122ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80122d2:	2400      	movs	r4, #0
 80122d4:	ec43 2b16 	vmov	d6, r2, r3
 80122d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80122dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012488 <_dtoa_r+0x2c0>
 80122e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80122e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012490 <_dtoa_r+0x2c8>
 80122e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80122ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012498 <_dtoa_r+0x2d0>
 80122f0:	ee07 1a90 	vmov	s15, r1
 80122f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80122f8:	eeb0 7b46 	vmov.f64	d7, d6
 80122fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012300:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012304:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230c:	ee16 ba90 	vmov	fp, s13
 8012310:	940a      	str	r4, [sp, #40]	; 0x28
 8012312:	d508      	bpl.n	8012326 <_dtoa_r+0x15e>
 8012314:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012318:	eeb4 6b47 	vcmp.f64	d6, d7
 801231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012320:	bf18      	it	ne
 8012322:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012326:	f1bb 0f16 	cmp.w	fp, #22
 801232a:	d82f      	bhi.n	801238c <_dtoa_r+0x1c4>
 801232c:	4b62      	ldr	r3, [pc, #392]	; (80124b8 <_dtoa_r+0x2f0>)
 801232e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012332:	ed93 7b00 	vldr	d7, [r3]
 8012336:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233e:	d501      	bpl.n	8012344 <_dtoa_r+0x17c>
 8012340:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012344:	2300      	movs	r3, #0
 8012346:	e022      	b.n	801238e <_dtoa_r+0x1c6>
 8012348:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801234a:	4401      	add	r1, r0
 801234c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012350:	2b20      	cmp	r3, #32
 8012352:	bfc1      	itttt	gt
 8012354:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012358:	fa04 f303 	lslgt.w	r3, r4, r3
 801235c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012360:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012364:	bfd6      	itet	le
 8012366:	f1c3 0320 	rsble	r3, r3, #32
 801236a:	ea43 0808 	orrgt.w	r8, r3, r8
 801236e:	fa08 f803 	lslle.w	r8, r8, r3
 8012372:	ee07 8a90 	vmov	s15, r8
 8012376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801237a:	3901      	subs	r1, #1
 801237c:	ee17 4a90 	vmov	r4, s15
 8012380:	ec53 2b17 	vmov	r2, r3, d7
 8012384:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012388:	2401      	movs	r4, #1
 801238a:	e7a3      	b.n	80122d4 <_dtoa_r+0x10c>
 801238c:	2301      	movs	r3, #1
 801238e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012390:	1a43      	subs	r3, r0, r1
 8012392:	1e5a      	subs	r2, r3, #1
 8012394:	bf45      	ittet	mi
 8012396:	f1c3 0301 	rsbmi	r3, r3, #1
 801239a:	9304      	strmi	r3, [sp, #16]
 801239c:	2300      	movpl	r3, #0
 801239e:	2300      	movmi	r3, #0
 80123a0:	9205      	str	r2, [sp, #20]
 80123a2:	bf54      	ite	pl
 80123a4:	9304      	strpl	r3, [sp, #16]
 80123a6:	9305      	strmi	r3, [sp, #20]
 80123a8:	f1bb 0f00 	cmp.w	fp, #0
 80123ac:	db18      	blt.n	80123e0 <_dtoa_r+0x218>
 80123ae:	9b05      	ldr	r3, [sp, #20]
 80123b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80123b4:	445b      	add	r3, fp
 80123b6:	9305      	str	r3, [sp, #20]
 80123b8:	2300      	movs	r3, #0
 80123ba:	9a06      	ldr	r2, [sp, #24]
 80123bc:	2a09      	cmp	r2, #9
 80123be:	d849      	bhi.n	8012454 <_dtoa_r+0x28c>
 80123c0:	2a05      	cmp	r2, #5
 80123c2:	bfc4      	itt	gt
 80123c4:	3a04      	subgt	r2, #4
 80123c6:	9206      	strgt	r2, [sp, #24]
 80123c8:	9a06      	ldr	r2, [sp, #24]
 80123ca:	f1a2 0202 	sub.w	r2, r2, #2
 80123ce:	bfcc      	ite	gt
 80123d0:	2400      	movgt	r4, #0
 80123d2:	2401      	movle	r4, #1
 80123d4:	2a03      	cmp	r2, #3
 80123d6:	d848      	bhi.n	801246a <_dtoa_r+0x2a2>
 80123d8:	e8df f002 	tbb	[pc, r2]
 80123dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80123e0:	9b04      	ldr	r3, [sp, #16]
 80123e2:	2200      	movs	r2, #0
 80123e4:	eba3 030b 	sub.w	r3, r3, fp
 80123e8:	9304      	str	r3, [sp, #16]
 80123ea:	9209      	str	r2, [sp, #36]	; 0x24
 80123ec:	f1cb 0300 	rsb	r3, fp, #0
 80123f0:	e7e3      	b.n	80123ba <_dtoa_r+0x1f2>
 80123f2:	2200      	movs	r2, #0
 80123f4:	9207      	str	r2, [sp, #28]
 80123f6:	9a08      	ldr	r2, [sp, #32]
 80123f8:	2a00      	cmp	r2, #0
 80123fa:	dc39      	bgt.n	8012470 <_dtoa_r+0x2a8>
 80123fc:	f04f 0a01 	mov.w	sl, #1
 8012400:	46d1      	mov	r9, sl
 8012402:	4652      	mov	r2, sl
 8012404:	f8cd a020 	str.w	sl, [sp, #32]
 8012408:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801240a:	2100      	movs	r1, #0
 801240c:	6079      	str	r1, [r7, #4]
 801240e:	2004      	movs	r0, #4
 8012410:	f100 0c14 	add.w	ip, r0, #20
 8012414:	4594      	cmp	ip, r2
 8012416:	6879      	ldr	r1, [r7, #4]
 8012418:	d92f      	bls.n	801247a <_dtoa_r+0x2b2>
 801241a:	4630      	mov	r0, r6
 801241c:	930d      	str	r3, [sp, #52]	; 0x34
 801241e:	f000 fc75 	bl	8012d0c <_Balloc>
 8012422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012424:	9001      	str	r0, [sp, #4]
 8012426:	4602      	mov	r2, r0
 8012428:	2800      	cmp	r0, #0
 801242a:	d149      	bne.n	80124c0 <_dtoa_r+0x2f8>
 801242c:	4b23      	ldr	r3, [pc, #140]	; (80124bc <_dtoa_r+0x2f4>)
 801242e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012432:	e6e1      	b.n	80121f8 <_dtoa_r+0x30>
 8012434:	2201      	movs	r2, #1
 8012436:	e7dd      	b.n	80123f4 <_dtoa_r+0x22c>
 8012438:	2200      	movs	r2, #0
 801243a:	9207      	str	r2, [sp, #28]
 801243c:	9a08      	ldr	r2, [sp, #32]
 801243e:	eb0b 0a02 	add.w	sl, fp, r2
 8012442:	f10a 0901 	add.w	r9, sl, #1
 8012446:	464a      	mov	r2, r9
 8012448:	2a01      	cmp	r2, #1
 801244a:	bfb8      	it	lt
 801244c:	2201      	movlt	r2, #1
 801244e:	e7db      	b.n	8012408 <_dtoa_r+0x240>
 8012450:	2201      	movs	r2, #1
 8012452:	e7f2      	b.n	801243a <_dtoa_r+0x272>
 8012454:	2401      	movs	r4, #1
 8012456:	2200      	movs	r2, #0
 8012458:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801245c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012460:	2100      	movs	r1, #0
 8012462:	46d1      	mov	r9, sl
 8012464:	2212      	movs	r2, #18
 8012466:	9108      	str	r1, [sp, #32]
 8012468:	e7ce      	b.n	8012408 <_dtoa_r+0x240>
 801246a:	2201      	movs	r2, #1
 801246c:	9207      	str	r2, [sp, #28]
 801246e:	e7f5      	b.n	801245c <_dtoa_r+0x294>
 8012470:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012474:	46d1      	mov	r9, sl
 8012476:	4652      	mov	r2, sl
 8012478:	e7c6      	b.n	8012408 <_dtoa_r+0x240>
 801247a:	3101      	adds	r1, #1
 801247c:	6079      	str	r1, [r7, #4]
 801247e:	0040      	lsls	r0, r0, #1
 8012480:	e7c6      	b.n	8012410 <_dtoa_r+0x248>
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
 8012488:	636f4361 	.word	0x636f4361
 801248c:	3fd287a7 	.word	0x3fd287a7
 8012490:	8b60c8b3 	.word	0x8b60c8b3
 8012494:	3fc68a28 	.word	0x3fc68a28
 8012498:	509f79fb 	.word	0x509f79fb
 801249c:	3fd34413 	.word	0x3fd34413
 80124a0:	0804e434 	.word	0x0804e434
 80124a4:	0804e4ef 	.word	0x0804e4ef
 80124a8:	7ff00000 	.word	0x7ff00000
 80124ac:	0804e4eb 	.word	0x0804e4eb
 80124b0:	0804e4e2 	.word	0x0804e4e2
 80124b4:	0804e411 	.word	0x0804e411
 80124b8:	0804e5e0 	.word	0x0804e5e0
 80124bc:	0804e54a 	.word	0x0804e54a
 80124c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80124c2:	9901      	ldr	r1, [sp, #4]
 80124c4:	6011      	str	r1, [r2, #0]
 80124c6:	f1b9 0f0e 	cmp.w	r9, #14
 80124ca:	d86c      	bhi.n	80125a6 <_dtoa_r+0x3de>
 80124cc:	2c00      	cmp	r4, #0
 80124ce:	d06a      	beq.n	80125a6 <_dtoa_r+0x3de>
 80124d0:	f1bb 0f00 	cmp.w	fp, #0
 80124d4:	f340 80a0 	ble.w	8012618 <_dtoa_r+0x450>
 80124d8:	49c1      	ldr	r1, [pc, #772]	; (80127e0 <_dtoa_r+0x618>)
 80124da:	f00b 020f 	and.w	r2, fp, #15
 80124de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80124e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80124e6:	ed92 7b00 	vldr	d7, [r2]
 80124ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80124ee:	f000 8087 	beq.w	8012600 <_dtoa_r+0x438>
 80124f2:	4abc      	ldr	r2, [pc, #752]	; (80127e4 <_dtoa_r+0x61c>)
 80124f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80124f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80124fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012500:	f001 010f 	and.w	r1, r1, #15
 8012504:	2203      	movs	r2, #3
 8012506:	48b7      	ldr	r0, [pc, #732]	; (80127e4 <_dtoa_r+0x61c>)
 8012508:	2900      	cmp	r1, #0
 801250a:	d17b      	bne.n	8012604 <_dtoa_r+0x43c>
 801250c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012510:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012514:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801251a:	2900      	cmp	r1, #0
 801251c:	f000 80a2 	beq.w	8012664 <_dtoa_r+0x49c>
 8012520:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012528:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012530:	f140 8098 	bpl.w	8012664 <_dtoa_r+0x49c>
 8012534:	f1b9 0f00 	cmp.w	r9, #0
 8012538:	f000 8094 	beq.w	8012664 <_dtoa_r+0x49c>
 801253c:	f1ba 0f00 	cmp.w	sl, #0
 8012540:	dd2f      	ble.n	80125a2 <_dtoa_r+0x3da>
 8012542:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012546:	ee27 7b06 	vmul.f64	d7, d7, d6
 801254a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801254e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012552:	3201      	adds	r2, #1
 8012554:	4650      	mov	r0, sl
 8012556:	ed9d 6b02 	vldr	d6, [sp, #8]
 801255a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801255e:	ee07 2a90 	vmov	s15, r2
 8012562:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012566:	eea7 5b06 	vfma.f64	d5, d7, d6
 801256a:	ee15 4a90 	vmov	r4, s11
 801256e:	ec52 1b15 	vmov	r1, r2, d5
 8012572:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012576:	2800      	cmp	r0, #0
 8012578:	d177      	bne.n	801266a <_dtoa_r+0x4a2>
 801257a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801257e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012582:	ec42 1b17 	vmov	d7, r1, r2
 8012586:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258e:	f300 8263 	bgt.w	8012a58 <_dtoa_r+0x890>
 8012592:	eeb1 7b47 	vneg.f64	d7, d7
 8012596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	f100 8258 	bmi.w	8012a52 <_dtoa_r+0x88a>
 80125a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80125a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125a8:	2a00      	cmp	r2, #0
 80125aa:	f2c0 811d 	blt.w	80127e8 <_dtoa_r+0x620>
 80125ae:	f1bb 0f0e 	cmp.w	fp, #14
 80125b2:	f300 8119 	bgt.w	80127e8 <_dtoa_r+0x620>
 80125b6:	4b8a      	ldr	r3, [pc, #552]	; (80127e0 <_dtoa_r+0x618>)
 80125b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80125bc:	ed93 6b00 	vldr	d6, [r3]
 80125c0:	9b08      	ldr	r3, [sp, #32]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f280 80b7 	bge.w	8012736 <_dtoa_r+0x56e>
 80125c8:	f1b9 0f00 	cmp.w	r9, #0
 80125cc:	f300 80b3 	bgt.w	8012736 <_dtoa_r+0x56e>
 80125d0:	f040 823f 	bne.w	8012a52 <_dtoa_r+0x88a>
 80125d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80125d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80125dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e8:	464c      	mov	r4, r9
 80125ea:	464f      	mov	r7, r9
 80125ec:	f280 8215 	bge.w	8012a1a <_dtoa_r+0x852>
 80125f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80125f4:	2331      	movs	r3, #49	; 0x31
 80125f6:	f808 3b01 	strb.w	r3, [r8], #1
 80125fa:	f10b 0b01 	add.w	fp, fp, #1
 80125fe:	e211      	b.n	8012a24 <_dtoa_r+0x85c>
 8012600:	2202      	movs	r2, #2
 8012602:	e780      	b.n	8012506 <_dtoa_r+0x33e>
 8012604:	07cc      	lsls	r4, r1, #31
 8012606:	d504      	bpl.n	8012612 <_dtoa_r+0x44a>
 8012608:	ed90 6b00 	vldr	d6, [r0]
 801260c:	3201      	adds	r2, #1
 801260e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012612:	1049      	asrs	r1, r1, #1
 8012614:	3008      	adds	r0, #8
 8012616:	e777      	b.n	8012508 <_dtoa_r+0x340>
 8012618:	d022      	beq.n	8012660 <_dtoa_r+0x498>
 801261a:	f1cb 0100 	rsb	r1, fp, #0
 801261e:	4a70      	ldr	r2, [pc, #448]	; (80127e0 <_dtoa_r+0x618>)
 8012620:	f001 000f 	and.w	r0, r1, #15
 8012624:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012628:	ed92 7b00 	vldr	d7, [r2]
 801262c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012630:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012634:	486b      	ldr	r0, [pc, #428]	; (80127e4 <_dtoa_r+0x61c>)
 8012636:	1109      	asrs	r1, r1, #4
 8012638:	2400      	movs	r4, #0
 801263a:	2202      	movs	r2, #2
 801263c:	b929      	cbnz	r1, 801264a <_dtoa_r+0x482>
 801263e:	2c00      	cmp	r4, #0
 8012640:	f43f af6a 	beq.w	8012518 <_dtoa_r+0x350>
 8012644:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012648:	e766      	b.n	8012518 <_dtoa_r+0x350>
 801264a:	07cf      	lsls	r7, r1, #31
 801264c:	d505      	bpl.n	801265a <_dtoa_r+0x492>
 801264e:	ed90 6b00 	vldr	d6, [r0]
 8012652:	3201      	adds	r2, #1
 8012654:	2401      	movs	r4, #1
 8012656:	ee27 7b06 	vmul.f64	d7, d7, d6
 801265a:	1049      	asrs	r1, r1, #1
 801265c:	3008      	adds	r0, #8
 801265e:	e7ed      	b.n	801263c <_dtoa_r+0x474>
 8012660:	2202      	movs	r2, #2
 8012662:	e759      	b.n	8012518 <_dtoa_r+0x350>
 8012664:	465f      	mov	r7, fp
 8012666:	4648      	mov	r0, r9
 8012668:	e775      	b.n	8012556 <_dtoa_r+0x38e>
 801266a:	ec42 1b17 	vmov	d7, r1, r2
 801266e:	4a5c      	ldr	r2, [pc, #368]	; (80127e0 <_dtoa_r+0x618>)
 8012670:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012674:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012678:	9a01      	ldr	r2, [sp, #4]
 801267a:	1814      	adds	r4, r2, r0
 801267c:	9a07      	ldr	r2, [sp, #28]
 801267e:	b352      	cbz	r2, 80126d6 <_dtoa_r+0x50e>
 8012680:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012684:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012688:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801268c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012690:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012694:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012698:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801269c:	ee14 2a90 	vmov	r2, s9
 80126a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80126a4:	3230      	adds	r2, #48	; 0x30
 80126a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80126aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b2:	f808 2b01 	strb.w	r2, [r8], #1
 80126b6:	d439      	bmi.n	801272c <_dtoa_r+0x564>
 80126b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80126bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80126c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c4:	d472      	bmi.n	80127ac <_dtoa_r+0x5e4>
 80126c6:	45a0      	cmp	r8, r4
 80126c8:	f43f af6b 	beq.w	80125a2 <_dtoa_r+0x3da>
 80126cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80126d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80126d4:	e7e0      	b.n	8012698 <_dtoa_r+0x4d0>
 80126d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80126da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80126de:	4621      	mov	r1, r4
 80126e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80126e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80126e8:	ee14 2a90 	vmov	r2, s9
 80126ec:	3230      	adds	r2, #48	; 0x30
 80126ee:	f808 2b01 	strb.w	r2, [r8], #1
 80126f2:	45a0      	cmp	r8, r4
 80126f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80126f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80126fc:	d118      	bne.n	8012730 <_dtoa_r+0x568>
 80126fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012702:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012706:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270e:	dc4d      	bgt.n	80127ac <_dtoa_r+0x5e4>
 8012710:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012714:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271c:	f57f af41 	bpl.w	80125a2 <_dtoa_r+0x3da>
 8012720:	4688      	mov	r8, r1
 8012722:	3901      	subs	r1, #1
 8012724:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012728:	2b30      	cmp	r3, #48	; 0x30
 801272a:	d0f9      	beq.n	8012720 <_dtoa_r+0x558>
 801272c:	46bb      	mov	fp, r7
 801272e:	e02a      	b.n	8012786 <_dtoa_r+0x5be>
 8012730:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012734:	e7d6      	b.n	80126e4 <_dtoa_r+0x51c>
 8012736:	ed9d 7b02 	vldr	d7, [sp, #8]
 801273a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801273e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012742:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012746:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801274a:	ee15 3a10 	vmov	r3, s10
 801274e:	3330      	adds	r3, #48	; 0x30
 8012750:	f808 3b01 	strb.w	r3, [r8], #1
 8012754:	9b01      	ldr	r3, [sp, #4]
 8012756:	eba8 0303 	sub.w	r3, r8, r3
 801275a:	4599      	cmp	r9, r3
 801275c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012760:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012764:	d133      	bne.n	80127ce <_dtoa_r+0x606>
 8012766:	ee37 7b07 	vadd.f64	d7, d7, d7
 801276a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012772:	dc1a      	bgt.n	80127aa <_dtoa_r+0x5e2>
 8012774:	eeb4 7b46 	vcmp.f64	d7, d6
 8012778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277c:	d103      	bne.n	8012786 <_dtoa_r+0x5be>
 801277e:	ee15 3a10 	vmov	r3, s10
 8012782:	07d9      	lsls	r1, r3, #31
 8012784:	d411      	bmi.n	80127aa <_dtoa_r+0x5e2>
 8012786:	4629      	mov	r1, r5
 8012788:	4630      	mov	r0, r6
 801278a:	f000 faff 	bl	8012d8c <_Bfree>
 801278e:	2300      	movs	r3, #0
 8012790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012792:	f888 3000 	strb.w	r3, [r8]
 8012796:	f10b 0301 	add.w	r3, fp, #1
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f43f ad61 	beq.w	8012266 <_dtoa_r+0x9e>
 80127a4:	f8c3 8000 	str.w	r8, [r3]
 80127a8:	e55d      	b.n	8012266 <_dtoa_r+0x9e>
 80127aa:	465f      	mov	r7, fp
 80127ac:	4643      	mov	r3, r8
 80127ae:	4698      	mov	r8, r3
 80127b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127b4:	2a39      	cmp	r2, #57	; 0x39
 80127b6:	d106      	bne.n	80127c6 <_dtoa_r+0x5fe>
 80127b8:	9a01      	ldr	r2, [sp, #4]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d1f7      	bne.n	80127ae <_dtoa_r+0x5e6>
 80127be:	9901      	ldr	r1, [sp, #4]
 80127c0:	2230      	movs	r2, #48	; 0x30
 80127c2:	3701      	adds	r7, #1
 80127c4:	700a      	strb	r2, [r1, #0]
 80127c6:	781a      	ldrb	r2, [r3, #0]
 80127c8:	3201      	adds	r2, #1
 80127ca:	701a      	strb	r2, [r3, #0]
 80127cc:	e7ae      	b.n	801272c <_dtoa_r+0x564>
 80127ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80127d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127da:	d1b2      	bne.n	8012742 <_dtoa_r+0x57a>
 80127dc:	e7d3      	b.n	8012786 <_dtoa_r+0x5be>
 80127de:	bf00      	nop
 80127e0:	0804e5e0 	.word	0x0804e5e0
 80127e4:	0804e5b8 	.word	0x0804e5b8
 80127e8:	9907      	ldr	r1, [sp, #28]
 80127ea:	2900      	cmp	r1, #0
 80127ec:	f000 80d0 	beq.w	8012990 <_dtoa_r+0x7c8>
 80127f0:	9906      	ldr	r1, [sp, #24]
 80127f2:	2901      	cmp	r1, #1
 80127f4:	f300 80b4 	bgt.w	8012960 <_dtoa_r+0x798>
 80127f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80127fa:	2900      	cmp	r1, #0
 80127fc:	f000 80ac 	beq.w	8012958 <_dtoa_r+0x790>
 8012800:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012804:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012808:	461c      	mov	r4, r3
 801280a:	930a      	str	r3, [sp, #40]	; 0x28
 801280c:	9b04      	ldr	r3, [sp, #16]
 801280e:	4413      	add	r3, r2
 8012810:	9304      	str	r3, [sp, #16]
 8012812:	9b05      	ldr	r3, [sp, #20]
 8012814:	2101      	movs	r1, #1
 8012816:	4413      	add	r3, r2
 8012818:	4630      	mov	r0, r6
 801281a:	9305      	str	r3, [sp, #20]
 801281c:	f000 fb6e 	bl	8012efc <__i2b>
 8012820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012822:	4607      	mov	r7, r0
 8012824:	f1b8 0f00 	cmp.w	r8, #0
 8012828:	dd0d      	ble.n	8012846 <_dtoa_r+0x67e>
 801282a:	9a05      	ldr	r2, [sp, #20]
 801282c:	2a00      	cmp	r2, #0
 801282e:	dd0a      	ble.n	8012846 <_dtoa_r+0x67e>
 8012830:	4542      	cmp	r2, r8
 8012832:	9904      	ldr	r1, [sp, #16]
 8012834:	bfa8      	it	ge
 8012836:	4642      	movge	r2, r8
 8012838:	1a89      	subs	r1, r1, r2
 801283a:	9104      	str	r1, [sp, #16]
 801283c:	9905      	ldr	r1, [sp, #20]
 801283e:	eba8 0802 	sub.w	r8, r8, r2
 8012842:	1a8a      	subs	r2, r1, r2
 8012844:	9205      	str	r2, [sp, #20]
 8012846:	b303      	cbz	r3, 801288a <_dtoa_r+0x6c2>
 8012848:	9a07      	ldr	r2, [sp, #28]
 801284a:	2a00      	cmp	r2, #0
 801284c:	f000 80a5 	beq.w	801299a <_dtoa_r+0x7d2>
 8012850:	2c00      	cmp	r4, #0
 8012852:	dd13      	ble.n	801287c <_dtoa_r+0x6b4>
 8012854:	4639      	mov	r1, r7
 8012856:	4622      	mov	r2, r4
 8012858:	4630      	mov	r0, r6
 801285a:	930d      	str	r3, [sp, #52]	; 0x34
 801285c:	f000 fc0e 	bl	801307c <__pow5mult>
 8012860:	462a      	mov	r2, r5
 8012862:	4601      	mov	r1, r0
 8012864:	4607      	mov	r7, r0
 8012866:	4630      	mov	r0, r6
 8012868:	f000 fb5e 	bl	8012f28 <__multiply>
 801286c:	4629      	mov	r1, r5
 801286e:	900a      	str	r0, [sp, #40]	; 0x28
 8012870:	4630      	mov	r0, r6
 8012872:	f000 fa8b 	bl	8012d8c <_Bfree>
 8012876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801287a:	4615      	mov	r5, r2
 801287c:	1b1a      	subs	r2, r3, r4
 801287e:	d004      	beq.n	801288a <_dtoa_r+0x6c2>
 8012880:	4629      	mov	r1, r5
 8012882:	4630      	mov	r0, r6
 8012884:	f000 fbfa 	bl	801307c <__pow5mult>
 8012888:	4605      	mov	r5, r0
 801288a:	2101      	movs	r1, #1
 801288c:	4630      	mov	r0, r6
 801288e:	f000 fb35 	bl	8012efc <__i2b>
 8012892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012894:	2b00      	cmp	r3, #0
 8012896:	4604      	mov	r4, r0
 8012898:	f340 8081 	ble.w	801299e <_dtoa_r+0x7d6>
 801289c:	461a      	mov	r2, r3
 801289e:	4601      	mov	r1, r0
 80128a0:	4630      	mov	r0, r6
 80128a2:	f000 fbeb 	bl	801307c <__pow5mult>
 80128a6:	9b06      	ldr	r3, [sp, #24]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	4604      	mov	r4, r0
 80128ac:	dd7a      	ble.n	80129a4 <_dtoa_r+0x7dc>
 80128ae:	2300      	movs	r3, #0
 80128b0:	930a      	str	r3, [sp, #40]	; 0x28
 80128b2:	6922      	ldr	r2, [r4, #16]
 80128b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80128b8:	6910      	ldr	r0, [r2, #16]
 80128ba:	f000 facf 	bl	8012e5c <__hi0bits>
 80128be:	f1c0 0020 	rsb	r0, r0, #32
 80128c2:	9b05      	ldr	r3, [sp, #20]
 80128c4:	4418      	add	r0, r3
 80128c6:	f010 001f 	ands.w	r0, r0, #31
 80128ca:	f000 808c 	beq.w	80129e6 <_dtoa_r+0x81e>
 80128ce:	f1c0 0220 	rsb	r2, r0, #32
 80128d2:	2a04      	cmp	r2, #4
 80128d4:	f340 8085 	ble.w	80129e2 <_dtoa_r+0x81a>
 80128d8:	f1c0 001c 	rsb	r0, r0, #28
 80128dc:	9b04      	ldr	r3, [sp, #16]
 80128de:	4403      	add	r3, r0
 80128e0:	9304      	str	r3, [sp, #16]
 80128e2:	9b05      	ldr	r3, [sp, #20]
 80128e4:	4403      	add	r3, r0
 80128e6:	4480      	add	r8, r0
 80128e8:	9305      	str	r3, [sp, #20]
 80128ea:	9b04      	ldr	r3, [sp, #16]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	dd05      	ble.n	80128fc <_dtoa_r+0x734>
 80128f0:	4629      	mov	r1, r5
 80128f2:	461a      	mov	r2, r3
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 fc1b 	bl	8013130 <__lshift>
 80128fa:	4605      	mov	r5, r0
 80128fc:	9b05      	ldr	r3, [sp, #20]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	dd05      	ble.n	801290e <_dtoa_r+0x746>
 8012902:	4621      	mov	r1, r4
 8012904:	461a      	mov	r2, r3
 8012906:	4630      	mov	r0, r6
 8012908:	f000 fc12 	bl	8013130 <__lshift>
 801290c:	4604      	mov	r4, r0
 801290e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d06a      	beq.n	80129ea <_dtoa_r+0x822>
 8012914:	4621      	mov	r1, r4
 8012916:	4628      	mov	r0, r5
 8012918:	f000 fc7a 	bl	8013210 <__mcmp>
 801291c:	2800      	cmp	r0, #0
 801291e:	da64      	bge.n	80129ea <_dtoa_r+0x822>
 8012920:	2300      	movs	r3, #0
 8012922:	4629      	mov	r1, r5
 8012924:	220a      	movs	r2, #10
 8012926:	4630      	mov	r0, r6
 8012928:	f000 fa52 	bl	8012dd0 <__multadd>
 801292c:	9b07      	ldr	r3, [sp, #28]
 801292e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012932:	4605      	mov	r5, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	f000 8191 	beq.w	8012c5c <_dtoa_r+0xa94>
 801293a:	4639      	mov	r1, r7
 801293c:	2300      	movs	r3, #0
 801293e:	220a      	movs	r2, #10
 8012940:	4630      	mov	r0, r6
 8012942:	f000 fa45 	bl	8012dd0 <__multadd>
 8012946:	f1ba 0f00 	cmp.w	sl, #0
 801294a:	4607      	mov	r7, r0
 801294c:	f300 808d 	bgt.w	8012a6a <_dtoa_r+0x8a2>
 8012950:	9b06      	ldr	r3, [sp, #24]
 8012952:	2b02      	cmp	r3, #2
 8012954:	dc50      	bgt.n	80129f8 <_dtoa_r+0x830>
 8012956:	e088      	b.n	8012a6a <_dtoa_r+0x8a2>
 8012958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801295a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801295e:	e751      	b.n	8012804 <_dtoa_r+0x63c>
 8012960:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8012964:	42a3      	cmp	r3, r4
 8012966:	bfbf      	itttt	lt
 8012968:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801296a:	1ae3      	sublt	r3, r4, r3
 801296c:	18d2      	addlt	r2, r2, r3
 801296e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012970:	bfb6      	itet	lt
 8012972:	4623      	movlt	r3, r4
 8012974:	1b1c      	subge	r4, r3, r4
 8012976:	2400      	movlt	r4, #0
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	bfb5      	itete	lt
 801297e:	9a04      	ldrlt	r2, [sp, #16]
 8012980:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012984:	eba2 0809 	sublt.w	r8, r2, r9
 8012988:	464a      	movge	r2, r9
 801298a:	bfb8      	it	lt
 801298c:	2200      	movlt	r2, #0
 801298e:	e73c      	b.n	801280a <_dtoa_r+0x642>
 8012990:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012994:	9f07      	ldr	r7, [sp, #28]
 8012996:	461c      	mov	r4, r3
 8012998:	e744      	b.n	8012824 <_dtoa_r+0x65c>
 801299a:	461a      	mov	r2, r3
 801299c:	e770      	b.n	8012880 <_dtoa_r+0x6b8>
 801299e:	9b06      	ldr	r3, [sp, #24]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	dc18      	bgt.n	80129d6 <_dtoa_r+0x80e>
 80129a4:	9b02      	ldr	r3, [sp, #8]
 80129a6:	b9b3      	cbnz	r3, 80129d6 <_dtoa_r+0x80e>
 80129a8:	9b03      	ldr	r3, [sp, #12]
 80129aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80129ae:	b9a2      	cbnz	r2, 80129da <_dtoa_r+0x812>
 80129b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80129b4:	0d12      	lsrs	r2, r2, #20
 80129b6:	0512      	lsls	r2, r2, #20
 80129b8:	b18a      	cbz	r2, 80129de <_dtoa_r+0x816>
 80129ba:	9b04      	ldr	r3, [sp, #16]
 80129bc:	3301      	adds	r3, #1
 80129be:	9304      	str	r3, [sp, #16]
 80129c0:	9b05      	ldr	r3, [sp, #20]
 80129c2:	3301      	adds	r3, #1
 80129c4:	9305      	str	r3, [sp, #20]
 80129c6:	2301      	movs	r3, #1
 80129c8:	930a      	str	r3, [sp, #40]	; 0x28
 80129ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	f47f af70 	bne.w	80128b2 <_dtoa_r+0x6ea>
 80129d2:	2001      	movs	r0, #1
 80129d4:	e775      	b.n	80128c2 <_dtoa_r+0x6fa>
 80129d6:	2300      	movs	r3, #0
 80129d8:	e7f6      	b.n	80129c8 <_dtoa_r+0x800>
 80129da:	9b02      	ldr	r3, [sp, #8]
 80129dc:	e7f4      	b.n	80129c8 <_dtoa_r+0x800>
 80129de:	920a      	str	r2, [sp, #40]	; 0x28
 80129e0:	e7f3      	b.n	80129ca <_dtoa_r+0x802>
 80129e2:	d082      	beq.n	80128ea <_dtoa_r+0x722>
 80129e4:	4610      	mov	r0, r2
 80129e6:	301c      	adds	r0, #28
 80129e8:	e778      	b.n	80128dc <_dtoa_r+0x714>
 80129ea:	f1b9 0f00 	cmp.w	r9, #0
 80129ee:	dc37      	bgt.n	8012a60 <_dtoa_r+0x898>
 80129f0:	9b06      	ldr	r3, [sp, #24]
 80129f2:	2b02      	cmp	r3, #2
 80129f4:	dd34      	ble.n	8012a60 <_dtoa_r+0x898>
 80129f6:	46ca      	mov	sl, r9
 80129f8:	f1ba 0f00 	cmp.w	sl, #0
 80129fc:	d10d      	bne.n	8012a1a <_dtoa_r+0x852>
 80129fe:	4621      	mov	r1, r4
 8012a00:	4653      	mov	r3, sl
 8012a02:	2205      	movs	r2, #5
 8012a04:	4630      	mov	r0, r6
 8012a06:	f000 f9e3 	bl	8012dd0 <__multadd>
 8012a0a:	4601      	mov	r1, r0
 8012a0c:	4604      	mov	r4, r0
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f000 fbfe 	bl	8013210 <__mcmp>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f73f adeb 	bgt.w	80125f0 <_dtoa_r+0x428>
 8012a1a:	9b08      	ldr	r3, [sp, #32]
 8012a1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a20:	ea6f 0b03 	mvn.w	fp, r3
 8012a24:	f04f 0900 	mov.w	r9, #0
 8012a28:	4621      	mov	r1, r4
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f000 f9ae 	bl	8012d8c <_Bfree>
 8012a30:	2f00      	cmp	r7, #0
 8012a32:	f43f aea8 	beq.w	8012786 <_dtoa_r+0x5be>
 8012a36:	f1b9 0f00 	cmp.w	r9, #0
 8012a3a:	d005      	beq.n	8012a48 <_dtoa_r+0x880>
 8012a3c:	45b9      	cmp	r9, r7
 8012a3e:	d003      	beq.n	8012a48 <_dtoa_r+0x880>
 8012a40:	4649      	mov	r1, r9
 8012a42:	4630      	mov	r0, r6
 8012a44:	f000 f9a2 	bl	8012d8c <_Bfree>
 8012a48:	4639      	mov	r1, r7
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f000 f99e 	bl	8012d8c <_Bfree>
 8012a50:	e699      	b.n	8012786 <_dtoa_r+0x5be>
 8012a52:	2400      	movs	r4, #0
 8012a54:	4627      	mov	r7, r4
 8012a56:	e7e0      	b.n	8012a1a <_dtoa_r+0x852>
 8012a58:	46bb      	mov	fp, r7
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	4607      	mov	r7, r0
 8012a5e:	e5c7      	b.n	80125f0 <_dtoa_r+0x428>
 8012a60:	9b07      	ldr	r3, [sp, #28]
 8012a62:	46ca      	mov	sl, r9
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f000 8100 	beq.w	8012c6a <_dtoa_r+0xaa2>
 8012a6a:	f1b8 0f00 	cmp.w	r8, #0
 8012a6e:	dd05      	ble.n	8012a7c <_dtoa_r+0x8b4>
 8012a70:	4639      	mov	r1, r7
 8012a72:	4642      	mov	r2, r8
 8012a74:	4630      	mov	r0, r6
 8012a76:	f000 fb5b 	bl	8013130 <__lshift>
 8012a7a:	4607      	mov	r7, r0
 8012a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d05d      	beq.n	8012b3e <_dtoa_r+0x976>
 8012a82:	6879      	ldr	r1, [r7, #4]
 8012a84:	4630      	mov	r0, r6
 8012a86:	f000 f941 	bl	8012d0c <_Balloc>
 8012a8a:	4680      	mov	r8, r0
 8012a8c:	b928      	cbnz	r0, 8012a9a <_dtoa_r+0x8d2>
 8012a8e:	4b82      	ldr	r3, [pc, #520]	; (8012c98 <_dtoa_r+0xad0>)
 8012a90:	4602      	mov	r2, r0
 8012a92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a96:	f7ff bbaf 	b.w	80121f8 <_dtoa_r+0x30>
 8012a9a:	693a      	ldr	r2, [r7, #16]
 8012a9c:	3202      	adds	r2, #2
 8012a9e:	0092      	lsls	r2, r2, #2
 8012aa0:	f107 010c 	add.w	r1, r7, #12
 8012aa4:	300c      	adds	r0, #12
 8012aa6:	f7fe fcb3 	bl	8011410 <memcpy>
 8012aaa:	2201      	movs	r2, #1
 8012aac:	4641      	mov	r1, r8
 8012aae:	4630      	mov	r0, r6
 8012ab0:	f000 fb3e 	bl	8013130 <__lshift>
 8012ab4:	9b01      	ldr	r3, [sp, #4]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	9304      	str	r3, [sp, #16]
 8012aba:	9b01      	ldr	r3, [sp, #4]
 8012abc:	4453      	add	r3, sl
 8012abe:	9308      	str	r3, [sp, #32]
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	46b9      	mov	r9, r7
 8012ac8:	9307      	str	r3, [sp, #28]
 8012aca:	4607      	mov	r7, r0
 8012acc:	9b04      	ldr	r3, [sp, #16]
 8012ace:	4621      	mov	r1, r4
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	9302      	str	r3, [sp, #8]
 8012ad6:	f7ff fae9 	bl	80120ac <quorem>
 8012ada:	4603      	mov	r3, r0
 8012adc:	3330      	adds	r3, #48	; 0x30
 8012ade:	9005      	str	r0, [sp, #20]
 8012ae0:	4649      	mov	r1, r9
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae6:	f000 fb93 	bl	8013210 <__mcmp>
 8012aea:	463a      	mov	r2, r7
 8012aec:	4682      	mov	sl, r0
 8012aee:	4621      	mov	r1, r4
 8012af0:	4630      	mov	r0, r6
 8012af2:	f000 fba9 	bl	8013248 <__mdiff>
 8012af6:	68c2      	ldr	r2, [r0, #12]
 8012af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012afa:	4680      	mov	r8, r0
 8012afc:	bb0a      	cbnz	r2, 8012b42 <_dtoa_r+0x97a>
 8012afe:	4601      	mov	r1, r0
 8012b00:	4628      	mov	r0, r5
 8012b02:	f000 fb85 	bl	8013210 <__mcmp>
 8012b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b08:	4602      	mov	r2, r0
 8012b0a:	4641      	mov	r1, r8
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012b12:	f000 f93b 	bl	8012d8c <_Bfree>
 8012b16:	9b06      	ldr	r3, [sp, #24]
 8012b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012b1e:	ea43 0102 	orr.w	r1, r3, r2
 8012b22:	9b07      	ldr	r3, [sp, #28]
 8012b24:	430b      	orrs	r3, r1
 8012b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b28:	d10d      	bne.n	8012b46 <_dtoa_r+0x97e>
 8012b2a:	2b39      	cmp	r3, #57	; 0x39
 8012b2c:	d029      	beq.n	8012b82 <_dtoa_r+0x9ba>
 8012b2e:	f1ba 0f00 	cmp.w	sl, #0
 8012b32:	dd01      	ble.n	8012b38 <_dtoa_r+0x970>
 8012b34:	9b05      	ldr	r3, [sp, #20]
 8012b36:	3331      	adds	r3, #49	; 0x31
 8012b38:	9a02      	ldr	r2, [sp, #8]
 8012b3a:	7013      	strb	r3, [r2, #0]
 8012b3c:	e774      	b.n	8012a28 <_dtoa_r+0x860>
 8012b3e:	4638      	mov	r0, r7
 8012b40:	e7b8      	b.n	8012ab4 <_dtoa_r+0x8ec>
 8012b42:	2201      	movs	r2, #1
 8012b44:	e7e1      	b.n	8012b0a <_dtoa_r+0x942>
 8012b46:	f1ba 0f00 	cmp.w	sl, #0
 8012b4a:	db06      	blt.n	8012b5a <_dtoa_r+0x992>
 8012b4c:	9906      	ldr	r1, [sp, #24]
 8012b4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012b52:	9907      	ldr	r1, [sp, #28]
 8012b54:	ea5a 0101 	orrs.w	r1, sl, r1
 8012b58:	d120      	bne.n	8012b9c <_dtoa_r+0x9d4>
 8012b5a:	2a00      	cmp	r2, #0
 8012b5c:	ddec      	ble.n	8012b38 <_dtoa_r+0x970>
 8012b5e:	4629      	mov	r1, r5
 8012b60:	2201      	movs	r2, #1
 8012b62:	4630      	mov	r0, r6
 8012b64:	9304      	str	r3, [sp, #16]
 8012b66:	f000 fae3 	bl	8013130 <__lshift>
 8012b6a:	4621      	mov	r1, r4
 8012b6c:	4605      	mov	r5, r0
 8012b6e:	f000 fb4f 	bl	8013210 <__mcmp>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	9b04      	ldr	r3, [sp, #16]
 8012b76:	dc02      	bgt.n	8012b7e <_dtoa_r+0x9b6>
 8012b78:	d1de      	bne.n	8012b38 <_dtoa_r+0x970>
 8012b7a:	07da      	lsls	r2, r3, #31
 8012b7c:	d5dc      	bpl.n	8012b38 <_dtoa_r+0x970>
 8012b7e:	2b39      	cmp	r3, #57	; 0x39
 8012b80:	d1d8      	bne.n	8012b34 <_dtoa_r+0x96c>
 8012b82:	9a02      	ldr	r2, [sp, #8]
 8012b84:	2339      	movs	r3, #57	; 0x39
 8012b86:	7013      	strb	r3, [r2, #0]
 8012b88:	4643      	mov	r3, r8
 8012b8a:	4698      	mov	r8, r3
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012b92:	2a39      	cmp	r2, #57	; 0x39
 8012b94:	d051      	beq.n	8012c3a <_dtoa_r+0xa72>
 8012b96:	3201      	adds	r2, #1
 8012b98:	701a      	strb	r2, [r3, #0]
 8012b9a:	e745      	b.n	8012a28 <_dtoa_r+0x860>
 8012b9c:	2a00      	cmp	r2, #0
 8012b9e:	dd03      	ble.n	8012ba8 <_dtoa_r+0x9e0>
 8012ba0:	2b39      	cmp	r3, #57	; 0x39
 8012ba2:	d0ee      	beq.n	8012b82 <_dtoa_r+0x9ba>
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	e7c7      	b.n	8012b38 <_dtoa_r+0x970>
 8012ba8:	9a04      	ldr	r2, [sp, #16]
 8012baa:	9908      	ldr	r1, [sp, #32]
 8012bac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bb0:	428a      	cmp	r2, r1
 8012bb2:	d02b      	beq.n	8012c0c <_dtoa_r+0xa44>
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	220a      	movs	r2, #10
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f000 f908 	bl	8012dd0 <__multadd>
 8012bc0:	45b9      	cmp	r9, r7
 8012bc2:	4605      	mov	r5, r0
 8012bc4:	f04f 0300 	mov.w	r3, #0
 8012bc8:	f04f 020a 	mov.w	r2, #10
 8012bcc:	4649      	mov	r1, r9
 8012bce:	4630      	mov	r0, r6
 8012bd0:	d107      	bne.n	8012be2 <_dtoa_r+0xa1a>
 8012bd2:	f000 f8fd 	bl	8012dd0 <__multadd>
 8012bd6:	4681      	mov	r9, r0
 8012bd8:	4607      	mov	r7, r0
 8012bda:	9b04      	ldr	r3, [sp, #16]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	9304      	str	r3, [sp, #16]
 8012be0:	e774      	b.n	8012acc <_dtoa_r+0x904>
 8012be2:	f000 f8f5 	bl	8012dd0 <__multadd>
 8012be6:	4639      	mov	r1, r7
 8012be8:	4681      	mov	r9, r0
 8012bea:	2300      	movs	r3, #0
 8012bec:	220a      	movs	r2, #10
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f000 f8ee 	bl	8012dd0 <__multadd>
 8012bf4:	4607      	mov	r7, r0
 8012bf6:	e7f0      	b.n	8012bda <_dtoa_r+0xa12>
 8012bf8:	f1ba 0f00 	cmp.w	sl, #0
 8012bfc:	9a01      	ldr	r2, [sp, #4]
 8012bfe:	bfcc      	ite	gt
 8012c00:	46d0      	movgt	r8, sl
 8012c02:	f04f 0801 	movle.w	r8, #1
 8012c06:	4490      	add	r8, r2
 8012c08:	f04f 0900 	mov.w	r9, #0
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4630      	mov	r0, r6
 8012c12:	9302      	str	r3, [sp, #8]
 8012c14:	f000 fa8c 	bl	8013130 <__lshift>
 8012c18:	4621      	mov	r1, r4
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	f000 faf8 	bl	8013210 <__mcmp>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	dcb1      	bgt.n	8012b88 <_dtoa_r+0x9c0>
 8012c24:	d102      	bne.n	8012c2c <_dtoa_r+0xa64>
 8012c26:	9b02      	ldr	r3, [sp, #8]
 8012c28:	07db      	lsls	r3, r3, #31
 8012c2a:	d4ad      	bmi.n	8012b88 <_dtoa_r+0x9c0>
 8012c2c:	4643      	mov	r3, r8
 8012c2e:	4698      	mov	r8, r3
 8012c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c34:	2a30      	cmp	r2, #48	; 0x30
 8012c36:	d0fa      	beq.n	8012c2e <_dtoa_r+0xa66>
 8012c38:	e6f6      	b.n	8012a28 <_dtoa_r+0x860>
 8012c3a:	9a01      	ldr	r2, [sp, #4]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d1a4      	bne.n	8012b8a <_dtoa_r+0x9c2>
 8012c40:	f10b 0b01 	add.w	fp, fp, #1
 8012c44:	2331      	movs	r3, #49	; 0x31
 8012c46:	e778      	b.n	8012b3a <_dtoa_r+0x972>
 8012c48:	4b14      	ldr	r3, [pc, #80]	; (8012c9c <_dtoa_r+0xad4>)
 8012c4a:	f7ff bb27 	b.w	801229c <_dtoa_r+0xd4>
 8012c4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f47f ab03 	bne.w	801225c <_dtoa_r+0x94>
 8012c56:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <_dtoa_r+0xad8>)
 8012c58:	f7ff bb20 	b.w	801229c <_dtoa_r+0xd4>
 8012c5c:	f1ba 0f00 	cmp.w	sl, #0
 8012c60:	dc03      	bgt.n	8012c6a <_dtoa_r+0xaa2>
 8012c62:	9b06      	ldr	r3, [sp, #24]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	f73f aec7 	bgt.w	80129f8 <_dtoa_r+0x830>
 8012c6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012c6e:	4621      	mov	r1, r4
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7ff fa1b 	bl	80120ac <quorem>
 8012c76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c7a:	f808 3b01 	strb.w	r3, [r8], #1
 8012c7e:	9a01      	ldr	r2, [sp, #4]
 8012c80:	eba8 0202 	sub.w	r2, r8, r2
 8012c84:	4592      	cmp	sl, r2
 8012c86:	ddb7      	ble.n	8012bf8 <_dtoa_r+0xa30>
 8012c88:	4629      	mov	r1, r5
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	220a      	movs	r2, #10
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f000 f89e 	bl	8012dd0 <__multadd>
 8012c94:	4605      	mov	r5, r0
 8012c96:	e7ea      	b.n	8012c6e <_dtoa_r+0xaa6>
 8012c98:	0804e54a 	.word	0x0804e54a
 8012c9c:	0804e410 	.word	0x0804e410
 8012ca0:	0804e4e2 	.word	0x0804e4e2

08012ca4 <fiprintf>:
 8012ca4:	b40e      	push	{r1, r2, r3}
 8012ca6:	b503      	push	{r0, r1, lr}
 8012ca8:	4601      	mov	r1, r0
 8012caa:	ab03      	add	r3, sp, #12
 8012cac:	4805      	ldr	r0, [pc, #20]	; (8012cc4 <fiprintf+0x20>)
 8012cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cb2:	6800      	ldr	r0, [r0, #0]
 8012cb4:	9301      	str	r3, [sp, #4]
 8012cb6:	f000 fbed 	bl	8013494 <_vfiprintf_r>
 8012cba:	b002      	add	sp, #8
 8012cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cc0:	b003      	add	sp, #12
 8012cc2:	4770      	bx	lr
 8012cc4:	24003e40 	.word	0x24003e40

08012cc8 <_localeconv_r>:
 8012cc8:	4800      	ldr	r0, [pc, #0]	; (8012ccc <_localeconv_r+0x4>)
 8012cca:	4770      	bx	lr
 8012ccc:	24003f94 	.word	0x24003f94

08012cd0 <_lseek_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4d07      	ldr	r5, [pc, #28]	; (8012cf0 <_lseek_r+0x20>)
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	4608      	mov	r0, r1
 8012cd8:	4611      	mov	r1, r2
 8012cda:	2200      	movs	r2, #0
 8012cdc:	602a      	str	r2, [r5, #0]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f000 fef4 	bl	8013acc <_lseek>
 8012ce4:	1c43      	adds	r3, r0, #1
 8012ce6:	d102      	bne.n	8012cee <_lseek_r+0x1e>
 8012ce8:	682b      	ldr	r3, [r5, #0]
 8012cea:	b103      	cbz	r3, 8012cee <_lseek_r+0x1e>
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	2405b118 	.word	0x2405b118

08012cf4 <__malloc_lock>:
 8012cf4:	4801      	ldr	r0, [pc, #4]	; (8012cfc <__malloc_lock+0x8>)
 8012cf6:	f7fe bb78 	b.w	80113ea <__retarget_lock_acquire_recursive>
 8012cfa:	bf00      	nop
 8012cfc:	2405b10c 	.word	0x2405b10c

08012d00 <__malloc_unlock>:
 8012d00:	4801      	ldr	r0, [pc, #4]	; (8012d08 <__malloc_unlock+0x8>)
 8012d02:	f7fe bb73 	b.w	80113ec <__retarget_lock_release_recursive>
 8012d06:	bf00      	nop
 8012d08:	2405b10c 	.word	0x2405b10c

08012d0c <_Balloc>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d10:	4604      	mov	r4, r0
 8012d12:	460d      	mov	r5, r1
 8012d14:	b976      	cbnz	r6, 8012d34 <_Balloc+0x28>
 8012d16:	2010      	movs	r0, #16
 8012d18:	f7f2 f906 	bl	8004f28 <__wrap_malloc>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	6260      	str	r0, [r4, #36]	; 0x24
 8012d20:	b920      	cbnz	r0, 8012d2c <_Balloc+0x20>
 8012d22:	4b18      	ldr	r3, [pc, #96]	; (8012d84 <_Balloc+0x78>)
 8012d24:	4818      	ldr	r0, [pc, #96]	; (8012d88 <_Balloc+0x7c>)
 8012d26:	2166      	movs	r1, #102	; 0x66
 8012d28:	f7ff f992 	bl	8012050 <__assert_func>
 8012d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d30:	6006      	str	r6, [r0, #0]
 8012d32:	60c6      	str	r6, [r0, #12]
 8012d34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d36:	68f3      	ldr	r3, [r6, #12]
 8012d38:	b183      	cbz	r3, 8012d5c <_Balloc+0x50>
 8012d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d3c:	68db      	ldr	r3, [r3, #12]
 8012d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d42:	b9b8      	cbnz	r0, 8012d74 <_Balloc+0x68>
 8012d44:	2101      	movs	r1, #1
 8012d46:	fa01 f605 	lsl.w	r6, r1, r5
 8012d4a:	1d72      	adds	r2, r6, #5
 8012d4c:	0092      	lsls	r2, r2, #2
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f000 fb60 	bl	8013414 <_calloc_r>
 8012d54:	b160      	cbz	r0, 8012d70 <_Balloc+0x64>
 8012d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d5a:	e00e      	b.n	8012d7a <_Balloc+0x6e>
 8012d5c:	2221      	movs	r2, #33	; 0x21
 8012d5e:	2104      	movs	r1, #4
 8012d60:	4620      	mov	r0, r4
 8012d62:	f000 fb57 	bl	8013414 <_calloc_r>
 8012d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d68:	60f0      	str	r0, [r6, #12]
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d1e4      	bne.n	8012d3a <_Balloc+0x2e>
 8012d70:	2000      	movs	r0, #0
 8012d72:	bd70      	pop	{r4, r5, r6, pc}
 8012d74:	6802      	ldr	r2, [r0, #0]
 8012d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d80:	e7f7      	b.n	8012d72 <_Balloc+0x66>
 8012d82:	bf00      	nop
 8012d84:	0804e434 	.word	0x0804e434
 8012d88:	0804e55b 	.word	0x0804e55b

08012d8c <_Bfree>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d90:	4605      	mov	r5, r0
 8012d92:	460c      	mov	r4, r1
 8012d94:	b976      	cbnz	r6, 8012db4 <_Bfree+0x28>
 8012d96:	2010      	movs	r0, #16
 8012d98:	f7f2 f8c6 	bl	8004f28 <__wrap_malloc>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	6268      	str	r0, [r5, #36]	; 0x24
 8012da0:	b920      	cbnz	r0, 8012dac <_Bfree+0x20>
 8012da2:	4b09      	ldr	r3, [pc, #36]	; (8012dc8 <_Bfree+0x3c>)
 8012da4:	4809      	ldr	r0, [pc, #36]	; (8012dcc <_Bfree+0x40>)
 8012da6:	218a      	movs	r1, #138	; 0x8a
 8012da8:	f7ff f952 	bl	8012050 <__assert_func>
 8012dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012db0:	6006      	str	r6, [r0, #0]
 8012db2:	60c6      	str	r6, [r0, #12]
 8012db4:	b13c      	cbz	r4, 8012dc6 <_Bfree+0x3a>
 8012db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012db8:	6862      	ldr	r2, [r4, #4]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dc0:	6021      	str	r1, [r4, #0]
 8012dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012dc6:	bd70      	pop	{r4, r5, r6, pc}
 8012dc8:	0804e434 	.word	0x0804e434
 8012dcc:	0804e55b 	.word	0x0804e55b

08012dd0 <__multadd>:
 8012dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd4:	690d      	ldr	r5, [r1, #16]
 8012dd6:	4607      	mov	r7, r0
 8012dd8:	460c      	mov	r4, r1
 8012dda:	461e      	mov	r6, r3
 8012ddc:	f101 0c14 	add.w	ip, r1, #20
 8012de0:	2000      	movs	r0, #0
 8012de2:	f8dc 3000 	ldr.w	r3, [ip]
 8012de6:	b299      	uxth	r1, r3
 8012de8:	fb02 6101 	mla	r1, r2, r1, r6
 8012dec:	0c1e      	lsrs	r6, r3, #16
 8012dee:	0c0b      	lsrs	r3, r1, #16
 8012df0:	fb02 3306 	mla	r3, r2, r6, r3
 8012df4:	b289      	uxth	r1, r1
 8012df6:	3001      	adds	r0, #1
 8012df8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012dfc:	4285      	cmp	r5, r0
 8012dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8012e02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e06:	dcec      	bgt.n	8012de2 <__multadd+0x12>
 8012e08:	b30e      	cbz	r6, 8012e4e <__multadd+0x7e>
 8012e0a:	68a3      	ldr	r3, [r4, #8]
 8012e0c:	42ab      	cmp	r3, r5
 8012e0e:	dc19      	bgt.n	8012e44 <__multadd+0x74>
 8012e10:	6861      	ldr	r1, [r4, #4]
 8012e12:	4638      	mov	r0, r7
 8012e14:	3101      	adds	r1, #1
 8012e16:	f7ff ff79 	bl	8012d0c <_Balloc>
 8012e1a:	4680      	mov	r8, r0
 8012e1c:	b928      	cbnz	r0, 8012e2a <__multadd+0x5a>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	4b0c      	ldr	r3, [pc, #48]	; (8012e54 <__multadd+0x84>)
 8012e22:	480d      	ldr	r0, [pc, #52]	; (8012e58 <__multadd+0x88>)
 8012e24:	21b5      	movs	r1, #181	; 0xb5
 8012e26:	f7ff f913 	bl	8012050 <__assert_func>
 8012e2a:	6922      	ldr	r2, [r4, #16]
 8012e2c:	3202      	adds	r2, #2
 8012e2e:	f104 010c 	add.w	r1, r4, #12
 8012e32:	0092      	lsls	r2, r2, #2
 8012e34:	300c      	adds	r0, #12
 8012e36:	f7fe faeb 	bl	8011410 <memcpy>
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	4638      	mov	r0, r7
 8012e3e:	f7ff ffa5 	bl	8012d8c <_Bfree>
 8012e42:	4644      	mov	r4, r8
 8012e44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e48:	3501      	adds	r5, #1
 8012e4a:	615e      	str	r6, [r3, #20]
 8012e4c:	6125      	str	r5, [r4, #16]
 8012e4e:	4620      	mov	r0, r4
 8012e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e54:	0804e54a 	.word	0x0804e54a
 8012e58:	0804e55b 	.word	0x0804e55b

08012e5c <__hi0bits>:
 8012e5c:	0c03      	lsrs	r3, r0, #16
 8012e5e:	041b      	lsls	r3, r3, #16
 8012e60:	b9d3      	cbnz	r3, 8012e98 <__hi0bits+0x3c>
 8012e62:	0400      	lsls	r0, r0, #16
 8012e64:	2310      	movs	r3, #16
 8012e66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e6a:	bf04      	itt	eq
 8012e6c:	0200      	lsleq	r0, r0, #8
 8012e6e:	3308      	addeq	r3, #8
 8012e70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e74:	bf04      	itt	eq
 8012e76:	0100      	lsleq	r0, r0, #4
 8012e78:	3304      	addeq	r3, #4
 8012e7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e7e:	bf04      	itt	eq
 8012e80:	0080      	lsleq	r0, r0, #2
 8012e82:	3302      	addeq	r3, #2
 8012e84:	2800      	cmp	r0, #0
 8012e86:	db05      	blt.n	8012e94 <__hi0bits+0x38>
 8012e88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e8c:	f103 0301 	add.w	r3, r3, #1
 8012e90:	bf08      	it	eq
 8012e92:	2320      	moveq	r3, #32
 8012e94:	4618      	mov	r0, r3
 8012e96:	4770      	bx	lr
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e7e4      	b.n	8012e66 <__hi0bits+0xa>

08012e9c <__lo0bits>:
 8012e9c:	6803      	ldr	r3, [r0, #0]
 8012e9e:	f013 0207 	ands.w	r2, r3, #7
 8012ea2:	4601      	mov	r1, r0
 8012ea4:	d00b      	beq.n	8012ebe <__lo0bits+0x22>
 8012ea6:	07da      	lsls	r2, r3, #31
 8012ea8:	d423      	bmi.n	8012ef2 <__lo0bits+0x56>
 8012eaa:	0798      	lsls	r0, r3, #30
 8012eac:	bf49      	itett	mi
 8012eae:	085b      	lsrmi	r3, r3, #1
 8012eb0:	089b      	lsrpl	r3, r3, #2
 8012eb2:	2001      	movmi	r0, #1
 8012eb4:	600b      	strmi	r3, [r1, #0]
 8012eb6:	bf5c      	itt	pl
 8012eb8:	600b      	strpl	r3, [r1, #0]
 8012eba:	2002      	movpl	r0, #2
 8012ebc:	4770      	bx	lr
 8012ebe:	b298      	uxth	r0, r3
 8012ec0:	b9a8      	cbnz	r0, 8012eee <__lo0bits+0x52>
 8012ec2:	0c1b      	lsrs	r3, r3, #16
 8012ec4:	2010      	movs	r0, #16
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	b90a      	cbnz	r2, 8012ece <__lo0bits+0x32>
 8012eca:	3008      	adds	r0, #8
 8012ecc:	0a1b      	lsrs	r3, r3, #8
 8012ece:	071a      	lsls	r2, r3, #28
 8012ed0:	bf04      	itt	eq
 8012ed2:	091b      	lsreq	r3, r3, #4
 8012ed4:	3004      	addeq	r0, #4
 8012ed6:	079a      	lsls	r2, r3, #30
 8012ed8:	bf04      	itt	eq
 8012eda:	089b      	lsreq	r3, r3, #2
 8012edc:	3002      	addeq	r0, #2
 8012ede:	07da      	lsls	r2, r3, #31
 8012ee0:	d403      	bmi.n	8012eea <__lo0bits+0x4e>
 8012ee2:	085b      	lsrs	r3, r3, #1
 8012ee4:	f100 0001 	add.w	r0, r0, #1
 8012ee8:	d005      	beq.n	8012ef6 <__lo0bits+0x5a>
 8012eea:	600b      	str	r3, [r1, #0]
 8012eec:	4770      	bx	lr
 8012eee:	4610      	mov	r0, r2
 8012ef0:	e7e9      	b.n	8012ec6 <__lo0bits+0x2a>
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	4770      	bx	lr
 8012ef6:	2020      	movs	r0, #32
 8012ef8:	4770      	bx	lr
	...

08012efc <__i2b>:
 8012efc:	b510      	push	{r4, lr}
 8012efe:	460c      	mov	r4, r1
 8012f00:	2101      	movs	r1, #1
 8012f02:	f7ff ff03 	bl	8012d0c <_Balloc>
 8012f06:	4602      	mov	r2, r0
 8012f08:	b928      	cbnz	r0, 8012f16 <__i2b+0x1a>
 8012f0a:	4b05      	ldr	r3, [pc, #20]	; (8012f20 <__i2b+0x24>)
 8012f0c:	4805      	ldr	r0, [pc, #20]	; (8012f24 <__i2b+0x28>)
 8012f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f12:	f7ff f89d 	bl	8012050 <__assert_func>
 8012f16:	2301      	movs	r3, #1
 8012f18:	6144      	str	r4, [r0, #20]
 8012f1a:	6103      	str	r3, [r0, #16]
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop
 8012f20:	0804e54a 	.word	0x0804e54a
 8012f24:	0804e55b 	.word	0x0804e55b

08012f28 <__multiply>:
 8012f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2c:	4691      	mov	r9, r2
 8012f2e:	690a      	ldr	r2, [r1, #16]
 8012f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	bfb8      	it	lt
 8012f38:	460b      	movlt	r3, r1
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	bfbc      	itt	lt
 8012f3e:	464c      	movlt	r4, r9
 8012f40:	4699      	movlt	r9, r3
 8012f42:	6927      	ldr	r7, [r4, #16]
 8012f44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f48:	68a3      	ldr	r3, [r4, #8]
 8012f4a:	6861      	ldr	r1, [r4, #4]
 8012f4c:	eb07 060a 	add.w	r6, r7, sl
 8012f50:	42b3      	cmp	r3, r6
 8012f52:	b085      	sub	sp, #20
 8012f54:	bfb8      	it	lt
 8012f56:	3101      	addlt	r1, #1
 8012f58:	f7ff fed8 	bl	8012d0c <_Balloc>
 8012f5c:	b930      	cbnz	r0, 8012f6c <__multiply+0x44>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	4b44      	ldr	r3, [pc, #272]	; (8013074 <__multiply+0x14c>)
 8012f62:	4845      	ldr	r0, [pc, #276]	; (8013078 <__multiply+0x150>)
 8012f64:	f240 115d 	movw	r1, #349	; 0x15d
 8012f68:	f7ff f872 	bl	8012050 <__assert_func>
 8012f6c:	f100 0514 	add.w	r5, r0, #20
 8012f70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f74:	462b      	mov	r3, r5
 8012f76:	2200      	movs	r2, #0
 8012f78:	4543      	cmp	r3, r8
 8012f7a:	d321      	bcc.n	8012fc0 <__multiply+0x98>
 8012f7c:	f104 0314 	add.w	r3, r4, #20
 8012f80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f84:	f109 0314 	add.w	r3, r9, #20
 8012f88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f8c:	9202      	str	r2, [sp, #8]
 8012f8e:	1b3a      	subs	r2, r7, r4
 8012f90:	3a15      	subs	r2, #21
 8012f92:	f022 0203 	bic.w	r2, r2, #3
 8012f96:	3204      	adds	r2, #4
 8012f98:	f104 0115 	add.w	r1, r4, #21
 8012f9c:	428f      	cmp	r7, r1
 8012f9e:	bf38      	it	cc
 8012fa0:	2204      	movcc	r2, #4
 8012fa2:	9201      	str	r2, [sp, #4]
 8012fa4:	9a02      	ldr	r2, [sp, #8]
 8012fa6:	9303      	str	r3, [sp, #12]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d80c      	bhi.n	8012fc6 <__multiply+0x9e>
 8012fac:	2e00      	cmp	r6, #0
 8012fae:	dd03      	ble.n	8012fb8 <__multiply+0x90>
 8012fb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d05a      	beq.n	801306e <__multiply+0x146>
 8012fb8:	6106      	str	r6, [r0, #16]
 8012fba:	b005      	add	sp, #20
 8012fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc0:	f843 2b04 	str.w	r2, [r3], #4
 8012fc4:	e7d8      	b.n	8012f78 <__multiply+0x50>
 8012fc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012fca:	f1ba 0f00 	cmp.w	sl, #0
 8012fce:	d024      	beq.n	801301a <__multiply+0xf2>
 8012fd0:	f104 0e14 	add.w	lr, r4, #20
 8012fd4:	46a9      	mov	r9, r5
 8012fd6:	f04f 0c00 	mov.w	ip, #0
 8012fda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012fde:	f8d9 1000 	ldr.w	r1, [r9]
 8012fe2:	fa1f fb82 	uxth.w	fp, r2
 8012fe6:	b289      	uxth	r1, r1
 8012fe8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012fec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ff4:	4461      	add	r1, ip
 8012ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ffa:	fb0a c20b 	mla	r2, sl, fp, ip
 8012ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013002:	b289      	uxth	r1, r1
 8013004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013008:	4577      	cmp	r7, lr
 801300a:	f849 1b04 	str.w	r1, [r9], #4
 801300e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013012:	d8e2      	bhi.n	8012fda <__multiply+0xb2>
 8013014:	9a01      	ldr	r2, [sp, #4]
 8013016:	f845 c002 	str.w	ip, [r5, r2]
 801301a:	9a03      	ldr	r2, [sp, #12]
 801301c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013020:	3304      	adds	r3, #4
 8013022:	f1b9 0f00 	cmp.w	r9, #0
 8013026:	d020      	beq.n	801306a <__multiply+0x142>
 8013028:	6829      	ldr	r1, [r5, #0]
 801302a:	f104 0c14 	add.w	ip, r4, #20
 801302e:	46ae      	mov	lr, r5
 8013030:	f04f 0a00 	mov.w	sl, #0
 8013034:	f8bc b000 	ldrh.w	fp, [ip]
 8013038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801303c:	fb09 220b 	mla	r2, r9, fp, r2
 8013040:	4492      	add	sl, r2
 8013042:	b289      	uxth	r1, r1
 8013044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013048:	f84e 1b04 	str.w	r1, [lr], #4
 801304c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013050:	f8be 1000 	ldrh.w	r1, [lr]
 8013054:	0c12      	lsrs	r2, r2, #16
 8013056:	fb09 1102 	mla	r1, r9, r2, r1
 801305a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801305e:	4567      	cmp	r7, ip
 8013060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013064:	d8e6      	bhi.n	8013034 <__multiply+0x10c>
 8013066:	9a01      	ldr	r2, [sp, #4]
 8013068:	50a9      	str	r1, [r5, r2]
 801306a:	3504      	adds	r5, #4
 801306c:	e79a      	b.n	8012fa4 <__multiply+0x7c>
 801306e:	3e01      	subs	r6, #1
 8013070:	e79c      	b.n	8012fac <__multiply+0x84>
 8013072:	bf00      	nop
 8013074:	0804e54a 	.word	0x0804e54a
 8013078:	0804e55b 	.word	0x0804e55b

0801307c <__pow5mult>:
 801307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013080:	4615      	mov	r5, r2
 8013082:	f012 0203 	ands.w	r2, r2, #3
 8013086:	4606      	mov	r6, r0
 8013088:	460f      	mov	r7, r1
 801308a:	d007      	beq.n	801309c <__pow5mult+0x20>
 801308c:	4c25      	ldr	r4, [pc, #148]	; (8013124 <__pow5mult+0xa8>)
 801308e:	3a01      	subs	r2, #1
 8013090:	2300      	movs	r3, #0
 8013092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013096:	f7ff fe9b 	bl	8012dd0 <__multadd>
 801309a:	4607      	mov	r7, r0
 801309c:	10ad      	asrs	r5, r5, #2
 801309e:	d03d      	beq.n	801311c <__pow5mult+0xa0>
 80130a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80130a2:	b97c      	cbnz	r4, 80130c4 <__pow5mult+0x48>
 80130a4:	2010      	movs	r0, #16
 80130a6:	f7f1 ff3f 	bl	8004f28 <__wrap_malloc>
 80130aa:	4602      	mov	r2, r0
 80130ac:	6270      	str	r0, [r6, #36]	; 0x24
 80130ae:	b928      	cbnz	r0, 80130bc <__pow5mult+0x40>
 80130b0:	4b1d      	ldr	r3, [pc, #116]	; (8013128 <__pow5mult+0xac>)
 80130b2:	481e      	ldr	r0, [pc, #120]	; (801312c <__pow5mult+0xb0>)
 80130b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80130b8:	f7fe ffca 	bl	8012050 <__assert_func>
 80130bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130c0:	6004      	str	r4, [r0, #0]
 80130c2:	60c4      	str	r4, [r0, #12]
 80130c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80130c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130cc:	b94c      	cbnz	r4, 80130e2 <__pow5mult+0x66>
 80130ce:	f240 2171 	movw	r1, #625	; 0x271
 80130d2:	4630      	mov	r0, r6
 80130d4:	f7ff ff12 	bl	8012efc <__i2b>
 80130d8:	2300      	movs	r3, #0
 80130da:	f8c8 0008 	str.w	r0, [r8, #8]
 80130de:	4604      	mov	r4, r0
 80130e0:	6003      	str	r3, [r0, #0]
 80130e2:	f04f 0900 	mov.w	r9, #0
 80130e6:	07eb      	lsls	r3, r5, #31
 80130e8:	d50a      	bpl.n	8013100 <__pow5mult+0x84>
 80130ea:	4639      	mov	r1, r7
 80130ec:	4622      	mov	r2, r4
 80130ee:	4630      	mov	r0, r6
 80130f0:	f7ff ff1a 	bl	8012f28 <__multiply>
 80130f4:	4639      	mov	r1, r7
 80130f6:	4680      	mov	r8, r0
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7ff fe47 	bl	8012d8c <_Bfree>
 80130fe:	4647      	mov	r7, r8
 8013100:	106d      	asrs	r5, r5, #1
 8013102:	d00b      	beq.n	801311c <__pow5mult+0xa0>
 8013104:	6820      	ldr	r0, [r4, #0]
 8013106:	b938      	cbnz	r0, 8013118 <__pow5mult+0x9c>
 8013108:	4622      	mov	r2, r4
 801310a:	4621      	mov	r1, r4
 801310c:	4630      	mov	r0, r6
 801310e:	f7ff ff0b 	bl	8012f28 <__multiply>
 8013112:	6020      	str	r0, [r4, #0]
 8013114:	f8c0 9000 	str.w	r9, [r0]
 8013118:	4604      	mov	r4, r0
 801311a:	e7e4      	b.n	80130e6 <__pow5mult+0x6a>
 801311c:	4638      	mov	r0, r7
 801311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013122:	bf00      	nop
 8013124:	0804e6a8 	.word	0x0804e6a8
 8013128:	0804e434 	.word	0x0804e434
 801312c:	0804e55b 	.word	0x0804e55b

08013130 <__lshift>:
 8013130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013134:	460c      	mov	r4, r1
 8013136:	6849      	ldr	r1, [r1, #4]
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	4607      	mov	r7, r0
 8013142:	4691      	mov	r9, r2
 8013144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013148:	f108 0601 	add.w	r6, r8, #1
 801314c:	42b3      	cmp	r3, r6
 801314e:	db0b      	blt.n	8013168 <__lshift+0x38>
 8013150:	4638      	mov	r0, r7
 8013152:	f7ff fddb 	bl	8012d0c <_Balloc>
 8013156:	4605      	mov	r5, r0
 8013158:	b948      	cbnz	r0, 801316e <__lshift+0x3e>
 801315a:	4602      	mov	r2, r0
 801315c:	4b2a      	ldr	r3, [pc, #168]	; (8013208 <__lshift+0xd8>)
 801315e:	482b      	ldr	r0, [pc, #172]	; (801320c <__lshift+0xdc>)
 8013160:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013164:	f7fe ff74 	bl	8012050 <__assert_func>
 8013168:	3101      	adds	r1, #1
 801316a:	005b      	lsls	r3, r3, #1
 801316c:	e7ee      	b.n	801314c <__lshift+0x1c>
 801316e:	2300      	movs	r3, #0
 8013170:	f100 0114 	add.w	r1, r0, #20
 8013174:	f100 0210 	add.w	r2, r0, #16
 8013178:	4618      	mov	r0, r3
 801317a:	4553      	cmp	r3, sl
 801317c:	db37      	blt.n	80131ee <__lshift+0xbe>
 801317e:	6920      	ldr	r0, [r4, #16]
 8013180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013184:	f104 0314 	add.w	r3, r4, #20
 8013188:	f019 091f 	ands.w	r9, r9, #31
 801318c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013194:	d02f      	beq.n	80131f6 <__lshift+0xc6>
 8013196:	f1c9 0e20 	rsb	lr, r9, #32
 801319a:	468a      	mov	sl, r1
 801319c:	f04f 0c00 	mov.w	ip, #0
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	fa02 f209 	lsl.w	r2, r2, r9
 80131a6:	ea42 020c 	orr.w	r2, r2, ip
 80131aa:	f84a 2b04 	str.w	r2, [sl], #4
 80131ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80131b2:	4298      	cmp	r0, r3
 80131b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80131b8:	d8f2      	bhi.n	80131a0 <__lshift+0x70>
 80131ba:	1b03      	subs	r3, r0, r4
 80131bc:	3b15      	subs	r3, #21
 80131be:	f023 0303 	bic.w	r3, r3, #3
 80131c2:	3304      	adds	r3, #4
 80131c4:	f104 0215 	add.w	r2, r4, #21
 80131c8:	4290      	cmp	r0, r2
 80131ca:	bf38      	it	cc
 80131cc:	2304      	movcc	r3, #4
 80131ce:	f841 c003 	str.w	ip, [r1, r3]
 80131d2:	f1bc 0f00 	cmp.w	ip, #0
 80131d6:	d001      	beq.n	80131dc <__lshift+0xac>
 80131d8:	f108 0602 	add.w	r6, r8, #2
 80131dc:	3e01      	subs	r6, #1
 80131de:	4638      	mov	r0, r7
 80131e0:	612e      	str	r6, [r5, #16]
 80131e2:	4621      	mov	r1, r4
 80131e4:	f7ff fdd2 	bl	8012d8c <_Bfree>
 80131e8:	4628      	mov	r0, r5
 80131ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80131f2:	3301      	adds	r3, #1
 80131f4:	e7c1      	b.n	801317a <__lshift+0x4a>
 80131f6:	3904      	subs	r1, #4
 80131f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80131fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013200:	4298      	cmp	r0, r3
 8013202:	d8f9      	bhi.n	80131f8 <__lshift+0xc8>
 8013204:	e7ea      	b.n	80131dc <__lshift+0xac>
 8013206:	bf00      	nop
 8013208:	0804e54a 	.word	0x0804e54a
 801320c:	0804e55b 	.word	0x0804e55b

08013210 <__mcmp>:
 8013210:	b530      	push	{r4, r5, lr}
 8013212:	6902      	ldr	r2, [r0, #16]
 8013214:	690c      	ldr	r4, [r1, #16]
 8013216:	1b12      	subs	r2, r2, r4
 8013218:	d10e      	bne.n	8013238 <__mcmp+0x28>
 801321a:	f100 0314 	add.w	r3, r0, #20
 801321e:	3114      	adds	r1, #20
 8013220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801322c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013230:	42a5      	cmp	r5, r4
 8013232:	d003      	beq.n	801323c <__mcmp+0x2c>
 8013234:	d305      	bcc.n	8013242 <__mcmp+0x32>
 8013236:	2201      	movs	r2, #1
 8013238:	4610      	mov	r0, r2
 801323a:	bd30      	pop	{r4, r5, pc}
 801323c:	4283      	cmp	r3, r0
 801323e:	d3f3      	bcc.n	8013228 <__mcmp+0x18>
 8013240:	e7fa      	b.n	8013238 <__mcmp+0x28>
 8013242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013246:	e7f7      	b.n	8013238 <__mcmp+0x28>

08013248 <__mdiff>:
 8013248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	460c      	mov	r4, r1
 801324e:	4606      	mov	r6, r0
 8013250:	4611      	mov	r1, r2
 8013252:	4620      	mov	r0, r4
 8013254:	4690      	mov	r8, r2
 8013256:	f7ff ffdb 	bl	8013210 <__mcmp>
 801325a:	1e05      	subs	r5, r0, #0
 801325c:	d110      	bne.n	8013280 <__mdiff+0x38>
 801325e:	4629      	mov	r1, r5
 8013260:	4630      	mov	r0, r6
 8013262:	f7ff fd53 	bl	8012d0c <_Balloc>
 8013266:	b930      	cbnz	r0, 8013276 <__mdiff+0x2e>
 8013268:	4b3a      	ldr	r3, [pc, #232]	; (8013354 <__mdiff+0x10c>)
 801326a:	4602      	mov	r2, r0
 801326c:	f240 2132 	movw	r1, #562	; 0x232
 8013270:	4839      	ldr	r0, [pc, #228]	; (8013358 <__mdiff+0x110>)
 8013272:	f7fe feed 	bl	8012050 <__assert_func>
 8013276:	2301      	movs	r3, #1
 8013278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801327c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013280:	bfa4      	itt	ge
 8013282:	4643      	movge	r3, r8
 8013284:	46a0      	movge	r8, r4
 8013286:	4630      	mov	r0, r6
 8013288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801328c:	bfa6      	itte	ge
 801328e:	461c      	movge	r4, r3
 8013290:	2500      	movge	r5, #0
 8013292:	2501      	movlt	r5, #1
 8013294:	f7ff fd3a 	bl	8012d0c <_Balloc>
 8013298:	b920      	cbnz	r0, 80132a4 <__mdiff+0x5c>
 801329a:	4b2e      	ldr	r3, [pc, #184]	; (8013354 <__mdiff+0x10c>)
 801329c:	4602      	mov	r2, r0
 801329e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132a2:	e7e5      	b.n	8013270 <__mdiff+0x28>
 80132a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132a8:	6926      	ldr	r6, [r4, #16]
 80132aa:	60c5      	str	r5, [r0, #12]
 80132ac:	f104 0914 	add.w	r9, r4, #20
 80132b0:	f108 0514 	add.w	r5, r8, #20
 80132b4:	f100 0e14 	add.w	lr, r0, #20
 80132b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80132c0:	f108 0210 	add.w	r2, r8, #16
 80132c4:	46f2      	mov	sl, lr
 80132c6:	2100      	movs	r1, #0
 80132c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80132cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132d0:	fa1f f883 	uxth.w	r8, r3
 80132d4:	fa11 f18b 	uxtah	r1, r1, fp
 80132d8:	0c1b      	lsrs	r3, r3, #16
 80132da:	eba1 0808 	sub.w	r8, r1, r8
 80132de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80132e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80132e6:	fa1f f888 	uxth.w	r8, r8
 80132ea:	1419      	asrs	r1, r3, #16
 80132ec:	454e      	cmp	r6, r9
 80132ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132f2:	f84a 3b04 	str.w	r3, [sl], #4
 80132f6:	d8e7      	bhi.n	80132c8 <__mdiff+0x80>
 80132f8:	1b33      	subs	r3, r6, r4
 80132fa:	3b15      	subs	r3, #21
 80132fc:	f023 0303 	bic.w	r3, r3, #3
 8013300:	3304      	adds	r3, #4
 8013302:	3415      	adds	r4, #21
 8013304:	42a6      	cmp	r6, r4
 8013306:	bf38      	it	cc
 8013308:	2304      	movcc	r3, #4
 801330a:	441d      	add	r5, r3
 801330c:	4473      	add	r3, lr
 801330e:	469e      	mov	lr, r3
 8013310:	462e      	mov	r6, r5
 8013312:	4566      	cmp	r6, ip
 8013314:	d30e      	bcc.n	8013334 <__mdiff+0xec>
 8013316:	f10c 0203 	add.w	r2, ip, #3
 801331a:	1b52      	subs	r2, r2, r5
 801331c:	f022 0203 	bic.w	r2, r2, #3
 8013320:	3d03      	subs	r5, #3
 8013322:	45ac      	cmp	ip, r5
 8013324:	bf38      	it	cc
 8013326:	2200      	movcc	r2, #0
 8013328:	441a      	add	r2, r3
 801332a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801332e:	b17b      	cbz	r3, 8013350 <__mdiff+0x108>
 8013330:	6107      	str	r7, [r0, #16]
 8013332:	e7a3      	b.n	801327c <__mdiff+0x34>
 8013334:	f856 8b04 	ldr.w	r8, [r6], #4
 8013338:	fa11 f288 	uxtah	r2, r1, r8
 801333c:	1414      	asrs	r4, r2, #16
 801333e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013342:	b292      	uxth	r2, r2
 8013344:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013348:	f84e 2b04 	str.w	r2, [lr], #4
 801334c:	1421      	asrs	r1, r4, #16
 801334e:	e7e0      	b.n	8013312 <__mdiff+0xca>
 8013350:	3f01      	subs	r7, #1
 8013352:	e7ea      	b.n	801332a <__mdiff+0xe2>
 8013354:	0804e54a 	.word	0x0804e54a
 8013358:	0804e55b 	.word	0x0804e55b

0801335c <__d2b>:
 801335c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013360:	4689      	mov	r9, r1
 8013362:	2101      	movs	r1, #1
 8013364:	ec57 6b10 	vmov	r6, r7, d0
 8013368:	4690      	mov	r8, r2
 801336a:	f7ff fccf 	bl	8012d0c <_Balloc>
 801336e:	4604      	mov	r4, r0
 8013370:	b930      	cbnz	r0, 8013380 <__d2b+0x24>
 8013372:	4602      	mov	r2, r0
 8013374:	4b25      	ldr	r3, [pc, #148]	; (801340c <__d2b+0xb0>)
 8013376:	4826      	ldr	r0, [pc, #152]	; (8013410 <__d2b+0xb4>)
 8013378:	f240 310a 	movw	r1, #778	; 0x30a
 801337c:	f7fe fe68 	bl	8012050 <__assert_func>
 8013380:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013384:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013388:	bb35      	cbnz	r5, 80133d8 <__d2b+0x7c>
 801338a:	2e00      	cmp	r6, #0
 801338c:	9301      	str	r3, [sp, #4]
 801338e:	d028      	beq.n	80133e2 <__d2b+0x86>
 8013390:	4668      	mov	r0, sp
 8013392:	9600      	str	r6, [sp, #0]
 8013394:	f7ff fd82 	bl	8012e9c <__lo0bits>
 8013398:	9900      	ldr	r1, [sp, #0]
 801339a:	b300      	cbz	r0, 80133de <__d2b+0x82>
 801339c:	9a01      	ldr	r2, [sp, #4]
 801339e:	f1c0 0320 	rsb	r3, r0, #32
 80133a2:	fa02 f303 	lsl.w	r3, r2, r3
 80133a6:	430b      	orrs	r3, r1
 80133a8:	40c2      	lsrs	r2, r0
 80133aa:	6163      	str	r3, [r4, #20]
 80133ac:	9201      	str	r2, [sp, #4]
 80133ae:	9b01      	ldr	r3, [sp, #4]
 80133b0:	61a3      	str	r3, [r4, #24]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	bf14      	ite	ne
 80133b6:	2202      	movne	r2, #2
 80133b8:	2201      	moveq	r2, #1
 80133ba:	6122      	str	r2, [r4, #16]
 80133bc:	b1d5      	cbz	r5, 80133f4 <__d2b+0x98>
 80133be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80133c2:	4405      	add	r5, r0
 80133c4:	f8c9 5000 	str.w	r5, [r9]
 80133c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80133cc:	f8c8 0000 	str.w	r0, [r8]
 80133d0:	4620      	mov	r0, r4
 80133d2:	b003      	add	sp, #12
 80133d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80133dc:	e7d5      	b.n	801338a <__d2b+0x2e>
 80133de:	6161      	str	r1, [r4, #20]
 80133e0:	e7e5      	b.n	80133ae <__d2b+0x52>
 80133e2:	a801      	add	r0, sp, #4
 80133e4:	f7ff fd5a 	bl	8012e9c <__lo0bits>
 80133e8:	9b01      	ldr	r3, [sp, #4]
 80133ea:	6163      	str	r3, [r4, #20]
 80133ec:	2201      	movs	r2, #1
 80133ee:	6122      	str	r2, [r4, #16]
 80133f0:	3020      	adds	r0, #32
 80133f2:	e7e3      	b.n	80133bc <__d2b+0x60>
 80133f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80133f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80133fc:	f8c9 0000 	str.w	r0, [r9]
 8013400:	6918      	ldr	r0, [r3, #16]
 8013402:	f7ff fd2b 	bl	8012e5c <__hi0bits>
 8013406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801340a:	e7df      	b.n	80133cc <__d2b+0x70>
 801340c:	0804e54a 	.word	0x0804e54a
 8013410:	0804e55b 	.word	0x0804e55b

08013414 <_calloc_r>:
 8013414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013416:	fba1 2402 	umull	r2, r4, r1, r2
 801341a:	b94c      	cbnz	r4, 8013430 <_calloc_r+0x1c>
 801341c:	4611      	mov	r1, r2
 801341e:	9201      	str	r2, [sp, #4]
 8013420:	f7fe f878 	bl	8011514 <_malloc_r>
 8013424:	9a01      	ldr	r2, [sp, #4]
 8013426:	4605      	mov	r5, r0
 8013428:	b930      	cbnz	r0, 8013438 <_calloc_r+0x24>
 801342a:	4628      	mov	r0, r5
 801342c:	b003      	add	sp, #12
 801342e:	bd30      	pop	{r4, r5, pc}
 8013430:	220c      	movs	r2, #12
 8013432:	6002      	str	r2, [r0, #0]
 8013434:	2500      	movs	r5, #0
 8013436:	e7f8      	b.n	801342a <_calloc_r+0x16>
 8013438:	4621      	mov	r1, r4
 801343a:	f7fd fff7 	bl	801142c <memset>
 801343e:	e7f4      	b.n	801342a <_calloc_r+0x16>

08013440 <__sfputc_r>:
 8013440:	6893      	ldr	r3, [r2, #8]
 8013442:	3b01      	subs	r3, #1
 8013444:	2b00      	cmp	r3, #0
 8013446:	b410      	push	{r4}
 8013448:	6093      	str	r3, [r2, #8]
 801344a:	da08      	bge.n	801345e <__sfputc_r+0x1e>
 801344c:	6994      	ldr	r4, [r2, #24]
 801344e:	42a3      	cmp	r3, r4
 8013450:	db01      	blt.n	8013456 <__sfputc_r+0x16>
 8013452:	290a      	cmp	r1, #10
 8013454:	d103      	bne.n	801345e <__sfputc_r+0x1e>
 8013456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801345a:	f000 b95d 	b.w	8013718 <__swbuf_r>
 801345e:	6813      	ldr	r3, [r2, #0]
 8013460:	1c58      	adds	r0, r3, #1
 8013462:	6010      	str	r0, [r2, #0]
 8013464:	7019      	strb	r1, [r3, #0]
 8013466:	4608      	mov	r0, r1
 8013468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801346c:	4770      	bx	lr

0801346e <__sfputs_r>:
 801346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013470:	4606      	mov	r6, r0
 8013472:	460f      	mov	r7, r1
 8013474:	4614      	mov	r4, r2
 8013476:	18d5      	adds	r5, r2, r3
 8013478:	42ac      	cmp	r4, r5
 801347a:	d101      	bne.n	8013480 <__sfputs_r+0x12>
 801347c:	2000      	movs	r0, #0
 801347e:	e007      	b.n	8013490 <__sfputs_r+0x22>
 8013480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013484:	463a      	mov	r2, r7
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ffda 	bl	8013440 <__sfputc_r>
 801348c:	1c43      	adds	r3, r0, #1
 801348e:	d1f3      	bne.n	8013478 <__sfputs_r+0xa>
 8013490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013494 <_vfiprintf_r>:
 8013494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	460d      	mov	r5, r1
 801349a:	b09d      	sub	sp, #116	; 0x74
 801349c:	4614      	mov	r4, r2
 801349e:	4698      	mov	r8, r3
 80134a0:	4606      	mov	r6, r0
 80134a2:	b118      	cbz	r0, 80134ac <_vfiprintf_r+0x18>
 80134a4:	6983      	ldr	r3, [r0, #24]
 80134a6:	b90b      	cbnz	r3, 80134ac <_vfiprintf_r+0x18>
 80134a8:	f7fd fedc 	bl	8011264 <__sinit>
 80134ac:	4b89      	ldr	r3, [pc, #548]	; (80136d4 <_vfiprintf_r+0x240>)
 80134ae:	429d      	cmp	r5, r3
 80134b0:	d11b      	bne.n	80134ea <_vfiprintf_r+0x56>
 80134b2:	6875      	ldr	r5, [r6, #4]
 80134b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134b6:	07d9      	lsls	r1, r3, #31
 80134b8:	d405      	bmi.n	80134c6 <_vfiprintf_r+0x32>
 80134ba:	89ab      	ldrh	r3, [r5, #12]
 80134bc:	059a      	lsls	r2, r3, #22
 80134be:	d402      	bmi.n	80134c6 <_vfiprintf_r+0x32>
 80134c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134c2:	f7fd ff92 	bl	80113ea <__retarget_lock_acquire_recursive>
 80134c6:	89ab      	ldrh	r3, [r5, #12]
 80134c8:	071b      	lsls	r3, r3, #28
 80134ca:	d501      	bpl.n	80134d0 <_vfiprintf_r+0x3c>
 80134cc:	692b      	ldr	r3, [r5, #16]
 80134ce:	b9eb      	cbnz	r3, 801350c <_vfiprintf_r+0x78>
 80134d0:	4629      	mov	r1, r5
 80134d2:	4630      	mov	r0, r6
 80134d4:	f000 f972 	bl	80137bc <__swsetup_r>
 80134d8:	b1c0      	cbz	r0, 801350c <_vfiprintf_r+0x78>
 80134da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134dc:	07dc      	lsls	r4, r3, #31
 80134de:	d50e      	bpl.n	80134fe <_vfiprintf_r+0x6a>
 80134e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134e4:	b01d      	add	sp, #116	; 0x74
 80134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ea:	4b7b      	ldr	r3, [pc, #492]	; (80136d8 <_vfiprintf_r+0x244>)
 80134ec:	429d      	cmp	r5, r3
 80134ee:	d101      	bne.n	80134f4 <_vfiprintf_r+0x60>
 80134f0:	68b5      	ldr	r5, [r6, #8]
 80134f2:	e7df      	b.n	80134b4 <_vfiprintf_r+0x20>
 80134f4:	4b79      	ldr	r3, [pc, #484]	; (80136dc <_vfiprintf_r+0x248>)
 80134f6:	429d      	cmp	r5, r3
 80134f8:	bf08      	it	eq
 80134fa:	68f5      	ldreq	r5, [r6, #12]
 80134fc:	e7da      	b.n	80134b4 <_vfiprintf_r+0x20>
 80134fe:	89ab      	ldrh	r3, [r5, #12]
 8013500:	0598      	lsls	r0, r3, #22
 8013502:	d4ed      	bmi.n	80134e0 <_vfiprintf_r+0x4c>
 8013504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013506:	f7fd ff71 	bl	80113ec <__retarget_lock_release_recursive>
 801350a:	e7e9      	b.n	80134e0 <_vfiprintf_r+0x4c>
 801350c:	2300      	movs	r3, #0
 801350e:	9309      	str	r3, [sp, #36]	; 0x24
 8013510:	2320      	movs	r3, #32
 8013512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013516:	f8cd 800c 	str.w	r8, [sp, #12]
 801351a:	2330      	movs	r3, #48	; 0x30
 801351c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80136e0 <_vfiprintf_r+0x24c>
 8013520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013524:	f04f 0901 	mov.w	r9, #1
 8013528:	4623      	mov	r3, r4
 801352a:	469a      	mov	sl, r3
 801352c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013530:	b10a      	cbz	r2, 8013536 <_vfiprintf_r+0xa2>
 8013532:	2a25      	cmp	r2, #37	; 0x25
 8013534:	d1f9      	bne.n	801352a <_vfiprintf_r+0x96>
 8013536:	ebba 0b04 	subs.w	fp, sl, r4
 801353a:	d00b      	beq.n	8013554 <_vfiprintf_r+0xc0>
 801353c:	465b      	mov	r3, fp
 801353e:	4622      	mov	r2, r4
 8013540:	4629      	mov	r1, r5
 8013542:	4630      	mov	r0, r6
 8013544:	f7ff ff93 	bl	801346e <__sfputs_r>
 8013548:	3001      	adds	r0, #1
 801354a:	f000 80aa 	beq.w	80136a2 <_vfiprintf_r+0x20e>
 801354e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013550:	445a      	add	r2, fp
 8013552:	9209      	str	r2, [sp, #36]	; 0x24
 8013554:	f89a 3000 	ldrb.w	r3, [sl]
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 80a2 	beq.w	80136a2 <_vfiprintf_r+0x20e>
 801355e:	2300      	movs	r3, #0
 8013560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013568:	f10a 0a01 	add.w	sl, sl, #1
 801356c:	9304      	str	r3, [sp, #16]
 801356e:	9307      	str	r3, [sp, #28]
 8013570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013574:	931a      	str	r3, [sp, #104]	; 0x68
 8013576:	4654      	mov	r4, sl
 8013578:	2205      	movs	r2, #5
 801357a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801357e:	4858      	ldr	r0, [pc, #352]	; (80136e0 <_vfiprintf_r+0x24c>)
 8013580:	f7ec feb6 	bl	80002f0 <memchr>
 8013584:	9a04      	ldr	r2, [sp, #16]
 8013586:	b9d8      	cbnz	r0, 80135c0 <_vfiprintf_r+0x12c>
 8013588:	06d1      	lsls	r1, r2, #27
 801358a:	bf44      	itt	mi
 801358c:	2320      	movmi	r3, #32
 801358e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013592:	0713      	lsls	r3, r2, #28
 8013594:	bf44      	itt	mi
 8013596:	232b      	movmi	r3, #43	; 0x2b
 8013598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801359c:	f89a 3000 	ldrb.w	r3, [sl]
 80135a0:	2b2a      	cmp	r3, #42	; 0x2a
 80135a2:	d015      	beq.n	80135d0 <_vfiprintf_r+0x13c>
 80135a4:	9a07      	ldr	r2, [sp, #28]
 80135a6:	4654      	mov	r4, sl
 80135a8:	2000      	movs	r0, #0
 80135aa:	f04f 0c0a 	mov.w	ip, #10
 80135ae:	4621      	mov	r1, r4
 80135b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135b4:	3b30      	subs	r3, #48	; 0x30
 80135b6:	2b09      	cmp	r3, #9
 80135b8:	d94e      	bls.n	8013658 <_vfiprintf_r+0x1c4>
 80135ba:	b1b0      	cbz	r0, 80135ea <_vfiprintf_r+0x156>
 80135bc:	9207      	str	r2, [sp, #28]
 80135be:	e014      	b.n	80135ea <_vfiprintf_r+0x156>
 80135c0:	eba0 0308 	sub.w	r3, r0, r8
 80135c4:	fa09 f303 	lsl.w	r3, r9, r3
 80135c8:	4313      	orrs	r3, r2
 80135ca:	9304      	str	r3, [sp, #16]
 80135cc:	46a2      	mov	sl, r4
 80135ce:	e7d2      	b.n	8013576 <_vfiprintf_r+0xe2>
 80135d0:	9b03      	ldr	r3, [sp, #12]
 80135d2:	1d19      	adds	r1, r3, #4
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	9103      	str	r1, [sp, #12]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	bfbb      	ittet	lt
 80135dc:	425b      	neglt	r3, r3
 80135de:	f042 0202 	orrlt.w	r2, r2, #2
 80135e2:	9307      	strge	r3, [sp, #28]
 80135e4:	9307      	strlt	r3, [sp, #28]
 80135e6:	bfb8      	it	lt
 80135e8:	9204      	strlt	r2, [sp, #16]
 80135ea:	7823      	ldrb	r3, [r4, #0]
 80135ec:	2b2e      	cmp	r3, #46	; 0x2e
 80135ee:	d10c      	bne.n	801360a <_vfiprintf_r+0x176>
 80135f0:	7863      	ldrb	r3, [r4, #1]
 80135f2:	2b2a      	cmp	r3, #42	; 0x2a
 80135f4:	d135      	bne.n	8013662 <_vfiprintf_r+0x1ce>
 80135f6:	9b03      	ldr	r3, [sp, #12]
 80135f8:	1d1a      	adds	r2, r3, #4
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	9203      	str	r2, [sp, #12]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	bfb8      	it	lt
 8013602:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013606:	3402      	adds	r4, #2
 8013608:	9305      	str	r3, [sp, #20]
 801360a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80136f0 <_vfiprintf_r+0x25c>
 801360e:	7821      	ldrb	r1, [r4, #0]
 8013610:	2203      	movs	r2, #3
 8013612:	4650      	mov	r0, sl
 8013614:	f7ec fe6c 	bl	80002f0 <memchr>
 8013618:	b140      	cbz	r0, 801362c <_vfiprintf_r+0x198>
 801361a:	2340      	movs	r3, #64	; 0x40
 801361c:	eba0 000a 	sub.w	r0, r0, sl
 8013620:	fa03 f000 	lsl.w	r0, r3, r0
 8013624:	9b04      	ldr	r3, [sp, #16]
 8013626:	4303      	orrs	r3, r0
 8013628:	3401      	adds	r4, #1
 801362a:	9304      	str	r3, [sp, #16]
 801362c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013630:	482c      	ldr	r0, [pc, #176]	; (80136e4 <_vfiprintf_r+0x250>)
 8013632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013636:	2206      	movs	r2, #6
 8013638:	f7ec fe5a 	bl	80002f0 <memchr>
 801363c:	2800      	cmp	r0, #0
 801363e:	d03f      	beq.n	80136c0 <_vfiprintf_r+0x22c>
 8013640:	4b29      	ldr	r3, [pc, #164]	; (80136e8 <_vfiprintf_r+0x254>)
 8013642:	bb1b      	cbnz	r3, 801368c <_vfiprintf_r+0x1f8>
 8013644:	9b03      	ldr	r3, [sp, #12]
 8013646:	3307      	adds	r3, #7
 8013648:	f023 0307 	bic.w	r3, r3, #7
 801364c:	3308      	adds	r3, #8
 801364e:	9303      	str	r3, [sp, #12]
 8013650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013652:	443b      	add	r3, r7
 8013654:	9309      	str	r3, [sp, #36]	; 0x24
 8013656:	e767      	b.n	8013528 <_vfiprintf_r+0x94>
 8013658:	fb0c 3202 	mla	r2, ip, r2, r3
 801365c:	460c      	mov	r4, r1
 801365e:	2001      	movs	r0, #1
 8013660:	e7a5      	b.n	80135ae <_vfiprintf_r+0x11a>
 8013662:	2300      	movs	r3, #0
 8013664:	3401      	adds	r4, #1
 8013666:	9305      	str	r3, [sp, #20]
 8013668:	4619      	mov	r1, r3
 801366a:	f04f 0c0a 	mov.w	ip, #10
 801366e:	4620      	mov	r0, r4
 8013670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013674:	3a30      	subs	r2, #48	; 0x30
 8013676:	2a09      	cmp	r2, #9
 8013678:	d903      	bls.n	8013682 <_vfiprintf_r+0x1ee>
 801367a:	2b00      	cmp	r3, #0
 801367c:	d0c5      	beq.n	801360a <_vfiprintf_r+0x176>
 801367e:	9105      	str	r1, [sp, #20]
 8013680:	e7c3      	b.n	801360a <_vfiprintf_r+0x176>
 8013682:	fb0c 2101 	mla	r1, ip, r1, r2
 8013686:	4604      	mov	r4, r0
 8013688:	2301      	movs	r3, #1
 801368a:	e7f0      	b.n	801366e <_vfiprintf_r+0x1da>
 801368c:	ab03      	add	r3, sp, #12
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	462a      	mov	r2, r5
 8013692:	4b16      	ldr	r3, [pc, #88]	; (80136ec <_vfiprintf_r+0x258>)
 8013694:	a904      	add	r1, sp, #16
 8013696:	4630      	mov	r0, r6
 8013698:	f7fe f842 	bl	8011720 <_printf_float>
 801369c:	4607      	mov	r7, r0
 801369e:	1c78      	adds	r0, r7, #1
 80136a0:	d1d6      	bne.n	8013650 <_vfiprintf_r+0x1bc>
 80136a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136a4:	07d9      	lsls	r1, r3, #31
 80136a6:	d405      	bmi.n	80136b4 <_vfiprintf_r+0x220>
 80136a8:	89ab      	ldrh	r3, [r5, #12]
 80136aa:	059a      	lsls	r2, r3, #22
 80136ac:	d402      	bmi.n	80136b4 <_vfiprintf_r+0x220>
 80136ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136b0:	f7fd fe9c 	bl	80113ec <__retarget_lock_release_recursive>
 80136b4:	89ab      	ldrh	r3, [r5, #12]
 80136b6:	065b      	lsls	r3, r3, #25
 80136b8:	f53f af12 	bmi.w	80134e0 <_vfiprintf_r+0x4c>
 80136bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136be:	e711      	b.n	80134e4 <_vfiprintf_r+0x50>
 80136c0:	ab03      	add	r3, sp, #12
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	462a      	mov	r2, r5
 80136c6:	4b09      	ldr	r3, [pc, #36]	; (80136ec <_vfiprintf_r+0x258>)
 80136c8:	a904      	add	r1, sp, #16
 80136ca:	4630      	mov	r0, r6
 80136cc:	f7fe fab4 	bl	8011c38 <_printf_i>
 80136d0:	e7e4      	b.n	801369c <_vfiprintf_r+0x208>
 80136d2:	bf00      	nop
 80136d4:	0804e3bc 	.word	0x0804e3bc
 80136d8:	0804e3dc 	.word	0x0804e3dc
 80136dc:	0804e39c 	.word	0x0804e39c
 80136e0:	0804e6b4 	.word	0x0804e6b4
 80136e4:	0804e6be 	.word	0x0804e6be
 80136e8:	08011721 	.word	0x08011721
 80136ec:	0801346f 	.word	0x0801346f
 80136f0:	0804e6ba 	.word	0x0804e6ba

080136f4 <_read_r>:
 80136f4:	b538      	push	{r3, r4, r5, lr}
 80136f6:	4d07      	ldr	r5, [pc, #28]	; (8013714 <_read_r+0x20>)
 80136f8:	4604      	mov	r4, r0
 80136fa:	4608      	mov	r0, r1
 80136fc:	4611      	mov	r1, r2
 80136fe:	2200      	movs	r2, #0
 8013700:	602a      	str	r2, [r5, #0]
 8013702:	461a      	mov	r2, r3
 8013704:	f000 f9ea 	bl	8013adc <_read>
 8013708:	1c43      	adds	r3, r0, #1
 801370a:	d102      	bne.n	8013712 <_read_r+0x1e>
 801370c:	682b      	ldr	r3, [r5, #0]
 801370e:	b103      	cbz	r3, 8013712 <_read_r+0x1e>
 8013710:	6023      	str	r3, [r4, #0]
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	2405b118 	.word	0x2405b118

08013718 <__swbuf_r>:
 8013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371a:	460e      	mov	r6, r1
 801371c:	4614      	mov	r4, r2
 801371e:	4605      	mov	r5, r0
 8013720:	b118      	cbz	r0, 801372a <__swbuf_r+0x12>
 8013722:	6983      	ldr	r3, [r0, #24]
 8013724:	b90b      	cbnz	r3, 801372a <__swbuf_r+0x12>
 8013726:	f7fd fd9d 	bl	8011264 <__sinit>
 801372a:	4b21      	ldr	r3, [pc, #132]	; (80137b0 <__swbuf_r+0x98>)
 801372c:	429c      	cmp	r4, r3
 801372e:	d12b      	bne.n	8013788 <__swbuf_r+0x70>
 8013730:	686c      	ldr	r4, [r5, #4]
 8013732:	69a3      	ldr	r3, [r4, #24]
 8013734:	60a3      	str	r3, [r4, #8]
 8013736:	89a3      	ldrh	r3, [r4, #12]
 8013738:	071a      	lsls	r2, r3, #28
 801373a:	d52f      	bpl.n	801379c <__swbuf_r+0x84>
 801373c:	6923      	ldr	r3, [r4, #16]
 801373e:	b36b      	cbz	r3, 801379c <__swbuf_r+0x84>
 8013740:	6923      	ldr	r3, [r4, #16]
 8013742:	6820      	ldr	r0, [r4, #0]
 8013744:	1ac0      	subs	r0, r0, r3
 8013746:	6963      	ldr	r3, [r4, #20]
 8013748:	b2f6      	uxtb	r6, r6
 801374a:	4283      	cmp	r3, r0
 801374c:	4637      	mov	r7, r6
 801374e:	dc04      	bgt.n	801375a <__swbuf_r+0x42>
 8013750:	4621      	mov	r1, r4
 8013752:	4628      	mov	r0, r5
 8013754:	f7fd fce0 	bl	8011118 <_fflush_r>
 8013758:	bb30      	cbnz	r0, 80137a8 <__swbuf_r+0x90>
 801375a:	68a3      	ldr	r3, [r4, #8]
 801375c:	3b01      	subs	r3, #1
 801375e:	60a3      	str	r3, [r4, #8]
 8013760:	6823      	ldr	r3, [r4, #0]
 8013762:	1c5a      	adds	r2, r3, #1
 8013764:	6022      	str	r2, [r4, #0]
 8013766:	701e      	strb	r6, [r3, #0]
 8013768:	6963      	ldr	r3, [r4, #20]
 801376a:	3001      	adds	r0, #1
 801376c:	4283      	cmp	r3, r0
 801376e:	d004      	beq.n	801377a <__swbuf_r+0x62>
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	07db      	lsls	r3, r3, #31
 8013774:	d506      	bpl.n	8013784 <__swbuf_r+0x6c>
 8013776:	2e0a      	cmp	r6, #10
 8013778:	d104      	bne.n	8013784 <__swbuf_r+0x6c>
 801377a:	4621      	mov	r1, r4
 801377c:	4628      	mov	r0, r5
 801377e:	f7fd fccb 	bl	8011118 <_fflush_r>
 8013782:	b988      	cbnz	r0, 80137a8 <__swbuf_r+0x90>
 8013784:	4638      	mov	r0, r7
 8013786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013788:	4b0a      	ldr	r3, [pc, #40]	; (80137b4 <__swbuf_r+0x9c>)
 801378a:	429c      	cmp	r4, r3
 801378c:	d101      	bne.n	8013792 <__swbuf_r+0x7a>
 801378e:	68ac      	ldr	r4, [r5, #8]
 8013790:	e7cf      	b.n	8013732 <__swbuf_r+0x1a>
 8013792:	4b09      	ldr	r3, [pc, #36]	; (80137b8 <__swbuf_r+0xa0>)
 8013794:	429c      	cmp	r4, r3
 8013796:	bf08      	it	eq
 8013798:	68ec      	ldreq	r4, [r5, #12]
 801379a:	e7ca      	b.n	8013732 <__swbuf_r+0x1a>
 801379c:	4621      	mov	r1, r4
 801379e:	4628      	mov	r0, r5
 80137a0:	f000 f80c 	bl	80137bc <__swsetup_r>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d0cb      	beq.n	8013740 <__swbuf_r+0x28>
 80137a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80137ac:	e7ea      	b.n	8013784 <__swbuf_r+0x6c>
 80137ae:	bf00      	nop
 80137b0:	0804e3bc 	.word	0x0804e3bc
 80137b4:	0804e3dc 	.word	0x0804e3dc
 80137b8:	0804e39c 	.word	0x0804e39c

080137bc <__swsetup_r>:
 80137bc:	4b32      	ldr	r3, [pc, #200]	; (8013888 <__swsetup_r+0xcc>)
 80137be:	b570      	push	{r4, r5, r6, lr}
 80137c0:	681d      	ldr	r5, [r3, #0]
 80137c2:	4606      	mov	r6, r0
 80137c4:	460c      	mov	r4, r1
 80137c6:	b125      	cbz	r5, 80137d2 <__swsetup_r+0x16>
 80137c8:	69ab      	ldr	r3, [r5, #24]
 80137ca:	b913      	cbnz	r3, 80137d2 <__swsetup_r+0x16>
 80137cc:	4628      	mov	r0, r5
 80137ce:	f7fd fd49 	bl	8011264 <__sinit>
 80137d2:	4b2e      	ldr	r3, [pc, #184]	; (801388c <__swsetup_r+0xd0>)
 80137d4:	429c      	cmp	r4, r3
 80137d6:	d10f      	bne.n	80137f8 <__swsetup_r+0x3c>
 80137d8:	686c      	ldr	r4, [r5, #4]
 80137da:	89a3      	ldrh	r3, [r4, #12]
 80137dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137e0:	0719      	lsls	r1, r3, #28
 80137e2:	d42c      	bmi.n	801383e <__swsetup_r+0x82>
 80137e4:	06dd      	lsls	r5, r3, #27
 80137e6:	d411      	bmi.n	801380c <__swsetup_r+0x50>
 80137e8:	2309      	movs	r3, #9
 80137ea:	6033      	str	r3, [r6, #0]
 80137ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137f6:	e03e      	b.n	8013876 <__swsetup_r+0xba>
 80137f8:	4b25      	ldr	r3, [pc, #148]	; (8013890 <__swsetup_r+0xd4>)
 80137fa:	429c      	cmp	r4, r3
 80137fc:	d101      	bne.n	8013802 <__swsetup_r+0x46>
 80137fe:	68ac      	ldr	r4, [r5, #8]
 8013800:	e7eb      	b.n	80137da <__swsetup_r+0x1e>
 8013802:	4b24      	ldr	r3, [pc, #144]	; (8013894 <__swsetup_r+0xd8>)
 8013804:	429c      	cmp	r4, r3
 8013806:	bf08      	it	eq
 8013808:	68ec      	ldreq	r4, [r5, #12]
 801380a:	e7e6      	b.n	80137da <__swsetup_r+0x1e>
 801380c:	0758      	lsls	r0, r3, #29
 801380e:	d512      	bpl.n	8013836 <__swsetup_r+0x7a>
 8013810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013812:	b141      	cbz	r1, 8013826 <__swsetup_r+0x6a>
 8013814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013818:	4299      	cmp	r1, r3
 801381a:	d002      	beq.n	8013822 <__swsetup_r+0x66>
 801381c:	4630      	mov	r0, r6
 801381e:	f7fd fe0d 	bl	801143c <_free_r>
 8013822:	2300      	movs	r3, #0
 8013824:	6363      	str	r3, [r4, #52]	; 0x34
 8013826:	89a3      	ldrh	r3, [r4, #12]
 8013828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801382c:	81a3      	strh	r3, [r4, #12]
 801382e:	2300      	movs	r3, #0
 8013830:	6063      	str	r3, [r4, #4]
 8013832:	6923      	ldr	r3, [r4, #16]
 8013834:	6023      	str	r3, [r4, #0]
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	f043 0308 	orr.w	r3, r3, #8
 801383c:	81a3      	strh	r3, [r4, #12]
 801383e:	6923      	ldr	r3, [r4, #16]
 8013840:	b94b      	cbnz	r3, 8013856 <__swsetup_r+0x9a>
 8013842:	89a3      	ldrh	r3, [r4, #12]
 8013844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801384c:	d003      	beq.n	8013856 <__swsetup_r+0x9a>
 801384e:	4621      	mov	r1, r4
 8013850:	4630      	mov	r0, r6
 8013852:	f000 f84d 	bl	80138f0 <__smakebuf_r>
 8013856:	89a0      	ldrh	r0, [r4, #12]
 8013858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801385c:	f010 0301 	ands.w	r3, r0, #1
 8013860:	d00a      	beq.n	8013878 <__swsetup_r+0xbc>
 8013862:	2300      	movs	r3, #0
 8013864:	60a3      	str	r3, [r4, #8]
 8013866:	6963      	ldr	r3, [r4, #20]
 8013868:	425b      	negs	r3, r3
 801386a:	61a3      	str	r3, [r4, #24]
 801386c:	6923      	ldr	r3, [r4, #16]
 801386e:	b943      	cbnz	r3, 8013882 <__swsetup_r+0xc6>
 8013870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013874:	d1ba      	bne.n	80137ec <__swsetup_r+0x30>
 8013876:	bd70      	pop	{r4, r5, r6, pc}
 8013878:	0781      	lsls	r1, r0, #30
 801387a:	bf58      	it	pl
 801387c:	6963      	ldrpl	r3, [r4, #20]
 801387e:	60a3      	str	r3, [r4, #8]
 8013880:	e7f4      	b.n	801386c <__swsetup_r+0xb0>
 8013882:	2000      	movs	r0, #0
 8013884:	e7f7      	b.n	8013876 <__swsetup_r+0xba>
 8013886:	bf00      	nop
 8013888:	24003e40 	.word	0x24003e40
 801388c:	0804e3bc 	.word	0x0804e3bc
 8013890:	0804e3dc 	.word	0x0804e3dc
 8013894:	0804e39c 	.word	0x0804e39c

08013898 <abort>:
 8013898:	b508      	push	{r3, lr}
 801389a:	2006      	movs	r0, #6
 801389c:	f000 f8a2 	bl	80139e4 <raise>
 80138a0:	2001      	movs	r0, #1
 80138a2:	f000 f923 	bl	8013aec <_exit>

080138a6 <__swhatbuf_r>:
 80138a6:	b570      	push	{r4, r5, r6, lr}
 80138a8:	460e      	mov	r6, r1
 80138aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ae:	2900      	cmp	r1, #0
 80138b0:	b096      	sub	sp, #88	; 0x58
 80138b2:	4614      	mov	r4, r2
 80138b4:	461d      	mov	r5, r3
 80138b6:	da08      	bge.n	80138ca <__swhatbuf_r+0x24>
 80138b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80138bc:	2200      	movs	r2, #0
 80138be:	602a      	str	r2, [r5, #0]
 80138c0:	061a      	lsls	r2, r3, #24
 80138c2:	d410      	bmi.n	80138e6 <__swhatbuf_r+0x40>
 80138c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138c8:	e00e      	b.n	80138e8 <__swhatbuf_r+0x42>
 80138ca:	466a      	mov	r2, sp
 80138cc:	f000 f8b4 	bl	8013a38 <_fstat_r>
 80138d0:	2800      	cmp	r0, #0
 80138d2:	dbf1      	blt.n	80138b8 <__swhatbuf_r+0x12>
 80138d4:	9a01      	ldr	r2, [sp, #4]
 80138d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138de:	425a      	negs	r2, r3
 80138e0:	415a      	adcs	r2, r3
 80138e2:	602a      	str	r2, [r5, #0]
 80138e4:	e7ee      	b.n	80138c4 <__swhatbuf_r+0x1e>
 80138e6:	2340      	movs	r3, #64	; 0x40
 80138e8:	2000      	movs	r0, #0
 80138ea:	6023      	str	r3, [r4, #0]
 80138ec:	b016      	add	sp, #88	; 0x58
 80138ee:	bd70      	pop	{r4, r5, r6, pc}

080138f0 <__smakebuf_r>:
 80138f0:	898b      	ldrh	r3, [r1, #12]
 80138f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138f4:	079d      	lsls	r5, r3, #30
 80138f6:	4606      	mov	r6, r0
 80138f8:	460c      	mov	r4, r1
 80138fa:	d507      	bpl.n	801390c <__smakebuf_r+0x1c>
 80138fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013900:	6023      	str	r3, [r4, #0]
 8013902:	6123      	str	r3, [r4, #16]
 8013904:	2301      	movs	r3, #1
 8013906:	6163      	str	r3, [r4, #20]
 8013908:	b002      	add	sp, #8
 801390a:	bd70      	pop	{r4, r5, r6, pc}
 801390c:	ab01      	add	r3, sp, #4
 801390e:	466a      	mov	r2, sp
 8013910:	f7ff ffc9 	bl	80138a6 <__swhatbuf_r>
 8013914:	9900      	ldr	r1, [sp, #0]
 8013916:	4605      	mov	r5, r0
 8013918:	4630      	mov	r0, r6
 801391a:	f7fd fdfb 	bl	8011514 <_malloc_r>
 801391e:	b948      	cbnz	r0, 8013934 <__smakebuf_r+0x44>
 8013920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013924:	059a      	lsls	r2, r3, #22
 8013926:	d4ef      	bmi.n	8013908 <__smakebuf_r+0x18>
 8013928:	f023 0303 	bic.w	r3, r3, #3
 801392c:	f043 0302 	orr.w	r3, r3, #2
 8013930:	81a3      	strh	r3, [r4, #12]
 8013932:	e7e3      	b.n	80138fc <__smakebuf_r+0xc>
 8013934:	4b0d      	ldr	r3, [pc, #52]	; (801396c <__smakebuf_r+0x7c>)
 8013936:	62b3      	str	r3, [r6, #40]	; 0x28
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	6020      	str	r0, [r4, #0]
 801393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013940:	81a3      	strh	r3, [r4, #12]
 8013942:	9b00      	ldr	r3, [sp, #0]
 8013944:	6163      	str	r3, [r4, #20]
 8013946:	9b01      	ldr	r3, [sp, #4]
 8013948:	6120      	str	r0, [r4, #16]
 801394a:	b15b      	cbz	r3, 8013964 <__smakebuf_r+0x74>
 801394c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013950:	4630      	mov	r0, r6
 8013952:	f000 f883 	bl	8013a5c <_isatty_r>
 8013956:	b128      	cbz	r0, 8013964 <__smakebuf_r+0x74>
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	f023 0303 	bic.w	r3, r3, #3
 801395e:	f043 0301 	orr.w	r3, r3, #1
 8013962:	81a3      	strh	r3, [r4, #12]
 8013964:	89a0      	ldrh	r0, [r4, #12]
 8013966:	4305      	orrs	r5, r0
 8013968:	81a5      	strh	r5, [r4, #12]
 801396a:	e7cd      	b.n	8013908 <__smakebuf_r+0x18>
 801396c:	080111fd 	.word	0x080111fd

08013970 <__ascii_mbtowc>:
 8013970:	b082      	sub	sp, #8
 8013972:	b901      	cbnz	r1, 8013976 <__ascii_mbtowc+0x6>
 8013974:	a901      	add	r1, sp, #4
 8013976:	b142      	cbz	r2, 801398a <__ascii_mbtowc+0x1a>
 8013978:	b14b      	cbz	r3, 801398e <__ascii_mbtowc+0x1e>
 801397a:	7813      	ldrb	r3, [r2, #0]
 801397c:	600b      	str	r3, [r1, #0]
 801397e:	7812      	ldrb	r2, [r2, #0]
 8013980:	1e10      	subs	r0, r2, #0
 8013982:	bf18      	it	ne
 8013984:	2001      	movne	r0, #1
 8013986:	b002      	add	sp, #8
 8013988:	4770      	bx	lr
 801398a:	4610      	mov	r0, r2
 801398c:	e7fb      	b.n	8013986 <__ascii_mbtowc+0x16>
 801398e:	f06f 0001 	mvn.w	r0, #1
 8013992:	e7f8      	b.n	8013986 <__ascii_mbtowc+0x16>

08013994 <_raise_r>:
 8013994:	291f      	cmp	r1, #31
 8013996:	b538      	push	{r3, r4, r5, lr}
 8013998:	4604      	mov	r4, r0
 801399a:	460d      	mov	r5, r1
 801399c:	d904      	bls.n	80139a8 <_raise_r+0x14>
 801399e:	2316      	movs	r3, #22
 80139a0:	6003      	str	r3, [r0, #0]
 80139a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
 80139a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80139aa:	b112      	cbz	r2, 80139b2 <_raise_r+0x1e>
 80139ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139b0:	b94b      	cbnz	r3, 80139c6 <_raise_r+0x32>
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 f830 	bl	8013a18 <_getpid_r>
 80139b8:	462a      	mov	r2, r5
 80139ba:	4601      	mov	r1, r0
 80139bc:	4620      	mov	r0, r4
 80139be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139c2:	f000 b817 	b.w	80139f4 <_kill_r>
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d00a      	beq.n	80139e0 <_raise_r+0x4c>
 80139ca:	1c59      	adds	r1, r3, #1
 80139cc:	d103      	bne.n	80139d6 <_raise_r+0x42>
 80139ce:	2316      	movs	r3, #22
 80139d0:	6003      	str	r3, [r0, #0]
 80139d2:	2001      	movs	r0, #1
 80139d4:	e7e7      	b.n	80139a6 <_raise_r+0x12>
 80139d6:	2400      	movs	r4, #0
 80139d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139dc:	4628      	mov	r0, r5
 80139de:	4798      	blx	r3
 80139e0:	2000      	movs	r0, #0
 80139e2:	e7e0      	b.n	80139a6 <_raise_r+0x12>

080139e4 <raise>:
 80139e4:	4b02      	ldr	r3, [pc, #8]	; (80139f0 <raise+0xc>)
 80139e6:	4601      	mov	r1, r0
 80139e8:	6818      	ldr	r0, [r3, #0]
 80139ea:	f7ff bfd3 	b.w	8013994 <_raise_r>
 80139ee:	bf00      	nop
 80139f0:	24003e40 	.word	0x24003e40

080139f4 <_kill_r>:
 80139f4:	b538      	push	{r3, r4, r5, lr}
 80139f6:	4d07      	ldr	r5, [pc, #28]	; (8013a14 <_kill_r+0x20>)
 80139f8:	2300      	movs	r3, #0
 80139fa:	4604      	mov	r4, r0
 80139fc:	4608      	mov	r0, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	602b      	str	r3, [r5, #0]
 8013a02:	f000 f85b 	bl	8013abc <_kill>
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	d102      	bne.n	8013a10 <_kill_r+0x1c>
 8013a0a:	682b      	ldr	r3, [r5, #0]
 8013a0c:	b103      	cbz	r3, 8013a10 <_kill_r+0x1c>
 8013a0e:	6023      	str	r3, [r4, #0]
 8013a10:	bd38      	pop	{r3, r4, r5, pc}
 8013a12:	bf00      	nop
 8013a14:	2405b118 	.word	0x2405b118

08013a18 <_getpid_r>:
 8013a18:	f000 b840 	b.w	8013a9c <_getpid>

08013a1c <__ascii_wctomb>:
 8013a1c:	b149      	cbz	r1, 8013a32 <__ascii_wctomb+0x16>
 8013a1e:	2aff      	cmp	r2, #255	; 0xff
 8013a20:	bf85      	ittet	hi
 8013a22:	238a      	movhi	r3, #138	; 0x8a
 8013a24:	6003      	strhi	r3, [r0, #0]
 8013a26:	700a      	strbls	r2, [r1, #0]
 8013a28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013a2c:	bf98      	it	ls
 8013a2e:	2001      	movls	r0, #1
 8013a30:	4770      	bx	lr
 8013a32:	4608      	mov	r0, r1
 8013a34:	4770      	bx	lr
	...

08013a38 <_fstat_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4d07      	ldr	r5, [pc, #28]	; (8013a58 <_fstat_r+0x20>)
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	4604      	mov	r4, r0
 8013a40:	4608      	mov	r0, r1
 8013a42:	4611      	mov	r1, r2
 8013a44:	602b      	str	r3, [r5, #0]
 8013a46:	f000 f821 	bl	8013a8c <_fstat>
 8013a4a:	1c43      	adds	r3, r0, #1
 8013a4c:	d102      	bne.n	8013a54 <_fstat_r+0x1c>
 8013a4e:	682b      	ldr	r3, [r5, #0]
 8013a50:	b103      	cbz	r3, 8013a54 <_fstat_r+0x1c>
 8013a52:	6023      	str	r3, [r4, #0]
 8013a54:	bd38      	pop	{r3, r4, r5, pc}
 8013a56:	bf00      	nop
 8013a58:	2405b118 	.word	0x2405b118

08013a5c <_isatty_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4d06      	ldr	r5, [pc, #24]	; (8013a78 <_isatty_r+0x1c>)
 8013a60:	2300      	movs	r3, #0
 8013a62:	4604      	mov	r4, r0
 8013a64:	4608      	mov	r0, r1
 8013a66:	602b      	str	r3, [r5, #0]
 8013a68:	f000 f820 	bl	8013aac <_isatty>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_isatty_r+0x1a>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_isatty_r+0x1a>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	2405b118 	.word	0x2405b118

08013a7c <_close>:
 8013a7c:	4b02      	ldr	r3, [pc, #8]	; (8013a88 <_close+0xc>)
 8013a7e:	2258      	movs	r2, #88	; 0x58
 8013a80:	601a      	str	r2, [r3, #0]
 8013a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a86:	4770      	bx	lr
 8013a88:	2405b118 	.word	0x2405b118

08013a8c <_fstat>:
 8013a8c:	4b02      	ldr	r3, [pc, #8]	; (8013a98 <_fstat+0xc>)
 8013a8e:	2258      	movs	r2, #88	; 0x58
 8013a90:	601a      	str	r2, [r3, #0]
 8013a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a96:	4770      	bx	lr
 8013a98:	2405b118 	.word	0x2405b118

08013a9c <_getpid>:
 8013a9c:	4b02      	ldr	r3, [pc, #8]	; (8013aa8 <_getpid+0xc>)
 8013a9e:	2258      	movs	r2, #88	; 0x58
 8013aa0:	601a      	str	r2, [r3, #0]
 8013aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013aa6:	4770      	bx	lr
 8013aa8:	2405b118 	.word	0x2405b118

08013aac <_isatty>:
 8013aac:	4b02      	ldr	r3, [pc, #8]	; (8013ab8 <_isatty+0xc>)
 8013aae:	2258      	movs	r2, #88	; 0x58
 8013ab0:	601a      	str	r2, [r3, #0]
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	2405b118 	.word	0x2405b118

08013abc <_kill>:
 8013abc:	4b02      	ldr	r3, [pc, #8]	; (8013ac8 <_kill+0xc>)
 8013abe:	2258      	movs	r2, #88	; 0x58
 8013ac0:	601a      	str	r2, [r3, #0]
 8013ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ac6:	4770      	bx	lr
 8013ac8:	2405b118 	.word	0x2405b118

08013acc <_lseek>:
 8013acc:	4b02      	ldr	r3, [pc, #8]	; (8013ad8 <_lseek+0xc>)
 8013ace:	2258      	movs	r2, #88	; 0x58
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ad6:	4770      	bx	lr
 8013ad8:	2405b118 	.word	0x2405b118

08013adc <_read>:
 8013adc:	4b02      	ldr	r3, [pc, #8]	; (8013ae8 <_read+0xc>)
 8013ade:	2258      	movs	r2, #88	; 0x58
 8013ae0:	601a      	str	r2, [r3, #0]
 8013ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ae6:	4770      	bx	lr
 8013ae8:	2405b118 	.word	0x2405b118

08013aec <_exit>:
 8013aec:	e7fe      	b.n	8013aec <_exit>
	...

08013af0 <_init>:
 8013af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013af2:	bf00      	nop
 8013af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013af6:	bc08      	pop	{r3}
 8013af8:	469e      	mov	lr, r3
 8013afa:	4770      	bx	lr

08013afc <_fini>:
 8013afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afe:	bf00      	nop
 8013b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b02:	bc08      	pop	{r3}
 8013b04:	469e      	mov	lr, r3
 8013b06:	4770      	bx	lr
